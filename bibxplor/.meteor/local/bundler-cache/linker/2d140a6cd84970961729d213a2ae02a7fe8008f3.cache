[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"shell-server\":{\"main.js\":[\"./shell-server.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/shell-server/main.js                                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule.importSync(\"./shell-server.js\", {                                                                           // 1\n  \"*\": function (v, k) {                                                                                           // 1\n    exports[k] = v;                                                                                                // 1\n  }                                                                                                                // 1\n}, 0);                                                                                                             // 1\nvar listen = void 0;                                                                                               // 1\nmodule.importSync(\"./shell-server.js\", {                                                                           // 1\n  listen: function (v) {                                                                                           // 1\n    listen = v;                                                                                                    // 1\n  }                                                                                                                // 1\n}, 1);                                                                                                             // 1\nvar shellDir = process.env.METEOR_SHELL_DIR;                                                                       // 4\n                                                                                                                   //\nif (shellDir) {                                                                                                    // 5\n  listen(shellDir);                                                                                                // 6\n}                                                                                                                  // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"shell-server.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/typeof\",\"assert\",\"path\",\"stream\",\"fs\",\"net\",\"vm\",\"underscore\",\"repl\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/shell-server/shell-server.js                                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                            //\n                                                                                                                   //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                   //\n                                                                                                                   //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                            //\n                                                                                                                   //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                   //\n                                                                                                                   //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                  //\n                                                                                                                   //\nmodule.export({                                                                                                    // 1\n  listen: function () {                                                                                            // 1\n    return listen;                                                                                                 // 1\n  },                                                                                                               // 1\n  disable: function () {                                                                                           // 1\n    return disable;                                                                                                // 1\n  }                                                                                                                // 1\n});                                                                                                                // 1\n                                                                                                                   //\nvar assert = require(\"assert\");                                                                                    // 1\n                                                                                                                   //\nvar path = require(\"path\");                                                                                        // 2\n                                                                                                                   //\nvar stream = require(\"stream\");                                                                                    // 3\n                                                                                                                   //\nvar fs = require(\"fs\");                                                                                            // 4\n                                                                                                                   //\nvar net = require(\"net\");                                                                                          // 5\n                                                                                                                   //\nvar vm = require(\"vm\");                                                                                            // 6\n                                                                                                                   //\nvar _ = require(\"underscore\");                                                                                     // 7\n                                                                                                                   //\nvar INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.                                      // 8\n                                                                                                                   //\nvar EXITING_MESSAGE = \"Shell exiting...\"; // Invoked by the server process to listen for incoming connections from\n// shell clients. Each connection gets its own REPL instance.                                                      // 12\n                                                                                                                   //\nfunction listen(shellDir) {                                                                                        // 13\n  function callback() {                                                                                            // 14\n    new Server(shellDir).listen();                                                                                 // 15\n  } // If the server is still in the very early stages of starting up,                                             // 16\n  // Meteor.startup may not available yet.                                                                         // 19\n                                                                                                                   //\n                                                                                                                   //\n  if ((typeof Meteor === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Meteor)) === \"object\") {                // 20\n    Meteor.startup(callback);                                                                                      // 21\n  } else if ((typeof __meteor_bootstrap__ === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(__meteor_bootstrap__)) === \"object\") {\n    var hooks = __meteor_bootstrap__.startupHooks;                                                                 // 23\n                                                                                                                   //\n    if (hooks) {                                                                                                   // 24\n      hooks.push(callback);                                                                                        // 25\n    } else {                                                                                                       // 26\n      // As a fallback, just call the callback asynchronously.                                                     // 27\n      setImmediate(callback);                                                                                      // 28\n    }                                                                                                              // 29\n  }                                                                                                                // 30\n}                                                                                                                  // 31\n                                                                                                                   //\nfunction disable(shellDir) {                                                                                       // 34\n  try {                                                                                                            // 35\n    // Replace info.json with a file that says the shell server is                                                 // 36\n    // disabled, so that any connected shell clients will fail to                                                  // 37\n    // reconnect after the server process closes their sockets.                                                    // 38\n    fs.writeFileSync(getInfoFile(shellDir), JSON.stringify({                                                       // 39\n      status: \"disabled\",                                                                                          // 42\n      reason: \"Shell server has shut down.\"                                                                        // 43\n    }) + \"\\n\", {                                                                                                   // 41\n      mode: INFO_FILE_MODE                                                                                         // 45\n    });                                                                                                            // 45\n  } catch (ignored) {}                                                                                             // 47\n}                                                                                                                  // 48\n                                                                                                                   //\nvar Server = function () {                                                                                         //\n  function Server(shellDir) {                                                                                      // 51\n    (0, _classCallCheck3.default)(this, Server);                                                                   // 51\n    var self = this;                                                                                               // 52\n    assert.ok(self instanceof Server);                                                                             // 53\n    self.shellDir = shellDir;                                                                                      // 55\n    self.key = Math.random().toString(36).slice(2);                                                                // 56\n    self.server = net.createServer(function (socket) {                                                             // 58\n      self.onConnection(socket);                                                                                   // 59\n    }).on(\"error\", function (err) {                                                                                // 60\n      console.error(err.stack);                                                                                    // 61\n    });                                                                                                            // 62\n  }                                                                                                                // 63\n                                                                                                                   //\n  Server.prototype.listen = function () {                                                                          //\n    function listen() {                                                                                            //\n      var self = this;                                                                                             // 66\n      var infoFile = getInfoFile(self.shellDir);                                                                   // 67\n      fs.unlink(infoFile, function () {                                                                            // 69\n        self.server.listen(0, \"127.0.0.1\", function () {                                                           // 70\n          fs.writeFileSync(infoFile, JSON.stringify({                                                              // 71\n            status: \"enabled\",                                                                                     // 72\n            port: self.server.address().port,                                                                      // 73\n            key: self.key                                                                                          // 74\n          }) + \"\\n\", {                                                                                             // 71\n            mode: INFO_FILE_MODE                                                                                   // 76\n          });                                                                                                      // 75\n        });                                                                                                        // 78\n      });                                                                                                          // 79\n    }                                                                                                              // 80\n                                                                                                                   //\n    return listen;                                                                                                 //\n  }();                                                                                                             //\n                                                                                                                   //\n  Server.prototype.onConnection = function () {                                                                    //\n    function onConnection(socket) {                                                                                //\n      var self = this; // Make sure this function doesn't try to write anything to the socket                      // 83\n      // after it has been closed.                                                                                 // 86\n                                                                                                                   //\n      socket.on(\"close\", function () {                                                                             // 87\n        socket = null;                                                                                             // 88\n      }); // If communication is not established within 1000ms of the first                                        // 89\n      // connection, forcibly close the socket.                                                                    // 92\n                                                                                                                   //\n      var timeout = setTimeout(function () {                                                                       // 93\n        if (socket) {                                                                                              // 94\n          socket.removeAllListeners(\"data\");                                                                       // 95\n          socket.end(EXITING_MESSAGE + \"\\n\");                                                                      // 96\n        }                                                                                                          // 97\n      }, 1000); // Let connecting clients configure certain REPL options by sending a                              // 98\n      // JSON object over the socket. For example, only the client knows                                           // 101\n      // whether it's running a TTY or an Emacs subshell or some other kind of                                     // 102\n      // terminal, so the client must decide the value of options.terminal.                                        // 103\n                                                                                                                   //\n      readJSONFromStream(socket, function (error, options, replInputSocket) {                                      // 104\n        clearTimeout(timeout);                                                                                     // 105\n                                                                                                                   //\n        if (error) {                                                                                               // 107\n          socket = null;                                                                                           // 108\n          console.error(error.stack);                                                                              // 109\n          return;                                                                                                  // 110\n        }                                                                                                          // 111\n                                                                                                                   //\n        if (options.key !== self.key) {                                                                            // 113\n          if (socket) {                                                                                            // 114\n            socket.end(EXITING_MESSAGE + \"\\n\");                                                                    // 115\n          }                                                                                                        // 116\n                                                                                                                   //\n          return;                                                                                                  // 117\n        }                                                                                                          // 118\n                                                                                                                   //\n        delete options.key; // Set the columns to what is being requested by the client.                           // 119\n                                                                                                                   //\n        if (options.columns && socket) {                                                                           // 122\n          socket.columns = options.columns;                                                                        // 123\n        }                                                                                                          // 124\n                                                                                                                   //\n        delete options.columns;                                                                                    // 125\n                                                                                                                   //\n        if (options.evaluateAndExit) {                                                                             // 127\n          evalCommand.call(Object.create(null), // Dummy repl object without ._RecoverableError.                   // 128\n          \"(\" + options.evaluateAndExit.command + \")\", null, // evalCommand ignores the context parameter, anyway  // 130\n          options.evaluateAndExit.filename || \"<meteor shell>\", function (error, result) {                         // 132\n            if (socket) {                                                                                          // 134\n              var message = error ? {                                                                              // 135\n                error: error + \"\",                                                                                 // 136\n                code: 1                                                                                            // 137\n              } : {                                                                                                // 135\n                result: result                                                                                     // 139\n              }; // Sending back a JSON payload allows the client to                                               // 138\n              // distinguish between errors and successful results.                                                // 143\n                                                                                                                   //\n              socket.end(JSON.stringify(message) + \"\\n\");                                                          // 144\n            }                                                                                                      // 145\n          });                                                                                                      // 146\n          return;                                                                                                  // 148\n        }                                                                                                          // 149\n                                                                                                                   //\n        delete options.evaluateAndExit; // Immutable options.                                                      // 150\n                                                                                                                   //\n        _.extend(options, {                                                                                        // 153\n          input: replInputSocket,                                                                                  // 154\n          output: socket                                                                                           // 155\n        }); // Overridable options.                                                                                // 153\n                                                                                                                   //\n                                                                                                                   //\n        _.defaults(options, {                                                                                      // 159\n          prompt: \"> \",                                                                                            // 160\n          terminal: true,                                                                                          // 161\n          useColors: true,                                                                                         // 162\n          useGlobal: true,                                                                                         // 163\n          ignoreUndefined: true                                                                                    // 164\n        });                                                                                                        // 159\n                                                                                                                   //\n        self.startREPL(options);                                                                                   // 167\n      });                                                                                                          // 168\n    }                                                                                                              // 169\n                                                                                                                   //\n    return onConnection;                                                                                           //\n  }();                                                                                                             //\n                                                                                                                   //\n  Server.prototype.startREPL = function () {                                                                       //\n    function startREPL(options) {                                                                                  //\n      var self = this; // Make sure this function doesn't try to write anything to the output                      // 172\n      // stream after it has been closed.                                                                          // 175\n                                                                                                                   //\n      options.output.on(\"close\", function () {                                                                     // 176\n        options.output = null;                                                                                     // 177\n      });                                                                                                          // 178\n                                                                                                                   //\n      var repl = self.repl = require(\"repl\").start(options); // History persists across shell sessions!            // 180\n                                                                                                                   //\n                                                                                                                   //\n      self.initializeHistory(); // Save the global `_` object in the server.  This is probably defined by the      // 183\n      // underscore package.  It is unlikely to be the same object as the `var _ =                                 // 186\n      // require('underscore')` in this file!                                                                      // 187\n                                                                                                                   //\n      var originalUnderscore = repl.context._;                                                                     // 188\n      Object.defineProperty(repl.context, \"_\", {                                                                   // 190\n        // Force the global _ variable to remain bound to underscore.                                              // 191\n        get: function () {                                                                                         // 192\n          return originalUnderscore;                                                                               // 192\n        },                                                                                                         // 192\n        // Expose the last REPL result as __ instead of _.                                                         // 194\n        set: function (lastResult) {                                                                               // 195\n          repl.context.__ = lastResult;                                                                            // 196\n        },                                                                                                         // 197\n        enumerable: true,                                                                                          // 199\n        // Allow this property to be (re)defined more than once (e.g. each                                         // 201\n        // time the server restarts).                                                                              // 202\n        configurable: true                                                                                         // 203\n      });                                                                                                          // 190\n                                                                                                                   //\n      if (Package.modules) {                                                                                       // 206\n        // Use the same `require` function and `module` object visible to the                                      // 207\n        // application.                                                                                            // 208\n        var toBeInstalled = {};                                                                                    // 209\n        var shellModuleName = \"meteor-shell-\" + Math.random().toString(36).slice(2) + \".js\";                       // 210\n                                                                                                                   //\n        toBeInstalled[shellModuleName] = function (require, exports, module) {                                     // 213\n          repl.context.module = module;                                                                            // 214\n          repl.context.require = require; // Tab completion sometimes uses require.extensions, but only for        // 215\n          // the keys.                                                                                             // 218\n                                                                                                                   //\n          require.extensions = {                                                                                   // 219\n            \".js\": true,                                                                                           // 220\n            \".json\": true,                                                                                         // 221\n            \".node\": true                                                                                          // 222\n          };                                                                                                       // 219\n        }; // This populates repl.context.{module,require} by evaluating the                                       // 224\n        // module defined above.                                                                                   // 227\n                                                                                                                   //\n                                                                                                                   //\n        Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);                                      // 228\n      }                                                                                                            // 229\n                                                                                                                   //\n      repl.context.repl = repl; // Some improvements to the existing help messages.                                // 231\n                                                                                                                   //\n      function addHelp(cmd, helpText) {                                                                            // 234\n        var info = repl.commands[cmd] || repl.commands[\".\" + cmd];                                                 // 235\n                                                                                                                   //\n        if (info) {                                                                                                // 236\n          info.help = helpText;                                                                                    // 237\n        }                                                                                                          // 238\n      }                                                                                                            // 239\n                                                                                                                   //\n      addHelp(\"break\", \"Terminate current command input and display new prompt\");                                  // 240\n      addHelp(\"exit\", \"Disconnect from server and leave shell\");                                                   // 241\n      addHelp(\"help\", \"Show this help information\"); // When the REPL exits, signal the attached client to exit by sending it\n      // the special EXITING_MESSAGE.                                                                              // 245\n                                                                                                                   //\n      repl.on(\"exit\", function () {                                                                                // 246\n        if (options.output) {                                                                                      // 247\n          options.output.write(EXITING_MESSAGE + \"\\n\");                                                            // 248\n          options.output.end();                                                                                    // 249\n        }                                                                                                          // 250\n      }); // When the server process exits, end the output stream but do not                                       // 251\n      // signal the attached client to exit.                                                                       // 254\n                                                                                                                   //\n      process.on(\"exit\", function () {                                                                             // 255\n        if (options.output) {                                                                                      // 256\n          options.output.end();                                                                                    // 257\n        }                                                                                                          // 258\n      }); // This Meteor-specific shell command rebuilds the application as if a                                   // 259\n      // change was made to server code.                                                                           // 262\n                                                                                                                   //\n      repl.defineCommand(\"reload\", {                                                                               // 263\n        help: \"Restart the server and the shell\",                                                                  // 264\n        action: function () {                                                                                      // 265\n          process.exit(0);                                                                                         // 266\n        }                                                                                                          // 267\n      }); // TODO: Node 6: Revisit this as repl._RecoverableError is now exported.                                 // 263\n      //       as `Recoverable` from `repl`.  Maybe revisit this entirely                                          // 271\n      //       as the docs have been updated too:                                                                  // 272\n      //       https://nodejs.org/api/repl.html#repl_custom_evaluation_functions                                   // 273\n      //       https://github.com/nodejs/node/blob/v6.x/lib/repl.js#L1398                                          // 274\n      // Trigger one recoverable error using the default eval function, just                                       // 275\n      // to capture the Recoverable error constructor, so that our custom                                          // 276\n      // evalCommand function can wrap recoverable errors properly.                                                // 277\n                                                                                                                   //\n      repl.eval(\"{\", null, \"<meteor shell>\", function (error) {                                                    // 278\n        // Capture the Recoverable error constructor.                                                              // 281\n        repl._RecoverableError = error && error.constructor; // Now set repl.eval to the actual evalCommand function that we want\n        // to use, bound to repl._domain if necessary.                                                             // 285\n                                                                                                                   //\n        repl.eval = repl._domain ? repl._domain.bind(evalCommand) : evalCommand; // Terminate the partial evaluation of the { command.\n                                                                                                                   //\n        repl.commands[\"break\"].action.call(repl);                                                                  // 291\n      });                                                                                                          // 292\n    }                                                                                                              // 294\n                                                                                                                   //\n    return startREPL;                                                                                              //\n  }(); // This function allows a persistent history of shell commands to be saved                                  //\n  // to and loaded from .meteor/local/shell-history.                                                               // 297\n                                                                                                                   //\n                                                                                                                   //\n  Server.prototype.initializeHistory = function () {                                                               //\n    function initializeHistory() {                                                                                 //\n      var self = this;                                                                                             // 299\n      var rli = self.repl.rli;                                                                                     // 300\n      var historyFile = getHistoryFile(self.shellDir);                                                             // 301\n      var historyFd = fs.openSync(historyFile, \"a+\");                                                              // 302\n      var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\");                                         // 303\n      var seenLines = Object.create(null);                                                                         // 304\n                                                                                                                   //\n      if (!rli.history) {                                                                                          // 306\n        rli.history = [];                                                                                          // 307\n        rli.historyIndex = -1;                                                                                     // 308\n      }                                                                                                            // 309\n                                                                                                                   //\n      while (rli.history && historyLines.length > 0) {                                                             // 311\n        var line = historyLines.pop();                                                                             // 312\n                                                                                                                   //\n        if (line && /\\S/.test(line) && !seenLines[line]) {                                                         // 313\n          rli.history.push(line);                                                                                  // 314\n          seenLines[line] = true;                                                                                  // 315\n        }                                                                                                          // 316\n      }                                                                                                            // 317\n                                                                                                                   //\n      rli.addListener(\"line\", function (line) {                                                                    // 319\n        if (historyFd >= 0 && /\\S/.test(line)) {                                                                   // 320\n          fs.writeSync(historyFd, line + \"\\n\");                                                                    // 321\n        }                                                                                                          // 322\n      });                                                                                                          // 323\n      self.repl.on(\"exit\", function () {                                                                           // 325\n        fs.closeSync(historyFd);                                                                                   // 326\n        historyFd = -1;                                                                                            // 327\n      });                                                                                                          // 328\n    }                                                                                                              // 329\n                                                                                                                   //\n    return initializeHistory;                                                                                      //\n  }();                                                                                                             //\n                                                                                                                   //\n  return Server;                                                                                                   //\n}();                                                                                                               //\n                                                                                                                   //\nfunction readJSONFromStream(inputStream, callback) {                                                               // 332\n  var outputStream = new stream.PassThrough();                                                                     // 333\n  var dataSoFar = \"\";                                                                                              // 334\n                                                                                                                   //\n  function onData(buffer) {                                                                                        // 336\n    var lines = buffer.toString(\"utf8\").split(\"\\n\");                                                               // 337\n                                                                                                                   //\n    while (lines.length > 0) {                                                                                     // 339\n      dataSoFar += lines.shift();                                                                                  // 340\n                                                                                                                   //\n      try {                                                                                                        // 342\n        var json = JSON.parse(dataSoFar);                                                                          // 343\n      } catch (error) {                                                                                            // 344\n        if (error instanceof SyntaxError) {                                                                        // 345\n          continue;                                                                                                // 346\n        }                                                                                                          // 347\n                                                                                                                   //\n        return finish(error);                                                                                      // 349\n      }                                                                                                            // 350\n                                                                                                                   //\n      if (lines.length > 0) {                                                                                      // 352\n        outputStream.write(lines.join(\"\\n\"));                                                                      // 353\n      }                                                                                                            // 354\n                                                                                                                   //\n      inputStream.pipe(outputStream);                                                                              // 356\n      return finish(null, json);                                                                                   // 358\n    }                                                                                                              // 359\n  }                                                                                                                // 360\n                                                                                                                   //\n  function onClose() {                                                                                             // 362\n    finish(new Error(\"stream unexpectedly closed\"));                                                               // 363\n  }                                                                                                                // 364\n                                                                                                                   //\n  var finished = false;                                                                                            // 366\n                                                                                                                   //\n  function finish(error, json) {                                                                                   // 367\n    if (!finished) {                                                                                               // 368\n      finished = true;                                                                                             // 369\n      inputStream.removeListener(\"data\", onData);                                                                  // 370\n      inputStream.removeListener(\"error\", finish);                                                                 // 371\n      inputStream.removeListener(\"close\", onClose);                                                                // 372\n      callback(error, json, outputStream);                                                                         // 373\n    }                                                                                                              // 374\n  }                                                                                                                // 375\n                                                                                                                   //\n  inputStream.on(\"data\", onData);                                                                                  // 377\n  inputStream.on(\"error\", finish);                                                                                 // 378\n  inputStream.on(\"close\", onClose);                                                                                // 379\n}                                                                                                                  // 380\n                                                                                                                   //\nfunction getInfoFile(shellDir) {                                                                                   // 382\n  return path.join(shellDir, \"info.json\");                                                                         // 383\n}                                                                                                                  // 384\n                                                                                                                   //\nfunction getHistoryFile(shellDir) {                                                                                // 386\n  return path.join(shellDir, \"history\");                                                                           // 387\n} // Shell commands need to be executed in a Fiber in case they call into                                          // 388\n// code that yields. Using a Promise is an even better idea, since it runs                                         // 391\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.                                          // 392\n                                                                                                                   //\n                                                                                                                   //\nvar evalCommandPromise = Promise.resolve();                                                                        // 393\n                                                                                                                   //\nfunction evalCommand(command, context, filename, callback) {                                                       // 395\n  var repl = this;                                                                                                 // 396\n                                                                                                                   //\n  function wrapErrorIfRecoverable(error) {                                                                         // 398\n    if (repl._RecoverableError && isRecoverableError(error, repl)) {                                               // 399\n      return new repl._RecoverableError(error);                                                                    // 401\n    } else {                                                                                                       // 402\n      return error;                                                                                                // 403\n    }                                                                                                              // 404\n  }                                                                                                                // 405\n                                                                                                                   //\n  if (Package.ecmascript) {                                                                                        // 407\n    var noParens = stripParens(command);                                                                           // 408\n                                                                                                                   //\n    if (noParens !== command) {                                                                                    // 409\n      var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens);                                                         // 410\n                                                                                                                   //\n      if (classMatch && classMatch[1] !== \"extends\") {                                                             // 411\n        // If the command looks like a named ES2015 class, we remove the                                           // 412\n        // extra layer of parentheses added by the REPL so that the                                                // 413\n        // command will be evaluated as a class declaration rather than as                                         // 414\n        // a named class expression. Note that you can still type (class A                                         // 415\n        // {}) explicitly to evaluate a named class expression. The REPL                                           // 416\n        // code that calls evalCommand handles named function expressions                                          // 417\n        // similarly (first with and then without parentheses), but that                                           // 418\n        // code doesn't know about ES2015 classes, which is why we have to                                         // 419\n        // handle them here.                                                                                       // 420\n        command = noParens;                                                                                        // 421\n      }                                                                                                            // 422\n    }                                                                                                              // 423\n                                                                                                                   //\n    try {                                                                                                          // 425\n      command = Package.ecmascript.ECMAScript.compileForShell(command);                                            // 426\n    } catch (error) {                                                                                              // 427\n      callback(wrapErrorIfRecoverable(error));                                                                     // 428\n      return;                                                                                                      // 429\n    }                                                                                                              // 430\n  }                                                                                                                // 431\n                                                                                                                   //\n  try {                                                                                                            // 433\n    var script = new vm.Script(command, {                                                                          // 434\n      filename: filename,                                                                                          // 435\n      displayErrors: false                                                                                         // 436\n    });                                                                                                            // 434\n  } catch (parseError) {                                                                                           // 438\n    callback(wrapErrorIfRecoverable(parseError));                                                                  // 439\n    return;                                                                                                        // 440\n  }                                                                                                                // 441\n                                                                                                                   //\n  evalCommandPromise.then(function () {                                                                            // 443\n    callback(null, script.runInThisContext());                                                                     // 444\n  }).catch(callback);                                                                                              // 445\n}                                                                                                                  // 446\n                                                                                                                   //\nfunction stripParens(command) {                                                                                    // 448\n  if (command.charAt(0) === \"(\" && command.charAt(command.length - 1) === \")\") {                                   // 449\n    return command.slice(1, command.length - 1);                                                                   // 451\n  }                                                                                                                // 452\n                                                                                                                   //\n  return command;                                                                                                  // 453\n} // The bailOnIllegalToken and isRecoverableError functions are taken from                                        // 454\n// https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253                                          // 457\n                                                                                                                   //\n                                                                                                                   //\nfunction bailOnIllegalToken(parser) {                                                                              // 458\n  return parser._literal === null && !parser.blockComment && !parser.regExpLiteral;                                // 459\n} // If the error is that we've unexpectedly ended the input,                                                      // 462\n// then let the user try to recover by adding more input.                                                          // 465\n                                                                                                                   //\n                                                                                                                   //\nfunction isRecoverableError(e, repl) {                                                                             // 466\n  if (e && e.name === 'SyntaxError') {                                                                             // 467\n    var message = e.message;                                                                                       // 468\n                                                                                                                   //\n    if (message === 'Unterminated template literal' || message === 'Missing } in template expression') {           // 469\n      repl._inTemplateLiteral = true;                                                                              // 471\n      return true;                                                                                                 // 472\n    }                                                                                                              // 473\n                                                                                                                   //\n    if (message.startsWith('Unexpected end of input') || message.startsWith('missing ) after argument list') || message.startsWith('Unexpected token')) {\n      return true;                                                                                                 // 478\n    }                                                                                                              // 479\n                                                                                                                   //\n    if (message === 'Invalid or unexpected token') {                                                               // 481\n      return !bailOnIllegalToken(repl.lineParser);                                                                 // 482\n    }                                                                                                              // 483\n  }                                                                                                                // 484\n                                                                                                                   //\n  return false;                                                                                                    // 486\n}                                                                                                                  // 487\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/shell-server/main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['shell-server'] = exports;\n\n})();\n","servePath":"/packages/shell-server.js","sourceMap":{"version":3,"sources":["/packages/shell-server/main.js","/packages/shell-server/shell-server.js"],"names":["module","importSync","v","k","exports","listen","shellDir","process","env","METEOR_SHELL_DIR","export","disable","assert","require","path","stream","fs","net","vm","_","INFO_FILE_MODE","parseInt","EXITING_MESSAGE","callback","Server","Meteor","startup","__meteor_bootstrap__","hooks","startupHooks","push","setImmediate","writeFileSync","getInfoFile","JSON","stringify","status","reason","mode","ignored","self","ok","key","Math","random","toString","slice","server","createServer","socket","onConnection","on","err","console","error","stack","infoFile","unlink","port","address","timeout","setTimeout","removeAllListeners","end","readJSONFromStream","options","replInputSocket","clearTimeout","columns","evaluateAndExit","evalCommand","call","Object","create","command","filename","result","message","code","extend","input","output","defaults","prompt","terminal","useColors","useGlobal","ignoreUndefined","startREPL","repl","start","initializeHistory","originalUnderscore","context","defineProperty","get","set","lastResult","__","enumerable","configurable","Package","modules","toBeInstalled","shellModuleName","extensions","meteorInstall","addHelp","cmd","helpText","info","commands","help","write","defineCommand","action","exit","eval","_RecoverableError","constructor","_domain","bind","rli","historyFile","getHistoryFile","historyFd","openSync","historyLines","readFileSync","split","seenLines","history","historyIndex","length","line","pop","test","addListener","writeSync","closeSync","inputStream","outputStream","PassThrough","dataSoFar","onData","buffer","lines","shift","json","parse","SyntaxError","finish","join","pipe","onClose","Error","finished","removeListener","evalCommandPromise","Promise","resolve","wrapErrorIfRecoverable","isRecoverableError","ecmascript","noParens","stripParens","classMatch","exec","ECMAScript","compileForShell","script","Script","displayErrors","parseError","then","runInThisContext","catch","charAt","bailOnIllegalToken","parser","_literal","blockComment","regExpLiteral","e","name","_inTemplateLiteral","startsWith","lineParser"],"mappings":"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","file":"/packages/shell-server.js","sourcesContent":["export * from \"./shell-server.js\";\nimport { listen } from \"./shell-server.js\";\n\nconst shellDir = process.env.METEOR_SHELL_DIR;\nif (shellDir) {\n  listen(shellDir);\n}\n","var assert = require(\"assert\");\nvar path = require(\"path\");\nvar stream = require(\"stream\");\nvar fs = require(\"fs\");\nvar net = require(\"net\");\nvar vm = require(\"vm\");\nvar _ = require(\"underscore\");\nvar INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.\nvar EXITING_MESSAGE = \"Shell exiting...\";\n\n// Invoked by the server process to listen for incoming connections from\n// shell clients. Each connection gets its own REPL instance.\nexport function listen(shellDir) {\n  function callback() {\n    new Server(shellDir).listen();\n  }\n\n  // If the server is still in the very early stages of starting up,\n  // Meteor.startup may not available yet.\n  if (typeof Meteor === \"object\") {\n    Meteor.startup(callback);\n  } else if (typeof __meteor_bootstrap__ === \"object\") {\n    var hooks = __meteor_bootstrap__.startupHooks;\n    if (hooks) {\n      hooks.push(callback);\n    } else {\n      // As a fallback, just call the callback asynchronously.\n      setImmediate(callback);\n    }\n  }\n}\n\n// Disabling the shell causes all attached clients to disconnect and exit.\nexport function disable(shellDir) {\n  try {\n    // Replace info.json with a file that says the shell server is\n    // disabled, so that any connected shell clients will fail to\n    // reconnect after the server process closes their sockets.\n    fs.writeFileSync(\n      getInfoFile(shellDir),\n      JSON.stringify({\n        status: \"disabled\",\n        reason: \"Shell server has shut down.\"\n      }) + \"\\n\",\n      { mode: INFO_FILE_MODE }\n    );\n  } catch (ignored) {}\n}\n\nclass Server {\n  constructor(shellDir) {\n    var self = this;\n    assert.ok(self instanceof Server);\n\n    self.shellDir = shellDir;\n    self.key = Math.random().toString(36).slice(2);\n\n    self.server = net.createServer(function(socket) {\n      self.onConnection(socket);\n    }).on(\"error\", function(err) {\n      console.error(err.stack);\n    });\n  }\n\n  listen() {\n    var self = this;\n    var infoFile = getInfoFile(self.shellDir);\n\n    fs.unlink(infoFile, function() {\n      self.server.listen(0, \"127.0.0.1\", function() {\n        fs.writeFileSync(infoFile, JSON.stringify({\n          status: \"enabled\",\n          port: self.server.address().port,\n          key: self.key\n        }) + \"\\n\", {\n          mode: INFO_FILE_MODE\n        });\n      });\n    });\n  }\n\n  onConnection(socket) {\n    var self = this;\n\n    // Make sure this function doesn't try to write anything to the socket\n    // after it has been closed.\n    socket.on(\"close\", function() {\n      socket = null;\n    });\n\n    // If communication is not established within 1000ms of the first\n    // connection, forcibly close the socket.\n    var timeout = setTimeout(function() {\n      if (socket) {\n        socket.removeAllListeners(\"data\");\n        socket.end(EXITING_MESSAGE + \"\\n\");\n      }\n    }, 1000);\n\n    // Let connecting clients configure certain REPL options by sending a\n    // JSON object over the socket. For example, only the client knows\n    // whether it's running a TTY or an Emacs subshell or some other kind of\n    // terminal, so the client must decide the value of options.terminal.\n    readJSONFromStream(socket, function (error, options, replInputSocket) {\n      clearTimeout(timeout);\n\n      if (error) {\n        socket = null;\n        console.error(error.stack);\n        return;\n      }\n\n      if (options.key !== self.key) {\n        if (socket) {\n          socket.end(EXITING_MESSAGE + \"\\n\");\n        }\n        return;\n      }\n      delete options.key;\n\n      // Set the columns to what is being requested by the client.\n      if (options.columns && socket) {\n        socket.columns = options.columns;\n      }\n      delete options.columns;\n\n      if (options.evaluateAndExit) {\n        evalCommand.call(\n          Object.create(null), // Dummy repl object without ._RecoverableError.\n          \"(\" + options.evaluateAndExit.command + \")\",\n          null, // evalCommand ignores the context parameter, anyway\n          options.evaluateAndExit.filename || \"<meteor shell>\",\n          function (error, result) {\n            if (socket) {\n              var message = error ? {\n                error: error + \"\",\n                code: 1\n              } : {\n                result: result\n              };\n\n              // Sending back a JSON payload allows the client to\n              // distinguish between errors and successful results.\n              socket.end(JSON.stringify(message) + \"\\n\");\n            }\n          }\n        );\n        return;\n      }\n      delete options.evaluateAndExit;\n\n      // Immutable options.\n      _.extend(options, {\n        input: replInputSocket,\n        output: socket\n      });\n\n      // Overridable options.\n      _.defaults(options, {\n        prompt: \"> \",\n        terminal: true,\n        useColors: true,\n        useGlobal: true,\n        ignoreUndefined: true,\n      });\n\n      self.startREPL(options);\n    });\n  }\n\n  startREPL(options) {\n    var self = this;\n\n    // Make sure this function doesn't try to write anything to the output\n    // stream after it has been closed.\n    options.output.on(\"close\", function() {\n      options.output = null;\n    });\n\n    var repl = self.repl = require(\"repl\").start(options);\n\n    // History persists across shell sessions!\n    self.initializeHistory();\n\n    // Save the global `_` object in the server.  This is probably defined by the\n    // underscore package.  It is unlikely to be the same object as the `var _ =\n    // require('underscore')` in this file!\n    var originalUnderscore = repl.context._;\n\n    Object.defineProperty(repl.context, \"_\", {\n      // Force the global _ variable to remain bound to underscore.\n      get: function () { return originalUnderscore; },\n\n      // Expose the last REPL result as __ instead of _.\n      set: function(lastResult) {\n        repl.context.__ = lastResult;\n      },\n\n      enumerable: true,\n\n      // Allow this property to be (re)defined more than once (e.g. each\n      // time the server restarts).\n      configurable: true\n    });\n\n    if (Package.modules) {\n      // Use the same `require` function and `module` object visible to the\n      // application.\n      var toBeInstalled = {};\n      var shellModuleName = \"meteor-shell-\" +\n        Math.random().toString(36).slice(2) + \".js\";\n\n      toBeInstalled[shellModuleName] = function (require, exports, module) {\n        repl.context.module = module;\n        repl.context.require = require;\n\n        // Tab completion sometimes uses require.extensions, but only for\n        // the keys.\n        require.extensions = {\n          \".js\": true,\n          \".json\": true,\n          \".node\": true,\n        };\n      };\n\n      // This populates repl.context.{module,require} by evaluating the\n      // module defined above.\n      Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);\n    }\n\n    repl.context.repl = repl;\n\n    // Some improvements to the existing help messages.\n    function addHelp(cmd, helpText) {\n      var info = repl.commands[cmd] || repl.commands[\".\" + cmd];\n      if (info) {\n        info.help = helpText;\n      }\n    }\n    addHelp(\"break\", \"Terminate current command input and display new prompt\");\n    addHelp(\"exit\", \"Disconnect from server and leave shell\");\n    addHelp(\"help\", \"Show this help information\");\n\n    // When the REPL exits, signal the attached client to exit by sending it\n    // the special EXITING_MESSAGE.\n    repl.on(\"exit\", function() {\n      if (options.output) {\n        options.output.write(EXITING_MESSAGE + \"\\n\");\n        options.output.end();\n      }\n    });\n\n    // When the server process exits, end the output stream but do not\n    // signal the attached client to exit.\n    process.on(\"exit\", function() {\n      if (options.output) {\n        options.output.end();\n      }\n    });\n\n    // This Meteor-specific shell command rebuilds the application as if a\n    // change was made to server code.\n    repl.defineCommand(\"reload\", {\n      help: \"Restart the server and the shell\",\n      action: function() {\n        process.exit(0);\n      }\n    });\n\n    // TODO: Node 6: Revisit this as repl._RecoverableError is now exported.\n    //       as `Recoverable` from `repl`.  Maybe revisit this entirely\n    //       as the docs have been updated too:\n    //       https://nodejs.org/api/repl.html#repl_custom_evaluation_functions\n    //       https://github.com/nodejs/node/blob/v6.x/lib/repl.js#L1398\n    // Trigger one recoverable error using the default eval function, just\n    // to capture the Recoverable error constructor, so that our custom\n    // evalCommand function can wrap recoverable errors properly.\n    repl.eval(\n      \"{\", null, \"<meteor shell>\",\n      function (error) {\n        // Capture the Recoverable error constructor.\n        repl._RecoverableError = error && error.constructor;\n\n        // Now set repl.eval to the actual evalCommand function that we want\n        // to use, bound to repl._domain if necessary.\n        repl.eval = repl._domain\n          ? repl._domain.bind(evalCommand)\n          : evalCommand;\n\n        // Terminate the partial evaluation of the { command.\n        repl.commands[\"break\"].action.call(repl);\n      }\n    );\n  }\n\n  // This function allows a persistent history of shell commands to be saved\n  // to and loaded from .meteor/local/shell-history.\n  initializeHistory() {\n    var self = this;\n    var rli = self.repl.rli;\n    var historyFile = getHistoryFile(self.shellDir);\n    var historyFd = fs.openSync(historyFile, \"a+\");\n    var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\");\n    var seenLines = Object.create(null);\n\n    if (! rli.history) {\n      rli.history = [];\n      rli.historyIndex = -1;\n    }\n\n    while (rli.history && historyLines.length > 0) {\n      var line = historyLines.pop();\n      if (line && /\\S/.test(line) && ! seenLines[line]) {\n        rli.history.push(line);\n        seenLines[line] = true;\n      }\n    }\n\n    rli.addListener(\"line\", function(line) {\n      if (historyFd >= 0 && /\\S/.test(line)) {\n        fs.writeSync(historyFd, line + \"\\n\");\n      }\n    });\n\n    self.repl.on(\"exit\", function() {\n      fs.closeSync(historyFd);\n      historyFd = -1;\n    });\n  }\n}\n\nfunction readJSONFromStream(inputStream, callback) {\n  var outputStream = new stream.PassThrough;\n  var dataSoFar = \"\";\n\n  function onData(buffer) {\n    var lines = buffer.toString(\"utf8\").split(\"\\n\");\n\n    while (lines.length > 0) {\n      dataSoFar += lines.shift();\n\n      try {\n        var json = JSON.parse(dataSoFar);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          continue;\n        }\n\n        return finish(error);\n      }\n\n      if (lines.length > 0) {\n        outputStream.write(lines.join(\"\\n\"));\n      }\n\n      inputStream.pipe(outputStream);\n\n      return finish(null, json);\n    }\n  }\n\n  function onClose() {\n    finish(new Error(\"stream unexpectedly closed\"));\n  }\n\n  var finished = false;\n  function finish(error, json) {\n    if (! finished) {\n      finished = true;\n      inputStream.removeListener(\"data\", onData);\n      inputStream.removeListener(\"error\", finish);\n      inputStream.removeListener(\"close\", onClose);\n      callback(error, json, outputStream);\n    }\n  }\n\n  inputStream.on(\"data\", onData);\n  inputStream.on(\"error\", finish);\n  inputStream.on(\"close\", onClose);\n}\n\nfunction getInfoFile(shellDir) {\n  return path.join(shellDir, \"info.json\");\n}\n\nfunction getHistoryFile(shellDir) {\n  return path.join(shellDir, \"history\");\n}\n\n// Shell commands need to be executed in a Fiber in case they call into\n// code that yields. Using a Promise is an even better idea, since it runs\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.\nvar evalCommandPromise = Promise.resolve();\n\nfunction evalCommand(command, context, filename, callback) {\n  var repl = this;\n\n  function wrapErrorIfRecoverable(error) {\n    if (repl._RecoverableError &&\n        isRecoverableError(error, repl)) {\n      return new repl._RecoverableError(error);\n    } else {\n      return error;\n    }\n  }\n\n  if (Package.ecmascript) {\n    var noParens = stripParens(command);\n    if (noParens !== command) {\n      var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens);\n      if (classMatch && classMatch[1] !== \"extends\") {\n        // If the command looks like a named ES2015 class, we remove the\n        // extra layer of parentheses added by the REPL so that the\n        // command will be evaluated as a class declaration rather than as\n        // a named class expression. Note that you can still type (class A\n        // {}) explicitly to evaluate a named class expression. The REPL\n        // code that calls evalCommand handles named function expressions\n        // similarly (first with and then without parentheses), but that\n        // code doesn't know about ES2015 classes, which is why we have to\n        // handle them here.\n        command = noParens;\n      }\n    }\n\n    try {\n      command = Package.ecmascript.ECMAScript.compileForShell(command);\n    } catch (error) {\n      callback(wrapErrorIfRecoverable(error));\n      return;\n    }\n  }\n\n  try {\n    var script = new vm.Script(command, {\n      filename: filename,\n      displayErrors: false\n    });\n  } catch (parseError) {\n    callback(wrapErrorIfRecoverable(parseError));\n    return;\n  }\n\n  evalCommandPromise.then(function () {\n    callback(null, script.runInThisContext());\n  }).catch(callback);\n}\n\nfunction stripParens(command) {\n  if (command.charAt(0) === \"(\" &&\n      command.charAt(command.length - 1) === \")\") {\n    return command.slice(1, command.length - 1);\n  }\n  return command;\n}\n\n// The bailOnIllegalToken and isRecoverableError functions are taken from\n// https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253\nfunction bailOnIllegalToken(parser) {\n  return parser._literal === null &&\n    ! parser.blockComment &&\n    ! parser.regExpLiteral;\n}\n\n// If the error is that we've unexpectedly ended the input,\n// then let the user try to recover by adding more input.\nfunction isRecoverableError(e, repl) {\n  if (e && e.name === 'SyntaxError') {\n    var message = e.message;\n    if (message === 'Unterminated template literal' ||\n        message === 'Missing } in template expression') {\n      repl._inTemplateLiteral = true;\n      return true;\n    }\n\n    if (message.startsWith('Unexpected end of input') ||\n        message.startsWith('missing ) after argument list') ||\n        message.startsWith('Unexpected token')) {\n      return true;\n    }\n\n    if (message === 'Invalid or unexpected token') {\n      return ! bailOnIllegalToken(repl.lineParser);\n    }\n  }\n\n  return false;\n}\n"]}}]