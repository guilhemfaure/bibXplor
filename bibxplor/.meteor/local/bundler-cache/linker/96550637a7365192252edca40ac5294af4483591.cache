[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"./reify.js\",\"./css\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/client.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"./install-packages.js\");                                                                                      // 1\nrequire(\"./stubs.js\");                                                                                                 // 2\nrequire(\"./buffer.js\");                                                                                                // 3\nrequire(\"./process.js\");                                                                                               // 4\nrequire(\"./reify.js\");                                                                                                 // 5\n                                                                                                                       // 6\nexports.addStyles = require(\"./css\").addStyles;                                                                        // 7\n                                                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/buffer.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                                  // 2\n} catch (noBuffer) {}                                                                                                  // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/css.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar doc = document;                                                                                                    // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                                   // 2\n                                                                                                                       // 3\nexports.addStyles = function (css) {                                                                                   // 4\n  var style = doc.createElement(\"style\");                                                                              // 5\n                                                                                                                       // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                              // 7\n                                                                                                                       // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9\n  var internetExplorerSheetObject =                                                                                    // 10\n    style.sheet || // Edge/IE11.                                                                                       // 11\n    style.styleSheet; // Older IEs.                                                                                    // 12\n                                                                                                                       // 13\n  if (internetExplorerSheetObject) {                                                                                   // 14\n    internetExplorerSheetObject.cssText = css;                                                                         // 15\n  } else {                                                                                                             // 16\n    style.appendChild(doc.createTextNode(css));                                                                        // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  return head.appendChild(style);                                                                                      // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/install-packages.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction install(name, mainModule) {                                                                                   // 1\n  var meteorDir = {};                                                                                                  // 2\n                                                                                                                       // 3\n  // Given a package name <name>, install a stub module in the                                                         // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                          // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                               // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                          // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8\n  // that the package contains a file called index.js (#6590).                                                         // 9\n                                                                                                                       // 10\n  if (mainModule) {                                                                                                    // 11\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {                                             // 12\n      module.exports = require(mainModule);                                                                            // 13\n    }];                                                                                                                // 14\n  } else {                                                                                                             // 15\n    // back compat with old Meteor packages                                                                            // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                                // 17\n      module.exports = Package[name];                                                                                  // 18\n    };                                                                                                                 // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  meteorInstall({                                                                                                      // 22\n    node_modules: {                                                                                                    // 23\n      meteor: meteorDir                                                                                                // 24\n    }                                                                                                                  // 25\n  });                                                                                                                  // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n// This file will be modified during computeJsOutputFilesMap to include                                                // 29\n// install(<name>) calls for every Meteor package.                                                                     // 30\n                                                                                                                       // 31\ninstall(\"underscore\");                                                                                                 // 32\ninstall(\"meteor\");                                                                                                     // 33\ninstall(\"meteor-base\");                                                                                                // 34\ninstall(\"mobile-experience\");                                                                                          // 35\ninstall(\"modules-runtime\");                                                                                            // 36\ninstall(\"modules\", \"meteor/modules/client.js\");                                                                        // 37\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                                                      // 38\ninstall(\"promise\", \"meteor/promise/client.js\");                                                                        // 39\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");                                                 // 40\ninstall(\"babel-compiler\");                                                                                             // 41\ninstall(\"ecmascript\");                                                                                                 // 42\ninstall(\"base64\");                                                                                                     // 43\ninstall(\"ejson\");                                                                                                      // 44\ninstall(\"id-map\");                                                                                                     // 45\ninstall(\"ordered-dict\");                                                                                               // 46\ninstall(\"tracker\");                                                                                                    // 47\ninstall(\"babel-runtime\", \"meteor/babel-runtime/babel-runtime.js\");                                                     // 48\ninstall(\"random\");                                                                                                     // 49\ninstall(\"mongo-id\");                                                                                                   // 50\ninstall(\"diff-sequence\");                                                                                              // 51\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                              // 52\ninstall(\"minimongo\");                                                                                                  // 53\ninstall(\"check\", \"meteor/check/match.js\");                                                                             // 54\ninstall(\"retry\");                                                                                                      // 55\ninstall(\"ddp-common\");                                                                                                 // 56\ninstall(\"reload\");                                                                                                     // 57\ninstall(\"ddp-client\", \"meteor/ddp-client/namespace.js\");                                                               // 58\ninstall(\"ddp\");                                                                                                        // 59\ninstall(\"ddp-server\");                                                                                                 // 60\ninstall(\"allow-deny\");                                                                                                 // 61\ninstall(\"insecure\");                                                                                                   // 62\ninstall(\"mongo\");                                                                                                      // 63\ninstall(\"blaze-html-templates\");                                                                                       // 64\ninstall(\"reactive-var\");                                                                                               // 65\ninstall(\"standard-minifier-css\");                                                                                      // 66\ninstall(\"standard-minifier-js\");                                                                                       // 67\ninstall(\"shell-server\");                                                                                               // 68\ninstall(\"autopublish\");                                                                                                // 69\ninstall(\"webapp\");                                                                                                     // 70\ninstall(\"livedata\");                                                                                                   // 71\ninstall(\"hot-code-push\");                                                                                              // 72\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                            // 73\ninstall(\"observe-sequence\");                                                                                           // 74\ninstall(\"deps\");                                                                                                       // 75\ninstall(\"htmljs\");                                                                                                     // 76\ninstall(\"blaze\");                                                                                                      // 77\ninstall(\"spacebars\");                                                                                                  // 78\ninstall(\"templating-compiler\");                                                                                        // 79\ninstall(\"templating-runtime\");                                                                                         // 80\ninstall(\"templating\");                                                                                                 // 81\ninstall(\"launch-screen\");                                                                                              // 82\ninstall(\"ui\");                                                                                                         // 83\ninstall(\"autoupdate\");                                                                                                 // 84\n                                                                                                                       // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/process.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // The application can run `npm install process` to provide its own                                                  // 2\n  // process stub; otherwise this module will provide a partial stub.                                                  // 3\n  process = global.process || require(\"process\");                                                                      // 4\n} catch (noProcess) {                                                                                                  // 5\n  process = {};                                                                                                        // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nif (Meteor.isServer) {                                                                                                 // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                               // 10\n  meteorInstall({                                                                                                      // 11\n    node_modules: {                                                                                                    // 12\n      \"process.js\": function (r, e, module) {                                                                          // 13\n        module.exports = process;                                                                                      // 14\n      }                                                                                                                // 15\n    }                                                                                                                  // 16\n  });                                                                                                                  // 17\n} else {                                                                                                               // 18\n  process.platform = \"browser\";                                                                                        // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\nif (typeof process.env !== \"object\") {                                                                                 // 23\n  process.env = {};                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n_.extend(process.env, meteorEnv);                                                                                      // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reify.js\":[\"reify/lib/runtime\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/reify.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module = module.constructor;                                                                                       // 1\nrequire(\"reify/lib/runtime\").enable(Module);                                                                           // 2\nvar Mp = Module.prototype;                                                                                             // 3\nMp.importSync = Mp.importSync || Mp.import;                                                                            // 4\nMp.import = Mp.import || Mp.importSync;                                                                                // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/stubs.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar haveStubs = false;                                                                                                 // 1\ntry {                                                                                                                  // 2\n  require.resolve(\"meteor-node-stubs\");                                                                                // 3\n  haveStubs = true;                                                                                                    // 4\n} catch (noStubs) {}                                                                                                   // 5\n                                                                                                                       // 6\nif (haveStubs) {                                                                                                       // 7\n  // When meteor-node-stubs is installed in the application's root                                                     // 8\n  // node_modules directory, requiring it here installs aliases for stubs                                              // 9\n  // for all Node built-in modules, such as fs, util, and http.                                                        // 10\n  require(\"meteor-node-stubs\");                                                                                        // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"reify\":{\"lib\":{\"runtime.js\":[\"./entry.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 3\nvar Entry = require(\"./entry.js\").Entry;                                                                               // 4\n                                                                                                                       // 5\nexports.enable = function (Module) {                                                                                   // 6\n  var Mp = Module.prototype;                                                                                           // 7\n                                                                                                                       // 8\n  if (typeof Mp.importSync === \"function\" &&                                                                           // 9\n      typeof Mp.export === \"function\") {                                                                               // 10\n    // If the Mp.{importSync,export} methods have already been defined,                                                // 11\n    // abandon reification immediately.                                                                                // 12\n    return Module;                                                                                                     // 13\n  }                                                                                                                    // 14\n                                                                                                                       // 15\n  // Platform-specific code should implement this method however                                                       // 16\n  // appropriate. Module.prototype.resolve(id) should return an absolute                                               // 17\n  // version of the given module identifier, like require.resolve.                                                     // 18\n  Mp.resolve = Mp.resolve || function resolve(id) {                                                                    // 19\n    throw new Error(\"Module.prototype.resolve not implemented\");                                                       // 20\n  };                                                                                                                   // 21\n                                                                                                                       // 22\n  // Platform-specific code should find a way to call this method whenever                                             // 23\n  // the module system is about to return module.exports from require. This                                            // 24\n  // might happen more than once per module, in case of dependency cycles,                                             // 25\n  // so we want Module.prototype.runModuleSetters to run each time.                                                    // 26\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                                // 27\n    var entry = Entry.get(this.id);                                                                                    // 28\n    if (entry) {                                                                                                       // 29\n      entry.runModuleSetters(this);                                                                                    // 30\n    }                                                                                                                  // 31\n                                                                                                                       // 32\n    // Assignments to exported local variables get wrapped with calls to                                               // 33\n    // module.runModuleSetters, so module.runModuleSetters returns the                                                 // 34\n    // valueToPassThrough parameter to allow the value of the original                                                 // 35\n    // expression to pass through. For example,                                                                        // 36\n    //                                                                                                                 // 37\n    //   export var a = 1;                                                                                             // 38\n    //   console.log(a += 3);                                                                                          // 39\n    //                                                                                                                 // 40\n    // becomes                                                                                                         // 41\n    //                                                                                                                 // 42\n    //   module.export(\"a\", () => a);                                                                                  // 43\n    //   var a = 1;                                                                                                    // 44\n    //   console.log(module.runModuleSetters(a += 3));                                                                 // 45\n    //                                                                                                                 // 46\n    // This ensures module.runModuleSetters runs immediately after the                                                 // 47\n    // assignment, and does not interfere with the larger computation.                                                 // 48\n    return valueToPassThrough;                                                                                         // 49\n  };                                                                                                                   // 50\n                                                                                                                       // 51\n  function setESModule(module) {                                                                                       // 52\n    var exports = module.exports;                                                                                      // 53\n    if (exports &&                                                                                                     // 54\n        typeof exports === \"object\" &&                                                                                 // 55\n        ! hasOwn.call(exports, \"__esModule\")) {                                                                        // 56\n      Object.defineProperty(exports, \"__esModule\", {                                                                   // 57\n        value: true,                                                                                                   // 58\n        enumerable: false,                                                                                             // 59\n        writable: false,                                                                                               // 60\n        configurable: true                                                                                             // 61\n      });                                                                                                              // 62\n    }                                                                                                                  // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  // If key is provided, it will be used to identify the given setters so                                              // 66\n  // that they can be replaced if module.importSync is called again with the                                           // 67\n  // same key. This avoids potential memory leaks from import declarations                                             // 68\n  // inside loops. The compiler generates these keys automatically (and                                                // 69\n  // deterministically) when compiling nested import declarations.                                                     // 70\n  Mp.importSync = function (id, setters, key) {                                                                        // 71\n    setESModule(this);                                                                                                 // 72\n                                                                                                                       // 73\n    var absoluteId = this.resolve(id);                                                                                 // 74\n                                                                                                                       // 75\n    if (setters && typeof setters === \"object\") {                                                                      // 76\n      var entry = Entry.getOrCreate(absoluteId);                                                                       // 77\n      entry.addSetters(this, setters, key);                                                                            // 78\n    }                                                                                                                  // 79\n                                                                                                                       // 80\n    var countBefore = entry ? entry.runCount : 0;                                                                      // 81\n    var exports = this.require(absoluteId);                                                                            // 82\n                                                                                                                       // 83\n    if (entry && entry.runCount === countBefore) {                                                                     // 84\n      // If require(absoluteId) didn't run any setters for this entry,                                                 // 85\n      // perhaps because it's not the first time this module has been                                                  // 86\n      // required, run the setters now using an object that passes as the                                              // 87\n      // real module object.                                                                                           // 88\n      entry.runModuleSetters({                                                                                         // 89\n        id: absoluteId,                                                                                                // 90\n        exports: exports,                                                                                              // 91\n        getExportByName: Mp.getExportByName                                                                            // 92\n      });                                                                                                              // 93\n    }                                                                                                                  // 94\n  };                                                                                                                   // 95\n                                                                                                                       // 96\n  // Register getter functions for local variables in the scope of an                                                  // 97\n  // export statement. The keys of the getters object are exported names,                                              // 98\n  // and the values are functions that return local values.                                                            // 99\n  Mp.export = function (getters) {                                                                                     // 100\n    setESModule(this);                                                                                                 // 101\n                                                                                                                       // 102\n    if (getters && typeof getters === \"object\") {                                                                      // 103\n      Entry.getOrCreate(this.id).addGetters(getters);                                                                  // 104\n    }                                                                                                                  // 105\n                                                                                                                       // 106\n    if (this.loaded) {                                                                                                 // 107\n      // If the module has already been evaluated, then we need to trigger                                             // 108\n      // another round of entry.runModuleSetters calls, which begins by                                                // 109\n      // calling entry.runModuleGetters(module).                                                                       // 110\n      this.runModuleSetters();                                                                                         // 111\n    }                                                                                                                  // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  // This method can be overridden by client code to implement custom export                                           // 115\n  // naming logic. The current implementation works well with Babel's                                                  // 116\n  // __esModule convention.                                                                                            // 117\n  Mp.getExportByName = function (name) {                                                                               // 118\n    var exports = this.exports;                                                                                        // 119\n                                                                                                                       // 120\n    if (name === \"*\") {                                                                                                // 121\n      return exports;                                                                                                  // 122\n    }                                                                                                                  // 123\n                                                                                                                       // 124\n    if (name === \"default\" &&                                                                                          // 125\n        ! (exports &&                                                                                                  // 126\n           typeof exports === \"object\" &&                                                                              // 127\n           exports.__esModule &&                                                                                       // 128\n           \"default\" in exports)) {                                                                                    // 129\n      return exports;                                                                                                  // 130\n    }                                                                                                                  // 131\n                                                                                                                       // 132\n    return exports && exports[name];                                                                                   // 133\n  };                                                                                                                   // 134\n                                                                                                                       // 135\n  return Module;                                                                                                       // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"entry.js\":[\"./utils.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nvar utils = require(\"./utils.js\");                                                                                     // 3\n                                                                                                                       // 4\nvar entryMap = Object.create(null);                                                                                    // 5\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 6\n                                                                                                                       // 7\nfunction Entry(id) {                                                                                                   // 8\n  // Same as module.id for this module.                                                                                // 9\n  this.id = id;                                                                                                        // 10\n  // The number of times this.runModuleSetters has been called.                                                        // 11\n  this.runCount = 0;                                                                                                   // 12\n  // Setters for assigning to local variables in parent modules.                                                       // 13\n  this.setters = Object.create(null);                                                                                  // 14\n  // Getters for local variables exported from this module.                                                            // 15\n  this.getters = Object.create(null);                                                                                  // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\nvar Ep = Entry.prototype;                                                                                              // 19\n                                                                                                                       // 20\nEntry.get = function (id) {                                                                                            // 21\n  return entryMap[id] || null;                                                                                         // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nEntry.getOrCreate = function (id) {                                                                                    // 25\n  return entryMap[id] = entryMap[id] || new Entry(id);                                                                 // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\nvar keySalt = 0;                                                                                                       // 29\nfunction makeUniqueKey() {                                                                                             // 30\n  return Math.random()                                                                                                 // 31\n    .toString(36)                                                                                                      // 32\n    // Add an incrementing salt to help track key ordering and also                                                    // 33\n    // absolutely guarantee we never return the same key twice.                                                        // 34\n    .replace(\"0.\", ++keySalt + \":\");                                                                                   // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nEp.addSetters = function (parent, setters, key) {                                                                      // 38\n  if (typeof key === \"undefined\") {                                                                                    // 39\n    // If no key was provided, make a new unique key that won't collide                                                // 40\n    // with any other keys.                                                                                            // 41\n    key = makeUniqueKey();                                                                                             // 42\n  } else {                                                                                                             // 43\n    // If a key was provided, make sure it is distinct from keys provided                                              // 44\n    // by other parent modules.                                                                                        // 45\n    key = parent.id + \":\" + key;                                                                                       // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  var names = Object.keys(setters);                                                                                    // 49\n  var nameCount = names.length;                                                                                        // 50\n                                                                                                                       // 51\n  for (var i = 0; i < nameCount; ++i) {                                                                                // 52\n    var name = names[i];                                                                                               // 53\n    var setter = setters[name];                                                                                        // 54\n    if (typeof setter === \"function\" &&                                                                                // 55\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 56\n        name !== \"__esModule\") {                                                                                       // 57\n      setter.parent = parent;                                                                                          // 58\n      (this.setters[name] =                                                                                            // 59\n       this.setters[name] || Object.create(null)                                                                       // 60\n      )[key] = setter;                                                                                                 // 61\n    }                                                                                                                  // 62\n  }                                                                                                                    // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\nEp.addGetters = function (getters) {                                                                                   // 66\n  var names = Object.keys(getters);                                                                                    // 67\n  var nameCount = names.length;                                                                                        // 68\n                                                                                                                       // 69\n  for (var i = 0; i < nameCount; ++i) {                                                                                // 70\n    var name = names[i];                                                                                               // 71\n    var getter = getters[name];                                                                                        // 72\n    if (typeof getter === \"function\" &&                                                                                // 73\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 74\n        name !== \"__esModule\" &&                                                                                       // 75\n        // Should this throw if hasOwn.call(this.getters, name)?                                                       // 76\n        ! hasOwn.call(this.getters, name)) {                                                                           // 77\n      this.getters[name] = getter;                                                                                     // 78\n    }                                                                                                                  // 79\n  }                                                                                                                    // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\nfunction runModuleSetters(module) {                                                                                    // 83\n  var entry = entryMap[module.id];                                                                                     // 84\n  if (entry) {                                                                                                         // 85\n    entry.runModuleSetters(module);                                                                                    // 86\n  }                                                                                                                    // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\nEp.runModuleGetters = function (module) {                                                                              // 90\n  var names = Object.keys(this.getters);                                                                               // 91\n  var nameCount = names.length;                                                                                        // 92\n                                                                                                                       // 93\n  for (var i = 0; i < nameCount; ++i) {                                                                                // 94\n    this.runGetter(module, names[i]);                                                                                  // 95\n  }                                                                                                                    // 96\n};                                                                                                                     // 97\n                                                                                                                       // 98\n// Returns true iff the getter updated module.exports with a new value.                                                // 99\nEp.runGetter = function (module, name) {                                                                               // 100\n  if (hasOwn.call(this.getters, name)) {                                                                               // 101\n    try {                                                                                                              // 102\n      // Update module.exports[name] with the current value so that CommonJS                                           // 103\n      // require calls remain consistent with module.importSync.                                                       // 104\n      return module.exports[name] =                                                                                    // 105\n        this.getters[name].call(module);                                                                               // 106\n                                                                                                                       // 107\n    } catch (e) {                                                                                                      // 108\n      // If the getter threw an exception, avoid updating module.exports                                               // 109\n      // and return undefined.                                                                                         // 110\n    }                                                                                                                  // 111\n  }                                                                                                                    // 112\n};                                                                                                                     // 113\n                                                                                                                       // 114\n// Called whenever module.exports might have changed, to trigger any                                                   // 115\n// setters associated with the newly exported values.                                                                  // 116\nEp.runModuleSetters = function (module) {                                                                              // 117\n  var entry = this;                                                                                                    // 118\n  var names = Object.keys(this.setters);                                                                               // 119\n                                                                                                                       // 120\n  // Make sure module.exports is up to date before we call                                                             // 121\n  // module.getExportByName(name).                                                                                     // 122\n  this.runModuleGetters(module);                                                                                       // 123\n                                                                                                                       // 124\n  if (! names.length) {                                                                                                // 125\n    ++this.runCount;                                                                                                   // 126\n    return;                                                                                                            // 127\n  }                                                                                                                    // 128\n                                                                                                                       // 129\n  // Invoke the given callback once for every (setter, value, name) triple                                             // 130\n  // that needs to be called. Note that forEachSetter does not call any                                                // 131\n  // setters itself, only the given callback.                                                                          // 132\n  function forEachSetter(callback, context) {                                                                          // 133\n    var nameCount = names.length;                                                                                      // 134\n                                                                                                                       // 135\n    for (var i = 0; i < nameCount; ++i) {                                                                              // 136\n      var name = names[i];                                                                                             // 137\n      var setters = entry.setters[name];                                                                               // 138\n      var keys = Object.keys(setters);                                                                                 // 139\n      var keyCount = keys.length;                                                                                      // 140\n                                                                                                                       // 141\n      for (var j = 0; j < keyCount; ++j) {                                                                             // 142\n        var key = keys[j];                                                                                             // 143\n        var value = module.getExportByName(name);                                                                      // 144\n                                                                                                                       // 145\n        if (name === \"*\") {                                                                                            // 146\n          var valueNames = Object.keys(value);                                                                         // 147\n          var valueNameCount = valueNames.length;                                                                      // 148\n                                                                                                                       // 149\n          for (var k = 0; k < valueNameCount; ++k) {                                                                   // 150\n            var valueName = valueNames[k];                                                                             // 151\n            call(setters[key], value[valueName], valueName);                                                           // 152\n          }                                                                                                            // 153\n                                                                                                                       // 154\n        } else {                                                                                                       // 155\n          call(setters[key], value, name);                                                                             // 156\n        }                                                                                                              // 157\n      }                                                                                                                // 158\n    }                                                                                                                  // 159\n                                                                                                                       // 160\n    function call(setter, value, name) {                                                                               // 161\n      if (name === \"__esModule\") {                                                                                     // 162\n        // Ignore setters asking for module.exports.__esModule.                                                        // 163\n        return;                                                                                                        // 164\n      }                                                                                                                // 165\n                                                                                                                       // 166\n      setter.last = setter.last || Object.create(null);                                                                // 167\n                                                                                                                       // 168\n      if (! hasOwn.call(setter.last, name) ||                                                                          // 169\n          setter.last[name] !== value) {                                                                               // 170\n        // Only invoke the callback if we have not called this setter                                                  // 171\n        // (with a value of this name) before, or the current value is                                                 // 172\n        // different from the last value we passed to this setter.                                                     // 173\n        return callback.apply(context, arguments);                                                                     // 174\n      }                                                                                                                // 175\n    }                                                                                                                  // 176\n  }                                                                                                                    // 177\n                                                                                                                       // 178\n  // Lazily-initialized object mapping parent module identifiers to parent                                             // 179\n  // module objects whose setters we might need to run.                                                                // 180\n  var relevantParents;                                                                                                 // 181\n                                                                                                                       // 182\n  // Take snapshots of setter.parent.exports for any setters that we are                                               // 183\n  // planning to call, so that we can later determine if calling the                                                   // 184\n  // setters modified any of those exports objects.                                                                    // 185\n  forEachSetter(function (setter, value, name) {                                                                       // 186\n    relevantParents = relevantParents || Object.create(null);                                                          // 187\n    relevantParents[setter.parent.id] = setter.parent;                                                                 // 188\n    setter.call(module, setter.last[name] = value, name);                                                              // 189\n  });                                                                                                                  // 190\n                                                                                                                       // 191\n  ++entry.runCount;                                                                                                    // 192\n                                                                                                                       // 193\n  if (! relevantParents) {                                                                                             // 194\n    return;                                                                                                            // 195\n  }                                                                                                                    // 196\n                                                                                                                       // 197\n  // If any of the setters updated the module.exports of a parent module,                                              // 198\n  // or updated local variables that are exported by that parent module,                                               // 199\n  // then we must re-run any setters registered by that parent module.                                                 // 200\n                                                                                                                       // 201\n  var parentIDs = Object.keys(relevantParents);                                                                        // 202\n  var parentIDCount = parentIDs.length;                                                                                // 203\n                                                                                                                       // 204\n  for (var i = 0; i < parentIDCount; ++i) {                                                                            // 205\n    // What happens if relevantParents[parentIDs[id]] === module, or if                                                // 206\n    // longer cycles exist in the parent chain? Thanks to our setter.last                                              // 207\n    // bookkeeping above, the runModuleSetters broadcast will only proceed                                             // 208\n    // as far as there are any actual changes to report.                                                               // 209\n    runModuleSetters(relevantParents[parentIDs[i]]);                                                                   // 210\n  }                                                                                                                    // 211\n};                                                                                                                     // 212\n                                                                                                                       // 213\nexports.Entry = Entry;                                                                                                 // 214\n                                                                                                                       // 215\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.getNamesFromPattern = function (pattern) {                                                                     // 3\n  var queue = [pattern];                                                                                               // 4\n  var names = [];                                                                                                      // 5\n                                                                                                                       // 6\n  for (var i = 0; i < queue.length; ++i) {                                                                             // 7\n    var pattern = queue[i];                                                                                            // 8\n    if (! pattern) {                                                                                                   // 9\n      continue;                                                                                                        // 10\n    }                                                                                                                  // 11\n                                                                                                                       // 12\n    switch (pattern.type) {                                                                                            // 13\n    case \"Identifier\":                                                                                                 // 14\n      names.push(pattern.name);                                                                                        // 15\n      break;                                                                                                           // 16\n    case \"Property\":                                                                                                   // 17\n    case \"ObjectProperty\":                                                                                             // 18\n      queue.push(pattern.value);                                                                                       // 19\n      break;                                                                                                           // 20\n    case \"AssignmentPattern\":                                                                                          // 21\n      queue.push(pattern.left);                                                                                        // 22\n      break;                                                                                                           // 23\n    case \"ObjectPattern\":                                                                                              // 24\n      queue.push.apply(queue, pattern.properties);                                                                     // 25\n      break;                                                                                                           // 26\n    case \"ArrayPattern\":                                                                                               // 27\n      queue.push.apply(queue, pattern.elements);                                                                       // 28\n      break;                                                                                                           // 29\n    case \"RestElement\":                                                                                                // 30\n      queue.push(pattern.argument);                                                                                    // 31\n      break;                                                                                                           // 32\n    }                                                                                                                  // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  return names;                                                                                                        // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/package.json                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"meteor-node-stubs\";                                                                                    // 1\nexports.version = \"0.2.6\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./map.json\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/index.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar map = require(\"./map.json\");                                                                                       // 1\nvar meteorAliases = {};                                                                                                // 2\n                                                                                                                       // 3\nObject.keys(map).forEach(function (id) {                                                                               // 4\n  if (typeof map[id] === \"string\") {                                                                                   // 5\n    var aliasParts = module.id.split(\"/\");                                                                             // 6\n    aliasParts.pop();                                                                                                  // 7\n    aliasParts.push(\"node_modules\", map[id]);                                                                          // 8\n    exports[id] = meteorAliases[id + \".js\"] =                                                                          // 9\n      aliasParts.join(\"/\");                                                                                            // 10\n  } else {                                                                                                             // 11\n    exports[id] = map[id];                                                                                             // 12\n    meteorAliases[id + \".js\"] = function(){};                                                                          // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\nif (typeof meteorInstall === \"function\") {                                                                             // 17\n  meteorInstall({                                                                                                      // 18\n    // Install the aliases into a node_modules directory one level up from                                             // 19\n    // the root directory, so that they do not clutter the namespace                                                   // 20\n    // available to apps and packages.                                                                                 // 21\n    \"..\": {                                                                                                            // 22\n      node_modules: meteorAliases                                                                                      // 23\n    }                                                                                                                  // 24\n  });                                                                                                                  // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"map.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/map.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {                                                                                                     // 1\n  \"assert\": \"assert/\",                                                                                                 // 2\n  \"buffer\": \"buffer/\",                                                                                                 // 3\n  \"child_process\": null,                                                                                               // 4\n  \"cluster\": null,                                                                                                     // 5\n  \"console\": \"console-browserify\",                                                                                     // 6\n  \"constants\": \"constants-browserify\",                                                                                 // 7\n  \"crypto\": \"crypto-browserify\",                                                                                       // 8\n  \"dgram\": null,                                                                                                       // 9\n  \"dns\": null,                                                                                                         // 10\n  \"domain\": \"domain-browser\",                                                                                          // 11\n  \"events\": \"events/\",                                                                                                 // 12\n  \"fs\": null,                                                                                                          // 13\n  \"http\": \"http-browserify\",                                                                                           // 14\n  \"https\": \"https-browserify\",                                                                                         // 15\n  \"module\": null,                                                                                                      // 16\n  \"net\": null,                                                                                                         // 17\n  \"os\": \"os-browserify/browser.js\",                                                                                    // 18\n  \"path\": \"path-browserify\",                                                                                           // 19\n  \"process\": \"process/browser.js\",                                                                                     // 20\n  \"punycode\": \"punycode/\",                                                                                             // 21\n  \"querystring\": \"querystring-es3/\",                                                                                   // 22\n  \"readline\": null,                                                                                                    // 23\n  \"repl\": null,                                                                                                        // 24\n  \"stream\": \"stream-browserify\",                                                                                       // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                                       // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                             // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                                   // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                                 // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                                   // 30\n  \"string_decoder\": \"string_decoder/\",                                                                                 // 31\n  \"sys\": \"util/util.js\",                                                                                               // 32\n  \"timers\": \"timers-browserify\",                                                                                       // 33\n  \"tls\": null,                                                                                                         // 34\n  \"tty\": \"tty-browserify\",                                                                                             // 35\n  \"url\": \"url/\",                                                                                                       // 36\n  \"util\": \"util/util.js\",                                                                                              // 37\n  \"vm\": \"vm-browserify\",                                                                                               // 38\n  \"zlib\": \"browserify-zlib\"                                                                                            // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deps\":{\"buffer.js\":[\"buffer/\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/buffer.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"buffer/\");                                                                                                    // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"process.js\":[\"process/browser.js\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/process.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"process/browser.js\");                                                                                         // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"domain.js\":[\"domain-browser\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/domain.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"domain-browser\");                                                                                             // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"buffer\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"buffer\";                                                                                               // 1\nexports.version = \"4.9.1\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"base64-js\",\"ieee754\",\"isarray\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * The buffer module from node.js, for the browser.                                                                    // 2\n *                                                                                                                     // 3\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4\n * @license  MIT                                                                                                       // 5\n */                                                                                                                    // 6\n/* eslint-disable no-proto */                                                                                          // 7\n                                                                                                                       // 8\n'use strict'                                                                                                           // 9\n                                                                                                                       // 10\nvar base64 = require('base64-js')                                                                                      // 11\nvar ieee754 = require('ieee754')                                                                                       // 12\nvar isArray = require('isarray')                                                                                       // 13\n                                                                                                                       // 14\nexports.Buffer = Buffer                                                                                                // 15\nexports.SlowBuffer = SlowBuffer                                                                                        // 16\nexports.INSPECT_MAX_BYTES = 50                                                                                         // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 20\n *   === true    Use Uint8Array implementation (fastest)                                                               // 21\n *   === false   Use Object implementation (most compatible, even IE6)                                                 // 22\n *                                                                                                                     // 23\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 24\n * Opera 11.6+, iOS 4.2+.                                                                                              // 25\n *                                                                                                                     // 26\n * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 27\n * when the browser supports typed arrays.                                                                             // 28\n *                                                                                                                     // 29\n * Note:                                                                                                               // 30\n *                                                                                                                     // 31\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 32\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 33\n *                                                                                                                     // 34\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 35\n *                                                                                                                     // 36\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 37\n *     incorrect length in some situations.                                                                            // 38\n                                                                                                                       // 39\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 40\n * get the Object implementation, which is slower but behaves correctly.                                               // 41\n */                                                                                                                    // 42\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                                  // 43\n  ? global.TYPED_ARRAY_SUPPORT                                                                                         // 44\n  : typedArraySupport()                                                                                                // 45\n                                                                                                                       // 46\n/*                                                                                                                     // 47\n * Export kMaxLength after typed array support is determined.                                                          // 48\n */                                                                                                                    // 49\nexports.kMaxLength = kMaxLength()                                                                                      // 50\n                                                                                                                       // 51\nfunction typedArraySupport () {                                                                                        // 52\n  try {                                                                                                                // 53\n    var arr = new Uint8Array(1)                                                                                        // 54\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}                                  // 55\n    return arr.foo() === 42 && // typed array instances can be augmented                                               // 56\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 57\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 58\n  } catch (e) {                                                                                                        // 59\n    return false                                                                                                       // 60\n  }                                                                                                                    // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\nfunction kMaxLength () {                                                                                               // 64\n  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 65\n    ? 0x7fffffff                                                                                                       // 66\n    : 0x3fffffff                                                                                                       // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\nfunction createBuffer (that, length) {                                                                                 // 70\n  if (kMaxLength() < length) {                                                                                         // 71\n    throw new RangeError('Invalid typed array length')                                                                 // 72\n  }                                                                                                                    // 73\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 74\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 75\n    that = new Uint8Array(length)                                                                                      // 76\n    that.__proto__ = Buffer.prototype                                                                                  // 77\n  } else {                                                                                                             // 78\n    // Fallback: Return an object instance of the Buffer class                                                         // 79\n    if (that === null) {                                                                                               // 80\n      that = new Buffer(length)                                                                                        // 81\n    }                                                                                                                  // 82\n    that.length = length                                                                                               // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  return that                                                                                                          // 86\n}                                                                                                                      // 87\n                                                                                                                       // 88\n/**                                                                                                                    // 89\n * The Buffer constructor returns instances of `Uint8Array` that have their                                            // 90\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                                     // 91\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                                     // 92\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                       // 93\n * returns a single octet.                                                                                             // 94\n *                                                                                                                     // 95\n * The `Uint8Array` prototype remains unmodified.                                                                      // 96\n */                                                                                                                    // 97\n                                                                                                                       // 98\nfunction Buffer (arg, encodingOrOffset, length) {                                                                      // 99\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {                                                      // 100\n    return new Buffer(arg, encodingOrOffset, length)                                                                   // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  // Common case.                                                                                                      // 104\n  if (typeof arg === 'number') {                                                                                       // 105\n    if (typeof encodingOrOffset === 'string') {                                                                        // 106\n      throw new Error(                                                                                                 // 107\n        'If encoding is specified then the first argument must be a string'                                            // 108\n      )                                                                                                                // 109\n    }                                                                                                                  // 110\n    return allocUnsafe(this, arg)                                                                                      // 111\n  }                                                                                                                    // 112\n  return from(this, arg, encodingOrOffset, length)                                                                     // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\nBuffer.poolSize = 8192 // not used by this implementation                                                              // 116\n                                                                                                                       // 117\n// TODO: Legacy, not needed anymore. Remove in next major version.                                                     // 118\nBuffer._augment = function (arr) {                                                                                     // 119\n  arr.__proto__ = Buffer.prototype                                                                                     // 120\n  return arr                                                                                                           // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\nfunction from (that, value, encodingOrOffset, length) {                                                                // 124\n  if (typeof value === 'number') {                                                                                     // 125\n    throw new TypeError('\"value\" argument must not be a number')                                                       // 126\n  }                                                                                                                    // 127\n                                                                                                                       // 128\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {                                            // 129\n    return fromArrayBuffer(that, value, encodingOrOffset, length)                                                      // 130\n  }                                                                                                                    // 131\n                                                                                                                       // 132\n  if (typeof value === 'string') {                                                                                     // 133\n    return fromString(that, value, encodingOrOffset)                                                                   // 134\n  }                                                                                                                    // 135\n                                                                                                                       // 136\n  return fromObject(that, value)                                                                                       // 137\n}                                                                                                                      // 138\n                                                                                                                       // 139\n/**                                                                                                                    // 140\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError                                             // 141\n * if value is a number.                                                                                               // 142\n * Buffer.from(str[, encoding])                                                                                        // 143\n * Buffer.from(array)                                                                                                  // 144\n * Buffer.from(buffer)                                                                                                 // 145\n * Buffer.from(arrayBuffer[, byteOffset[, length]])                                                                    // 146\n **/                                                                                                                   // 147\nBuffer.from = function (value, encodingOrOffset, length) {                                                             // 148\n  return from(null, value, encodingOrOffset, length)                                                                   // 149\n}                                                                                                                      // 150\n                                                                                                                       // 151\nif (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                      // 152\n  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                    // 153\n  Buffer.__proto__ = Uint8Array                                                                                        // 154\n  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                               // 155\n      Buffer[Symbol.species] === Buffer) {                                                                             // 156\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                         // 157\n    Object.defineProperty(Buffer, Symbol.species, {                                                                    // 158\n      value: null,                                                                                                     // 159\n      configurable: true                                                                                               // 160\n    })                                                                                                                 // 161\n  }                                                                                                                    // 162\n}                                                                                                                      // 163\n                                                                                                                       // 164\nfunction assertSize (size) {                                                                                           // 165\n  if (typeof size !== 'number') {                                                                                      // 166\n    throw new TypeError('\"size\" argument must be a number')                                                            // 167\n  } else if (size < 0) {                                                                                               // 168\n    throw new RangeError('\"size\" argument must not be negative')                                                       // 169\n  }                                                                                                                    // 170\n}                                                                                                                      // 171\n                                                                                                                       // 172\nfunction alloc (that, size, fill, encoding) {                                                                          // 173\n  assertSize(size)                                                                                                     // 174\n  if (size <= 0) {                                                                                                     // 175\n    return createBuffer(that, size)                                                                                    // 176\n  }                                                                                                                    // 177\n  if (fill !== undefined) {                                                                                            // 178\n    // Only pay attention to encoding if it's a string. This                                                           // 179\n    // prevents accidentally sending in a number that would                                                            // 180\n    // be interpretted as a start offset.                                                                              // 181\n    return typeof encoding === 'string'                                                                                // 182\n      ? createBuffer(that, size).fill(fill, encoding)                                                                  // 183\n      : createBuffer(that, size).fill(fill)                                                                            // 184\n  }                                                                                                                    // 185\n  return createBuffer(that, size)                                                                                      // 186\n}                                                                                                                      // 187\n                                                                                                                       // 188\n/**                                                                                                                    // 189\n * Creates a new filled Buffer instance.                                                                               // 190\n * alloc(size[, fill[, encoding]])                                                                                     // 191\n **/                                                                                                                   // 192\nBuffer.alloc = function (size, fill, encoding) {                                                                       // 193\n  return alloc(null, size, fill, encoding)                                                                             // 194\n}                                                                                                                      // 195\n                                                                                                                       // 196\nfunction allocUnsafe (that, size) {                                                                                    // 197\n  assertSize(size)                                                                                                     // 198\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)                                                          // 199\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 200\n    for (var i = 0; i < size; ++i) {                                                                                   // 201\n      that[i] = 0                                                                                                      // 202\n    }                                                                                                                  // 203\n  }                                                                                                                    // 204\n  return that                                                                                                          // 205\n}                                                                                                                      // 206\n                                                                                                                       // 207\n/**                                                                                                                    // 208\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.                                    // 209\n * */                                                                                                                  // 210\nBuffer.allocUnsafe = function (size) {                                                                                 // 211\n  return allocUnsafe(null, size)                                                                                       // 212\n}                                                                                                                      // 213\n/**                                                                                                                    // 214\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.                                // 215\n */                                                                                                                    // 216\nBuffer.allocUnsafeSlow = function (size) {                                                                             // 217\n  return allocUnsafe(null, size)                                                                                       // 218\n}                                                                                                                      // 219\n                                                                                                                       // 220\nfunction fromString (that, string, encoding) {                                                                         // 221\n  if (typeof encoding !== 'string' || encoding === '') {                                                               // 222\n    encoding = 'utf8'                                                                                                  // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  if (!Buffer.isEncoding(encoding)) {                                                                                  // 226\n    throw new TypeError('\"encoding\" must be a valid string encoding')                                                  // 227\n  }                                                                                                                    // 228\n                                                                                                                       // 229\n  var length = byteLength(string, encoding) | 0                                                                        // 230\n  that = createBuffer(that, length)                                                                                    // 231\n                                                                                                                       // 232\n  var actual = that.write(string, encoding)                                                                            // 233\n                                                                                                                       // 234\n  if (actual !== length) {                                                                                             // 235\n    // Writing a hex string, for example, that contains invalid characters will                                        // 236\n    // cause everything after the first invalid character to be ignored. (e.g.                                         // 237\n    // 'abxxcd' will be treated as 'ab')                                                                               // 238\n    that = that.slice(0, actual)                                                                                       // 239\n  }                                                                                                                    // 240\n                                                                                                                       // 241\n  return that                                                                                                          // 242\n}                                                                                                                      // 243\n                                                                                                                       // 244\nfunction fromArrayLike (that, array) {                                                                                 // 245\n  var length = array.length < 0 ? 0 : checked(array.length) | 0                                                        // 246\n  that = createBuffer(that, length)                                                                                    // 247\n  for (var i = 0; i < length; i += 1) {                                                                                // 248\n    that[i] = array[i] & 255                                                                                           // 249\n  }                                                                                                                    // 250\n  return that                                                                                                          // 251\n}                                                                                                                      // 252\n                                                                                                                       // 253\nfunction fromArrayBuffer (that, array, byteOffset, length) {                                                           // 254\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                                // 255\n                                                                                                                       // 256\n  if (byteOffset < 0 || array.byteLength < byteOffset) {                                                               // 257\n    throw new RangeError('\\'offset\\' is out of bounds')                                                                // 258\n  }                                                                                                                    // 259\n                                                                                                                       // 260\n  if (array.byteLength < byteOffset + (length || 0)) {                                                                 // 261\n    throw new RangeError('\\'length\\' is out of bounds')                                                                // 262\n  }                                                                                                                    // 263\n                                                                                                                       // 264\n  if (byteOffset === undefined && length === undefined) {                                                              // 265\n    array = new Uint8Array(array)                                                                                      // 266\n  } else if (length === undefined) {                                                                                   // 267\n    array = new Uint8Array(array, byteOffset)                                                                          // 268\n  } else {                                                                                                             // 269\n    array = new Uint8Array(array, byteOffset, length)                                                                  // 270\n  }                                                                                                                    // 271\n                                                                                                                       // 272\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 273\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 274\n    that = array                                                                                                       // 275\n    that.__proto__ = Buffer.prototype                                                                                  // 276\n  } else {                                                                                                             // 277\n    // Fallback: Return an object instance of the Buffer class                                                         // 278\n    that = fromArrayLike(that, array)                                                                                  // 279\n  }                                                                                                                    // 280\n  return that                                                                                                          // 281\n}                                                                                                                      // 282\n                                                                                                                       // 283\nfunction fromObject (that, obj) {                                                                                      // 284\n  if (Buffer.isBuffer(obj)) {                                                                                          // 285\n    var len = checked(obj.length) | 0                                                                                  // 286\n    that = createBuffer(that, len)                                                                                     // 287\n                                                                                                                       // 288\n    if (that.length === 0) {                                                                                           // 289\n      return that                                                                                                      // 290\n    }                                                                                                                  // 291\n                                                                                                                       // 292\n    obj.copy(that, 0, 0, len)                                                                                          // 293\n    return that                                                                                                        // 294\n  }                                                                                                                    // 295\n                                                                                                                       // 296\n  if (obj) {                                                                                                           // 297\n    if ((typeof ArrayBuffer !== 'undefined' &&                                                                         // 298\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {                                                       // 299\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {                                                       // 300\n        return createBuffer(that, 0)                                                                                   // 301\n      }                                                                                                                // 302\n      return fromArrayLike(that, obj)                                                                                  // 303\n    }                                                                                                                  // 304\n                                                                                                                       // 305\n    if (obj.type === 'Buffer' && isArray(obj.data)) {                                                                  // 306\n      return fromArrayLike(that, obj.data)                                                                             // 307\n    }                                                                                                                  // 308\n  }                                                                                                                    // 309\n                                                                                                                       // 310\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')            // 311\n}                                                                                                                      // 312\n                                                                                                                       // 313\nfunction checked (length) {                                                                                            // 314\n  // Note: cannot use `length < kMaxLength()` here because that fails when                                             // 315\n  // length is NaN (which is otherwise coerced to zero.)                                                               // 316\n  if (length >= kMaxLength()) {                                                                                        // 317\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 318\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 319\n  }                                                                                                                    // 320\n  return length | 0                                                                                                    // 321\n}                                                                                                                      // 322\n                                                                                                                       // 323\nfunction SlowBuffer (length) {                                                                                         // 324\n  if (+length != length) { // eslint-disable-line eqeqeq                                                               // 325\n    length = 0                                                                                                         // 326\n  }                                                                                                                    // 327\n  return Buffer.alloc(+length)                                                                                         // 328\n}                                                                                                                      // 329\n                                                                                                                       // 330\nBuffer.isBuffer = function isBuffer (b) {                                                                              // 331\n  return !!(b != null && b._isBuffer)                                                                                  // 332\n}                                                                                                                      // 333\n                                                                                                                       // 334\nBuffer.compare = function compare (a, b) {                                                                             // 335\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 336\n    throw new TypeError('Arguments must be Buffers')                                                                   // 337\n  }                                                                                                                    // 338\n                                                                                                                       // 339\n  if (a === b) return 0                                                                                                // 340\n                                                                                                                       // 341\n  var x = a.length                                                                                                     // 342\n  var y = b.length                                                                                                     // 343\n                                                                                                                       // 344\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                                // 345\n    if (a[i] !== b[i]) {                                                                                               // 346\n      x = a[i]                                                                                                         // 347\n      y = b[i]                                                                                                         // 348\n      break                                                                                                            // 349\n    }                                                                                                                  // 350\n  }                                                                                                                    // 351\n                                                                                                                       // 352\n  if (x < y) return -1                                                                                                 // 353\n  if (y < x) return 1                                                                                                  // 354\n  return 0                                                                                                             // 355\n}                                                                                                                      // 356\n                                                                                                                       // 357\nBuffer.isEncoding = function isEncoding (encoding) {                                                                   // 358\n  switch (String(encoding).toLowerCase()) {                                                                            // 359\n    case 'hex':                                                                                                        // 360\n    case 'utf8':                                                                                                       // 361\n    case 'utf-8':                                                                                                      // 362\n    case 'ascii':                                                                                                      // 363\n    case 'latin1':                                                                                                     // 364\n    case 'binary':                                                                                                     // 365\n    case 'base64':                                                                                                     // 366\n    case 'ucs2':                                                                                                       // 367\n    case 'ucs-2':                                                                                                      // 368\n    case 'utf16le':                                                                                                    // 369\n    case 'utf-16le':                                                                                                   // 370\n      return true                                                                                                      // 371\n    default:                                                                                                           // 372\n      return false                                                                                                     // 373\n  }                                                                                                                    // 374\n}                                                                                                                      // 375\n                                                                                                                       // 376\nBuffer.concat = function concat (list, length) {                                                                       // 377\n  if (!isArray(list)) {                                                                                                // 378\n    throw new TypeError('\"list\" argument must be an Array of Buffers')                                                 // 379\n  }                                                                                                                    // 380\n                                                                                                                       // 381\n  if (list.length === 0) {                                                                                             // 382\n    return Buffer.alloc(0)                                                                                             // 383\n  }                                                                                                                    // 384\n                                                                                                                       // 385\n  var i                                                                                                                // 386\n  if (length === undefined) {                                                                                          // 387\n    length = 0                                                                                                         // 388\n    for (i = 0; i < list.length; ++i) {                                                                                // 389\n      length += list[i].length                                                                                         // 390\n    }                                                                                                                  // 391\n  }                                                                                                                    // 392\n                                                                                                                       // 393\n  var buffer = Buffer.allocUnsafe(length)                                                                              // 394\n  var pos = 0                                                                                                          // 395\n  for (i = 0; i < list.length; ++i) {                                                                                  // 396\n    var buf = list[i]                                                                                                  // 397\n    if (!Buffer.isBuffer(buf)) {                                                                                       // 398\n      throw new TypeError('\"list\" argument must be an Array of Buffers')                                               // 399\n    }                                                                                                                  // 400\n    buf.copy(buffer, pos)                                                                                              // 401\n    pos += buf.length                                                                                                  // 402\n  }                                                                                                                    // 403\n  return buffer                                                                                                        // 404\n}                                                                                                                      // 405\n                                                                                                                       // 406\nfunction byteLength (string, encoding) {                                                                               // 407\n  if (Buffer.isBuffer(string)) {                                                                                       // 408\n    return string.length                                                                                               // 409\n  }                                                                                                                    // 410\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&                                // 411\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {                                                 // 412\n    return string.byteLength                                                                                           // 413\n  }                                                                                                                    // 414\n  if (typeof string !== 'string') {                                                                                    // 415\n    string = '' + string                                                                                               // 416\n  }                                                                                                                    // 417\n                                                                                                                       // 418\n  var len = string.length                                                                                              // 419\n  if (len === 0) return 0                                                                                              // 420\n                                                                                                                       // 421\n  // Use a for loop to avoid recursion                                                                                 // 422\n  var loweredCase = false                                                                                              // 423\n  for (;;) {                                                                                                           // 424\n    switch (encoding) {                                                                                                // 425\n      case 'ascii':                                                                                                    // 426\n      case 'latin1':                                                                                                   // 427\n      case 'binary':                                                                                                   // 428\n        return len                                                                                                     // 429\n      case 'utf8':                                                                                                     // 430\n      case 'utf-8':                                                                                                    // 431\n      case undefined:                                                                                                  // 432\n        return utf8ToBytes(string).length                                                                              // 433\n      case 'ucs2':                                                                                                     // 434\n      case 'ucs-2':                                                                                                    // 435\n      case 'utf16le':                                                                                                  // 436\n      case 'utf-16le':                                                                                                 // 437\n        return len * 2                                                                                                 // 438\n      case 'hex':                                                                                                      // 439\n        return len >>> 1                                                                                               // 440\n      case 'base64':                                                                                                   // 441\n        return base64ToBytes(string).length                                                                            // 442\n      default:                                                                                                         // 443\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 444\n        encoding = ('' + encoding).toLowerCase()                                                                       // 445\n        loweredCase = true                                                                                             // 446\n    }                                                                                                                  // 447\n  }                                                                                                                    // 448\n}                                                                                                                      // 449\nBuffer.byteLength = byteLength                                                                                         // 450\n                                                                                                                       // 451\nfunction slowToString (encoding, start, end) {                                                                         // 452\n  var loweredCase = false                                                                                              // 453\n                                                                                                                       // 454\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only                                         // 455\n  // property of a typed array.                                                                                        // 456\n                                                                                                                       // 457\n  // This behaves neither like String nor Uint8Array in that we set start/end                                          // 458\n  // to their upper/lower bounds if the value passed is out of range.                                                  // 459\n  // undefined is handled specially as per ECMA-262 6th Edition,                                                       // 460\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.                                                   // 461\n  if (start === undefined || start < 0) {                                                                              // 462\n    start = 0                                                                                                          // 463\n  }                                                                                                                    // 464\n  // Return early if start > this.length. Done here to prevent potential uint32                                        // 465\n  // coercion fail below.                                                                                              // 466\n  if (start > this.length) {                                                                                           // 467\n    return ''                                                                                                          // 468\n  }                                                                                                                    // 469\n                                                                                                                       // 470\n  if (end === undefined || end > this.length) {                                                                        // 471\n    end = this.length                                                                                                  // 472\n  }                                                                                                                    // 473\n                                                                                                                       // 474\n  if (end <= 0) {                                                                                                      // 475\n    return ''                                                                                                          // 476\n  }                                                                                                                    // 477\n                                                                                                                       // 478\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.                                           // 479\n  end >>>= 0                                                                                                           // 480\n  start >>>= 0                                                                                                         // 481\n                                                                                                                       // 482\n  if (end <= start) {                                                                                                  // 483\n    return ''                                                                                                          // 484\n  }                                                                                                                    // 485\n                                                                                                                       // 486\n  if (!encoding) encoding = 'utf8'                                                                                     // 487\n                                                                                                                       // 488\n  while (true) {                                                                                                       // 489\n    switch (encoding) {                                                                                                // 490\n      case 'hex':                                                                                                      // 491\n        return hexSlice(this, start, end)                                                                              // 492\n                                                                                                                       // 493\n      case 'utf8':                                                                                                     // 494\n      case 'utf-8':                                                                                                    // 495\n        return utf8Slice(this, start, end)                                                                             // 496\n                                                                                                                       // 497\n      case 'ascii':                                                                                                    // 498\n        return asciiSlice(this, start, end)                                                                            // 499\n                                                                                                                       // 500\n      case 'latin1':                                                                                                   // 501\n      case 'binary':                                                                                                   // 502\n        return latin1Slice(this, start, end)                                                                           // 503\n                                                                                                                       // 504\n      case 'base64':                                                                                                   // 505\n        return base64Slice(this, start, end)                                                                           // 506\n                                                                                                                       // 507\n      case 'ucs2':                                                                                                     // 508\n      case 'ucs-2':                                                                                                    // 509\n      case 'utf16le':                                                                                                  // 510\n      case 'utf-16le':                                                                                                 // 511\n        return utf16leSlice(this, start, end)                                                                          // 512\n                                                                                                                       // 513\n      default:                                                                                                         // 514\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 515\n        encoding = (encoding + '').toLowerCase()                                                                       // 516\n        loweredCase = true                                                                                             // 517\n    }                                                                                                                  // 518\n  }                                                                                                                    // 519\n}                                                                                                                      // 520\n                                                                                                                       // 521\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                                 // 522\n// Buffer instances.                                                                                                   // 523\nBuffer.prototype._isBuffer = true                                                                                      // 524\n                                                                                                                       // 525\nfunction swap (b, n, m) {                                                                                              // 526\n  var i = b[n]                                                                                                         // 527\n  b[n] = b[m]                                                                                                          // 528\n  b[m] = i                                                                                                             // 529\n}                                                                                                                      // 530\n                                                                                                                       // 531\nBuffer.prototype.swap16 = function swap16 () {                                                                         // 532\n  var len = this.length                                                                                                // 533\n  if (len % 2 !== 0) {                                                                                                 // 534\n    throw new RangeError('Buffer size must be a multiple of 16-bits')                                                  // 535\n  }                                                                                                                    // 536\n  for (var i = 0; i < len; i += 2) {                                                                                   // 537\n    swap(this, i, i + 1)                                                                                               // 538\n  }                                                                                                                    // 539\n  return this                                                                                                          // 540\n}                                                                                                                      // 541\n                                                                                                                       // 542\nBuffer.prototype.swap32 = function swap32 () {                                                                         // 543\n  var len = this.length                                                                                                // 544\n  if (len % 4 !== 0) {                                                                                                 // 545\n    throw new RangeError('Buffer size must be a multiple of 32-bits')                                                  // 546\n  }                                                                                                                    // 547\n  for (var i = 0; i < len; i += 4) {                                                                                   // 548\n    swap(this, i, i + 3)                                                                                               // 549\n    swap(this, i + 1, i + 2)                                                                                           // 550\n  }                                                                                                                    // 551\n  return this                                                                                                          // 552\n}                                                                                                                      // 553\n                                                                                                                       // 554\nBuffer.prototype.swap64 = function swap64 () {                                                                         // 555\n  var len = this.length                                                                                                // 556\n  if (len % 8 !== 0) {                                                                                                 // 557\n    throw new RangeError('Buffer size must be a multiple of 64-bits')                                                  // 558\n  }                                                                                                                    // 559\n  for (var i = 0; i < len; i += 8) {                                                                                   // 560\n    swap(this, i, i + 7)                                                                                               // 561\n    swap(this, i + 1, i + 6)                                                                                           // 562\n    swap(this, i + 2, i + 5)                                                                                           // 563\n    swap(this, i + 3, i + 4)                                                                                           // 564\n  }                                                                                                                    // 565\n  return this                                                                                                          // 566\n}                                                                                                                      // 567\n                                                                                                                       // 568\nBuffer.prototype.toString = function toString () {                                                                     // 569\n  var length = this.length | 0                                                                                         // 570\n  if (length === 0) return ''                                                                                          // 571\n  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 572\n  return slowToString.apply(this, arguments)                                                                           // 573\n}                                                                                                                      // 574\n                                                                                                                       // 575\nBuffer.prototype.equals = function equals (b) {                                                                        // 576\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 577\n  if (this === b) return true                                                                                          // 578\n  return Buffer.compare(this, b) === 0                                                                                 // 579\n}                                                                                                                      // 580\n                                                                                                                       // 581\nBuffer.prototype.inspect = function inspect () {                                                                       // 582\n  var str = ''                                                                                                         // 583\n  var max = exports.INSPECT_MAX_BYTES                                                                                  // 584\n  if (this.length > 0) {                                                                                               // 585\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 586\n    if (this.length > max) str += ' ... '                                                                              // 587\n  }                                                                                                                    // 588\n  return '<Buffer ' + str + '>'                                                                                        // 589\n}                                                                                                                      // 590\n                                                                                                                       // 591\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {                                 // 592\n  if (!Buffer.isBuffer(target)) {                                                                                      // 593\n    throw new TypeError('Argument must be a Buffer')                                                                   // 594\n  }                                                                                                                    // 595\n                                                                                                                       // 596\n  if (start === undefined) {                                                                                           // 597\n    start = 0                                                                                                          // 598\n  }                                                                                                                    // 599\n  if (end === undefined) {                                                                                             // 600\n    end = target ? target.length : 0                                                                                   // 601\n  }                                                                                                                    // 602\n  if (thisStart === undefined) {                                                                                       // 603\n    thisStart = 0                                                                                                      // 604\n  }                                                                                                                    // 605\n  if (thisEnd === undefined) {                                                                                         // 606\n    thisEnd = this.length                                                                                              // 607\n  }                                                                                                                    // 608\n                                                                                                                       // 609\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {                                    // 610\n    throw new RangeError('out of range index')                                                                         // 611\n  }                                                                                                                    // 612\n                                                                                                                       // 613\n  if (thisStart >= thisEnd && start >= end) {                                                                          // 614\n    return 0                                                                                                           // 615\n  }                                                                                                                    // 616\n  if (thisStart >= thisEnd) {                                                                                          // 617\n    return -1                                                                                                          // 618\n  }                                                                                                                    // 619\n  if (start >= end) {                                                                                                  // 620\n    return 1                                                                                                           // 621\n  }                                                                                                                    // 622\n                                                                                                                       // 623\n  start >>>= 0                                                                                                         // 624\n  end >>>= 0                                                                                                           // 625\n  thisStart >>>= 0                                                                                                     // 626\n  thisEnd >>>= 0                                                                                                       // 627\n                                                                                                                       // 628\n  if (this === target) return 0                                                                                        // 629\n                                                                                                                       // 630\n  var x = thisEnd - thisStart                                                                                          // 631\n  var y = end - start                                                                                                  // 632\n  var len = Math.min(x, y)                                                                                             // 633\n                                                                                                                       // 634\n  var thisCopy = this.slice(thisStart, thisEnd)                                                                        // 635\n  var targetCopy = target.slice(start, end)                                                                            // 636\n                                                                                                                       // 637\n  for (var i = 0; i < len; ++i) {                                                                                      // 638\n    if (thisCopy[i] !== targetCopy[i]) {                                                                               // 639\n      x = thisCopy[i]                                                                                                  // 640\n      y = targetCopy[i]                                                                                                // 641\n      break                                                                                                            // 642\n    }                                                                                                                  // 643\n  }                                                                                                                    // 644\n                                                                                                                       // 645\n  if (x < y) return -1                                                                                                 // 646\n  if (y < x) return 1                                                                                                  // 647\n  return 0                                                                                                             // 648\n}                                                                                                                      // 649\n                                                                                                                       // 650\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,                                        // 651\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.                                                   // 652\n//                                                                                                                     // 653\n// Arguments:                                                                                                          // 654\n// - buffer - a Buffer to search                                                                                       // 655\n// - val - a string, Buffer, or number                                                                                 // 656\n// - byteOffset - an index into `buffer`; will be clamped to an int32                                                  // 657\n// - encoding - an optional encoding, relevant is val is a string                                                      // 658\n// - dir - true for indexOf, false for lastIndexOf                                                                     // 659\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {                                               // 660\n  // Empty buffer means no match                                                                                       // 661\n  if (buffer.length === 0) return -1                                                                                   // 662\n                                                                                                                       // 663\n  // Normalize byteOffset                                                                                              // 664\n  if (typeof byteOffset === 'string') {                                                                                // 665\n    encoding = byteOffset                                                                                              // 666\n    byteOffset = 0                                                                                                     // 667\n  } else if (byteOffset > 0x7fffffff) {                                                                                // 668\n    byteOffset = 0x7fffffff                                                                                            // 669\n  } else if (byteOffset < -0x80000000) {                                                                               // 670\n    byteOffset = -0x80000000                                                                                           // 671\n  }                                                                                                                    // 672\n  byteOffset = +byteOffset  // Coerce to Number.                                                                       // 673\n  if (isNaN(byteOffset)) {                                                                                             // 674\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer                                       // 675\n    byteOffset = dir ? 0 : (buffer.length - 1)                                                                         // 676\n  }                                                                                                                    // 677\n                                                                                                                       // 678\n  // Normalize byteOffset: negative offsets start from the end of the buffer                                           // 679\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset                                                          // 680\n  if (byteOffset >= buffer.length) {                                                                                   // 681\n    if (dir) return -1                                                                                                 // 682\n    else byteOffset = buffer.length - 1                                                                                // 683\n  } else if (byteOffset < 0) {                                                                                         // 684\n    if (dir) byteOffset = 0                                                                                            // 685\n    else return -1                                                                                                     // 686\n  }                                                                                                                    // 687\n                                                                                                                       // 688\n  // Normalize val                                                                                                     // 689\n  if (typeof val === 'string') {                                                                                       // 690\n    val = Buffer.from(val, encoding)                                                                                   // 691\n  }                                                                                                                    // 692\n                                                                                                                       // 693\n  // Finally, search either indexOf (if dir is true) or lastIndexOf                                                    // 694\n  if (Buffer.isBuffer(val)) {                                                                                          // 695\n    // Special case: looking for empty string/buffer always fails                                                      // 696\n    if (val.length === 0) {                                                                                            // 697\n      return -1                                                                                                        // 698\n    }                                                                                                                  // 699\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)                                                        // 700\n  } else if (typeof val === 'number') {                                                                                // 701\n    val = val & 0xFF // Search for a byte value [0-255]                                                                // 702\n    if (Buffer.TYPED_ARRAY_SUPPORT &&                                                                                  // 703\n        typeof Uint8Array.prototype.indexOf === 'function') {                                                          // 704\n      if (dir) {                                                                                                       // 705\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)                                              // 706\n      } else {                                                                                                         // 707\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)                                          // 708\n      }                                                                                                                // 709\n    }                                                                                                                  // 710\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)                                                    // 711\n  }                                                                                                                    // 712\n                                                                                                                       // 713\n  throw new TypeError('val must be string, number or Buffer')                                                          // 714\n}                                                                                                                      // 715\n                                                                                                                       // 716\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {                                                          // 717\n  var indexSize = 1                                                                                                    // 718\n  var arrLength = arr.length                                                                                           // 719\n  var valLength = val.length                                                                                           // 720\n                                                                                                                       // 721\n  if (encoding !== undefined) {                                                                                        // 722\n    encoding = String(encoding).toLowerCase()                                                                          // 723\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||                                                                 // 724\n        encoding === 'utf16le' || encoding === 'utf-16le') {                                                           // 725\n      if (arr.length < 2 || val.length < 2) {                                                                          // 726\n        return -1                                                                                                      // 727\n      }                                                                                                                // 728\n      indexSize = 2                                                                                                    // 729\n      arrLength /= 2                                                                                                   // 730\n      valLength /= 2                                                                                                   // 731\n      byteOffset /= 2                                                                                                  // 732\n    }                                                                                                                  // 733\n  }                                                                                                                    // 734\n                                                                                                                       // 735\n  function read (buf, i) {                                                                                             // 736\n    if (indexSize === 1) {                                                                                             // 737\n      return buf[i]                                                                                                    // 738\n    } else {                                                                                                           // 739\n      return buf.readUInt16BE(i * indexSize)                                                                           // 740\n    }                                                                                                                  // 741\n  }                                                                                                                    // 742\n                                                                                                                       // 743\n  var i                                                                                                                // 744\n  if (dir) {                                                                                                           // 745\n    var foundIndex = -1                                                                                                // 746\n    for (i = byteOffset; i < arrLength; i++) {                                                                         // 747\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {                                        // 748\n        if (foundIndex === -1) foundIndex = i                                                                          // 749\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize                                            // 750\n      } else {                                                                                                         // 751\n        if (foundIndex !== -1) i -= i - foundIndex                                                                     // 752\n        foundIndex = -1                                                                                                // 753\n      }                                                                                                                // 754\n    }                                                                                                                  // 755\n  } else {                                                                                                             // 756\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength                                         // 757\n    for (i = byteOffset; i >= 0; i--) {                                                                                // 758\n      var found = true                                                                                                 // 759\n      for (var j = 0; j < valLength; j++) {                                                                            // 760\n        if (read(arr, i + j) !== read(val, j)) {                                                                       // 761\n          found = false                                                                                                // 762\n          break                                                                                                        // 763\n        }                                                                                                              // 764\n      }                                                                                                                // 765\n      if (found) return i                                                                                              // 766\n    }                                                                                                                  // 767\n  }                                                                                                                    // 768\n                                                                                                                       // 769\n  return -1                                                                                                            // 770\n}                                                                                                                      // 771\n                                                                                                                       // 772\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {                                            // 773\n  return this.indexOf(val, byteOffset, encoding) !== -1                                                                // 774\n}                                                                                                                      // 775\n                                                                                                                       // 776\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {                                              // 777\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)                                                   // 778\n}                                                                                                                      // 779\n                                                                                                                       // 780\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {                                      // 781\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)                                                  // 782\n}                                                                                                                      // 783\n                                                                                                                       // 784\nfunction hexWrite (buf, string, offset, length) {                                                                      // 785\n  offset = Number(offset) || 0                                                                                         // 786\n  var remaining = buf.length - offset                                                                                  // 787\n  if (!length) {                                                                                                       // 788\n    length = remaining                                                                                                 // 789\n  } else {                                                                                                             // 790\n    length = Number(length)                                                                                            // 791\n    if (length > remaining) {                                                                                          // 792\n      length = remaining                                                                                               // 793\n    }                                                                                                                  // 794\n  }                                                                                                                    // 795\n                                                                                                                       // 796\n  // must be an even number of digits                                                                                  // 797\n  var strLen = string.length                                                                                           // 798\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')                                                      // 799\n                                                                                                                       // 800\n  if (length > strLen / 2) {                                                                                           // 801\n    length = strLen / 2                                                                                                // 802\n  }                                                                                                                    // 803\n  for (var i = 0; i < length; ++i) {                                                                                   // 804\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 805\n    if (isNaN(parsed)) return i                                                                                        // 806\n    buf[offset + i] = parsed                                                                                           // 807\n  }                                                                                                                    // 808\n  return i                                                                                                             // 809\n}                                                                                                                      // 810\n                                                                                                                       // 811\nfunction utf8Write (buf, string, offset, length) {                                                                     // 812\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 813\n}                                                                                                                      // 814\n                                                                                                                       // 815\nfunction asciiWrite (buf, string, offset, length) {                                                                    // 816\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 817\n}                                                                                                                      // 818\n                                                                                                                       // 819\nfunction latin1Write (buf, string, offset, length) {                                                                   // 820\n  return asciiWrite(buf, string, offset, length)                                                                       // 821\n}                                                                                                                      // 822\n                                                                                                                       // 823\nfunction base64Write (buf, string, offset, length) {                                                                   // 824\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 825\n}                                                                                                                      // 826\n                                                                                                                       // 827\nfunction ucs2Write (buf, string, offset, length) {                                                                     // 828\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 829\n}                                                                                                                      // 830\n                                                                                                                       // 831\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                           // 832\n  // Buffer#write(string)                                                                                              // 833\n  if (offset === undefined) {                                                                                          // 834\n    encoding = 'utf8'                                                                                                  // 835\n    length = this.length                                                                                               // 836\n    offset = 0                                                                                                         // 837\n  // Buffer#write(string, encoding)                                                                                    // 838\n  } else if (length === undefined && typeof offset === 'string') {                                                     // 839\n    encoding = offset                                                                                                  // 840\n    length = this.length                                                                                               // 841\n    offset = 0                                                                                                         // 842\n  // Buffer#write(string, offset[, length][, encoding])                                                                // 843\n  } else if (isFinite(offset)) {                                                                                       // 844\n    offset = offset | 0                                                                                                // 845\n    if (isFinite(length)) {                                                                                            // 846\n      length = length | 0                                                                                              // 847\n      if (encoding === undefined) encoding = 'utf8'                                                                    // 848\n    } else {                                                                                                           // 849\n      encoding = length                                                                                                // 850\n      length = undefined                                                                                               // 851\n    }                                                                                                                  // 852\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 853\n  } else {                                                                                                             // 854\n    throw new Error(                                                                                                   // 855\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'                                        // 856\n    )                                                                                                                  // 857\n  }                                                                                                                    // 858\n                                                                                                                       // 859\n  var remaining = this.length - offset                                                                                 // 860\n  if (length === undefined || length > remaining) length = remaining                                                   // 861\n                                                                                                                       // 862\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 863\n    throw new RangeError('Attempt to write outside buffer bounds')                                                     // 864\n  }                                                                                                                    // 865\n                                                                                                                       // 866\n  if (!encoding) encoding = 'utf8'                                                                                     // 867\n                                                                                                                       // 868\n  var loweredCase = false                                                                                              // 869\n  for (;;) {                                                                                                           // 870\n    switch (encoding) {                                                                                                // 871\n      case 'hex':                                                                                                      // 872\n        return hexWrite(this, string, offset, length)                                                                  // 873\n                                                                                                                       // 874\n      case 'utf8':                                                                                                     // 875\n      case 'utf-8':                                                                                                    // 876\n        return utf8Write(this, string, offset, length)                                                                 // 877\n                                                                                                                       // 878\n      case 'ascii':                                                                                                    // 879\n        return asciiWrite(this, string, offset, length)                                                                // 880\n                                                                                                                       // 881\n      case 'latin1':                                                                                                   // 882\n      case 'binary':                                                                                                   // 883\n        return latin1Write(this, string, offset, length)                                                               // 884\n                                                                                                                       // 885\n      case 'base64':                                                                                                   // 886\n        // Warning: maxLength not taken into account in base64Write                                                    // 887\n        return base64Write(this, string, offset, length)                                                               // 888\n                                                                                                                       // 889\n      case 'ucs2':                                                                                                     // 890\n      case 'ucs-2':                                                                                                    // 891\n      case 'utf16le':                                                                                                  // 892\n      case 'utf-16le':                                                                                                 // 893\n        return ucs2Write(this, string, offset, length)                                                                 // 894\n                                                                                                                       // 895\n      default:                                                                                                         // 896\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 897\n        encoding = ('' + encoding).toLowerCase()                                                                       // 898\n        loweredCase = true                                                                                             // 899\n    }                                                                                                                  // 900\n  }                                                                                                                    // 901\n}                                                                                                                      // 902\n                                                                                                                       // 903\nBuffer.prototype.toJSON = function toJSON () {                                                                         // 904\n  return {                                                                                                             // 905\n    type: 'Buffer',                                                                                                    // 906\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 907\n  }                                                                                                                    // 908\n}                                                                                                                      // 909\n                                                                                                                       // 910\nfunction base64Slice (buf, start, end) {                                                                               // 911\n  if (start === 0 && end === buf.length) {                                                                             // 912\n    return base64.fromByteArray(buf)                                                                                   // 913\n  } else {                                                                                                             // 914\n    return base64.fromByteArray(buf.slice(start, end))                                                                 // 915\n  }                                                                                                                    // 916\n}                                                                                                                      // 917\n                                                                                                                       // 918\nfunction utf8Slice (buf, start, end) {                                                                                 // 919\n  end = Math.min(buf.length, end)                                                                                      // 920\n  var res = []                                                                                                         // 921\n                                                                                                                       // 922\n  var i = start                                                                                                        // 923\n  while (i < end) {                                                                                                    // 924\n    var firstByte = buf[i]                                                                                             // 925\n    var codePoint = null                                                                                               // 926\n    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 927\n      : (firstByte > 0xDF) ? 3                                                                                         // 928\n      : (firstByte > 0xBF) ? 2                                                                                         // 929\n      : 1                                                                                                              // 930\n                                                                                                                       // 931\n    if (i + bytesPerSequence <= end) {                                                                                 // 932\n      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 933\n                                                                                                                       // 934\n      switch (bytesPerSequence) {                                                                                      // 935\n        case 1:                                                                                                        // 936\n          if (firstByte < 0x80) {                                                                                      // 937\n            codePoint = firstByte                                                                                      // 938\n          }                                                                                                            // 939\n          break                                                                                                        // 940\n        case 2:                                                                                                        // 941\n          secondByte = buf[i + 1]                                                                                      // 942\n          if ((secondByte & 0xC0) === 0x80) {                                                                          // 943\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 944\n            if (tempCodePoint > 0x7F) {                                                                                // 945\n              codePoint = tempCodePoint                                                                                // 946\n            }                                                                                                          // 947\n          }                                                                                                            // 948\n          break                                                                                                        // 949\n        case 3:                                                                                                        // 950\n          secondByte = buf[i + 1]                                                                                      // 951\n          thirdByte = buf[i + 2]                                                                                       // 952\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 953\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 954\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 955\n              codePoint = tempCodePoint                                                                                // 956\n            }                                                                                                          // 957\n          }                                                                                                            // 958\n          break                                                                                                        // 959\n        case 4:                                                                                                        // 960\n          secondByte = buf[i + 1]                                                                                      // 961\n          thirdByte = buf[i + 2]                                                                                       // 962\n          fourthByte = buf[i + 3]                                                                                      // 963\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 964\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 966\n              codePoint = tempCodePoint                                                                                // 967\n            }                                                                                                          // 968\n          }                                                                                                            // 969\n      }                                                                                                                // 970\n    }                                                                                                                  // 971\n                                                                                                                       // 972\n    if (codePoint === null) {                                                                                          // 973\n      // we did not generate a valid codePoint so insert a                                                             // 974\n      // replacement char (U+FFFD) and advance only 1 byte                                                             // 975\n      codePoint = 0xFFFD                                                                                               // 976\n      bytesPerSequence = 1                                                                                             // 977\n    } else if (codePoint > 0xFFFF) {                                                                                   // 978\n      // encode to utf16 (surrogate pair dance)                                                                        // 979\n      codePoint -= 0x10000                                                                                             // 980\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 981\n      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 982\n    }                                                                                                                  // 983\n                                                                                                                       // 984\n    res.push(codePoint)                                                                                                // 985\n    i += bytesPerSequence                                                                                              // 986\n  }                                                                                                                    // 987\n                                                                                                                       // 988\n  return decodeCodePointsArray(res)                                                                                    // 989\n}                                                                                                                      // 990\n                                                                                                                       // 991\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 992\n// the lowest limit is Chrome, with 0x10000 args.                                                                      // 993\n// We go 1 magnitude less, for safety                                                                                  // 994\nvar MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 995\n                                                                                                                       // 996\nfunction decodeCodePointsArray (codePoints) {                                                                          // 997\n  var len = codePoints.length                                                                                          // 998\n  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 999\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 1000\n  }                                                                                                                    // 1001\n                                                                                                                       // 1002\n  // Decode in chunks to avoid \"call stack size exceeded\".                                                             // 1003\n  var res = ''                                                                                                         // 1004\n  var i = 0                                                                                                            // 1005\n  while (i < len) {                                                                                                    // 1006\n    res += String.fromCharCode.apply(                                                                                  // 1007\n      String,                                                                                                          // 1008\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 1009\n    )                                                                                                                  // 1010\n  }                                                                                                                    // 1011\n  return res                                                                                                           // 1012\n}                                                                                                                      // 1013\n                                                                                                                       // 1014\nfunction asciiSlice (buf, start, end) {                                                                                // 1015\n  var ret = ''                                                                                                         // 1016\n  end = Math.min(buf.length, end)                                                                                      // 1017\n                                                                                                                       // 1018\n  for (var i = start; i < end; ++i) {                                                                                  // 1019\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 1020\n  }                                                                                                                    // 1021\n  return ret                                                                                                           // 1022\n}                                                                                                                      // 1023\n                                                                                                                       // 1024\nfunction latin1Slice (buf, start, end) {                                                                               // 1025\n  var ret = ''                                                                                                         // 1026\n  end = Math.min(buf.length, end)                                                                                      // 1027\n                                                                                                                       // 1028\n  for (var i = start; i < end; ++i) {                                                                                  // 1029\n    ret += String.fromCharCode(buf[i])                                                                                 // 1030\n  }                                                                                                                    // 1031\n  return ret                                                                                                           // 1032\n}                                                                                                                      // 1033\n                                                                                                                       // 1034\nfunction hexSlice (buf, start, end) {                                                                                  // 1035\n  var len = buf.length                                                                                                 // 1036\n                                                                                                                       // 1037\n  if (!start || start < 0) start = 0                                                                                   // 1038\n  if (!end || end < 0 || end > len) end = len                                                                          // 1039\n                                                                                                                       // 1040\n  var out = ''                                                                                                         // 1041\n  for (var i = start; i < end; ++i) {                                                                                  // 1042\n    out += toHex(buf[i])                                                                                               // 1043\n  }                                                                                                                    // 1044\n  return out                                                                                                           // 1045\n}                                                                                                                      // 1046\n                                                                                                                       // 1047\nfunction utf16leSlice (buf, start, end) {                                                                              // 1048\n  var bytes = buf.slice(start, end)                                                                                    // 1049\n  var res = ''                                                                                                         // 1050\n  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 1051\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 1052\n  }                                                                                                                    // 1053\n  return res                                                                                                           // 1054\n}                                                                                                                      // 1055\n                                                                                                                       // 1056\nBuffer.prototype.slice = function slice (start, end) {                                                                 // 1057\n  var len = this.length                                                                                                // 1058\n  start = ~~start                                                                                                      // 1059\n  end = end === undefined ? len : ~~end                                                                                // 1060\n                                                                                                                       // 1061\n  if (start < 0) {                                                                                                     // 1062\n    start += len                                                                                                       // 1063\n    if (start < 0) start = 0                                                                                           // 1064\n  } else if (start > len) {                                                                                            // 1065\n    start = len                                                                                                        // 1066\n  }                                                                                                                    // 1067\n                                                                                                                       // 1068\n  if (end < 0) {                                                                                                       // 1069\n    end += len                                                                                                         // 1070\n    if (end < 0) end = 0                                                                                               // 1071\n  } else if (end > len) {                                                                                              // 1072\n    end = len                                                                                                          // 1073\n  }                                                                                                                    // 1074\n                                                                                                                       // 1075\n  if (end < start) end = start                                                                                         // 1076\n                                                                                                                       // 1077\n  var newBuf                                                                                                           // 1078\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1079\n    newBuf = this.subarray(start, end)                                                                                 // 1080\n    newBuf.__proto__ = Buffer.prototype                                                                                // 1081\n  } else {                                                                                                             // 1082\n    var sliceLen = end - start                                                                                         // 1083\n    newBuf = new Buffer(sliceLen, undefined)                                                                           // 1084\n    for (var i = 0; i < sliceLen; ++i) {                                                                               // 1085\n      newBuf[i] = this[i + start]                                                                                      // 1086\n    }                                                                                                                  // 1087\n  }                                                                                                                    // 1088\n                                                                                                                       // 1089\n  return newBuf                                                                                                        // 1090\n}                                                                                                                      // 1091\n                                                                                                                       // 1092\n/*                                                                                                                     // 1093\n * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 1094\n */                                                                                                                    // 1095\nfunction checkOffset (offset, ext, length) {                                                                           // 1096\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 1097\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 1098\n}                                                                                                                      // 1099\n                                                                                                                       // 1100\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 1101\n  offset = offset | 0                                                                                                  // 1102\n  byteLength = byteLength | 0                                                                                          // 1103\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1104\n                                                                                                                       // 1105\n  var val = this[offset]                                                                                               // 1106\n  var mul = 1                                                                                                          // 1107\n  var i = 0                                                                                                            // 1108\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1109\n    val += this[offset + i] * mul                                                                                      // 1110\n  }                                                                                                                    // 1111\n                                                                                                                       // 1112\n  return val                                                                                                           // 1113\n}                                                                                                                      // 1114\n                                                                                                                       // 1115\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 1116\n  offset = offset | 0                                                                                                  // 1117\n  byteLength = byteLength | 0                                                                                          // 1118\n  if (!noAssert) {                                                                                                     // 1119\n    checkOffset(offset, byteLength, this.length)                                                                       // 1120\n  }                                                                                                                    // 1121\n                                                                                                                       // 1122\n  var val = this[offset + --byteLength]                                                                                // 1123\n  var mul = 1                                                                                                          // 1124\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 1125\n    val += this[offset + --byteLength] * mul                                                                           // 1126\n  }                                                                                                                    // 1127\n                                                                                                                       // 1128\n  return val                                                                                                           // 1129\n}                                                                                                                      // 1130\n                                                                                                                       // 1131\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 1132\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1133\n  return this[offset]                                                                                                  // 1134\n}                                                                                                                      // 1135\n                                                                                                                       // 1136\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 1137\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1138\n  return this[offset] | (this[offset + 1] << 8)                                                                        // 1139\n}                                                                                                                      // 1140\n                                                                                                                       // 1141\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 1142\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1143\n  return (this[offset] << 8) | this[offset + 1]                                                                        // 1144\n}                                                                                                                      // 1145\n                                                                                                                       // 1146\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 1147\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1148\n                                                                                                                       // 1149\n  return ((this[offset]) |                                                                                             // 1150\n      (this[offset + 1] << 8) |                                                                                        // 1151\n      (this[offset + 2] << 16)) +                                                                                      // 1152\n      (this[offset + 3] * 0x1000000)                                                                                   // 1153\n}                                                                                                                      // 1154\n                                                                                                                       // 1155\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 1156\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1157\n                                                                                                                       // 1158\n  return (this[offset] * 0x1000000) +                                                                                  // 1159\n    ((this[offset + 1] << 16) |                                                                                        // 1160\n    (this[offset + 2] << 8) |                                                                                          // 1161\n    this[offset + 3])                                                                                                  // 1162\n}                                                                                                                      // 1163\n                                                                                                                       // 1164\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 1165\n  offset = offset | 0                                                                                                  // 1166\n  byteLength = byteLength | 0                                                                                          // 1167\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1168\n                                                                                                                       // 1169\n  var val = this[offset]                                                                                               // 1170\n  var mul = 1                                                                                                          // 1171\n  var i = 0                                                                                                            // 1172\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1173\n    val += this[offset + i] * mul                                                                                      // 1174\n  }                                                                                                                    // 1175\n  mul *= 0x80                                                                                                          // 1176\n                                                                                                                       // 1177\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1178\n                                                                                                                       // 1179\n  return val                                                                                                           // 1180\n}                                                                                                                      // 1181\n                                                                                                                       // 1182\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 1183\n  offset = offset | 0                                                                                                  // 1184\n  byteLength = byteLength | 0                                                                                          // 1185\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1186\n                                                                                                                       // 1187\n  var i = byteLength                                                                                                   // 1188\n  var mul = 1                                                                                                          // 1189\n  var val = this[offset + --i]                                                                                         // 1190\n  while (i > 0 && (mul *= 0x100)) {                                                                                    // 1191\n    val += this[offset + --i] * mul                                                                                    // 1192\n  }                                                                                                                    // 1193\n  mul *= 0x80                                                                                                          // 1194\n                                                                                                                       // 1195\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1196\n                                                                                                                       // 1197\n  return val                                                                                                           // 1198\n}                                                                                                                      // 1199\n                                                                                                                       // 1200\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 1201\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1202\n  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 1203\n  return ((0xff - this[offset] + 1) * -1)                                                                              // 1204\n}                                                                                                                      // 1205\n                                                                                                                       // 1206\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 1207\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1208\n  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 1209\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1210\n}                                                                                                                      // 1211\n                                                                                                                       // 1212\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 1213\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1214\n  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 1215\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1216\n}                                                                                                                      // 1217\n                                                                                                                       // 1218\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 1219\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1220\n                                                                                                                       // 1221\n  return (this[offset]) |                                                                                              // 1222\n    (this[offset + 1] << 8) |                                                                                          // 1223\n    (this[offset + 2] << 16) |                                                                                         // 1224\n    (this[offset + 3] << 24)                                                                                           // 1225\n}                                                                                                                      // 1226\n                                                                                                                       // 1227\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 1228\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1229\n                                                                                                                       // 1230\n  return (this[offset] << 24) |                                                                                        // 1231\n    (this[offset + 1] << 16) |                                                                                         // 1232\n    (this[offset + 2] << 8) |                                                                                          // 1233\n    (this[offset + 3])                                                                                                 // 1234\n}                                                                                                                      // 1235\n                                                                                                                       // 1236\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 1237\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1238\n  return ieee754.read(this, offset, true, 23, 4)                                                                       // 1239\n}                                                                                                                      // 1240\n                                                                                                                       // 1241\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 1242\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1243\n  return ieee754.read(this, offset, false, 23, 4)                                                                      // 1244\n}                                                                                                                      // 1245\n                                                                                                                       // 1246\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 1247\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1248\n  return ieee754.read(this, offset, true, 52, 8)                                                                       // 1249\n}                                                                                                                      // 1250\n                                                                                                                       // 1251\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 1252\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1253\n  return ieee754.read(this, offset, false, 52, 8)                                                                      // 1254\n}                                                                                                                      // 1255\n                                                                                                                       // 1256\nfunction checkInt (buf, value, offset, ext, max, min) {                                                                // 1257\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')                        // 1258\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')                            // 1259\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1260\n}                                                                                                                      // 1261\n                                                                                                                       // 1262\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 1263\n  value = +value                                                                                                       // 1264\n  offset = offset | 0                                                                                                  // 1265\n  byteLength = byteLength | 0                                                                                          // 1266\n  if (!noAssert) {                                                                                                     // 1267\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1268\n    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1269\n  }                                                                                                                    // 1270\n                                                                                                                       // 1271\n  var mul = 1                                                                                                          // 1272\n  var i = 0                                                                                                            // 1273\n  this[offset] = value & 0xFF                                                                                          // 1274\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1275\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 1276\n  }                                                                                                                    // 1277\n                                                                                                                       // 1278\n  return offset + byteLength                                                                                           // 1279\n}                                                                                                                      // 1280\n                                                                                                                       // 1281\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 1282\n  value = +value                                                                                                       // 1283\n  offset = offset | 0                                                                                                  // 1284\n  byteLength = byteLength | 0                                                                                          // 1285\n  if (!noAssert) {                                                                                                     // 1286\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1287\n    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1288\n  }                                                                                                                    // 1289\n                                                                                                                       // 1290\n  var i = byteLength - 1                                                                                               // 1291\n  var mul = 1                                                                                                          // 1292\n  this[offset + i] = value & 0xFF                                                                                      // 1293\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1294\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 1295\n  }                                                                                                                    // 1296\n                                                                                                                       // 1297\n  return offset + byteLength                                                                                           // 1298\n}                                                                                                                      // 1299\n                                                                                                                       // 1300\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 1301\n  value = +value                                                                                                       // 1302\n  offset = offset | 0                                                                                                  // 1303\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 1304\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1305\n  this[offset] = (value & 0xff)                                                                                        // 1306\n  return offset + 1                                                                                                    // 1307\n}                                                                                                                      // 1308\n                                                                                                                       // 1309\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 1310\n  if (value < 0) value = 0xffff + value + 1                                                                            // 1311\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {                                                  // 1312\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 1313\n      (littleEndian ? i : 1 - i) * 8                                                                                   // 1314\n  }                                                                                                                    // 1315\n}                                                                                                                      // 1316\n                                                                                                                       // 1317\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 1318\n  value = +value                                                                                                       // 1319\n  offset = offset | 0                                                                                                  // 1320\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1321\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1322\n    this[offset] = (value & 0xff)                                                                                      // 1323\n    this[offset + 1] = (value >>> 8)                                                                                   // 1324\n  } else {                                                                                                             // 1325\n    objectWriteUInt16(this, value, offset, true)                                                                       // 1326\n  }                                                                                                                    // 1327\n  return offset + 2                                                                                                    // 1328\n}                                                                                                                      // 1329\n                                                                                                                       // 1330\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 1331\n  value = +value                                                                                                       // 1332\n  offset = offset | 0                                                                                                  // 1333\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1334\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1335\n    this[offset] = (value >>> 8)                                                                                       // 1336\n    this[offset + 1] = (value & 0xff)                                                                                  // 1337\n  } else {                                                                                                             // 1338\n    objectWriteUInt16(this, value, offset, false)                                                                      // 1339\n  }                                                                                                                    // 1340\n  return offset + 2                                                                                                    // 1341\n}                                                                                                                      // 1342\n                                                                                                                       // 1343\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 1344\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1345\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {                                                  // 1346\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 1347\n  }                                                                                                                    // 1348\n}                                                                                                                      // 1349\n                                                                                                                       // 1350\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 1351\n  value = +value                                                                                                       // 1352\n  offset = offset | 0                                                                                                  // 1353\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1354\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1355\n    this[offset + 3] = (value >>> 24)                                                                                  // 1356\n    this[offset + 2] = (value >>> 16)                                                                                  // 1357\n    this[offset + 1] = (value >>> 8)                                                                                   // 1358\n    this[offset] = (value & 0xff)                                                                                      // 1359\n  } else {                                                                                                             // 1360\n    objectWriteUInt32(this, value, offset, true)                                                                       // 1361\n  }                                                                                                                    // 1362\n  return offset + 4                                                                                                    // 1363\n}                                                                                                                      // 1364\n                                                                                                                       // 1365\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 1366\n  value = +value                                                                                                       // 1367\n  offset = offset | 0                                                                                                  // 1368\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1369\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1370\n    this[offset] = (value >>> 24)                                                                                      // 1371\n    this[offset + 1] = (value >>> 16)                                                                                  // 1372\n    this[offset + 2] = (value >>> 8)                                                                                   // 1373\n    this[offset + 3] = (value & 0xff)                                                                                  // 1374\n  } else {                                                                                                             // 1375\n    objectWriteUInt32(this, value, offset, false)                                                                      // 1376\n  }                                                                                                                    // 1377\n  return offset + 4                                                                                                    // 1378\n}                                                                                                                      // 1379\n                                                                                                                       // 1380\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 1381\n  value = +value                                                                                                       // 1382\n  offset = offset | 0                                                                                                  // 1383\n  if (!noAssert) {                                                                                                     // 1384\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1385\n                                                                                                                       // 1386\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1387\n  }                                                                                                                    // 1388\n                                                                                                                       // 1389\n  var i = 0                                                                                                            // 1390\n  var mul = 1                                                                                                          // 1391\n  var sub = 0                                                                                                          // 1392\n  this[offset] = value & 0xFF                                                                                          // 1393\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1394\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {                                                        // 1395\n      sub = 1                                                                                                          // 1396\n    }                                                                                                                  // 1397\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1398\n  }                                                                                                                    // 1399\n                                                                                                                       // 1400\n  return offset + byteLength                                                                                           // 1401\n}                                                                                                                      // 1402\n                                                                                                                       // 1403\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 1404\n  value = +value                                                                                                       // 1405\n  offset = offset | 0                                                                                                  // 1406\n  if (!noAssert) {                                                                                                     // 1407\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1408\n                                                                                                                       // 1409\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1410\n  }                                                                                                                    // 1411\n                                                                                                                       // 1412\n  var i = byteLength - 1                                                                                               // 1413\n  var mul = 1                                                                                                          // 1414\n  var sub = 0                                                                                                          // 1415\n  this[offset + i] = value & 0xFF                                                                                      // 1416\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1417\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {                                                        // 1418\n      sub = 1                                                                                                          // 1419\n    }                                                                                                                  // 1420\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1421\n  }                                                                                                                    // 1422\n                                                                                                                       // 1423\n  return offset + byteLength                                                                                           // 1424\n}                                                                                                                      // 1425\n                                                                                                                       // 1426\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 1427\n  value = +value                                                                                                       // 1428\n  offset = offset | 0                                                                                                  // 1429\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 1430\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1431\n  if (value < 0) value = 0xff + value + 1                                                                              // 1432\n  this[offset] = (value & 0xff)                                                                                        // 1433\n  return offset + 1                                                                                                    // 1434\n}                                                                                                                      // 1435\n                                                                                                                       // 1436\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 1437\n  value = +value                                                                                                       // 1438\n  offset = offset | 0                                                                                                  // 1439\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1440\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1441\n    this[offset] = (value & 0xff)                                                                                      // 1442\n    this[offset + 1] = (value >>> 8)                                                                                   // 1443\n  } else {                                                                                                             // 1444\n    objectWriteUInt16(this, value, offset, true)                                                                       // 1445\n  }                                                                                                                    // 1446\n  return offset + 2                                                                                                    // 1447\n}                                                                                                                      // 1448\n                                                                                                                       // 1449\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 1450\n  value = +value                                                                                                       // 1451\n  offset = offset | 0                                                                                                  // 1452\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1453\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1454\n    this[offset] = (value >>> 8)                                                                                       // 1455\n    this[offset + 1] = (value & 0xff)                                                                                  // 1456\n  } else {                                                                                                             // 1457\n    objectWriteUInt16(this, value, offset, false)                                                                      // 1458\n  }                                                                                                                    // 1459\n  return offset + 2                                                                                                    // 1460\n}                                                                                                                      // 1461\n                                                                                                                       // 1462\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 1463\n  value = +value                                                                                                       // 1464\n  offset = offset | 0                                                                                                  // 1465\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1466\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1467\n    this[offset] = (value & 0xff)                                                                                      // 1468\n    this[offset + 1] = (value >>> 8)                                                                                   // 1469\n    this[offset + 2] = (value >>> 16)                                                                                  // 1470\n    this[offset + 3] = (value >>> 24)                                                                                  // 1471\n  } else {                                                                                                             // 1472\n    objectWriteUInt32(this, value, offset, true)                                                                       // 1473\n  }                                                                                                                    // 1474\n  return offset + 4                                                                                                    // 1475\n}                                                                                                                      // 1476\n                                                                                                                       // 1477\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 1478\n  value = +value                                                                                                       // 1479\n  offset = offset | 0                                                                                                  // 1480\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1481\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1482\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1483\n    this[offset] = (value >>> 24)                                                                                      // 1484\n    this[offset + 1] = (value >>> 16)                                                                                  // 1485\n    this[offset + 2] = (value >>> 8)                                                                                   // 1486\n    this[offset + 3] = (value & 0xff)                                                                                  // 1487\n  } else {                                                                                                             // 1488\n    objectWriteUInt32(this, value, offset, false)                                                                      // 1489\n  }                                                                                                                    // 1490\n  return offset + 4                                                                                                    // 1491\n}                                                                                                                      // 1492\n                                                                                                                       // 1493\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 1494\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1495\n  if (offset < 0) throw new RangeError('Index out of range')                                                           // 1496\n}                                                                                                                      // 1497\n                                                                                                                       // 1498\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 1499\n  if (!noAssert) {                                                                                                     // 1500\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 1501\n  }                                                                                                                    // 1502\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 1503\n  return offset + 4                                                                                                    // 1504\n}                                                                                                                      // 1505\n                                                                                                                       // 1506\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 1507\n  return writeFloat(this, value, offset, true, noAssert)                                                               // 1508\n}                                                                                                                      // 1509\n                                                                                                                       // 1510\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 1511\n  return writeFloat(this, value, offset, false, noAssert)                                                              // 1512\n}                                                                                                                      // 1513\n                                                                                                                       // 1514\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 1515\n  if (!noAssert) {                                                                                                     // 1516\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 1517\n  }                                                                                                                    // 1518\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 1519\n  return offset + 8                                                                                                    // 1520\n}                                                                                                                      // 1521\n                                                                                                                       // 1522\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 1523\n  return writeDouble(this, value, offset, true, noAssert)                                                              // 1524\n}                                                                                                                      // 1525\n                                                                                                                       // 1526\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 1527\n  return writeDouble(this, value, offset, false, noAssert)                                                             // 1528\n}                                                                                                                      // 1529\n                                                                                                                       // 1530\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 1531\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 1532\n  if (!start) start = 0                                                                                                // 1533\n  if (!end && end !== 0) end = this.length                                                                             // 1534\n  if (targetStart >= target.length) targetStart = target.length                                                        // 1535\n  if (!targetStart) targetStart = 0                                                                                    // 1536\n  if (end > 0 && end < start) end = start                                                                              // 1537\n                                                                                                                       // 1538\n  // Copy 0 bytes; we're done                                                                                          // 1539\n  if (end === start) return 0                                                                                          // 1540\n  if (target.length === 0 || this.length === 0) return 0                                                               // 1541\n                                                                                                                       // 1542\n  // Fatal error conditions                                                                                            // 1543\n  if (targetStart < 0) {                                                                                               // 1544\n    throw new RangeError('targetStart out of bounds')                                                                  // 1545\n  }                                                                                                                    // 1546\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 1547\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 1548\n                                                                                                                       // 1549\n  // Are we oob?                                                                                                       // 1550\n  if (end > this.length) end = this.length                                                                             // 1551\n  if (target.length - targetStart < end - start) {                                                                     // 1552\n    end = target.length - targetStart + start                                                                          // 1553\n  }                                                                                                                    // 1554\n                                                                                                                       // 1555\n  var len = end - start                                                                                                // 1556\n  var i                                                                                                                // 1557\n                                                                                                                       // 1558\n  if (this === target && start < targetStart && targetStart < end) {                                                   // 1559\n    // descending copy from end                                                                                        // 1560\n    for (i = len - 1; i >= 0; --i) {                                                                                   // 1561\n      target[i + targetStart] = this[i + start]                                                                        // 1562\n    }                                                                                                                  // 1563\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 1564\n    // ascending copy from start                                                                                       // 1565\n    for (i = 0; i < len; ++i) {                                                                                        // 1566\n      target[i + targetStart] = this[i + start]                                                                        // 1567\n    }                                                                                                                  // 1568\n  } else {                                                                                                             // 1569\n    Uint8Array.prototype.set.call(                                                                                     // 1570\n      target,                                                                                                          // 1571\n      this.subarray(start, start + len),                                                                               // 1572\n      targetStart                                                                                                      // 1573\n    )                                                                                                                  // 1574\n  }                                                                                                                    // 1575\n                                                                                                                       // 1576\n  return len                                                                                                           // 1577\n}                                                                                                                      // 1578\n                                                                                                                       // 1579\n// Usage:                                                                                                              // 1580\n//    buffer.fill(number[, offset[, end]])                                                                             // 1581\n//    buffer.fill(buffer[, offset[, end]])                                                                             // 1582\n//    buffer.fill(string[, offset[, end]][, encoding])                                                                 // 1583\nBuffer.prototype.fill = function fill (val, start, end, encoding) {                                                    // 1584\n  // Handle string cases:                                                                                              // 1585\n  if (typeof val === 'string') {                                                                                       // 1586\n    if (typeof start === 'string') {                                                                                   // 1587\n      encoding = start                                                                                                 // 1588\n      start = 0                                                                                                        // 1589\n      end = this.length                                                                                                // 1590\n    } else if (typeof end === 'string') {                                                                              // 1591\n      encoding = end                                                                                                   // 1592\n      end = this.length                                                                                                // 1593\n    }                                                                                                                  // 1594\n    if (val.length === 1) {                                                                                            // 1595\n      var code = val.charCodeAt(0)                                                                                     // 1596\n      if (code < 256) {                                                                                                // 1597\n        val = code                                                                                                     // 1598\n      }                                                                                                                // 1599\n    }                                                                                                                  // 1600\n    if (encoding !== undefined && typeof encoding !== 'string') {                                                      // 1601\n      throw new TypeError('encoding must be a string')                                                                 // 1602\n    }                                                                                                                  // 1603\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {                                                // 1604\n      throw new TypeError('Unknown encoding: ' + encoding)                                                             // 1605\n    }                                                                                                                  // 1606\n  } else if (typeof val === 'number') {                                                                                // 1607\n    val = val & 255                                                                                                    // 1608\n  }                                                                                                                    // 1609\n                                                                                                                       // 1610\n  // Invalid ranges are not set to a default, so can range check early.                                                // 1611\n  if (start < 0 || this.length < start || this.length < end) {                                                         // 1612\n    throw new RangeError('Out of range index')                                                                         // 1613\n  }                                                                                                                    // 1614\n                                                                                                                       // 1615\n  if (end <= start) {                                                                                                  // 1616\n    return this                                                                                                        // 1617\n  }                                                                                                                    // 1618\n                                                                                                                       // 1619\n  start = start >>> 0                                                                                                  // 1620\n  end = end === undefined ? this.length : end >>> 0                                                                    // 1621\n                                                                                                                       // 1622\n  if (!val) val = 0                                                                                                    // 1623\n                                                                                                                       // 1624\n  var i                                                                                                                // 1625\n  if (typeof val === 'number') {                                                                                       // 1626\n    for (i = start; i < end; ++i) {                                                                                    // 1627\n      this[i] = val                                                                                                    // 1628\n    }                                                                                                                  // 1629\n  } else {                                                                                                             // 1630\n    var bytes = Buffer.isBuffer(val)                                                                                   // 1631\n      ? val                                                                                                            // 1632\n      : utf8ToBytes(new Buffer(val, encoding).toString())                                                              // 1633\n    var len = bytes.length                                                                                             // 1634\n    for (i = 0; i < end - start; ++i) {                                                                                // 1635\n      this[i + start] = bytes[i % len]                                                                                 // 1636\n    }                                                                                                                  // 1637\n  }                                                                                                                    // 1638\n                                                                                                                       // 1639\n  return this                                                                                                          // 1640\n}                                                                                                                      // 1641\n                                                                                                                       // 1642\n// HELPER FUNCTIONS                                                                                                    // 1643\n// ================                                                                                                    // 1644\n                                                                                                                       // 1645\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g                                                                           // 1646\n                                                                                                                       // 1647\nfunction base64clean (str) {                                                                                           // 1648\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                             // 1649\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 1650\n  // Node converts strings with length < 2 to ''                                                                       // 1651\n  if (str.length < 2) return ''                                                                                        // 1652\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 1653\n  while (str.length % 4 !== 0) {                                                                                       // 1654\n    str = str + '='                                                                                                    // 1655\n  }                                                                                                                    // 1656\n  return str                                                                                                           // 1657\n}                                                                                                                      // 1658\n                                                                                                                       // 1659\nfunction stringtrim (str) {                                                                                            // 1660\n  if (str.trim) return str.trim()                                                                                      // 1661\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                                 // 1662\n}                                                                                                                      // 1663\n                                                                                                                       // 1664\nfunction toHex (n) {                                                                                                   // 1665\n  if (n < 16) return '0' + n.toString(16)                                                                              // 1666\n  return n.toString(16)                                                                                                // 1667\n}                                                                                                                      // 1668\n                                                                                                                       // 1669\nfunction utf8ToBytes (string, units) {                                                                                 // 1670\n  units = units || Infinity                                                                                            // 1671\n  var codePoint                                                                                                        // 1672\n  var length = string.length                                                                                           // 1673\n  var leadSurrogate = null                                                                                             // 1674\n  var bytes = []                                                                                                       // 1675\n                                                                                                                       // 1676\n  for (var i = 0; i < length; ++i) {                                                                                   // 1677\n    codePoint = string.charCodeAt(i)                                                                                   // 1678\n                                                                                                                       // 1679\n    // is surrogate component                                                                                          // 1680\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 1681\n      // last char was a lead                                                                                          // 1682\n      if (!leadSurrogate) {                                                                                            // 1683\n        // no lead yet                                                                                                 // 1684\n        if (codePoint > 0xDBFF) {                                                                                      // 1685\n          // unexpected trail                                                                                          // 1686\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1687\n          continue                                                                                                     // 1688\n        } else if (i + 1 === length) {                                                                                 // 1689\n          // unpaired lead                                                                                             // 1690\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1691\n          continue                                                                                                     // 1692\n        }                                                                                                              // 1693\n                                                                                                                       // 1694\n        // valid lead                                                                                                  // 1695\n        leadSurrogate = codePoint                                                                                      // 1696\n                                                                                                                       // 1697\n        continue                                                                                                       // 1698\n      }                                                                                                                // 1699\n                                                                                                                       // 1700\n      // 2 leads in a row                                                                                              // 1701\n      if (codePoint < 0xDC00) {                                                                                        // 1702\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 1703\n        leadSurrogate = codePoint                                                                                      // 1704\n        continue                                                                                                       // 1705\n      }                                                                                                                // 1706\n                                                                                                                       // 1707\n      // valid surrogate pair                                                                                          // 1708\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                        // 1709\n    } else if (leadSurrogate) {                                                                                        // 1710\n      // valid bmp char, but last char was a lead                                                                      // 1711\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 1712\n    }                                                                                                                  // 1713\n                                                                                                                       // 1714\n    leadSurrogate = null                                                                                               // 1715\n                                                                                                                       // 1716\n    // encode utf8                                                                                                     // 1717\n    if (codePoint < 0x80) {                                                                                            // 1718\n      if ((units -= 1) < 0) break                                                                                      // 1719\n      bytes.push(codePoint)                                                                                            // 1720\n    } else if (codePoint < 0x800) {                                                                                    // 1721\n      if ((units -= 2) < 0) break                                                                                      // 1722\n      bytes.push(                                                                                                      // 1723\n        codePoint >> 0x6 | 0xC0,                                                                                       // 1724\n        codePoint & 0x3F | 0x80                                                                                        // 1725\n      )                                                                                                                // 1726\n    } else if (codePoint < 0x10000) {                                                                                  // 1727\n      if ((units -= 3) < 0) break                                                                                      // 1728\n      bytes.push(                                                                                                      // 1729\n        codePoint >> 0xC | 0xE0,                                                                                       // 1730\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1731\n        codePoint & 0x3F | 0x80                                                                                        // 1732\n      )                                                                                                                // 1733\n    } else if (codePoint < 0x110000) {                                                                                 // 1734\n      if ((units -= 4) < 0) break                                                                                      // 1735\n      bytes.push(                                                                                                      // 1736\n        codePoint >> 0x12 | 0xF0,                                                                                      // 1737\n        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 1738\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1739\n        codePoint & 0x3F | 0x80                                                                                        // 1740\n      )                                                                                                                // 1741\n    } else {                                                                                                           // 1742\n      throw new Error('Invalid code point')                                                                            // 1743\n    }                                                                                                                  // 1744\n  }                                                                                                                    // 1745\n                                                                                                                       // 1746\n  return bytes                                                                                                         // 1747\n}                                                                                                                      // 1748\n                                                                                                                       // 1749\nfunction asciiToBytes (str) {                                                                                          // 1750\n  var byteArray = []                                                                                                   // 1751\n  for (var i = 0; i < str.length; ++i) {                                                                               // 1752\n    // Node's code seems to be doing this and not & 0x7F..                                                             // 1753\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 1754\n  }                                                                                                                    // 1755\n  return byteArray                                                                                                     // 1756\n}                                                                                                                      // 1757\n                                                                                                                       // 1758\nfunction utf16leToBytes (str, units) {                                                                                 // 1759\n  var c, hi, lo                                                                                                        // 1760\n  var byteArray = []                                                                                                   // 1761\n  for (var i = 0; i < str.length; ++i) {                                                                               // 1762\n    if ((units -= 2) < 0) break                                                                                        // 1763\n                                                                                                                       // 1764\n    c = str.charCodeAt(i)                                                                                              // 1765\n    hi = c >> 8                                                                                                        // 1766\n    lo = c % 256                                                                                                       // 1767\n    byteArray.push(lo)                                                                                                 // 1768\n    byteArray.push(hi)                                                                                                 // 1769\n  }                                                                                                                    // 1770\n                                                                                                                       // 1771\n  return byteArray                                                                                                     // 1772\n}                                                                                                                      // 1773\n                                                                                                                       // 1774\nfunction base64ToBytes (str) {                                                                                         // 1775\n  return base64.toByteArray(base64clean(str))                                                                          // 1776\n}                                                                                                                      // 1777\n                                                                                                                       // 1778\nfunction blitBuffer (src, dst, offset, length) {                                                                       // 1779\n  for (var i = 0; i < length; ++i) {                                                                                   // 1780\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 1781\n    dst[i + offset] = src[i]                                                                                           // 1782\n  }                                                                                                                    // 1783\n  return i                                                                                                             // 1784\n}                                                                                                                      // 1785\n                                                                                                                       // 1786\nfunction isnan (val) {                                                                                                 // 1787\n  return val !== val // eslint-disable-line no-self-compare                                                            // 1788\n}                                                                                                                      // 1789\n                                                                                                                       // 1790\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"base64-js\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/base64-js/package.json                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"base64-js\";                                                                                            // 1\nexports.version = \"1.2.0\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/base64-js/index.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict'                                                                                                           // 1\n                                                                                                                       // 2\nexports.byteLength = byteLength                                                                                        // 3\nexports.toByteArray = toByteArray                                                                                      // 4\nexports.fromByteArray = fromByteArray                                                                                  // 5\n                                                                                                                       // 6\nvar lookup = []                                                                                                        // 7\nvar revLookup = []                                                                                                     // 8\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                                       // 9\n                                                                                                                       // 10\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                          // 11\nfor (var i = 0, len = code.length; i < len; ++i) {                                                                     // 12\n  lookup[i] = code[i]                                                                                                  // 13\n  revLookup[code.charCodeAt(i)] = i                                                                                    // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\nrevLookup['-'.charCodeAt(0)] = 62                                                                                      // 17\nrevLookup['_'.charCodeAt(0)] = 63                                                                                      // 18\n                                                                                                                       // 19\nfunction placeHoldersCount (b64) {                                                                                     // 20\n  var len = b64.length                                                                                                 // 21\n  if (len % 4 > 0) {                                                                                                   // 22\n    throw new Error('Invalid string. Length must be a multiple of 4')                                                  // 23\n  }                                                                                                                    // 24\n                                                                                                                       // 25\n  // the number of equal signs (place holders)                                                                         // 26\n  // if there are two placeholders, than the two characters before it                                                  // 27\n  // represent one byte                                                                                                // 28\n  // if there is only one, then the three characters before it represent 2 bytes                                       // 29\n  // this is just a cheap hack to not do indexOf twice                                                                 // 30\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                                       // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nfunction byteLength (b64) {                                                                                            // 34\n  // base64 is 4/3 + up to two characters of the original data                                                         // 35\n  return b64.length * 3 / 4 - placeHoldersCount(b64)                                                                   // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nfunction toByteArray (b64) {                                                                                           // 39\n  var i, j, l, tmp, placeHolders, arr                                                                                  // 40\n  var len = b64.length                                                                                                 // 41\n  placeHolders = placeHoldersCount(b64)                                                                                // 42\n                                                                                                                       // 43\n  arr = new Arr(len * 3 / 4 - placeHolders)                                                                            // 44\n                                                                                                                       // 45\n  // if there are placeholders, only get up to the last complete 4 chars                                               // 46\n  l = placeHolders > 0 ? len - 4 : len                                                                                 // 47\n                                                                                                                       // 48\n  var L = 0                                                                                                            // 49\n                                                                                                                       // 50\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 51\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF                                                                                      // 53\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 54\n    arr[L++] = tmp & 0xFF                                                                                              // 55\n  }                                                                                                                    // 56\n                                                                                                                       // 57\n  if (placeHolders === 2) {                                                                                            // 58\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                                // 59\n    arr[L++] = tmp & 0xFF                                                                                              // 60\n  } else if (placeHolders === 1) {                                                                                     // 61\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 63\n    arr[L++] = tmp & 0xFF                                                                                              // 64\n  }                                                                                                                    // 65\n                                                                                                                       // 66\n  return arr                                                                                                           // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\nfunction tripletToBase64 (num) {                                                                                       // 70\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]            // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\nfunction encodeChunk (uint8, start, end) {                                                                             // 74\n  var tmp                                                                                                              // 75\n  var output = []                                                                                                      // 76\n  for (var i = start; i < end; i += 3) {                                                                               // 77\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 78\n    output.push(tripletToBase64(tmp))                                                                                  // 79\n  }                                                                                                                    // 80\n  return output.join('')                                                                                               // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\nfunction fromByteArray (uint8) {                                                                                       // 84\n  var tmp                                                                                                              // 85\n  var len = uint8.length                                                                                               // 86\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                                      // 87\n  var output = ''                                                                                                      // 88\n  var parts = []                                                                                                       // 89\n  var maxChunkLength = 16383 // must be multiple of 3                                                                  // 90\n                                                                                                                       // 91\n  // go through the array every three bytes, we'll deal with trailing stuff later                                      // 92\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                            // 93\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))                       // 94\n  }                                                                                                                    // 95\n                                                                                                                       // 96\n  // pad the end with zeros, but make sure to not forget the extra bytes                                               // 97\n  if (extraBytes === 1) {                                                                                              // 98\n    tmp = uint8[len - 1]                                                                                               // 99\n    output += lookup[tmp >> 2]                                                                                         // 100\n    output += lookup[(tmp << 4) & 0x3F]                                                                                // 101\n    output += '=='                                                                                                     // 102\n  } else if (extraBytes === 2) {                                                                                       // 103\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                                     // 104\n    output += lookup[tmp >> 10]                                                                                        // 105\n    output += lookup[(tmp >> 4) & 0x3F]                                                                                // 106\n    output += lookup[(tmp << 2) & 0x3F]                                                                                // 107\n    output += '='                                                                                                      // 108\n  }                                                                                                                    // 109\n                                                                                                                       // 110\n  parts.push(output)                                                                                                   // 111\n                                                                                                                       // 112\n  return parts.join('')                                                                                                // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ieee754\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/ieee754/package.json                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"ieee754\";                                                                                              // 1\nexports.version = \"1.1.8\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/ieee754/index.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 1\n  var e, m                                                                                                             // 2\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 3\n  var eMax = (1 << eLen) - 1                                                                                           // 4\n  var eBias = eMax >> 1                                                                                                // 5\n  var nBits = -7                                                                                                       // 6\n  var i = isLE ? (nBytes - 1) : 0                                                                                      // 7\n  var d = isLE ? -1 : 1                                                                                                // 8\n  var s = buffer[offset + i]                                                                                           // 9\n                                                                                                                       // 10\n  i += d                                                                                                               // 11\n                                                                                                                       // 12\n  e = s & ((1 << (-nBits)) - 1)                                                                                        // 13\n  s >>= (-nBits)                                                                                                       // 14\n  nBits += eLen                                                                                                        // 15\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 16\n                                                                                                                       // 17\n  m = e & ((1 << (-nBits)) - 1)                                                                                        // 18\n  e >>= (-nBits)                                                                                                       // 19\n  nBits += mLen                                                                                                        // 20\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 21\n                                                                                                                       // 22\n  if (e === 0) {                                                                                                       // 23\n    e = 1 - eBias                                                                                                      // 24\n  } else if (e === eMax) {                                                                                             // 25\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 26\n  } else {                                                                                                             // 27\n    m = m + Math.pow(2, mLen)                                                                                          // 28\n    e = e - eBias                                                                                                      // 29\n  }                                                                                                                    // 30\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 34\n  var e, m, c                                                                                                          // 35\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 36\n  var eMax = (1 << eLen) - 1                                                                                           // 37\n  var eBias = eMax >> 1                                                                                                // 38\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 39\n  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 40\n  var d = isLE ? 1 : -1                                                                                                // 41\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 42\n                                                                                                                       // 43\n  value = Math.abs(value)                                                                                              // 44\n                                                                                                                       // 45\n  if (isNaN(value) || value === Infinity) {                                                                            // 46\n    m = isNaN(value) ? 1 : 0                                                                                           // 47\n    e = eMax                                                                                                           // 48\n  } else {                                                                                                             // 49\n    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 50\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 51\n      e--                                                                                                              // 52\n      c *= 2                                                                                                           // 53\n    }                                                                                                                  // 54\n    if (e + eBias >= 1) {                                                                                              // 55\n      value += rt / c                                                                                                  // 56\n    } else {                                                                                                           // 57\n      value += rt * Math.pow(2, 1 - eBias)                                                                             // 58\n    }                                                                                                                  // 59\n    if (value * c >= 2) {                                                                                              // 60\n      e++                                                                                                              // 61\n      c /= 2                                                                                                           // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    if (e + eBias >= eMax) {                                                                                           // 65\n      m = 0                                                                                                            // 66\n      e = eMax                                                                                                         // 67\n    } else if (e + eBias >= 1) {                                                                                       // 68\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 69\n      e = e + eBias                                                                                                    // 70\n    } else {                                                                                                           // 71\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 72\n      e = 0                                                                                                            // 73\n    }                                                                                                                  // 74\n  }                                                                                                                    // 75\n                                                                                                                       // 76\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 77\n                                                                                                                       // 78\n  e = (e << mLen) | m                                                                                                  // 79\n  eLen += mLen                                                                                                         // 80\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 81\n                                                                                                                       // 82\n  buffer[offset + i - d] |= s * 128                                                                                    // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"isarray\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/isarray/package.json                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"isarray\";                                                                                              // 1\nexports.version = \"1.0.0\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/isarray/index.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toString = {}.toString;                                                                                            // 1\n                                                                                                                       // 2\nmodule.exports = Array.isArray || function (arr) {                                                                     // 3\n  return toString.call(arr) == '[object Array]';                                                                       // 4\n};                                                                                                                     // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"process\":{\"browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// shim for using process in browser                                                                                   // 1\nvar process = module.exports = {};                                                                                     // 2\n                                                                                                                       // 3\n// cached from whatever global is present so that test runners that stub it                                            // 4\n// don't break things.  But we need to wrap it in a try catch in case it is                                            // 5\n// wrapped in strict mode code which doesn't define any globals.  It's inside a                                        // 6\n// function because try/catches deoptimize in certain engines.                                                         // 7\n                                                                                                                       // 8\nvar cachedSetTimeout;                                                                                                  // 9\nvar cachedClearTimeout;                                                                                                // 10\n                                                                                                                       // 11\nfunction defaultSetTimout() {                                                                                          // 12\n    throw new Error('setTimeout has not been defined');                                                                // 13\n}                                                                                                                      // 14\nfunction defaultClearTimeout () {                                                                                      // 15\n    throw new Error('clearTimeout has not been defined');                                                              // 16\n}                                                                                                                      // 17\n(function () {                                                                                                         // 18\n    try {                                                                                                              // 19\n        if (typeof setTimeout === 'function') {                                                                        // 20\n            cachedSetTimeout = setTimeout;                                                                             // 21\n        } else {                                                                                                       // 22\n            cachedSetTimeout = defaultSetTimout;                                                                       // 23\n        }                                                                                                              // 24\n    } catch (e) {                                                                                                      // 25\n        cachedSetTimeout = defaultSetTimout;                                                                           // 26\n    }                                                                                                                  // 27\n    try {                                                                                                              // 28\n        if (typeof clearTimeout === 'function') {                                                                      // 29\n            cachedClearTimeout = clearTimeout;                                                                         // 30\n        } else {                                                                                                       // 31\n            cachedClearTimeout = defaultClearTimeout;                                                                  // 32\n        }                                                                                                              // 33\n    } catch (e) {                                                                                                      // 34\n        cachedClearTimeout = defaultClearTimeout;                                                                      // 35\n    }                                                                                                                  // 36\n} ())                                                                                                                  // 37\nfunction runTimeout(fun) {                                                                                             // 38\n    if (cachedSetTimeout === setTimeout) {                                                                             // 39\n        //normal enviroments in sane situations                                                                        // 40\n        return setTimeout(fun, 0);                                                                                     // 41\n    }                                                                                                                  // 42\n    // if setTimeout wasn't available but was latter defined                                                           // 43\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {                                  // 44\n        cachedSetTimeout = setTimeout;                                                                                 // 45\n        return setTimeout(fun, 0);                                                                                     // 46\n    }                                                                                                                  // 47\n    try {                                                                                                              // 48\n        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 49\n        return cachedSetTimeout(fun, 0);                                                                               // 50\n    } catch(e){                                                                                                        // 51\n        try {                                                                                                          // 52\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);                                                                // 54\n        } catch(e){                                                                                                    // 55\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);                                                                // 57\n        }                                                                                                              // 58\n    }                                                                                                                  // 59\n                                                                                                                       // 60\n                                                                                                                       // 61\n}                                                                                                                      // 62\nfunction runClearTimeout(marker) {                                                                                     // 63\n    if (cachedClearTimeout === clearTimeout) {                                                                         // 64\n        //normal enviroments in sane situations                                                                        // 65\n        return clearTimeout(marker);                                                                                   // 66\n    }                                                                                                                  // 67\n    // if clearTimeout wasn't available but was latter defined                                                         // 68\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {                         // 69\n        cachedClearTimeout = clearTimeout;                                                                             // 70\n        return clearTimeout(marker);                                                                                   // 71\n    }                                                                                                                  // 72\n    try {                                                                                                              // 73\n        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 74\n        return cachedClearTimeout(marker);                                                                             // 75\n    } catch (e){                                                                                                       // 76\n        try {                                                                                                          // 77\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);                                                              // 79\n        } catch (e){                                                                                                   // 80\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout                               // 82\n            return cachedClearTimeout.call(this, marker);                                                              // 83\n        }                                                                                                              // 84\n    }                                                                                                                  // 85\n                                                                                                                       // 86\n                                                                                                                       // 87\n                                                                                                                       // 88\n}                                                                                                                      // 89\nvar queue = [];                                                                                                        // 90\nvar draining = false;                                                                                                  // 91\nvar currentQueue;                                                                                                      // 92\nvar queueIndex = -1;                                                                                                   // 93\n                                                                                                                       // 94\nfunction cleanUpNextTick() {                                                                                           // 95\n    if (!draining || !currentQueue) {                                                                                  // 96\n        return;                                                                                                        // 97\n    }                                                                                                                  // 98\n    draining = false;                                                                                                  // 99\n    if (currentQueue.length) {                                                                                         // 100\n        queue = currentQueue.concat(queue);                                                                            // 101\n    } else {                                                                                                           // 102\n        queueIndex = -1;                                                                                               // 103\n    }                                                                                                                  // 104\n    if (queue.length) {                                                                                                // 105\n        drainQueue();                                                                                                  // 106\n    }                                                                                                                  // 107\n}                                                                                                                      // 108\n                                                                                                                       // 109\nfunction drainQueue() {                                                                                                // 110\n    if (draining) {                                                                                                    // 111\n        return;                                                                                                        // 112\n    }                                                                                                                  // 113\n    var timeout = runTimeout(cleanUpNextTick);                                                                         // 114\n    draining = true;                                                                                                   // 115\n                                                                                                                       // 116\n    var len = queue.length;                                                                                            // 117\n    while(len) {                                                                                                       // 118\n        currentQueue = queue;                                                                                          // 119\n        queue = [];                                                                                                    // 120\n        while (++queueIndex < len) {                                                                                   // 121\n            if (currentQueue) {                                                                                        // 122\n                currentQueue[queueIndex].run();                                                                        // 123\n            }                                                                                                          // 124\n        }                                                                                                              // 125\n        queueIndex = -1;                                                                                               // 126\n        len = queue.length;                                                                                            // 127\n    }                                                                                                                  // 128\n    currentQueue = null;                                                                                               // 129\n    draining = false;                                                                                                  // 130\n    runClearTimeout(timeout);                                                                                          // 131\n}                                                                                                                      // 132\n                                                                                                                       // 133\nprocess.nextTick = function (fun) {                                                                                    // 134\n    var args = new Array(arguments.length - 1);                                                                        // 135\n    if (arguments.length > 1) {                                                                                        // 136\n        for (var i = 1; i < arguments.length; i++) {                                                                   // 137\n            args[i - 1] = arguments[i];                                                                                // 138\n        }                                                                                                              // 139\n    }                                                                                                                  // 140\n    queue.push(new Item(fun, args));                                                                                   // 141\n    if (queue.length === 1 && !draining) {                                                                             // 142\n        runTimeout(drainQueue);                                                                                        // 143\n    }                                                                                                                  // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\n// v8 likes predictible objects                                                                                        // 147\nfunction Item(fun, array) {                                                                                            // 148\n    this.fun = fun;                                                                                                    // 149\n    this.array = array;                                                                                                // 150\n}                                                                                                                      // 151\nItem.prototype.run = function () {                                                                                     // 152\n    this.fun.apply(null, this.array);                                                                                  // 153\n};                                                                                                                     // 154\nprocess.title = 'browser';                                                                                             // 155\nprocess.browser = true;                                                                                                // 156\nprocess.env = {};                                                                                                      // 157\nprocess.argv = [];                                                                                                     // 158\nprocess.version = ''; // empty string to avoid regexp issues                                                           // 159\nprocess.versions = {};                                                                                                 // 160\n                                                                                                                       // 161\nfunction noop() {}                                                                                                     // 162\n                                                                                                                       // 163\nprocess.on = noop;                                                                                                     // 164\nprocess.addListener = noop;                                                                                            // 165\nprocess.once = noop;                                                                                                   // 166\nprocess.off = noop;                                                                                                    // 167\nprocess.removeListener = noop;                                                                                         // 168\nprocess.removeAllListeners = noop;                                                                                     // 169\nprocess.emit = noop;                                                                                                   // 170\n                                                                                                                       // 171\nprocess.binding = function (name) {                                                                                    // 172\n    throw new Error('process.binding is not supported');                                                               // 173\n};                                                                                                                     // 174\n                                                                                                                       // 175\nprocess.cwd = function () { return '/' };                                                                              // 176\nprocess.chdir = function (dir) {                                                                                       // 177\n    throw new Error('process.chdir is not supported');                                                                 // 178\n};                                                                                                                     // 179\nprocess.umask = function() { return 0; };                                                                              // 180\n                                                                                                                       // 181\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"domain-browser\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"domain-browser\";                                                                                       // 1\nexports.version = \"1.1.7\";                                                                                             // 2\nexports.main = \"./index.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"events\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This file should be ES5 compatible                                                                                  // 1\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2\n'use strict'                                                                                                           // 3\nmodule.exports = (function () {                                                                                        // 4\n\t// Import Events                                                                                                      // 5\n\tvar events = require('events')                                                                                        // 6\n                                                                                                                       // 7\n\t// Export Domain                                                                                                      // 8\n\tvar domain = {}                                                                                                       // 9\n\tdomain.createDomain = domain.create = function () {                                                                   // 10\n\t\tvar d = new events.EventEmitter()                                                                                    // 11\n                                                                                                                       // 12\n\t\tfunction emitError (e) {                                                                                             // 13\n\t\t\td.emit('error', e)                                                                                                  // 14\n\t\t}                                                                                                                    // 15\n                                                                                                                       // 16\n\t\td.add = function (emitter) {                                                                                         // 17\n\t\t\temitter.on('error', emitError)                                                                                      // 18\n\t\t}                                                                                                                    // 19\n\t\td.remove = function (emitter) {                                                                                      // 20\n\t\t\temitter.removeListener('error', emitError)                                                                          // 21\n\t\t}                                                                                                                    // 22\n\t\td.bind = function (fn) {                                                                                             // 23\n\t\t\treturn function () {                                                                                                // 24\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)                                                                   // 25\n\t\t\t\ttry {                                                                                                              // 26\n\t\t\t\t\tfn.apply(null, args)                                                                                              // 27\n\t\t\t\t}                                                                                                                  // 28\n\t\t\t\tcatch (err) {                                                                                                      // 29\n\t\t\t\t\temitError(err)                                                                                                    // 30\n\t\t\t\t}                                                                                                                  // 31\n\t\t\t}                                                                                                                   // 32\n\t\t}                                                                                                                    // 33\n\t\td.intercept = function (fn) {                                                                                        // 34\n\t\t\treturn function (err) {                                                                                             // 35\n\t\t\t\tif ( err ) {                                                                                                       // 36\n\t\t\t\t\temitError(err)                                                                                                    // 37\n\t\t\t\t}                                                                                                                  // 38\n\t\t\t\telse {                                                                                                             // 39\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)                                                               // 40\n\t\t\t\t\ttry {                                                                                                             // 41\n\t\t\t\t\t\tfn.apply(null, args)                                                                                             // 42\n\t\t\t\t\t}                                                                                                                 // 43\n\t\t\t\t\tcatch (err) {                                                                                                     // 44\n\t\t\t\t\t\temitError(err)                                                                                                   // 45\n\t\t\t\t\t}                                                                                                                 // 46\n\t\t\t\t}                                                                                                                  // 47\n\t\t\t}                                                                                                                   // 48\n\t\t}                                                                                                                    // 49\n\t\td.run = function (fn) {                                                                                              // 50\n\t\t\ttry {                                                                                                               // 51\n\t\t\t\tfn()                                                                                                               // 52\n\t\t\t}                                                                                                                   // 53\n\t\t\tcatch (err) {                                                                                                       // 54\n\t\t\t\temitError(err)                                                                                                     // 55\n\t\t\t}                                                                                                                   // 56\n\t\t\treturn this                                                                                                         // 57\n\t\t}                                                                                                                    // 58\n\t\td.dispose = function () {                                                                                            // 59\n\t\t\tthis.removeAllListeners()                                                                                           // 60\n\t\t\treturn this                                                                                                         // 61\n\t\t}                                                                                                                    // 62\n\t\td.enter = d.exit = function () {                                                                                     // 63\n\t\t\treturn this                                                                                                         // 64\n\t\t}                                                                                                                    // 65\n\t\treturn d                                                                                                             // 66\n\t}                                                                                                                     // 67\n\treturn domain                                                                                                         // 68\n}).call(this)                                                                                                          // 69\n                                                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"events\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"events\";                                                                                               // 1\nexports.version = \"1.1.1\";                                                                                             // 2\nexports.main = \"./events.js\";                                                                                          // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1\n//                                                                                                                     // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3\n// copy of this software and associated documentation files (the                                                       // 4\n// \"Software\"), to deal in the Software without restriction, including                                                 // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8\n// following conditions:                                                                                               // 9\n//                                                                                                                     // 10\n// The above copyright notice and this permission notice shall be included                                             // 11\n// in all copies or substantial portions of the Software.                                                              // 12\n//                                                                                                                     // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20\n                                                                                                                       // 21\nfunction EventEmitter() {                                                                                              // 22\n  this._events = this._events || {};                                                                                   // 23\n  this._maxListeners = this._maxListeners || undefined;                                                                // 24\n}                                                                                                                      // 25\nmodule.exports = EventEmitter;                                                                                         // 26\n                                                                                                                       // 27\n// Backwards-compat with node 0.10.x                                                                                   // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 29\n                                                                                                                       // 30\nEventEmitter.prototype._events = undefined;                                                                            // 31\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 32\n                                                                                                                       // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34\n// added to it. This is a useful default which helps finding memory leaks.                                             // 35\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 36\n                                                                                                                       // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                            // 38\n// that to be increased. Set to zero for unlimited.                                                                    // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41\n    throw TypeError('n must be a positive number');                                                                    // 42\n  this._maxListeners = n;                                                                                              // 43\n  return this;                                                                                                         // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nEventEmitter.prototype.emit = function(type) {                                                                         // 47\n  var er, handler, len, args, i, listeners;                                                                            // 48\n                                                                                                                       // 49\n  if (!this._events)                                                                                                   // 50\n    this._events = {};                                                                                                 // 51\n                                                                                                                       // 52\n  // If there is no 'error' event listener then throw.                                                                 // 53\n  if (type === 'error') {                                                                                              // 54\n    if (!this._events.error ||                                                                                         // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56\n      er = arguments[1];                                                                                               // 57\n      if (er instanceof Error) {                                                                                       // 58\n        throw er; // Unhandled 'error' event                                                                           // 59\n      } else {                                                                                                         // 60\n        // At least give some kind of context to the user                                                              // 61\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');                                      // 62\n        err.context = er;                                                                                              // 63\n        throw err;                                                                                                     // 64\n      }                                                                                                                // 65\n    }                                                                                                                  // 66\n  }                                                                                                                    // 67\n                                                                                                                       // 68\n  handler = this._events[type];                                                                                        // 69\n                                                                                                                       // 70\n  if (isUndefined(handler))                                                                                            // 71\n    return false;                                                                                                      // 72\n                                                                                                                       // 73\n  if (isFunction(handler)) {                                                                                           // 74\n    switch (arguments.length) {                                                                                        // 75\n      // fast cases                                                                                                    // 76\n      case 1:                                                                                                          // 77\n        handler.call(this);                                                                                            // 78\n        break;                                                                                                         // 79\n      case 2:                                                                                                          // 80\n        handler.call(this, arguments[1]);                                                                              // 81\n        break;                                                                                                         // 82\n      case 3:                                                                                                          // 83\n        handler.call(this, arguments[1], arguments[2]);                                                                // 84\n        break;                                                                                                         // 85\n      // slower                                                                                                        // 86\n      default:                                                                                                         // 87\n        args = Array.prototype.slice.call(arguments, 1);                                                               // 88\n        handler.apply(this, args);                                                                                     // 89\n    }                                                                                                                  // 90\n  } else if (isObject(handler)) {                                                                                      // 91\n    args = Array.prototype.slice.call(arguments, 1);                                                                   // 92\n    listeners = handler.slice();                                                                                       // 93\n    len = listeners.length;                                                                                            // 94\n    for (i = 0; i < len; i++)                                                                                          // 95\n      listeners[i].apply(this, args);                                                                                  // 96\n  }                                                                                                                    // 97\n                                                                                                                       // 98\n  return true;                                                                                                         // 99\n};                                                                                                                     // 100\n                                                                                                                       // 101\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 102\n  var m;                                                                                                               // 103\n                                                                                                                       // 104\n  if (!isFunction(listener))                                                                                           // 105\n    throw TypeError('listener must be a function');                                                                    // 106\n                                                                                                                       // 107\n  if (!this._events)                                                                                                   // 108\n    this._events = {};                                                                                                 // 109\n                                                                                                                       // 110\n  // To avoid recursion in the case that type === \"newListener\"! Before                                                // 111\n  // adding it to the listeners, first emit \"newListener\".                                                             // 112\n  if (this._events.newListener)                                                                                        // 113\n    this.emit('newListener', type,                                                                                     // 114\n              isFunction(listener.listener) ?                                                                          // 115\n              listener.listener : listener);                                                                           // 116\n                                                                                                                       // 117\n  if (!this._events[type])                                                                                             // 118\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 119\n    this._events[type] = listener;                                                                                     // 120\n  else if (isObject(this._events[type]))                                                                               // 121\n    // If we've already got an array, just append.                                                                     // 122\n    this._events[type].push(listener);                                                                                 // 123\n  else                                                                                                                 // 124\n    // Adding the second element, need to change to array.                                                             // 125\n    this._events[type] = [this._events[type], listener];                                                               // 126\n                                                                                                                       // 127\n  // Check for listener leak                                                                                           // 128\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 129\n    if (!isUndefined(this._maxListeners)) {                                                                            // 130\n      m = this._maxListeners;                                                                                          // 131\n    } else {                                                                                                           // 132\n      m = EventEmitter.defaultMaxListeners;                                                                            // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 136\n      this._events[type].warned = true;                                                                                // 137\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 138\n                    'leak detected. %d listeners added. ' +                                                            // 139\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 140\n                    this._events[type].length);                                                                        // 141\n      if (typeof console.trace === 'function') {                                                                       // 142\n        // not supported in IE 10                                                                                      // 143\n        console.trace();                                                                                               // 144\n      }                                                                                                                // 145\n    }                                                                                                                  // 146\n  }                                                                                                                    // 147\n                                                                                                                       // 148\n  return this;                                                                                                         // 149\n};                                                                                                                     // 150\n                                                                                                                       // 151\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 152\n                                                                                                                       // 153\nEventEmitter.prototype.once = function(type, listener) {                                                               // 154\n  if (!isFunction(listener))                                                                                           // 155\n    throw TypeError('listener must be a function');                                                                    // 156\n                                                                                                                       // 157\n  var fired = false;                                                                                                   // 158\n                                                                                                                       // 159\n  function g() {                                                                                                       // 160\n    this.removeListener(type, g);                                                                                      // 161\n                                                                                                                       // 162\n    if (!fired) {                                                                                                      // 163\n      fired = true;                                                                                                    // 164\n      listener.apply(this, arguments);                                                                                 // 165\n    }                                                                                                                  // 166\n  }                                                                                                                    // 167\n                                                                                                                       // 168\n  g.listener = listener;                                                                                               // 169\n  this.on(type, g);                                                                                                    // 170\n                                                                                                                       // 171\n  return this;                                                                                                         // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\n// emits a 'removeListener' event iff the listener was removed                                                         // 175\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 176\n  var list, position, length, i;                                                                                       // 177\n                                                                                                                       // 178\n  if (!isFunction(listener))                                                                                           // 179\n    throw TypeError('listener must be a function');                                                                    // 180\n                                                                                                                       // 181\n  if (!this._events || !this._events[type])                                                                            // 182\n    return this;                                                                                                       // 183\n                                                                                                                       // 184\n  list = this._events[type];                                                                                           // 185\n  length = list.length;                                                                                                // 186\n  position = -1;                                                                                                       // 187\n                                                                                                                       // 188\n  if (list === listener ||                                                                                             // 189\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 190\n    delete this._events[type];                                                                                         // 191\n    if (this._events.removeListener)                                                                                   // 192\n      this.emit('removeListener', type, listener);                                                                     // 193\n                                                                                                                       // 194\n  } else if (isObject(list)) {                                                                                         // 195\n    for (i = length; i-- > 0;) {                                                                                       // 196\n      if (list[i] === listener ||                                                                                      // 197\n          (list[i].listener && list[i].listener === listener)) {                                                       // 198\n        position = i;                                                                                                  // 199\n        break;                                                                                                         // 200\n      }                                                                                                                // 201\n    }                                                                                                                  // 202\n                                                                                                                       // 203\n    if (position < 0)                                                                                                  // 204\n      return this;                                                                                                     // 205\n                                                                                                                       // 206\n    if (list.length === 1) {                                                                                           // 207\n      list.length = 0;                                                                                                 // 208\n      delete this._events[type];                                                                                       // 209\n    } else {                                                                                                           // 210\n      list.splice(position, 1);                                                                                        // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    if (this._events.removeListener)                                                                                   // 214\n      this.emit('removeListener', type, listener);                                                                     // 215\n  }                                                                                                                    // 216\n                                                                                                                       // 217\n  return this;                                                                                                         // 218\n};                                                                                                                     // 219\n                                                                                                                       // 220\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 221\n  var key, listeners;                                                                                                  // 222\n                                                                                                                       // 223\n  if (!this._events)                                                                                                   // 224\n    return this;                                                                                                       // 225\n                                                                                                                       // 226\n  // not listening for removeListener, no need to emit                                                                 // 227\n  if (!this._events.removeListener) {                                                                                  // 228\n    if (arguments.length === 0)                                                                                        // 229\n      this._events = {};                                                                                               // 230\n    else if (this._events[type])                                                                                       // 231\n      delete this._events[type];                                                                                       // 232\n    return this;                                                                                                       // 233\n  }                                                                                                                    // 234\n                                                                                                                       // 235\n  // emit removeListener for all listeners on all events                                                               // 236\n  if (arguments.length === 0) {                                                                                        // 237\n    for (key in this._events) {                                                                                        // 238\n      if (key === 'removeListener') continue;                                                                          // 239\n      this.removeAllListeners(key);                                                                                    // 240\n    }                                                                                                                  // 241\n    this.removeAllListeners('removeListener');                                                                         // 242\n    this._events = {};                                                                                                 // 243\n    return this;                                                                                                       // 244\n  }                                                                                                                    // 245\n                                                                                                                       // 246\n  listeners = this._events[type];                                                                                      // 247\n                                                                                                                       // 248\n  if (isFunction(listeners)) {                                                                                         // 249\n    this.removeListener(type, listeners);                                                                              // 250\n  } else if (listeners) {                                                                                              // 251\n    // LIFO order                                                                                                      // 252\n    while (listeners.length)                                                                                           // 253\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 254\n  }                                                                                                                    // 255\n  delete this._events[type];                                                                                           // 256\n                                                                                                                       // 257\n  return this;                                                                                                         // 258\n};                                                                                                                     // 259\n                                                                                                                       // 260\nEventEmitter.prototype.listeners = function(type) {                                                                    // 261\n  var ret;                                                                                                             // 262\n  if (!this._events || !this._events[type])                                                                            // 263\n    ret = [];                                                                                                          // 264\n  else if (isFunction(this._events[type]))                                                                             // 265\n    ret = [this._events[type]];                                                                                        // 266\n  else                                                                                                                 // 267\n    ret = this._events[type].slice();                                                                                  // 268\n  return ret;                                                                                                          // 269\n};                                                                                                                     // 270\n                                                                                                                       // 271\nEventEmitter.prototype.listenerCount = function(type) {                                                                // 272\n  if (this._events) {                                                                                                  // 273\n    var evlistener = this._events[type];                                                                               // 274\n                                                                                                                       // 275\n    if (isFunction(evlistener))                                                                                        // 276\n      return 1;                                                                                                        // 277\n    else if (evlistener)                                                                                               // 278\n      return evlistener.length;                                                                                        // 279\n  }                                                                                                                    // 280\n  return 0;                                                                                                            // 281\n};                                                                                                                     // 282\n                                                                                                                       // 283\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 284\n  return emitter.listenerCount(type);                                                                                  // 285\n};                                                                                                                     // 286\n                                                                                                                       // 287\nfunction isFunction(arg) {                                                                                             // 288\n  return typeof arg === 'function';                                                                                    // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\nfunction isNumber(arg) {                                                                                               // 292\n  return typeof arg === 'number';                                                                                      // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\nfunction isObject(arg) {                                                                                               // 296\n  return typeof arg === 'object' && arg !== null;                                                                      // 297\n}                                                                                                                      // 298\n                                                                                                                       // 299\nfunction isUndefined(arg) {                                                                                            // 300\n  return arg === void 0;                                                                                               // 301\n}                                                                                                                      // 302\n                                                                                                                       // 303\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"babel-runtime\":{\"regenerator\":{\"index.js\":[\"regenerator-runtime\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/regenerator/index.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"regenerator-runtime\");                                                                       // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"helpers\":{\"typeof.js\":[\"../core-js/symbol/iterator\",\"../core-js/symbol\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/typeof.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _iterator = require(\"../core-js/symbol/iterator\");                                                                 // 5\n                                                                                                                       // 6\nvar _iterator2 = _interopRequireDefault(_iterator);                                                                    // 7\n                                                                                                                       // 8\nvar _symbol = require(\"../core-js/symbol\");                                                                            // 9\n                                                                                                                       // 10\nvar _symbol2 = _interopRequireDefault(_symbol);                                                                        // 11\n                                                                                                                       // 12\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n                                                                                                                       // 14\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15\n                                                                                                                       // 16\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);                                                      // 18\n} : function (obj) {                                                                                                   // 19\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"classCallCheck.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/classCallCheck.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nexports.default = function (instance, Constructor) {                                                                   // 5\n  if (!(instance instanceof Constructor)) {                                                                            // 6\n    throw new TypeError(\"Cannot call a class as a function\");                                                          // 7\n  }                                                                                                                    // 8\n};                                                                                                                     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"possibleConstructorReturn.js\":[\"../helpers/typeof\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/possibleConstructorReturn.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _typeof2 = require(\"../helpers/typeof\");                                                                           // 5\n                                                                                                                       // 6\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 7\n                                                                                                                       // 8\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9\n                                                                                                                       // 10\nexports.default = function (self, call) {                                                                              // 11\n  if (!self) {                                                                                                         // 12\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");                             // 13\n  }                                                                                                                    // 14\n                                                                                                                       // 15\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"inherits.js\":[\"../core-js/object/set-prototype-of\",\"../core-js/object/create\",\"../helpers/typeof\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/inherits.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");                                                   // 5\n                                                                                                                       // 6\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);                                                        // 7\n                                                                                                                       // 8\nvar _create = require(\"../core-js/object/create\");                                                                     // 9\n                                                                                                                       // 10\nvar _create2 = _interopRequireDefault(_create);                                                                        // 11\n                                                                                                                       // 12\nvar _typeof2 = require(\"../helpers/typeof\");                                                                           // 13\n                                                                                                                       // 14\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 15\n                                                                                                                       // 16\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 17\n                                                                                                                       // 18\nexports.default = function (subClass, superClass) {                                                                    // 19\n  if (typeof superClass !== \"function\" && superClass !== null) {                                                       // 20\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }                                                                                                                    // 22\n                                                                                                                       // 23\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {                                     // 24\n    constructor: {                                                                                                     // 25\n      value: subClass,                                                                                                 // 26\n      enumerable: false,                                                                                               // 27\n      writable: true,                                                                                                  // 28\n      configurable: true                                                                                               // 29\n    }                                                                                                                  // 30\n  });                                                                                                                  // 31\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};                                                                                                                     // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"core-js\":{\"symbol\":{\"iterator.js\":[\"core-js/library/fn/symbol/iterator\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };                       // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"symbol.js\":[\"core-js/library/fn/symbol\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/symbol.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };                                // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"object\":{\"set-prototype-of.js\":[\"core-js/library/fn/object/set-prototype-of\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };               // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"create.js\":[\"core-js/library/fn/object/create\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/object/create.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };                         // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},\"regenerator-runtime\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/regenerator-runtime/package.json                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"regenerator-runtime\";                                                                                  // 1\nexports.version = \"0.10.5\";                                                                                            // 2\nexports.main = \"runtime-module.js\";                                                                                    // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"runtime-module.js\":[\"./runtime\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/regenerator-runtime/runtime-module.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This method of obtaining a reference to the global object needs to be                                               // 1\n// kept identical to the way it is obtained in runtime.js                                                              // 2\nvar g =                                                                                                                // 3\n  typeof global === \"object\" ? global :                                                                                // 4\n  typeof window === \"object\" ? window :                                                                                // 5\n  typeof self === \"object\" ? self : this;                                                                              // 6\n                                                                                                                       // 7\n// Use `getOwnPropertyNames` because not all browsers support calling                                                  // 8\n// `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 9\nvar hadRuntime = g.regeneratorRuntime &&                                                                               // 10\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;                                                    // 11\n                                                                                                                       // 12\n// Save the old regeneratorRuntime in case it needs to be restored later.                                              // 13\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;                                                                   // 14\n                                                                                                                       // 15\n// Force reevalutation of runtime.js.                                                                                  // 16\ng.regeneratorRuntime = undefined;                                                                                      // 17\n                                                                                                                       // 18\nmodule.exports = require(\"./runtime\");                                                                                 // 19\n                                                                                                                       // 20\nif (hadRuntime) {                                                                                                      // 21\n  // Restore the original runtime.                                                                                     // 22\n  g.regeneratorRuntime = oldRuntime;                                                                                   // 23\n} else {                                                                                                               // 24\n  // Remove the global property added by runtime.js.                                                                   // 25\n  try {                                                                                                                // 26\n    delete g.regeneratorRuntime;                                                                                       // 27\n  } catch(e) {                                                                                                         // 28\n    g.regeneratorRuntime = undefined;                                                                                  // 29\n  }                                                                                                                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"runtime.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/regenerator-runtime/runtime.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2014, Facebook, Inc.                                                                                  // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                                 // 6\n * additional grant of patent rights can be found in the PATENTS file in                                               // 7\n * the same directory.                                                                                                 // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n!(function(global) {                                                                                                   // 11\n  \"use strict\";                                                                                                        // 12\n                                                                                                                       // 13\n  var Op = Object.prototype;                                                                                           // 14\n  var hasOwn = Op.hasOwnProperty;                                                                                      // 15\n  var undefined; // More compressible than void 0.                                                                     // 16\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};                                                            // 17\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";                                                               // 18\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";                                                // 19\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";                                                      // 20\n                                                                                                                       // 21\n  var inModule = typeof module === \"object\";                                                                           // 22\n  var runtime = global.regeneratorRuntime;                                                                             // 23\n  if (runtime) {                                                                                                       // 24\n    if (inModule) {                                                                                                    // 25\n      // If regeneratorRuntime is defined globally and we're in a module,                                              // 26\n      // make the exports object identical to regeneratorRuntime.                                                      // 27\n      module.exports = runtime;                                                                                        // 28\n    }                                                                                                                  // 29\n    // Don't bother evaluating the rest of this file if the runtime was                                                // 30\n    // already defined globally.                                                                                       // 31\n    return;                                                                                                            // 32\n  }                                                                                                                    // 33\n                                                                                                                       // 34\n  // Define the runtime globally (as expected by generated code) as either                                             // 35\n  // module.exports (if we're in a module) or a new, empty object.                                                     // 36\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                                // 37\n                                                                                                                       // 38\n  function wrap(innerFn, outerFn, self, tryLocsList) {                                                                 // 39\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 40\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;                      // 41\n    var generator = Object.create(protoGenerator.prototype);                                                           // 42\n    var context = new Context(tryLocsList || []);                                                                      // 43\n                                                                                                                       // 44\n    // The ._invoke method unifies the implementations of the .next,                                                   // 45\n    // .throw, and .return methods.                                                                                    // 46\n    generator._invoke = makeInvokeMethod(innerFn, self, context);                                                      // 47\n                                                                                                                       // 48\n    return generator;                                                                                                  // 49\n  }                                                                                                                    // 50\n  runtime.wrap = wrap;                                                                                                 // 51\n                                                                                                                       // 52\n  // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 53\n  // record like context.tryEntries[i].completion. This interface could                                                // 54\n  // have been (and was previously) designed to take a closure to be                                                   // 55\n  // invoked without arguments, but in all the cases we care about we                                                  // 56\n  // already have an existing method we want to call, so there's no need                                               // 57\n  // to create a new function object. We can even get away with assuming                                               // 58\n  // the method takes exactly one argument, since that happens to be true                                              // 59\n  // in every case, so we don't have to touch the arguments object. The                                                // 60\n  // only additional allocation required is the completion record, which                                               // 61\n  // has a stable shape and so hopefully should be cheap to allocate.                                                  // 62\n  function tryCatch(fn, obj, arg) {                                                                                    // 63\n    try {                                                                                                              // 64\n      return { type: \"normal\", arg: fn.call(obj, arg) };                                                               // 65\n    } catch (err) {                                                                                                    // 66\n      return { type: \"throw\", arg: err };                                                                              // 67\n    }                                                                                                                  // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  var GenStateSuspendedStart = \"suspendedStart\";                                                                       // 71\n  var GenStateSuspendedYield = \"suspendedYield\";                                                                       // 72\n  var GenStateExecuting = \"executing\";                                                                                 // 73\n  var GenStateCompleted = \"completed\";                                                                                 // 74\n                                                                                                                       // 75\n  // Returning this object from the innerFn has the same effect as                                                     // 76\n  // breaking out of the dispatch switch statement.                                                                    // 77\n  var ContinueSentinel = {};                                                                                           // 78\n                                                                                                                       // 79\n  // Dummy constructor functions that we use as the .constructor and                                                   // 80\n  // .constructor.prototype properties for functions that return Generator                                             // 81\n  // objects. For full spec compliance, you may wish to configure your                                                 // 82\n  // minifier not to mangle the names of these two functions.                                                          // 83\n  function Generator() {}                                                                                              // 84\n  function GeneratorFunction() {}                                                                                      // 85\n  function GeneratorFunctionPrototype() {}                                                                             // 86\n                                                                                                                       // 87\n  // This is a polyfill for %IteratorPrototype% for environments that                                                  // 88\n  // don't natively support it.                                                                                        // 89\n  var IteratorPrototype = {};                                                                                          // 90\n  IteratorPrototype[iteratorSymbol] = function () {                                                                    // 91\n    return this;                                                                                                       // 92\n  };                                                                                                                   // 93\n                                                                                                                       // 94\n  var getProto = Object.getPrototypeOf;                                                                                // 95\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));                                            // 96\n  if (NativeIteratorPrototype &&                                                                                       // 97\n      NativeIteratorPrototype !== Op &&                                                                                // 98\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {                                                          // 99\n    // This environment has a native %IteratorPrototype%; use it instead                                               // 100\n    // of the polyfill.                                                                                                // 101\n    IteratorPrototype = NativeIteratorPrototype;                                                                       // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n  var Gp = GeneratorFunctionPrototype.prototype =                                                                      // 105\n    Generator.prototype = Object.create(IteratorPrototype);                                                            // 106\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                                           // 107\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                                          // 108\n  GeneratorFunctionPrototype[toStringTagSymbol] =                                                                      // 109\n    GeneratorFunction.displayName = \"GeneratorFunction\";                                                               // 110\n                                                                                                                       // 111\n  // Helper for defining the .next, .throw, and .return methods of the                                                 // 112\n  // Iterator interface in terms of a single ._invoke method.                                                          // 113\n  function defineIteratorMethods(prototype) {                                                                          // 114\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {                                                             // 115\n      prototype[method] = function(arg) {                                                                              // 116\n        return this._invoke(method, arg);                                                                              // 117\n      };                                                                                                               // 118\n    });                                                                                                                // 119\n  }                                                                                                                    // 120\n                                                                                                                       // 121\n  runtime.isGeneratorFunction = function(genFun) {                                                                     // 122\n    var ctor = typeof genFun === \"function\" && genFun.constructor;                                                     // 123\n    return ctor                                                                                                        // 124\n      ? ctor === GeneratorFunction ||                                                                                  // 125\n        // For the native GeneratorFunction constructor, the best we can                                               // 126\n        // do is to check its .name property.                                                                          // 127\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"                                                        // 128\n      : false;                                                                                                         // 129\n  };                                                                                                                   // 130\n                                                                                                                       // 131\n  runtime.mark = function(genFun) {                                                                                    // 132\n    if (Object.setPrototypeOf) {                                                                                       // 133\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                                       // 134\n    } else {                                                                                                           // 135\n      genFun.__proto__ = GeneratorFunctionPrototype;                                                                   // 136\n      if (!(toStringTagSymbol in genFun)) {                                                                            // 137\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";                                                               // 138\n      }                                                                                                                // 139\n    }                                                                                                                  // 140\n    genFun.prototype = Object.create(Gp);                                                                              // 141\n    return genFun;                                                                                                     // 142\n  };                                                                                                                   // 143\n                                                                                                                       // 144\n  // Within the body of any async function, `await x` is transformed to                                                // 145\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 146\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is                                              // 147\n  // meant to be awaited.                                                                                              // 148\n  runtime.awrap = function(arg) {                                                                                      // 149\n    return { __await: arg };                                                                                           // 150\n  };                                                                                                                   // 151\n                                                                                                                       // 152\n  function AsyncIterator(generator) {                                                                                  // 153\n    function invoke(method, arg, resolve, reject) {                                                                    // 154\n      var record = tryCatch(generator[method], generator, arg);                                                        // 155\n      if (record.type === \"throw\") {                                                                                   // 156\n        reject(record.arg);                                                                                            // 157\n      } else {                                                                                                         // 158\n        var result = record.arg;                                                                                       // 159\n        var value = result.value;                                                                                      // 160\n        if (value &&                                                                                                   // 161\n            typeof value === \"object\" &&                                                                               // 162\n            hasOwn.call(value, \"__await\")) {                                                                           // 163\n          return Promise.resolve(value.__await).then(function(value) {                                                 // 164\n            invoke(\"next\", value, resolve, reject);                                                                    // 165\n          }, function(err) {                                                                                           // 166\n            invoke(\"throw\", err, resolve, reject);                                                                     // 167\n          });                                                                                                          // 168\n        }                                                                                                              // 169\n                                                                                                                       // 170\n        return Promise.resolve(value).then(function(unwrapped) {                                                       // 171\n          // When a yielded Promise is resolved, its final value becomes                                               // 172\n          // the .value of the Promise<{value,done}> result for the                                                    // 173\n          // current iteration. If the Promise is rejected, however, the                                               // 174\n          // result for this iteration will be rejected with the same                                                  // 175\n          // reason. Note that rejections of yielded Promises are not                                                  // 176\n          // thrown back into the generator function, as is the case                                                   // 177\n          // when an awaited Promise is rejected. This difference in                                                   // 178\n          // behavior between yield and await is important, because it                                                 // 179\n          // allows the consumer to decide what to do with the yielded                                                 // 180\n          // rejection (swallow it and continue, manually .throw it back                                               // 181\n          // into the generator, abandon iteration, whatever). With                                                    // 182\n          // await, by contrast, there is no opportunity to examine the                                                // 183\n          // rejection reason outside the generator function, so the                                                   // 184\n          // only option is to throw it from the await expression, and                                                 // 185\n          // let the generator function handle the exception.                                                          // 186\n          result.value = unwrapped;                                                                                    // 187\n          resolve(result);                                                                                             // 188\n        }, reject);                                                                                                    // 189\n      }                                                                                                                // 190\n    }                                                                                                                  // 191\n                                                                                                                       // 192\n    if (typeof global.process === \"object\" && global.process.domain) {                                                 // 193\n      invoke = global.process.domain.bind(invoke);                                                                     // 194\n    }                                                                                                                  // 195\n                                                                                                                       // 196\n    var previousPromise;                                                                                               // 197\n                                                                                                                       // 198\n    function enqueue(method, arg) {                                                                                    // 199\n      function callInvokeWithMethodAndArg() {                                                                          // 200\n        return new Promise(function(resolve, reject) {                                                                 // 201\n          invoke(method, arg, resolve, reject);                                                                        // 202\n        });                                                                                                            // 203\n      }                                                                                                                // 204\n                                                                                                                       // 205\n      return previousPromise =                                                                                         // 206\n        // If enqueue has been called before, then we want to wait until                                               // 207\n        // all previous Promises have been resolved before calling invoke,                                             // 208\n        // so that results are always delivered in the correct order. If                                               // 209\n        // enqueue has not been called before, then it is important to                                                 // 210\n        // call invoke immediately, without waiting on a callback to fire,                                             // 211\n        // so that the async generator function has the opportunity to do                                              // 212\n        // any necessary setup in a predictable way. This predictability                                               // 213\n        // is why the Promise constructor synchronously invokes its                                                    // 214\n        // executor callback, and why async functions synchronously                                                    // 215\n        // execute code before the first await. Since we implement simple                                              // 216\n        // async functions in terms of async generators, it is especially                                              // 217\n        // important to get this right, even though it requires care.                                                  // 218\n        previousPromise ? previousPromise.then(                                                                        // 219\n          callInvokeWithMethodAndArg,                                                                                  // 220\n          // Avoid propagating failures to Promises returned by later                                                  // 221\n          // invocations of the iterator.                                                                              // 222\n          callInvokeWithMethodAndArg                                                                                   // 223\n        ) : callInvokeWithMethodAndArg();                                                                              // 224\n    }                                                                                                                  // 225\n                                                                                                                       // 226\n    // Define the unified helper method that is used to implement .next,                                               // 227\n    // .throw, and .return (see defineIteratorMethods).                                                                // 228\n    this._invoke = enqueue;                                                                                            // 229\n  }                                                                                                                    // 230\n                                                                                                                       // 231\n  defineIteratorMethods(AsyncIterator.prototype);                                                                      // 232\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {                                                         // 233\n    return this;                                                                                                       // 234\n  };                                                                                                                   // 235\n  runtime.AsyncIterator = AsyncIterator;                                                                               // 236\n                                                                                                                       // 237\n  // Note that simple async functions are implemented on top of                                                        // 238\n  // AsyncIterator objects; they just return a Promise for the value of                                                // 239\n  // the final result produced by the iterator.                                                                        // 240\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {                                                      // 241\n    var iter = new AsyncIterator(                                                                                      // 242\n      wrap(innerFn, outerFn, self, tryLocsList)                                                                        // 243\n    );                                                                                                                 // 244\n                                                                                                                       // 245\n    return runtime.isGeneratorFunction(outerFn)                                                                        // 246\n      ? iter // If outerFn is a generator, return the full iterator.                                                   // 247\n      : iter.next().then(function(result) {                                                                            // 248\n          return result.done ? result.value : iter.next();                                                             // 249\n        });                                                                                                            // 250\n  };                                                                                                                   // 251\n                                                                                                                       // 252\n  function makeInvokeMethod(innerFn, self, context) {                                                                  // 253\n    var state = GenStateSuspendedStart;                                                                                // 254\n                                                                                                                       // 255\n    return function invoke(method, arg) {                                                                              // 256\n      if (state === GenStateExecuting) {                                                                               // 257\n        throw new Error(\"Generator is already running\");                                                               // 258\n      }                                                                                                                // 259\n                                                                                                                       // 260\n      if (state === GenStateCompleted) {                                                                               // 261\n        if (method === \"throw\") {                                                                                      // 262\n          throw arg;                                                                                                   // 263\n        }                                                                                                              // 264\n                                                                                                                       // 265\n        // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 266\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 267\n        return doneResult();                                                                                           // 268\n      }                                                                                                                // 269\n                                                                                                                       // 270\n      context.method = method;                                                                                         // 271\n      context.arg = arg;                                                                                               // 272\n                                                                                                                       // 273\n      while (true) {                                                                                                   // 274\n        var delegate = context.delegate;                                                                               // 275\n        if (delegate) {                                                                                                // 276\n          var delegateResult = maybeInvokeDelegate(delegate, context);                                                 // 277\n          if (delegateResult) {                                                                                        // 278\n            if (delegateResult === ContinueSentinel) continue;                                                         // 279\n            return delegateResult;                                                                                     // 280\n          }                                                                                                            // 281\n        }                                                                                                              // 282\n                                                                                                                       // 283\n        if (context.method === \"next\") {                                                                               // 284\n          // Setting context._sent for legacy support of Babel's                                                       // 285\n          // function.sent implementation.                                                                             // 286\n          context.sent = context._sent = context.arg;                                                                  // 287\n                                                                                                                       // 288\n        } else if (context.method === \"throw\") {                                                                       // 289\n          if (state === GenStateSuspendedStart) {                                                                      // 290\n            state = GenStateCompleted;                                                                                 // 291\n            throw context.arg;                                                                                         // 292\n          }                                                                                                            // 293\n                                                                                                                       // 294\n          context.dispatchException(context.arg);                                                                      // 295\n                                                                                                                       // 296\n        } else if (context.method === \"return\") {                                                                      // 297\n          context.abrupt(\"return\", context.arg);                                                                       // 298\n        }                                                                                                              // 299\n                                                                                                                       // 300\n        state = GenStateExecuting;                                                                                     // 301\n                                                                                                                       // 302\n        var record = tryCatch(innerFn, self, context);                                                                 // 303\n        if (record.type === \"normal\") {                                                                                // 304\n          // If an exception is thrown from innerFn, we leave state ===                                                // 305\n          // GenStateExecuting and loop back for another invocation.                                                   // 306\n          state = context.done                                                                                         // 307\n            ? GenStateCompleted                                                                                        // 308\n            : GenStateSuspendedYield;                                                                                  // 309\n                                                                                                                       // 310\n          if (record.arg === ContinueSentinel) {                                                                       // 311\n            continue;                                                                                                  // 312\n          }                                                                                                            // 313\n                                                                                                                       // 314\n          return {                                                                                                     // 315\n            value: record.arg,                                                                                         // 316\n            done: context.done                                                                                         // 317\n          };                                                                                                           // 318\n                                                                                                                       // 319\n        } else if (record.type === \"throw\") {                                                                          // 320\n          state = GenStateCompleted;                                                                                   // 321\n          // Dispatch the exception by looping back around to the                                                      // 322\n          // context.dispatchException(context.arg) call above.                                                        // 323\n          context.method = \"throw\";                                                                                    // 324\n          context.arg = record.arg;                                                                                    // 325\n        }                                                                                                              // 326\n      }                                                                                                                // 327\n    };                                                                                                                 // 328\n  }                                                                                                                    // 329\n                                                                                                                       // 330\n  // Call delegate.iterator[context.method](context.arg) and handle the                                                // 331\n  // result, either by returning a { value, done } result from the                                                     // 332\n  // delegate iterator, or by modifying context.method and context.arg,                                                // 333\n  // setting context.delegate to null, and returning the ContinueSentinel.                                             // 334\n  function maybeInvokeDelegate(delegate, context) {                                                                    // 335\n    var method = delegate.iterator[context.method];                                                                    // 336\n    if (method === undefined) {                                                                                        // 337\n      // A .throw or .return when the delegate iterator has no .throw                                                  // 338\n      // method always terminates the yield* loop.                                                                     // 339\n      context.delegate = null;                                                                                         // 340\n                                                                                                                       // 341\n      if (context.method === \"throw\") {                                                                                // 342\n        if (delegate.iterator.return) {                                                                                // 343\n          // If the delegate iterator has a return method, give it a                                                   // 344\n          // chance to clean up.                                                                                       // 345\n          context.method = \"return\";                                                                                   // 346\n          context.arg = undefined;                                                                                     // 347\n          maybeInvokeDelegate(delegate, context);                                                                      // 348\n                                                                                                                       // 349\n          if (context.method === \"throw\") {                                                                            // 350\n            // If maybeInvokeDelegate(context) changed context.method from                                             // 351\n            // \"return\" to \"throw\", let that override the TypeError below.                                             // 352\n            return ContinueSentinel;                                                                                   // 353\n          }                                                                                                            // 354\n        }                                                                                                              // 355\n                                                                                                                       // 356\n        context.method = \"throw\";                                                                                      // 357\n        context.arg = new TypeError(                                                                                   // 358\n          \"The iterator does not provide a 'throw' method\");                                                           // 359\n      }                                                                                                                // 360\n                                                                                                                       // 361\n      return ContinueSentinel;                                                                                         // 362\n    }                                                                                                                  // 363\n                                                                                                                       // 364\n    var record = tryCatch(method, delegate.iterator, context.arg);                                                     // 365\n                                                                                                                       // 366\n    if (record.type === \"throw\") {                                                                                     // 367\n      context.method = \"throw\";                                                                                        // 368\n      context.arg = record.arg;                                                                                        // 369\n      context.delegate = null;                                                                                         // 370\n      return ContinueSentinel;                                                                                         // 371\n    }                                                                                                                  // 372\n                                                                                                                       // 373\n    var info = record.arg;                                                                                             // 374\n                                                                                                                       // 375\n    if (! info) {                                                                                                      // 376\n      context.method = \"throw\";                                                                                        // 377\n      context.arg = new TypeError(\"iterator result is not an object\");                                                 // 378\n      context.delegate = null;                                                                                         // 379\n      return ContinueSentinel;                                                                                         // 380\n    }                                                                                                                  // 381\n                                                                                                                       // 382\n    if (info.done) {                                                                                                   // 383\n      // Assign the result of the finished delegate to the temporary                                                   // 384\n      // variable specified by delegate.resultName (see delegateYield).                                                // 385\n      context[delegate.resultName] = info.value;                                                                       // 386\n                                                                                                                       // 387\n      // Resume execution at the desired location (see delegateYield).                                                 // 388\n      context.next = delegate.nextLoc;                                                                                 // 389\n                                                                                                                       // 390\n      // If context.method was \"throw\" but the delegate handled the                                                    // 391\n      // exception, let the outer generator proceed normally. If                                                       // 392\n      // context.method was \"next\", forget context.arg since it has been                                               // 393\n      // \"consumed\" by the delegate iterator. If context.method was                                                    // 394\n      // \"return\", allow the original .return call to continue in the                                                  // 395\n      // outer generator.                                                                                              // 396\n      if (context.method !== \"return\") {                                                                               // 397\n        context.method = \"next\";                                                                                       // 398\n        context.arg = undefined;                                                                                       // 399\n      }                                                                                                                // 400\n                                                                                                                       // 401\n    } else {                                                                                                           // 402\n      // Re-yield the result returned by the delegate method.                                                          // 403\n      return info;                                                                                                     // 404\n    }                                                                                                                  // 405\n                                                                                                                       // 406\n    // The delegate iterator is finished, so forget it and continue with                                               // 407\n    // the outer generator.                                                                                            // 408\n    context.delegate = null;                                                                                           // 409\n    return ContinueSentinel;                                                                                           // 410\n  }                                                                                                                    // 411\n                                                                                                                       // 412\n  // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 413\n  // unified ._invoke helper method.                                                                                   // 414\n  defineIteratorMethods(Gp);                                                                                           // 415\n                                                                                                                       // 416\n  Gp[toStringTagSymbol] = \"Generator\";                                                                                 // 417\n                                                                                                                       // 418\n  // A Generator should always return itself as the iterator object when the                                           // 419\n  // @@iterator function is called on it. Some browsers' implementations of the                                        // 420\n  // iterator prototype chain incorrectly implement this, causing the Generator                                        // 421\n  // object to not be returned from this call. This ensures that doesn't happen.                                       // 422\n  // See https://github.com/facebook/regenerator/issues/274 for more details.                                          // 423\n  Gp[iteratorSymbol] = function() {                                                                                    // 424\n    return this;                                                                                                       // 425\n  };                                                                                                                   // 426\n                                                                                                                       // 427\n  Gp.toString = function() {                                                                                           // 428\n    return \"[object Generator]\";                                                                                       // 429\n  };                                                                                                                   // 430\n                                                                                                                       // 431\n  function pushTryEntry(locs) {                                                                                        // 432\n    var entry = { tryLoc: locs[0] };                                                                                   // 433\n                                                                                                                       // 434\n    if (1 in locs) {                                                                                                   // 435\n      entry.catchLoc = locs[1];                                                                                        // 436\n    }                                                                                                                  // 437\n                                                                                                                       // 438\n    if (2 in locs) {                                                                                                   // 439\n      entry.finallyLoc = locs[2];                                                                                      // 440\n      entry.afterLoc = locs[3];                                                                                        // 441\n    }                                                                                                                  // 442\n                                                                                                                       // 443\n    this.tryEntries.push(entry);                                                                                       // 444\n  }                                                                                                                    // 445\n                                                                                                                       // 446\n  function resetTryEntry(entry) {                                                                                      // 447\n    var record = entry.completion || {};                                                                               // 448\n    record.type = \"normal\";                                                                                            // 449\n    delete record.arg;                                                                                                 // 450\n    entry.completion = record;                                                                                         // 451\n  }                                                                                                                    // 452\n                                                                                                                       // 453\n  function Context(tryLocsList) {                                                                                      // 454\n    // The root entry object (effectively a try statement without a catch                                              // 455\n    // or a finally block) gives us a place to store values thrown from                                                // 456\n    // locations where there is no enclosing try statement.                                                            // 457\n    this.tryEntries = [{ tryLoc: \"root\" }];                                                                            // 458\n    tryLocsList.forEach(pushTryEntry, this);                                                                           // 459\n    this.reset(true);                                                                                                  // 460\n  }                                                                                                                    // 461\n                                                                                                                       // 462\n  runtime.keys = function(object) {                                                                                    // 463\n    var keys = [];                                                                                                     // 464\n    for (var key in object) {                                                                                          // 465\n      keys.push(key);                                                                                                  // 466\n    }                                                                                                                  // 467\n    keys.reverse();                                                                                                    // 468\n                                                                                                                       // 469\n    // Rather than returning an object with a next method, we keep                                                     // 470\n    // things simple and return the next function itself.                                                              // 471\n    return function next() {                                                                                           // 472\n      while (keys.length) {                                                                                            // 473\n        var key = keys.pop();                                                                                          // 474\n        if (key in object) {                                                                                           // 475\n          next.value = key;                                                                                            // 476\n          next.done = false;                                                                                           // 477\n          return next;                                                                                                 // 478\n        }                                                                                                              // 479\n      }                                                                                                                // 480\n                                                                                                                       // 481\n      // To avoid creating an additional object, we just hang the .value                                               // 482\n      // and .done properties off the next function object itself. This                                                // 483\n      // also ensures that the minifier will not anonymize the function.                                               // 484\n      next.done = true;                                                                                                // 485\n      return next;                                                                                                     // 486\n    };                                                                                                                 // 487\n  };                                                                                                                   // 488\n                                                                                                                       // 489\n  function values(iterable) {                                                                                          // 490\n    if (iterable) {                                                                                                    // 491\n      var iteratorMethod = iterable[iteratorSymbol];                                                                   // 492\n      if (iteratorMethod) {                                                                                            // 493\n        return iteratorMethod.call(iterable);                                                                          // 494\n      }                                                                                                                // 495\n                                                                                                                       // 496\n      if (typeof iterable.next === \"function\") {                                                                       // 497\n        return iterable;                                                                                               // 498\n      }                                                                                                                // 499\n                                                                                                                       // 500\n      if (!isNaN(iterable.length)) {                                                                                   // 501\n        var i = -1, next = function next() {                                                                           // 502\n          while (++i < iterable.length) {                                                                              // 503\n            if (hasOwn.call(iterable, i)) {                                                                            // 504\n              next.value = iterable[i];                                                                                // 505\n              next.done = false;                                                                                       // 506\n              return next;                                                                                             // 507\n            }                                                                                                          // 508\n          }                                                                                                            // 509\n                                                                                                                       // 510\n          next.value = undefined;                                                                                      // 511\n          next.done = true;                                                                                            // 512\n                                                                                                                       // 513\n          return next;                                                                                                 // 514\n        };                                                                                                             // 515\n                                                                                                                       // 516\n        return next.next = next;                                                                                       // 517\n      }                                                                                                                // 518\n    }                                                                                                                  // 519\n                                                                                                                       // 520\n    // Return an iterator with no values.                                                                              // 521\n    return { next: doneResult };                                                                                       // 522\n  }                                                                                                                    // 523\n  runtime.values = values;                                                                                             // 524\n                                                                                                                       // 525\n  function doneResult() {                                                                                              // 526\n    return { value: undefined, done: true };                                                                           // 527\n  }                                                                                                                    // 528\n                                                                                                                       // 529\n  Context.prototype = {                                                                                                // 530\n    constructor: Context,                                                                                              // 531\n                                                                                                                       // 532\n    reset: function(skipTempReset) {                                                                                   // 533\n      this.prev = 0;                                                                                                   // 534\n      this.next = 0;                                                                                                   // 535\n      // Resetting context._sent for legacy support of Babel's                                                         // 536\n      // function.sent implementation.                                                                                 // 537\n      this.sent = this._sent = undefined;                                                                              // 538\n      this.done = false;                                                                                               // 539\n      this.delegate = null;                                                                                            // 540\n                                                                                                                       // 541\n      this.method = \"next\";                                                                                            // 542\n      this.arg = undefined;                                                                                            // 543\n                                                                                                                       // 544\n      this.tryEntries.forEach(resetTryEntry);                                                                          // 545\n                                                                                                                       // 546\n      if (!skipTempReset) {                                                                                            // 547\n        for (var name in this) {                                                                                       // 548\n          // Not sure about the optimal order of these conditions:                                                     // 549\n          if (name.charAt(0) === \"t\" &&                                                                                // 550\n              hasOwn.call(this, name) &&                                                                               // 551\n              !isNaN(+name.slice(1))) {                                                                                // 552\n            this[name] = undefined;                                                                                    // 553\n          }                                                                                                            // 554\n        }                                                                                                              // 555\n      }                                                                                                                // 556\n    },                                                                                                                 // 557\n                                                                                                                       // 558\n    stop: function() {                                                                                                 // 559\n      this.done = true;                                                                                                // 560\n                                                                                                                       // 561\n      var rootEntry = this.tryEntries[0];                                                                              // 562\n      var rootRecord = rootEntry.completion;                                                                           // 563\n      if (rootRecord.type === \"throw\") {                                                                               // 564\n        throw rootRecord.arg;                                                                                          // 565\n      }                                                                                                                // 566\n                                                                                                                       // 567\n      return this.rval;                                                                                                // 568\n    },                                                                                                                 // 569\n                                                                                                                       // 570\n    dispatchException: function(exception) {                                                                           // 571\n      if (this.done) {                                                                                                 // 572\n        throw exception;                                                                                               // 573\n      }                                                                                                                // 574\n                                                                                                                       // 575\n      var context = this;                                                                                              // 576\n      function handle(loc, caught) {                                                                                   // 577\n        record.type = \"throw\";                                                                                         // 578\n        record.arg = exception;                                                                                        // 579\n        context.next = loc;                                                                                            // 580\n                                                                                                                       // 581\n        if (caught) {                                                                                                  // 582\n          // If the dispatched exception was caught by a catch block,                                                  // 583\n          // then let that catch block handle the exception normally.                                                  // 584\n          context.method = \"next\";                                                                                     // 585\n          context.arg = undefined;                                                                                     // 586\n        }                                                                                                              // 587\n                                                                                                                       // 588\n        return !! caught;                                                                                              // 589\n      }                                                                                                                // 590\n                                                                                                                       // 591\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 592\n        var entry = this.tryEntries[i];                                                                                // 593\n        var record = entry.completion;                                                                                 // 594\n                                                                                                                       // 595\n        if (entry.tryLoc === \"root\") {                                                                                 // 596\n          // Exception thrown outside of any try block that could handle                                               // 597\n          // it, so set the completion value of the entire function to                                                 // 598\n          // throw the exception.                                                                                      // 599\n          return handle(\"end\");                                                                                        // 600\n        }                                                                                                              // 601\n                                                                                                                       // 602\n        if (entry.tryLoc <= this.prev) {                                                                               // 603\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");                                                               // 604\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");                                                           // 605\n                                                                                                                       // 606\n          if (hasCatch && hasFinally) {                                                                                // 607\n            if (this.prev < entry.catchLoc) {                                                                          // 608\n              return handle(entry.catchLoc, true);                                                                     // 609\n            } else if (this.prev < entry.finallyLoc) {                                                                 // 610\n              return handle(entry.finallyLoc);                                                                         // 611\n            }                                                                                                          // 612\n                                                                                                                       // 613\n          } else if (hasCatch) {                                                                                       // 614\n            if (this.prev < entry.catchLoc) {                                                                          // 615\n              return handle(entry.catchLoc, true);                                                                     // 616\n            }                                                                                                          // 617\n                                                                                                                       // 618\n          } else if (hasFinally) {                                                                                     // 619\n            if (this.prev < entry.finallyLoc) {                                                                        // 620\n              return handle(entry.finallyLoc);                                                                         // 621\n            }                                                                                                          // 622\n                                                                                                                       // 623\n          } else {                                                                                                     // 624\n            throw new Error(\"try statement without catch or finally\");                                                 // 625\n          }                                                                                                            // 626\n        }                                                                                                              // 627\n      }                                                                                                                // 628\n    },                                                                                                                 // 629\n                                                                                                                       // 630\n    abrupt: function(type, arg) {                                                                                      // 631\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 632\n        var entry = this.tryEntries[i];                                                                                // 633\n        if (entry.tryLoc <= this.prev &&                                                                               // 634\n            hasOwn.call(entry, \"finallyLoc\") &&                                                                        // 635\n            this.prev < entry.finallyLoc) {                                                                            // 636\n          var finallyEntry = entry;                                                                                    // 637\n          break;                                                                                                       // 638\n        }                                                                                                              // 639\n      }                                                                                                                // 640\n                                                                                                                       // 641\n      if (finallyEntry &&                                                                                              // 642\n          (type === \"break\" ||                                                                                         // 643\n           type === \"continue\") &&                                                                                     // 644\n          finallyEntry.tryLoc <= arg &&                                                                                // 645\n          arg <= finallyEntry.finallyLoc) {                                                                            // 646\n        // Ignore the finally entry if control is not jumping to a                                                     // 647\n        // location outside the try/catch block.                                                                       // 648\n        finallyEntry = null;                                                                                           // 649\n      }                                                                                                                // 650\n                                                                                                                       // 651\n      var record = finallyEntry ? finallyEntry.completion : {};                                                        // 652\n      record.type = type;                                                                                              // 653\n      record.arg = arg;                                                                                                // 654\n                                                                                                                       // 655\n      if (finallyEntry) {                                                                                              // 656\n        this.method = \"next\";                                                                                          // 657\n        this.next = finallyEntry.finallyLoc;                                                                           // 658\n        return ContinueSentinel;                                                                                       // 659\n      }                                                                                                                // 660\n                                                                                                                       // 661\n      return this.complete(record);                                                                                    // 662\n    },                                                                                                                 // 663\n                                                                                                                       // 664\n    complete: function(record, afterLoc) {                                                                             // 665\n      if (record.type === \"throw\") {                                                                                   // 666\n        throw record.arg;                                                                                              // 667\n      }                                                                                                                // 668\n                                                                                                                       // 669\n      if (record.type === \"break\" ||                                                                                   // 670\n          record.type === \"continue\") {                                                                                // 671\n        this.next = record.arg;                                                                                        // 672\n      } else if (record.type === \"return\") {                                                                           // 673\n        this.rval = this.arg = record.arg;                                                                             // 674\n        this.method = \"return\";                                                                                        // 675\n        this.next = \"end\";                                                                                             // 676\n      } else if (record.type === \"normal\" && afterLoc) {                                                               // 677\n        this.next = afterLoc;                                                                                          // 678\n      }                                                                                                                // 679\n                                                                                                                       // 680\n      return ContinueSentinel;                                                                                         // 681\n    },                                                                                                                 // 682\n                                                                                                                       // 683\n    finish: function(finallyLoc) {                                                                                     // 684\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 685\n        var entry = this.tryEntries[i];                                                                                // 686\n        if (entry.finallyLoc === finallyLoc) {                                                                         // 687\n          this.complete(entry.completion, entry.afterLoc);                                                             // 688\n          resetTryEntry(entry);                                                                                        // 689\n          return ContinueSentinel;                                                                                     // 690\n        }                                                                                                              // 691\n      }                                                                                                                // 692\n    },                                                                                                                 // 693\n                                                                                                                       // 694\n    \"catch\": function(tryLoc) {                                                                                        // 695\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 696\n        var entry = this.tryEntries[i];                                                                                // 697\n        if (entry.tryLoc === tryLoc) {                                                                                 // 698\n          var record = entry.completion;                                                                               // 699\n          if (record.type === \"throw\") {                                                                               // 700\n            var thrown = record.arg;                                                                                   // 701\n            resetTryEntry(entry);                                                                                      // 702\n          }                                                                                                            // 703\n          return thrown;                                                                                               // 704\n        }                                                                                                              // 705\n      }                                                                                                                // 706\n                                                                                                                       // 707\n      // The context.catch method must only be called with a location                                                  // 708\n      // argument that corresponds to a known catch block.                                                             // 709\n      throw new Error(\"illegal catch attempt\");                                                                        // 710\n    },                                                                                                                 // 711\n                                                                                                                       // 712\n    delegateYield: function(iterable, resultName, nextLoc) {                                                           // 713\n      this.delegate = {                                                                                                // 714\n        iterator: values(iterable),                                                                                    // 715\n        resultName: resultName,                                                                                        // 716\n        nextLoc: nextLoc                                                                                               // 717\n      };                                                                                                               // 718\n                                                                                                                       // 719\n      if (this.method === \"next\") {                                                                                    // 720\n        // Deliberately forget the last sent value so that we don't                                                    // 721\n        // accidentally pass it on to the delegate.                                                                    // 722\n        this.arg = undefined;                                                                                          // 723\n      }                                                                                                                // 724\n                                                                                                                       // 725\n      return ContinueSentinel;                                                                                         // 726\n    }                                                                                                                  // 727\n  };                                                                                                                   // 728\n})(                                                                                                                    // 729\n  // Among the various tricks for obtaining a reference to the global                                                  // 730\n  // object, this seems to be the most reliable technique that does not                                                // 731\n  // use indirect eval (which violates Content Security Policy).                                                       // 732\n  typeof global === \"object\" ? global :                                                                                // 733\n  typeof window === \"object\" ? window :                                                                                // 734\n  typeof self === \"object\" ? self : this                                                                               // 735\n);                                                                                                                     // 736\n                                                                                                                       // 737\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"core-js\":{\"library\":{\"fn\":{\"symbol\":{\"iterator.js\":[\"../../modules/es6.string.iterator\",\"../../modules/web.dom.iterable\",\"../../modules/_wks-ext\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/symbol/iterator.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.string.iterator');                                                                          // 1\nrequire('../../modules/web.dom.iterable');                                                                             // 2\nmodule.exports = require('../../modules/_wks-ext').f('iterator');                                                      // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"index.js\":[\"../../modules/es6.symbol\",\"../../modules/es6.object.to-string\",\"../../modules/es7.symbol.async-iterator\",\"../../modules/es7.symbol.observable\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/symbol/index.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.symbol');                                                                                   // 1\nrequire('../../modules/es6.object.to-string');                                                                         // 2\nrequire('../../modules/es7.symbol.async-iterator');                                                                    // 3\nrequire('../../modules/es7.symbol.observable');                                                                        // 4\nmodule.exports = require('../../modules/_core').Symbol;                                                                // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"object\":{\"set-prototype-of.js\":[\"../../modules/es6.object.set-prototype-of\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.object.set-prototype-of');                                                                  // 1\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;                                                 // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"create.js\":[\"../../modules/es6.object.create\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/object/create.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.object.create');                                                                            // 1\nvar $Object = require('../../modules/_core').Object;                                                                   // 2\nmodule.exports = function create(P, D){                                                                                // 3\n  return $Object.create(P, D);                                                                                         // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"modules\":{\"es6.string.iterator.js\":[\"./_string-at\",\"./_iter-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.string.iterator.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar $at  = require('./_string-at')(true);                                                                              // 2\n                                                                                                                       // 3\n// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4\nrequire('./_iter-define')(String, 'String', function(iterated){                                                        // 5\n  this._t = String(iterated); // target                                                                                // 6\n  this._i = 0;                // next index                                                                            // 7\n// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8\n}, function(){                                                                                                         // 9\n  var O     = this._t                                                                                                  // 10\n    , index = this._i                                                                                                  // 11\n    , point;                                                                                                           // 12\n  if(index >= O.length)return {value: undefined, done: true};                                                          // 13\n  point = $at(O, index);                                                                                               // 14\n  this._i += point.length;                                                                                             // 15\n  return {value: point, done: false};                                                                                  // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_string-at.js\":[\"./_to-integer\",\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_string-at.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toInteger = require('./_to-integer')                                                                               // 1\n  , defined   = require('./_defined');                                                                                 // 2\n// true  -> String#at                                                                                                  // 3\n// false -> String#codePointAt                                                                                         // 4\nmodule.exports = function(TO_STRING){                                                                                  // 5\n  return function(that, pos){                                                                                          // 6\n    var s = String(defined(that))                                                                                      // 7\n      , i = toInteger(pos)                                                                                             // 8\n      , l = s.length                                                                                                   // 9\n      , a, b;                                                                                                          // 10\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                              // 11\n    a = s.charCodeAt(i);                                                                                               // 12\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13\n      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15\n  };                                                                                                                   // 16\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-integer.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-integer.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.4 ToInteger                                                                                                     // 1\nvar ceil  = Math.ceil                                                                                                  // 2\n  , floor = Math.floor;                                                                                                // 3\nmodule.exports = function(it){                                                                                         // 4\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_defined.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_defined.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1\nmodule.exports = function(it){                                                                                         // 2\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);                                                   // 3\n  return it;                                                                                                           // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-define.js\":[\"./_library\",\"./_export\",\"./_redefine\",\"./_hide\",\"./_has\",\"./_iterators\",\"./_iter-create\",\"./_set-to-string-tag\",\"./_object-gpo\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-define.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar LIBRARY        = require('./_library')                                                                             // 2\n  , $export        = require('./_export')                                                                              // 3\n  , redefine       = require('./_redefine')                                                                            // 4\n  , hide           = require('./_hide')                                                                                // 5\n  , has            = require('./_has')                                                                                 // 6\n  , Iterators      = require('./_iterators')                                                                           // 7\n  , $iterCreate    = require('./_iter-create')                                                                         // 8\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 9\n  , getPrototypeOf = require('./_object-gpo')                                                                          // 10\n  , ITERATOR       = require('./_wks')('iterator')                                                                     // 11\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12\n  , FF_ITERATOR    = '@@iterator'                                                                                      // 13\n  , KEYS           = 'keys'                                                                                            // 14\n  , VALUES         = 'values';                                                                                         // 15\n                                                                                                                       // 16\nvar returnThis = function(){ return this; };                                                                           // 17\n                                                                                                                       // 18\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                     // 19\n  $iterCreate(Constructor, NAME, next);                                                                                // 20\n  var getMethod = function(kind){                                                                                      // 21\n    if(!BUGGY && kind in proto)return proto[kind];                                                                     // 22\n    switch(kind){                                                                                                      // 23\n      case KEYS: return function keys(){ return new Constructor(this, kind); };                                        // 24\n      case VALUES: return function values(){ return new Constructor(this, kind); };                                    // 25\n    } return function entries(){ return new Constructor(this, kind); };                                                // 26\n  };                                                                                                                   // 27\n  var TAG        = NAME + ' Iterator'                                                                                  // 28\n    , DEF_VALUES = DEFAULT == VALUES                                                                                   // 29\n    , VALUES_BUG = false                                                                                               // 30\n    , proto      = Base.prototype                                                                                      // 31\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                  // 32\n    , $default   = $native || getMethod(DEFAULT)                                                                       // 33\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                 // 34\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                                // 35\n    , methods, key, IteratorPrototype;                                                                                 // 36\n  // Fix native                                                                                                        // 37\n  if($anyNative){                                                                                                      // 38\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                     // 39\n    if(IteratorPrototype !== Object.prototype){                                                                        // 40\n      // Set @@toStringTag to native iterators                                                                         // 41\n      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42\n      // fix for some old engines                                                                                      // 43\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                  // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47\n  if(DEF_VALUES && $native && $native.name !== VALUES){                                                                // 48\n    VALUES_BUG = true;                                                                                                 // 49\n    $default = function values(){ return $native.call(this); };                                                        // 50\n  }                                                                                                                    // 51\n  // Define iterator                                                                                                   // 52\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                               // 53\n    hide(proto, ITERATOR, $default);                                                                                   // 54\n  }                                                                                                                    // 55\n  // Plug for library                                                                                                  // 56\n  Iterators[NAME] = $default;                                                                                          // 57\n  Iterators[TAG]  = returnThis;                                                                                        // 58\n  if(DEFAULT){                                                                                                         // 59\n    methods = {                                                                                                        // 60\n      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                              // 61\n      keys:    IS_SET     ? $default : getMethod(KEYS),                                                                // 62\n      entries: $entries                                                                                                // 63\n    };                                                                                                                 // 64\n    if(FORCED)for(key in methods){                                                                                     // 65\n      if(!(key in proto))redefine(proto, key, methods[key]);                                                           // 66\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67\n  }                                                                                                                    // 68\n  return methods;                                                                                                      // 69\n};                                                                                                                     // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_library.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_library.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = true;                                                                                                 // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_export.js\":[\"./_global\",\"./_core\",\"./_ctx\",\"./_hide\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_export.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global    = require('./_global')                                                                                   // 1\n  , core      = require('./_core')                                                                                     // 2\n  , ctx       = require('./_ctx')                                                                                      // 3\n  , hide      = require('./_hide')                                                                                     // 4\n  , PROTOTYPE = 'prototype';                                                                                           // 5\n                                                                                                                       // 6\nvar $export = function(type, name, source){                                                                            // 7\n  var IS_FORCED = type & $export.F                                                                                     // 8\n    , IS_GLOBAL = type & $export.G                                                                                     // 9\n    , IS_STATIC = type & $export.S                                                                                     // 10\n    , IS_PROTO  = type & $export.P                                                                                     // 11\n    , IS_BIND   = type & $export.B                                                                                     // 12\n    , IS_WRAP   = type & $export.W                                                                                     // 13\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                   // 14\n    , expProto  = exports[PROTOTYPE]                                                                                   // 15\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]                      // 16\n    , key, own, out;                                                                                                   // 17\n  if(IS_GLOBAL)source = name;                                                                                          // 18\n  for(key in source){                                                                                                  // 19\n    // contains in native                                                                                              // 20\n    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21\n    if(own && key in exports)continue;                                                                                 // 22\n    // export native or passed                                                                                         // 23\n    out = own ? target[key] : source[key];                                                                             // 24\n    // prevent global pollution for namespaces                                                                         // 25\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                         // 26\n    // bind timers to global for call from export context                                                              // 27\n    : IS_BIND && own ? ctx(out, global)                                                                                // 28\n    // wrap global constructors for prevent change them in library                                                     // 29\n    : IS_WRAP && target[key] == out ? (function(C){                                                                    // 30\n      var F = function(a, b, c){                                                                                       // 31\n        if(this instanceof C){                                                                                         // 32\n          switch(arguments.length){                                                                                    // 33\n            case 0: return new C;                                                                                      // 34\n            case 1: return new C(a);                                                                                   // 35\n            case 2: return new C(a, b);                                                                                // 36\n          } return new C(a, b, c);                                                                                     // 37\n        } return C.apply(this, arguments);                                                                             // 38\n      };                                                                                                               // 39\n      F[PROTOTYPE] = C[PROTOTYPE];                                                                                     // 40\n      return F;                                                                                                        // 41\n    // make static versions for prototype methods                                                                      // 42\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                    // 43\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44\n    if(IS_PROTO){                                                                                                      // 45\n      (exports.virtual || (exports.virtual = {}))[key] = out;                                                          // 46\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);                                      // 48\n    }                                                                                                                  // 49\n  }                                                                                                                    // 50\n};                                                                                                                     // 51\n// type bitmap                                                                                                         // 52\n$export.F = 1;   // forced                                                                                             // 53\n$export.G = 2;   // global                                                                                             // 54\n$export.S = 4;   // static                                                                                             // 55\n$export.P = 8;   // proto                                                                                              // 56\n$export.B = 16;  // bind                                                                                               // 57\n$export.W = 32;  // wrap                                                                                               // 58\n$export.U = 64;  // safe                                                                                               // 59\n$export.R = 128; // real proto method for `library`                                                                    // 60\nmodule.exports = $export;                                                                                              // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_global.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_global.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                       // 3\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                                // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_core.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_core.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar core = module.exports = {version: '2.4.0'};                                                                        // 1\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_ctx.js\":[\"./_a-function\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_ctx.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// optional / simple context binding                                                                                   // 1\nvar aFunction = require('./_a-function');                                                                              // 2\nmodule.exports = function(fn, that, length){                                                                           // 3\n  aFunction(fn);                                                                                                       // 4\n  if(that === undefined)return fn;                                                                                     // 5\n  switch(length){                                                                                                      // 6\n    case 1: return function(a){                                                                                        // 7\n      return fn.call(that, a);                                                                                         // 8\n    };                                                                                                                 // 9\n    case 2: return function(a, b){                                                                                     // 10\n      return fn.call(that, a, b);                                                                                      // 11\n    };                                                                                                                 // 12\n    case 3: return function(a, b, c){                                                                                  // 13\n      return fn.call(that, a, b, c);                                                                                   // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n  return function(/* ...args */){                                                                                      // 17\n    return fn.apply(that, arguments);                                                                                  // 18\n  };                                                                                                                   // 19\n};                                                                                                                     // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_a-function.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_a-function.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(it){                                                                                         // 1\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                              // 2\n  return it;                                                                                                           // 3\n};                                                                                                                     // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_hide.js\":[\"./_object-dp\",\"./_property-desc\",\"./_descriptors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_hide.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dP         = require('./_object-dp')                                                                               // 1\n  , createDesc = require('./_property-desc');                                                                          // 2\nmodule.exports = require('./_descriptors') ? function(object, key, value){                                             // 3\n  return dP.f(object, key, createDesc(1, value));                                                                      // 4\n} : function(object, key, value){                                                                                      // 5\n  object[key] = value;                                                                                                 // 6\n  return object;                                                                                                       // 7\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-dp.js\":[\"./_an-object\",\"./_ie8-dom-define\",\"./_to-primitive\",\"./_descriptors\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-dp.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar anObject       = require('./_an-object')                                                                           // 1\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 2\n  , toPrimitive    = require('./_to-primitive')                                                                        // 3\n  , dP             = Object.defineProperty;                                                                            // 4\n                                                                                                                       // 5\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){             // 6\n  anObject(O);                                                                                                         // 7\n  P = toPrimitive(P, true);                                                                                            // 8\n  anObject(Attributes);                                                                                                // 9\n  if(IE8_DOM_DEFINE)try {                                                                                              // 10\n    return dP(O, P, Attributes);                                                                                       // 11\n  } catch(e){ /* empty */ }                                                                                            // 12\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                           // 13\n  if('value' in Attributes)O[P] = Attributes.value;                                                                    // 14\n  return O;                                                                                                            // 15\n};                                                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_an-object.js\":[\"./_is-object\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_an-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isObject = require('./_is-object');                                                                                // 1\nmodule.exports = function(it){                                                                                         // 2\n  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                         // 3\n  return it;                                                                                                           // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_is-object.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_is-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(it){                                                                                         // 1\n  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2\n};                                                                                                                     // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_ie8-dom-define.js\":[\"./_descriptors\",\"./_fails\",\"./_dom-create\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = !require('./_descriptors') && !require('./_fails')(function(){                                        // 1\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;           // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_descriptors.js\":[\"./_fails\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_descriptors.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Thank's IE8 for his funny defineProperty                                                                            // 1\nmodule.exports = !require('./_fails')(function(){                                                                      // 2\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                        // 3\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_fails.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_fails.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(exec){                                                                                       // 1\n  try {                                                                                                                // 2\n    return !!exec();                                                                                                   // 3\n  } catch(e){                                                                                                          // 4\n    return true;                                                                                                       // 5\n  }                                                                                                                    // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_dom-create.js\":[\"./_is-object\",\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_dom-create.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isObject = require('./_is-object')                                                                                 // 1\n  , document = require('./_global').document                                                                           // 2\n  // in old IE typeof document.createElement is 'object'                                                               // 3\n  , is = isObject(document) && isObject(document.createElement);                                                       // 4\nmodule.exports = function(it){                                                                                         // 5\n  return is ? document.createElement(it) : {};                                                                         // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-primitive.js\":[\"./_is-object\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-primitive.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1\nvar isObject = require('./_is-object');                                                                                // 2\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3\n// and the second argument - flag - preferred type is a string                                                         // 4\nmodule.exports = function(it, S){                                                                                      // 5\n  if(!isObject(it))return it;                                                                                          // 6\n  var fn, val;                                                                                                         // 7\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                          // 8\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                                // 9\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 10\n  throw TypeError(\"Can't convert object to primitive value\");                                                          // 11\n};                                                                                                                     // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_property-desc.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_property-desc.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(bitmap, value){                                                                              // 1\n  return {                                                                                                             // 2\n    enumerable  : !(bitmap & 1),                                                                                       // 3\n    configurable: !(bitmap & 2),                                                                                       // 4\n    writable    : !(bitmap & 4),                                                                                       // 5\n    value       : value                                                                                                // 6\n  };                                                                                                                   // 7\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_redefine.js\":[\"./_hide\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_redefine.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('./_hide');                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_has.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_has.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwnProperty = {}.hasOwnProperty;                                                                                // 1\nmodule.exports = function(it, key){                                                                                    // 2\n  return hasOwnProperty.call(it, key);                                                                                 // 3\n};                                                                                                                     // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iterators.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iterators.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {};                                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-create.js\":[\"./_object-create\",\"./_property-desc\",\"./_set-to-string-tag\",\"./_hide\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-create.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar create         = require('./_object-create')                                                                       // 2\n  , descriptor     = require('./_property-desc')                                                                       // 3\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 4\n  , IteratorPrototype = {};                                                                                            // 5\n                                                                                                                       // 6\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });                      // 8\n                                                                                                                       // 9\nmodule.exports = function(Constructor, NAME, next){                                                                    // 10\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                      // 11\n  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-create.js\":[\"./_an-object\",\"./_object-dps\",\"./_enum-bug-keys\",\"./_shared-key\",\"./_dom-create\",\"./_html\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-create.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1\nvar anObject    = require('./_an-object')                                                                              // 2\n  , dPs         = require('./_object-dps')                                                                             // 3\n  , enumBugKeys = require('./_enum-bug-keys')                                                                          // 4\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 5\n  , Empty       = function(){ /* empty */ }                                                                            // 6\n  , PROTOTYPE   = 'prototype';                                                                                         // 7\n                                                                                                                       // 8\n// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9\nvar createDict = function(){                                                                                           // 10\n  // Thrash, waste and sodomy: IE GC bug                                                                               // 11\n  var iframe = require('./_dom-create')('iframe')                                                                      // 12\n    , i      = enumBugKeys.length                                                                                      // 13\n    , lt     = '<'                                                                                                     // 14\n    , gt     = '>'                                                                                                     // 15\n    , iframeDocument;                                                                                                  // 16\n  iframe.style.display = 'none';                                                                                       // 17\n  require('./_html').appendChild(iframe);                                                                              // 18\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19\n  // createDict = iframe.contentWindow.Object;                                                                         // 20\n  // html.removeChild(iframe);                                                                                         // 21\n  iframeDocument = iframe.contentWindow.document;                                                                      // 22\n  iframeDocument.open();                                                                                               // 23\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24\n  iframeDocument.close();                                                                                              // 25\n  createDict = iframeDocument.F;                                                                                       // 26\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];                                                              // 27\n  return createDict();                                                                                                 // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\nmodule.exports = Object.create || function create(O, Properties){                                                      // 31\n  var result;                                                                                                          // 32\n  if(O !== null){                                                                                                      // 33\n    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34\n    result = new Empty;                                                                                                // 35\n    Empty[PROTOTYPE] = null;                                                                                           // 36\n    // add \"__proto__\" for Object.getPrototypeOf polyfill                                                              // 37\n    result[IE_PROTO] = O;                                                                                              // 38\n  } else result = createDict();                                                                                        // 39\n  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-dps.js\":[\"./_object-dp\",\"./_an-object\",\"./_object-keys\",\"./_descriptors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-dps.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dP       = require('./_object-dp')                                                                                 // 1\n  , anObject = require('./_an-object')                                                                                 // 2\n  , getKeys  = require('./_object-keys');                                                                              // 3\n                                                                                                                       // 4\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){       // 5\n  anObject(O);                                                                                                         // 6\n  var keys   = getKeys(Properties)                                                                                     // 7\n    , length = keys.length                                                                                             // 8\n    , i = 0                                                                                                            // 9\n    , P;                                                                                                               // 10\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);                                                              // 11\n  return O;                                                                                                            // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-keys.js\":[\"./_object-keys-internal\",\"./_enum-bug-keys\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-keys.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1\nvar $keys       = require('./_object-keys-internal')                                                                   // 2\n  , enumBugKeys = require('./_enum-bug-keys');                                                                         // 3\n                                                                                                                       // 4\nmodule.exports = Object.keys || function keys(O){                                                                      // 5\n  return $keys(O, enumBugKeys);                                                                                        // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-keys-internal.js\":[\"./_has\",\"./_to-iobject\",\"./_array-includes\",\"./_shared-key\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-keys-internal.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar has          = require('./_has')                                                                                   // 1\n  , toIObject    = require('./_to-iobject')                                                                            // 2\n  , arrayIndexOf = require('./_array-includes')(false)                                                                 // 3\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');                                                               // 4\n                                                                                                                       // 5\nmodule.exports = function(object, names){                                                                              // 6\n  var O      = toIObject(object)                                                                                       // 7\n    , i      = 0                                                                                                       // 8\n    , result = []                                                                                                      // 9\n    , key;                                                                                                             // 10\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);                                                     // 11\n  // Don't enum bug & hidden keys                                                                                      // 12\n  while(names.length > i)if(has(O, key = names[i++])){                                                                 // 13\n    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14\n  }                                                                                                                    // 15\n  return result;                                                                                                       // 16\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-iobject.js\":[\"./_iobject\",\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-iobject.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1\nvar IObject = require('./_iobject')                                                                                    // 2\n  , defined = require('./_defined');                                                                                   // 3\nmodule.exports = function(it){                                                                                         // 4\n  return IObject(defined(it));                                                                                         // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_iobject.js\":[\"./_cof\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iobject.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1\nvar cof = require('./_cof');                                                                                           // 2\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                          // 3\n  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_cof.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_cof.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toString = {}.toString;                                                                                            // 1\n                                                                                                                       // 2\nmodule.exports = function(it){                                                                                         // 3\n  return toString.call(it).slice(8, -1);                                                                               // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_array-includes.js\":[\"./_to-iobject\",\"./_to-length\",\"./_to-index\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_array-includes.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// false -> Array#indexOf                                                                                              // 1\n// true  -> Array#includes                                                                                             // 2\nvar toIObject = require('./_to-iobject')                                                                               // 3\n  , toLength  = require('./_to-length')                                                                                // 4\n  , toIndex   = require('./_to-index');                                                                                // 5\nmodule.exports = function(IS_INCLUDES){                                                                                // 6\n  return function($this, el, fromIndex){                                                                               // 7\n    var O      = toIObject($this)                                                                                      // 8\n      , length = toLength(O.length)                                                                                    // 9\n      , index  = toIndex(fromIndex, length)                                                                            // 10\n      , value;                                                                                                         // 11\n    // Array#includes uses SameValueZero equality algorithm                                                            // 12\n    if(IS_INCLUDES && el != el)while(length > index){                                                                  // 13\n      value = O[index++];                                                                                              // 14\n      if(value != value)return true;                                                                                   // 15\n    // Array#toIndex ignores holes, Array#includes - not                                                               // 16\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                 // 17\n      if(O[index] === el)return IS_INCLUDES || index || 0;                                                             // 18\n    } return !IS_INCLUDES && -1;                                                                                       // 19\n  };                                                                                                                   // 20\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-length.js\":[\"./_to-integer\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-length.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.15 ToLength                                                                                                     // 1\nvar toInteger = require('./_to-integer')                                                                               // 2\n  , min       = Math.min;                                                                                              // 3\nmodule.exports = function(it){                                                                                         // 4\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-index.js\":[\"./_to-integer\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-index.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toInteger = require('./_to-integer')                                                                               // 1\n  , max       = Math.max                                                                                               // 2\n  , min       = Math.min;                                                                                              // 3\nmodule.exports = function(index, length){                                                                              // 4\n  index = toInteger(index);                                                                                            // 5\n  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_shared-key.js\":[\"./_shared\",\"./_uid\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_shared-key.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar shared = require('./_shared')('keys')                                                                              // 1\n  , uid    = require('./_uid');                                                                                        // 2\nmodule.exports = function(key){                                                                                        // 3\n  return shared[key] || (shared[key] = uid(key));                                                                      // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_shared.js\":[\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_shared.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global = require('./_global')                                                                                      // 1\n  , SHARED = '__core-js_shared__'                                                                                      // 2\n  , store  = global[SHARED] || (global[SHARED] = {});                                                                  // 3\nmodule.exports = function(key){                                                                                        // 4\n  return store[key] || (store[key] = {});                                                                              // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_uid.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_uid.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar id = 0                                                                                                             // 1\n  , px = Math.random();                                                                                                // 2\nmodule.exports = function(key){                                                                                        // 3\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_enum-bug-keys.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// IE 8- don't enum bug keys                                                                                           // 1\nmodule.exports = (                                                                                                     // 2\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3\n).split(',');                                                                                                          // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_html.js\":[\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_html.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('./_global').document && document.documentElement;                                            // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_set-to-string-tag.js\":[\"./_object-dp\",\"./_has\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar def = require('./_object-dp').f                                                                                    // 1\n  , has = require('./_has')                                                                                            // 2\n  , TAG = require('./_wks')('toStringTag');                                                                            // 3\n                                                                                                                       // 4\nmodule.exports = function(it, tag, stat){                                                                              // 5\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                    // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_wks.js\":[\"./_shared\",\"./_uid\",\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar store      = require('./_shared')('wks')                                                                           // 1\n  , uid        = require('./_uid')                                                                                     // 2\n  , Symbol     = require('./_global').Symbol                                                                           // 3\n  , USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4\n                                                                                                                       // 5\nvar $exports = module.exports = function(name){                                                                        // 6\n  return store[name] || (store[name] =                                                                                 // 7\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8\n};                                                                                                                     // 9\n                                                                                                                       // 10\n$exports.store = store;                                                                                                // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gpo.js\":[\"./_has\",\"./_to-object\",\"./_shared-key\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gpo.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1\nvar has         = require('./_has')                                                                                    // 2\n  , toObject    = require('./_to-object')                                                                              // 3\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 4\n  , ObjectProto = Object.prototype;                                                                                    // 5\n                                                                                                                       // 6\nmodule.exports = Object.getPrototypeOf || function(O){                                                                 // 7\n  O = toObject(O);                                                                                                     // 8\n  if(has(O, IE_PROTO))return O[IE_PROTO];                                                                              // 9\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){                                                // 10\n    return O.constructor.prototype;                                                                                    // 11\n  } return O instanceof Object ? ObjectProto : null;                                                                   // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-object.js\":[\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.13 ToObject(argument)                                                                                           // 1\nvar defined = require('./_defined');                                                                                   // 2\nmodule.exports = function(it){                                                                                         // 3\n  return Object(defined(it));                                                                                          // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"web.dom.iterable.js\":[\"./es6.array.iterator\",\"./_global\",\"./_hide\",\"./_iterators\",\"./_wks\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/web.dom.iterable.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./es6.array.iterator');                                                                                       // 1\nvar global        = require('./_global')                                                                               // 2\n  , hide          = require('./_hide')                                                                                 // 3\n  , Iterators     = require('./_iterators')                                                                            // 4\n  , TO_STRING_TAG = require('./_wks')('toStringTag');                                                                  // 5\n                                                                                                                       // 6\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){  // 7\n  var NAME       = collections[i]                                                                                      // 8\n    , Collection = global[NAME]                                                                                        // 9\n    , proto      = Collection && Collection.prototype;                                                                 // 10\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                  // 11\n  Iterators[NAME] = Iterators.Array;                                                                                   // 12\n}                                                                                                                      // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.array.iterator.js\":[\"./_add-to-unscopables\",\"./_iter-step\",\"./_iterators\",\"./_to-iobject\",\"./_iter-define\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.array.iterator.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar addToUnscopables = require('./_add-to-unscopables')                                                                // 2\n  , step             = require('./_iter-step')                                                                         // 3\n  , Iterators        = require('./_iterators')                                                                         // 4\n  , toIObject        = require('./_to-iobject');                                                                       // 5\n                                                                                                                       // 6\n// 22.1.3.4 Array.prototype.entries()                                                                                  // 7\n// 22.1.3.13 Array.prototype.keys()                                                                                    // 8\n// 22.1.3.29 Array.prototype.values()                                                                                  // 9\n// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){                                   // 11\n  this._t = toIObject(iterated); // target                                                                             // 12\n  this._i = 0;                   // next index                                                                         // 13\n  this._k = kind;                // kind                                                                               // 14\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15\n}, function(){                                                                                                         // 16\n  var O     = this._t                                                                                                  // 17\n    , kind  = this._k                                                                                                  // 18\n    , index = this._i++;                                                                                               // 19\n  if(!O || index >= O.length){                                                                                         // 20\n    this._t = undefined;                                                                                               // 21\n    return step(1);                                                                                                    // 22\n  }                                                                                                                    // 23\n  if(kind == 'keys'  )return step(0, index);                                                                           // 24\n  if(kind == 'values')return step(0, O[index]);                                                                        // 25\n  return step(0, [index, O[index]]);                                                                                   // 26\n}, 'values');                                                                                                          // 27\n                                                                                                                       // 28\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29\nIterators.Arguments = Iterators.Array;                                                                                 // 30\n                                                                                                                       // 31\naddToUnscopables('keys');                                                                                              // 32\naddToUnscopables('values');                                                                                            // 33\naddToUnscopables('entries');                                                                                           // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_add-to-unscopables.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(){ /* empty */ };                                                                            // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-step.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-step.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(done, value){                                                                                // 1\n  return {value: value, done: !!done};                                                                                 // 2\n};                                                                                                                     // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_wks-ext.js\":[\"./_wks\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks-ext.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = require('./_wks');                                                                                         // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.symbol.js\":[\"./_global\",\"./_has\",\"./_descriptors\",\"./_export\",\"./_redefine\",\"./_meta\",\"./_fails\",\"./_shared\",\"./_set-to-string-tag\",\"./_uid\",\"./_wks\",\"./_wks-ext\",\"./_wks-define\",\"./_keyof\",\"./_enum-keys\",\"./_is-array\",\"./_an-object\",\"./_to-iobject\",\"./_to-primitive\",\"./_property-desc\",\"./_object-create\",\"./_object-gopn-ext\",\"./_object-gopd\",\"./_object-dp\",\"./_object-keys\",\"./_object-gopn\",\"./_object-pie\",\"./_object-gops\",\"./_library\",\"./_hide\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.symbol.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n// ECMAScript 6 symbols shim                                                                                           // 2\nvar global         = require('./_global')                                                                              // 3\n  , has            = require('./_has')                                                                                 // 4\n  , DESCRIPTORS    = require('./_descriptors')                                                                         // 5\n  , $export        = require('./_export')                                                                              // 6\n  , redefine       = require('./_redefine')                                                                            // 7\n  , META           = require('./_meta').KEY                                                                            // 8\n  , $fails         = require('./_fails')                                                                               // 9\n  , shared         = require('./_shared')                                                                              // 10\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 11\n  , uid            = require('./_uid')                                                                                 // 12\n  , wks            = require('./_wks')                                                                                 // 13\n  , wksExt         = require('./_wks-ext')                                                                             // 14\n  , wksDefine      = require('./_wks-define')                                                                          // 15\n  , keyOf          = require('./_keyof')                                                                               // 16\n  , enumKeys       = require('./_enum-keys')                                                                           // 17\n  , isArray        = require('./_is-array')                                                                            // 18\n  , anObject       = require('./_an-object')                                                                           // 19\n  , toIObject      = require('./_to-iobject')                                                                          // 20\n  , toPrimitive    = require('./_to-primitive')                                                                        // 21\n  , createDesc     = require('./_property-desc')                                                                       // 22\n  , _create        = require('./_object-create')                                                                       // 23\n  , gOPNExt        = require('./_object-gopn-ext')                                                                     // 24\n  , $GOPD          = require('./_object-gopd')                                                                         // 25\n  , $DP            = require('./_object-dp')                                                                           // 26\n  , $keys          = require('./_object-keys')                                                                         // 27\n  , gOPD           = $GOPD.f                                                                                           // 28\n  , dP             = $DP.f                                                                                             // 29\n  , gOPN           = gOPNExt.f                                                                                         // 30\n  , $Symbol        = global.Symbol                                                                                     // 31\n  , $JSON          = global.JSON                                                                                       // 32\n  , _stringify     = $JSON && $JSON.stringify                                                                          // 33\n  , PROTOTYPE      = 'prototype'                                                                                       // 34\n  , HIDDEN         = wks('_hidden')                                                                                    // 35\n  , TO_PRIMITIVE   = wks('toPrimitive')                                                                                // 36\n  , isEnum         = {}.propertyIsEnumerable                                                                           // 37\n  , SymbolRegistry = shared('symbol-registry')                                                                         // 38\n  , AllSymbols     = shared('symbols')                                                                                 // 39\n  , OPSymbols      = shared('op-symbols')                                                                              // 40\n  , ObjectProto    = Object[PROTOTYPE]                                                                                 // 41\n  , USE_NATIVE     = typeof $Symbol == 'function'                                                                      // 42\n  , QObject        = global.QObject;                                                                                   // 43\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45\n                                                                                                                       // 46\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){                                                                  // 48\n  return _create(dP({}, 'a', {                                                                                         // 49\n    get: function(){ return dP(this, 'a', {value: 7}).a; }                                                             // 50\n  })).a != 7;                                                                                                          // 51\n}) ? function(it, key, D){                                                                                             // 52\n  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53\n  if(protoDesc)delete ObjectProto[key];                                                                                // 54\n  dP(it, key, D);                                                                                                      // 55\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);                                                  // 56\n} : dP;                                                                                                                // 57\n                                                                                                                       // 58\nvar wrap = function(tag){                                                                                              // 59\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60\n  sym._k = tag;                                                                                                        // 61\n  return sym;                                                                                                          // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){                                       // 65\n  return typeof it == 'symbol';                                                                                        // 66\n} : function(it){                                                                                                      // 67\n  return it instanceof $Symbol;                                                                                        // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\nvar $defineProperty = function defineProperty(it, key, D){                                                             // 71\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);                                                            // 72\n  anObject(it);                                                                                                        // 73\n  key = toPrimitive(key, true);                                                                                        // 74\n  anObject(D);                                                                                                         // 75\n  if(has(AllSymbols, key)){                                                                                            // 76\n    if(!D.enumerable){                                                                                                 // 77\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));                                                           // 78\n      it[HIDDEN][key] = true;                                                                                          // 79\n    } else {                                                                                                           // 80\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                                   // 81\n      D = _create(D, {enumerable: createDesc(0, false)});                                                              // 82\n    } return setSymbolDesc(it, key, D);                                                                                // 83\n  } return dP(it, key, D);                                                                                             // 84\n};                                                                                                                     // 85\nvar $defineProperties = function defineProperties(it, P){                                                              // 86\n  anObject(it);                                                                                                        // 87\n  var keys = enumKeys(P = toIObject(P))                                                                                // 88\n    , i    = 0                                                                                                         // 89\n    , l = keys.length                                                                                                  // 90\n    , key;                                                                                                             // 91\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                            // 92\n  return it;                                                                                                           // 93\n};                                                                                                                     // 94\nvar $create = function create(it, P){                                                                                  // 95\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96\n};                                                                                                                     // 97\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){                                                        // 98\n  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;                                // 100\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101\n};                                                                                                                     // 102\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                            // 103\n  it  = toIObject(it);                                                                                                 // 104\n  key = toPrimitive(key, true);                                                                                        // 105\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;                                        // 106\n  var D = gOPD(it, key);                                                                                               // 107\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                           // 108\n  return D;                                                                                                            // 109\n};                                                                                                                     // 110\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){                                                           // 111\n  var names  = gOPN(toIObject(it))                                                                                     // 112\n    , result = []                                                                                                      // 113\n    , i      = 0                                                                                                       // 114\n    , key;                                                                                                             // 115\n  while(names.length > i){                                                                                             // 116\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);                            // 117\n  } return result;                                                                                                     // 118\n};                                                                                                                     // 119\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                                       // 120\n  var IS_OP  = it === ObjectProto                                                                                      // 121\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))                                                                 // 122\n    , result = []                                                                                                      // 123\n    , i      = 0                                                                                                       // 124\n    , key;                                                                                                             // 125\n  while(names.length > i){                                                                                             // 126\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);       // 127\n  } return result;                                                                                                     // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n// 19.4.1.1 Symbol([description])                                                                                      // 131\nif(!USE_NATIVE){                                                                                                       // 132\n  $Symbol = function Symbol(){                                                                                         // 133\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');                                        // 134\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135\n    var $set = function(value){                                                                                        // 136\n      if(this === ObjectProto)$set.call(OPSymbols, value);                                                             // 137\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                                        // 138\n      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139\n    };                                                                                                                 // 140\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});                         // 141\n    return wrap(tag);                                                                                                  // 142\n  };                                                                                                                   // 143\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){                                                        // 144\n    return this._k;                                                                                                    // 145\n  });                                                                                                                  // 146\n                                                                                                                       // 147\n  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148\n  $DP.f   = $defineProperty;                                                                                           // 149\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150\n  require('./_object-pie').f  = $propertyIsEnumerable;                                                                 // 151\n  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152\n                                                                                                                       // 153\n  if(DESCRIPTORS && !require('./_library')){                                                                           // 154\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155\n  }                                                                                                                    // 156\n                                                                                                                       // 157\n  wksExt.f = function(name){                                                                                           // 158\n    return wrap(wks(name));                                                                                            // 159\n  }                                                                                                                    // 160\n}                                                                                                                      // 161\n                                                                                                                       // 162\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});                                           // 163\n                                                                                                                       // 164\nfor(var symbols = (                                                                                                    // 165\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);                                                           // 168\n                                                                                                                       // 169\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);                               // 170\n                                                                                                                       // 171\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172\n  // 19.4.2.1 Symbol.for(key)                                                                                          // 173\n  'for': function(key){                                                                                                // 174\n    return has(SymbolRegistry, key += '')                                                                              // 175\n      ? SymbolRegistry[key]                                                                                            // 176\n      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177\n  },                                                                                                                   // 178\n  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179\n  keyFor: function keyFor(key){                                                                                        // 180\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);                                                                // 181\n    throw TypeError(key + ' is not a symbol!');                                                                        // 182\n  },                                                                                                                   // 183\n  useSetter: function(){ setter = true; },                                                                             // 184\n  useSimple: function(){ setter = false; }                                                                             // 185\n});                                                                                                                    // 186\n                                                                                                                       // 187\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188\n  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189\n  create: $create,                                                                                                     // 190\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191\n  defineProperty: $defineProperty,                                                                                     // 192\n  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193\n  defineProperties: $defineProperties,                                                                                 // 194\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196\n  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197\n  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199\n  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200\n});                                                                                                                    // 201\n                                                                                                                       // 202\n// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){                                            // 204\n  var S = $Symbol();                                                                                                   // 205\n  // MS Edge converts symbol values to JSON as {}                                                                      // 206\n  // WebKit converts symbol values to JSON as null                                                                     // 207\n  // V8 throws on boxed symbols                                                                                        // 208\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';                   // 209\n})), 'JSON', {                                                                                                         // 210\n  stringify: function stringify(it){                                                                                   // 211\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined                                     // 212\n    var args = [it]                                                                                                    // 213\n      , i    = 1                                                                                                       // 214\n      , replacer, $replacer;                                                                                           // 215\n    while(arguments.length > i)args.push(arguments[i++]);                                                              // 216\n    replacer = args[1];                                                                                                // 217\n    if(typeof replacer == 'function')$replacer = replacer;                                                             // 218\n    if($replacer || !isArray(replacer))replacer = function(key, value){                                                // 219\n      if($replacer)value = $replacer.call(this, key, value);                                                           // 220\n      if(!isSymbol(value))return value;                                                                                // 221\n    };                                                                                                                 // 222\n    args[1] = replacer;                                                                                                // 223\n    return _stringify.apply($JSON, args);                                                                              // 224\n  }                                                                                                                    // 225\n});                                                                                                                    // 226\n                                                                                                                       // 227\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 229\n// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230\nsetToStringTag($Symbol, 'Symbol');                                                                                     // 231\n// 20.2.1.9 Math[@@toStringTag]                                                                                        // 232\nsetToStringTag(Math, 'Math', true);                                                                                    // 233\n// 24.3.3 JSON[@@toStringTag]                                                                                          // 234\nsetToStringTag(global.JSON, 'JSON', true);                                                                             // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_meta.js\":[\"./_uid\",\"./_is-object\",\"./_has\",\"./_object-dp\",\"./_fails\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_meta.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar META     = require('./_uid')('meta')                                                                               // 1\n  , isObject = require('./_is-object')                                                                                 // 2\n  , has      = require('./_has')                                                                                       // 3\n  , setDesc  = require('./_object-dp').f                                                                               // 4\n  , id       = 0;                                                                                                      // 5\nvar isExtensible = Object.isExtensible || function(){                                                                  // 6\n  return true;                                                                                                         // 7\n};                                                                                                                     // 8\nvar FREEZE = !require('./_fails')(function(){                                                                          // 9\n  return isExtensible(Object.preventExtensions({}));                                                                   // 10\n});                                                                                                                    // 11\nvar setMeta = function(it){                                                                                            // 12\n  setDesc(it, META, {value: {                                                                                          // 13\n    i: 'O' + ++id, // object ID                                                                                        // 14\n    w: {}          // weak collections IDs                                                                             // 15\n  }});                                                                                                                 // 16\n};                                                                                                                     // 17\nvar fastKey = function(it, create){                                                                                    // 18\n  // return primitive with prefix                                                                                      // 19\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                       // 20\n  if(!has(it, META)){                                                                                                  // 21\n    // can't set metadata to uncaught frozen object                                                                    // 22\n    if(!isExtensible(it))return 'F';                                                                                   // 23\n    // not necessary to add metadata                                                                                   // 24\n    if(!create)return 'E';                                                                                             // 25\n    // add missing metadata                                                                                            // 26\n    setMeta(it);                                                                                                       // 27\n  // return object ID                                                                                                  // 28\n  } return it[META].i;                                                                                                 // 29\n};                                                                                                                     // 30\nvar getWeak = function(it, create){                                                                                    // 31\n  if(!has(it, META)){                                                                                                  // 32\n    // can't set metadata to uncaught frozen object                                                                    // 33\n    if(!isExtensible(it))return true;                                                                                  // 34\n    // not necessary to add metadata                                                                                   // 35\n    if(!create)return false;                                                                                           // 36\n    // add missing metadata                                                                                            // 37\n    setMeta(it);                                                                                                       // 38\n  // return hash weak collections IDs                                                                                  // 39\n  } return it[META].w;                                                                                                 // 40\n};                                                                                                                     // 41\n// add metadata on freeze-family methods calling                                                                       // 42\nvar onFreeze = function(it){                                                                                           // 43\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);                                            // 44\n  return it;                                                                                                           // 45\n};                                                                                                                     // 46\nvar meta = module.exports = {                                                                                          // 47\n  KEY:      META,                                                                                                      // 48\n  NEED:     false,                                                                                                     // 49\n  fastKey:  fastKey,                                                                                                   // 50\n  getWeak:  getWeak,                                                                                                   // 51\n  onFreeze: onFreeze                                                                                                   // 52\n};                                                                                                                     // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_wks-define.js\":[\"./_global\",\"./_core\",\"./_library\",\"./_wks-ext\",\"./_object-dp\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks-define.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global         = require('./_global')                                                                              // 1\n  , core           = require('./_core')                                                                                // 2\n  , LIBRARY        = require('./_library')                                                                             // 3\n  , wksExt         = require('./_wks-ext')                                                                             // 4\n  , defineProperty = require('./_object-dp').f;                                                                        // 5\nmodule.exports = function(name){                                                                                       // 6\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});               // 8\n};                                                                                                                     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_keyof.js\":[\"./_object-keys\",\"./_to-iobject\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_keyof.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getKeys   = require('./_object-keys')                                                                              // 1\n  , toIObject = require('./_to-iobject');                                                                              // 2\nmodule.exports = function(object, el){                                                                                 // 3\n  var O      = toIObject(object)                                                                                       // 4\n    , keys   = getKeys(O)                                                                                              // 5\n    , length = keys.length                                                                                             // 6\n    , index  = 0                                                                                                       // 7\n    , key;                                                                                                             // 8\n  while(length > index)if(O[key = keys[index++]] === el)return key;                                                    // 9\n};                                                                                                                     // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_enum-keys.js\":[\"./_object-keys\",\"./_object-gops\",\"./_object-pie\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_enum-keys.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// all enumerable object keys, includes symbols                                                                        // 1\nvar getKeys = require('./_object-keys')                                                                                // 2\n  , gOPS    = require('./_object-gops')                                                                                // 3\n  , pIE     = require('./_object-pie');                                                                                // 4\nmodule.exports = function(it){                                                                                         // 5\n  var result     = getKeys(it)                                                                                         // 6\n    , getSymbols = gOPS.f;                                                                                             // 7\n  if(getSymbols){                                                                                                      // 8\n    var symbols = getSymbols(it)                                                                                       // 9\n      , isEnum  = pIE.f                                                                                                // 10\n      , i       = 0                                                                                                    // 11\n      , key;                                                                                                           // 12\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);                                  // 13\n  } return result;                                                                                                     // 14\n};                                                                                                                     // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gops.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gops.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = Object.getOwnPropertySymbols;                                                                              // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_object-pie.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-pie.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = {}.propertyIsEnumerable;                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_is-array.js\":[\"./_cof\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_is-array.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.2.2 IsArray(argument)                                                                                             // 1\nvar cof = require('./_cof');                                                                                           // 2\nmodule.exports = Array.isArray || function isArray(arg){                                                               // 3\n  return cof(arg) == 'Array';                                                                                          // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopn-ext.js\":[\"./_to-iobject\",\"./_object-gopn\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1\nvar toIObject = require('./_to-iobject')                                                                               // 2\n  , gOPN      = require('./_object-gopn').f                                                                            // 3\n  , toString  = {}.toString;                                                                                           // 4\n                                                                                                                       // 5\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6\n  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7\n                                                                                                                       // 8\nvar getWindowNames = function(it){                                                                                     // 9\n  try {                                                                                                                // 10\n    return gOPN(it);                                                                                                   // 11\n  } catch(e){                                                                                                          // 12\n    return windowNames.slice();                                                                                        // 13\n  }                                                                                                                    // 14\n};                                                                                                                     // 15\n                                                                                                                       // 16\nmodule.exports.f = function getOwnPropertyNames(it){                                                                   // 17\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18\n};                                                                                                                     // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopn.js\":[\"./_object-keys-internal\",\"./_enum-bug-keys\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopn.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1\nvar $keys      = require('./_object-keys-internal')                                                                    // 2\n  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3\n                                                                                                                       // 4\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){                                             // 5\n  return $keys(O, hiddenKeys);                                                                                         // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopd.js\":[\"./_object-pie\",\"./_property-desc\",\"./_to-iobject\",\"./_to-primitive\",\"./_has\",\"./_ie8-dom-define\",\"./_descriptors\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopd.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar pIE            = require('./_object-pie')                                                                          // 1\n  , createDesc     = require('./_property-desc')                                                                       // 2\n  , toIObject      = require('./_to-iobject')                                                                          // 3\n  , toPrimitive    = require('./_to-primitive')                                                                        // 4\n  , has            = require('./_has')                                                                                 // 5\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 6\n  , gOPD           = Object.getOwnPropertyDescriptor;                                                                  // 7\n                                                                                                                       // 8\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){                                // 9\n  O = toIObject(O);                                                                                                    // 10\n  P = toPrimitive(P, true);                                                                                            // 11\n  if(IE8_DOM_DEFINE)try {                                                                                              // 12\n    return gOPD(O, P);                                                                                                 // 13\n  } catch(e){ /* empty */ }                                                                                            // 14\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);                                                             // 15\n};                                                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.object.to-string.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.to-string.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"es7.symbol.async-iterator.js\":[\"./_wks-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./_wks-define')('asyncIterator');                                                                             // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es7.symbol.observable.js\":[\"./_wks-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./_wks-define')('observable');                                                                                // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.object.set-prototype-of.js\":[\"./_export\",\"./_set-proto\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1\nvar $export = require('./_export');                                                                                    // 2\n$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});                                           // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_set-proto.js\":[\"./_is-object\",\"./_an-object\",\"./_ctx\",\"./_object-gopd\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_set-proto.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1\n/* eslint-disable no-proto */                                                                                          // 2\nvar isObject = require('./_is-object')                                                                                 // 3\n  , anObject = require('./_an-object');                                                                                // 4\nvar check = function(O, proto){                                                                                        // 5\n  anObject(O);                                                                                                         // 6\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");                          // 7\n};                                                                                                                     // 8\nmodule.exports = {                                                                                                     // 9\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10\n    function(test, buggy, set){                                                                                        // 11\n      try {                                                                                                            // 12\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13\n        set(test, []);                                                                                                 // 14\n        buggy = !(test instanceof Array);                                                                              // 15\n      } catch(e){ buggy = true; }                                                                                      // 16\n      return function setPrototypeOf(O, proto){                                                                        // 17\n        check(O, proto);                                                                                               // 18\n        if(buggy)O.__proto__ = proto;                                                                                  // 19\n        else set(O, proto);                                                                                            // 20\n        return O;                                                                                                      // 21\n      };                                                                                                               // 22\n    }({}, false) : undefined),                                                                                         // 23\n  check: check                                                                                                         // 24\n};                                                                                                                     // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.object.create.js\":[\"./_export\",\"./_object-create\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.create.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar $export = require('./_export')                                                                                     // 1\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2\n$export($export.S, 'Object', {create: require('./_object-create')});                                                   // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js"}]