{"version":3,"sources":["meteor://ðŸ’»app/packages/minimongo/minimongo.js","meteor://ðŸ’»app/packages/minimongo/wrap_transform.js","meteor://ðŸ’»app/packages/minimongo/helpers.js","meteor://ðŸ’»app/packages/minimongo/selector.js","meteor://ðŸ’»app/packages/minimongo/sort.js","meteor://ðŸ’»app/packages/minimongo/projection.js","meteor://ðŸ’»app/packages/minimongo/modify.js","meteor://ðŸ’»app/packages/minimongo/diff.js","meteor://ðŸ’»app/packages/minimongo/id_map.js","meteor://ðŸ’»app/packages/minimongo/observe.js","meteor://ðŸ’»app/packages/minimongo/objectid.js","meteor://ðŸ’»app/packages/minimongo/validation.js"],"names":["assertHasValidFieldNames","module","importSync","v","LocalCollection","name","self","_docs","_IdMap","_observeQueue","Meteor","_SynchronousQueue","next_qid","queries","_savedOriginals","paused","Minimongo","MinimongoTest","MinimongoError","message","options","field","e","Error","prototype","find","selector","arguments","length","Cursor","collection","sorter","matcher","Matcher","_selectorIsId","_selectorId","_selectorIsIdPerhapsAsObject","_id","undefined","hasGeoQuery","sort","Sorter","skip","limit","fields","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","rewind","findOne","fetch","forEach","callback","thisArg","objects","_getRawObjects","ordered","_depend","addedBefore","removed","changed","movedBefore","_","each","elt","i","call","getTransform","map","res","doc","index","push","count","added","_publishCursor","sub","Package","mongo","Mongo","Collection","_getCollectionName","_observeChangesCallbacksAreOrdered","callbacks","_observeCallbacksAreOrdered","addedAt","changedAt","removedAt","movedTo","ObserveHandle","extend","observe","_observeFromObserveChanges","observeChanges","_allow_unordered","query","dirty","distances","resultsSnapshot","cursor","projectionFn","qid","results","wrapCallback","f","context","args","queueTask","apply","_suppress_initial","bind","EJSON","clone","handle","stop","active","onInvalidate","drain","selectedDoc","get","set","clear","id","matchResult","documentMatches","result","distance","comparator","getComparator","idx_start","idx_end","slice","changers","Dependency","depend","notifyChange","fnName","insert","has","_useOID","MongoID","ObjectID","Random","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","_eachPossiblyMatchingDoc","specificIds","_idsMatchedBySelector","breakIfFalse","remove","equals","size","queryRemove","removeId","removeDoc","_removeFromResults","update","mod","Function","qidToOriginalResults","docMap","idsMatchedBySelector","Array","memoizedCloneIfNeeded","docToMemoize","any","recomputeQids","updateCount","queryResult","_modifyAndNotify","arrayIndices","multi","dummy","insertedId","upsert","newDoc","_removeDollarOperators","_modify","isInsert","_returnObject","numberAffected","matched_before","old_doc","before","afterMatch","after","_updateInResults","_insertInSortedList","next","_findInOrderedResults","splice","changedFields","DiffSequence","makeChangedFields","isEmpty","orig_idx","new_idx","oldResults","_diffQueryChanges","_binarySearch","cmp","array","value","first","rangeLength","halfRange","Math","floor","idx","saveOriginals","retrieveOriginals","originals","pauseObservers","resumeObservers","__wrappedTransform__","wrapped","transformed","nonreactive","isPlainObject","isArray","x","isBinary","_isPlainObject","_f","_type","isIndexable","isOperatorObject","valueSelector","inconsistentOK","theseAreOperators","selKey","thisIsOperator","substr","JSON","stringify","isNumericKey","s","test","_paths","_hasGeoQuery","_hasWhere","_isSimple","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_recordPathUsed","nothingMatcher","compileDocumentSelector","isRoot","path","_getPaths","keys","docSelector","docMatchers","subSelector","key","LOGICAL_OPERATORS","inElemMatch","lookUpByIndex","makeLookupFunction","valueMatcher","compileValueSelector","branchValues","andDocumentMatchers","RegExp","convertElementMatcherToBranchedMatcher","regexpElementMatcher","operatorBranchedMatcher","equalityElementMatcher","elementMatcher","branches","expanded","dontExpandLeafArrays","expandArraysInBranches","dontIncludeLeafArrays","ret","element","matched","regexp","isEqual","lastIndex","elementSelector","_equal","operatorMatchers","operand","operator","simpleRange","contains","isNumber","simpleEquality","isObject","simpleInclusion","VALUE_OPERATORS","ELEMENT_OPERATORS","compileElementSelector","andBranchedMatchers","compileArrayOfDocumentSelectors","selectors","$and","matchers","$or","$nor","all","$where","selectorValue","$comment","invertBranchedMatcher","branchedMatcher","invertMe","$eq","$not","$ne","$nin","$in","$exists","exists","$options","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","maxDistance","point","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","a","b","y","isNaN","sqrt","identity","makeInequality","cmpValueComparator","operandType","_cmp","isBitSet","bit","eightBits","get8BitsSet","filter","convertNumberToUint8Array","number","numOfBits","toString","num8BitGroups","ceil","byteArray","Uint8Array","byte","ensureUint8Array","ensureOperandUint8Array","reduce","num","n","bitsClear","bitsSetOp","bitsSetVal","isUndefined","indexOf","bitsSet","anyBitCompare","setOrClear","op","allBitCompare","$lt","cmpValue","$gt","$lte","$gte","$mod","divisor","remainder","elementMatchers","option","$size","$type","$bitsAnyClear","$bitsAllClear","$bitsAllSet","$bitsAnySet","$regex","regexSource","source","$elemMatch","subMatcher","isDocMatcher","omit","arrayElement","arg","dontIterate","parts","split","firstPart","firstPartIsNumeric","nextPartIsNumeric","lookupRest","join","omitUnnecessaryFields","retVal","concat","firstLevel","appendToResult","more","forSort","arrayIndex","skipTheArrays","branchesOut","thisIsArray","leaf","docOrBranchedValues","andSomeMatchers","subMatchers","docOrBranches","subResult","Date","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","to_array","obj","selectorDoc","k","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_keyFilter","_useWithMatcher","_getBaseComparator","pluck","_getMinKeyFromDoc","minKey","_generateKeysFromDoc","_keyCompatibleWithSelector","_compareKeys","cb","valuesByIndexAndPath","pathFromIndices","indices","knownPaths","whichField","usedPaths","soleKey","values","key1","key2","invert","compare","doc1","doc2","constraintsByPath","constraints","ignoreCase","multiline","specPart","comparatorArray","_checkSupportedProjection","_idProjection","details","projectionDetails","ruleTree","subdoc","including","rule","tree","fieldsKeys","reject","keyPath","projectionRulesTree","pathsToTree","node","fullPath","currentPath","anotherPath","paths","newLeafFn","conflictFn","treePos","pathArr","success","lastKey","last","val","intersection","assertIsValidFieldName","isModifier","modFunc","MODIFIERS","keypath","keyparts","noCreate","NO_CREATE_MODIFIERS","forbidArray","target","findModTarget","pop","usedArrayIndex","keypart","indexable","setPropertyError","parseInt","$unset","$pop","$rename","$pull","$pullAll","$currentDate","hasOwnProperty","$min","$max","$inc","$set","$setOnInsert","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","j","spliceArguments","$pushAll","$addToSet","isEach","Object","out","exclude","target2","field2","$bit","newResults","observer","diffQueryChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffObjects","left","right","diffObjects","IdMap","idStringify","idParse","_inherits","_CachingChangeObserver","orderedFromCallbacks","docs","OrderedDict","applyChange","putBefore","moveBefore","applyChanges","observeCallbacks","suppressed","observeChangesCallbacks","_no_indices","oldDoc","from","to","changeObserver","subIds","export","invalidCharMsg","match","isString"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import { assertHasValidFieldNames } from './validation.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\n\n// Cursor: a specification for a particular subset of documents, w/\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\n\n// ObserveHandle: the return value of a live query.\n\nLocalCollection = function (name) {\n  var self = this;\n  self.name = name;\n  // _id -> document (also containing id)\n  self._docs = new LocalCollection._IdMap;\n\n  self._observeQueue = new Meteor._SynchronousQueue();\n\n  self.next_qid = 1; // live query id generator\n\n  // qid -> live query object. keys:\n  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n  //  results: array (ordered) or object (unordered) of current results\n  //    (aliased with self._docs!)\n  //  resultsSnapshot: snapshot of results. null if not paused.\n  //  cursor: Cursor object for the query.\n  //  selector, sorter, (callbacks): functions\n  self.queries = {};\n\n  // null if not saving originals; an IdMap from id to original document value if\n  // saving originals. See comments before saveOriginals().\n  self._savedOriginals = null;\n\n  // True when observers are paused and we should not send callbacks.\n  self.paused = false;\n};\n\nMinimongo = {};\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {};\n\nMinimongoError = function (message, options={}) {\n  if (typeof message === \"string\" && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  var e = new Error(message);\n  e.name = \"MinimongoError\";\n  return e;\n};\n\n\n// options may include sort, skip, limit, reactive\n// sort may be any of these forms:\n//     {a: 1, b: -1}\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n//     [\"a\", [\"b\", \"desc\"]]\n//   (in the first form you're beholden to key enumeration order in\n//   your javascript VM)\n//\n// reactive: if given, and false, don't register with Tracker (default\n// is true)\n//\n// XXX possibly should support retrieving a subset of fields? and\n// have it be a hint (ignored on the client, when not copying the\n// doc?)\n//\n// XXX sort does not yet support subkeys ('a.b') .. fix that!\n// XXX add one more sort form: \"key\"\n// XXX tests\nLocalCollection.prototype.find = function (selector, options) {\n  // default syntax for everything is to omit the selector argument.\n  // but if selector is explicitly passed in as false or undefined, we\n  // want a selector that matches nothing.\n  if (arguments.length === 0)\n    selector = {};\n\n  return new LocalCollection.Cursor(this, selector, options);\n};\n\n// don't call this ctor directly.  use LocalCollection.find().\n\nLocalCollection.Cursor = function (collection, selector, options) {\n  var self = this;\n  if (!options) options = {};\n\n  self.collection = collection;\n  self.sorter = null;\n  self.matcher = new Minimongo.Matcher(selector);\n\n  if (LocalCollection._selectorIsId(selector)) {\n    // stash for fast path\n    self._selectorId = selector;\n  } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    // also do the fast path for { _id: idString }\n    self._selectorId = selector._id;\n  } else {\n    self._selectorId = undefined;\n    if (self.matcher.hasGeoQuery() || options.sort) {\n      self.sorter = new Minimongo.Sorter(options.sort || [],\n                                         { matcher: self.matcher });\n    }\n  }\n\n  self.skip = options.skip;\n  self.limit = options.limit;\n  self.fields = options.fields;\n\n  self._projectionFn = LocalCollection._compileProjection(self.fields || {});\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  // by default, queries register w/ Tracker when it is available.\n  if (typeof Tracker !== \"undefined\")\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;\n};\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nLocalCollection.Cursor.prototype.rewind = function () {\n};\n\nLocalCollection.prototype.findOne = function (selector, options) {\n  if (arguments.length === 0)\n    selector = {};\n\n  // NOTE: by setting limit 1 here, we end up using very inefficient\n  // code that recomputes the whole query on each update. The upside is\n  // that when you reactively depend on a findOne you only get\n  // invalidated when the found object changes, not any object in the\n  // collection. Most findOne will be by id, which has a fast path, so\n  // this might not be a big deal. In most cases, invalidation causes\n  // the called to re-query anyway, so this should be a net performance\n  // improvement.\n  options = options || {};\n  options.limit = 1;\n\n  return this.find(selector, options).fetch()[0];\n};\n\n/**\n * @callback IterationCallback\n * @param {Object} doc\n * @param {Number} index\n */\n/**\n * @summary Call `callback` once for each matching document, sequentially and synchronously.\n * @locus Anywhere\n * @method  forEach\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\n  var self = this;\n\n  var objects = self._getRawObjects({ordered: true});\n\n  if (self.reactive) {\n    self._depend({\n      addedBefore: true,\n      removed: true,\n      changed: true,\n      movedBefore: true});\n  }\n\n  _.each(objects, function (elt, i) {\n    // This doubles as a clone operation.\n    elt = self._projectionFn(elt);\n\n    if (self._transform)\n      elt = self._transform(elt);\n    callback.call(thisArg, elt, i, self);\n  });\n};\n\nLocalCollection.Cursor.prototype.getTransform = function () {\n  return this._transform;\n};\n\n/**\n * @summary Map callback over all matching documents.  Returns an Array.\n * @locus Anywhere\n * @method map\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc, index) {\n    res.push(callback.call(thisArg, doc, index, self));\n  });\n  return res;\n};\n\n/**\n * @summary Return all matching documents as an Array.\n * @memberOf Mongo.Cursor\n * @method  fetch\n * @instance\n * @locus Anywhere\n * @returns {Object[]}\n */\nLocalCollection.Cursor.prototype.fetch = function () {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc) {\n    res.push(doc);\n  });\n  return res;\n};\n\n/**\n * @summary Returns the number of documents that match a query.\n * @memberOf Mongo.Cursor\n * @method  count\n * @instance\n * @locus Anywhere\n * @returns {Number}\n */\nLocalCollection.Cursor.prototype.count = function () {\n  var self = this;\n\n  if (self.reactive)\n    self._depend({added: true, removed: true},\n                 true /* allow the observe to be unordered */);\n\n  return self._getRawObjects({ordered: true}).length;\n};\n\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  if (! self.collection.name)\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");\n  var collection = self.collection.name;\n\n  // XXX minimongo should not depend on mongo-livedata!\n  if (! Package.mongo) {\n    throw new Error(\"Can't publish from Minimongo without the `mongo` package.\");\n  }\n\n  return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);\n};\n\nLocalCollection.Cursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self.collection.name;\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore)\n    throw new Error(\"Please specify only one of added() and addedBefore()\");\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.addedAt && callbacks.added)\n    throw new Error(\"Please specify only one of added() and addedAt()\");\n  if (callbacks.changedAt && callbacks.changed)\n    throw new Error(\"Please specify only one of changed() and changedAt()\");\n  if (callbacks.removed && callbacks.removedAt)\n    throw new Error(\"Please specify only one of removed() and removedAt()\");\n\n  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt\n            || callbacks.removedAt);\n};\n\n// the handle that comes back from observe.\nLocalCollection.ObserveHandle = function () {};\n\n// options to contain:\n//  * callbacks for observe():\n//    - addedAt (document, atIndex)\n//    - added (document)\n//    - changedAt (newDocument, oldDocument, atIndex)\n//    - changed (newDocument, oldDocument)\n//    - removedAt (document, atIndex)\n//    - removed (document)\n//    - movedTo (document, oldIndex, newIndex)\n//\n// attributes available on returned query handle:\n//  * stop(): end updates\n//  * collection: the collection this query is querying\n//\n// iff x is a returned query handle, (x instanceof\n// LocalCollection.ObserveHandle) is true\n//\n// initial results delivered through added callback\n// XXX maybe callbacks should take a list of objects, to expose transactions?\n// XXX maybe support field limiting (to limit what you're notified on)\n\n_.extend(LocalCollection.Cursor.prototype, {\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observe: function (options) {\n    var self = this;\n    return LocalCollection._observeFromObserveChanges(self, options);\n  },\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observeChanges: function (options) {\n    var self = this;\n\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))\n      throw new Error(\"must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit\");\n\n    if (self.fields && (self.fields._id === 0 || self.fields._id === false))\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n\n    var query = {\n      dirty: false,\n      matcher: self.matcher, // not fast pathed\n      sorter: ordered && self.sorter,\n      distances: (\n        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),\n      resultsSnapshot: null,\n      ordered: ordered,\n      cursor: self,\n      projectionFn: self._projectionFn\n    };\n    var qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (self.reactive) {\n      qid = self.collection.next_qid++;\n      self.collection.queries[qid] = query;\n    }\n    query.results = self._getRawObjects({\n      ordered: ordered, distances: query.distances});\n    if (self.collection.paused)\n      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    var wrapCallback = function (f) {\n      if (!f)\n        return function () {};\n      return function (/*args*/) {\n        var context = this;\n        var args = arguments;\n\n        if (self.collection.paused)\n          return;\n\n        self.collection._observeQueue.queueTask(function () {\n          f.apply(context, args);\n        });\n      };\n    };\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !self.collection.paused) {\n      // XXX unify ordered and unordered interface\n      var each = ordered\n            ? _.bind(_.each, null, query.results)\n            : _.bind(query.results.forEach, query.results);\n      each(function (doc) {\n        var fields = EJSON.clone(doc);\n\n        delete fields._id;\n        if (ordered)\n          query.addedBefore(doc._id, self._projectionFn(fields), null);\n        query.added(doc._id, self._projectionFn(fields));\n      });\n    }\n\n    var handle = new LocalCollection.ObserveHandle;\n    _.extend(handle, {\n      collection: self.collection,\n      stop: function () {\n        if (self.reactive)\n          delete self.collection.queries[qid];\n      }\n    });\n\n    if (self.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(function () {\n        handle.stop();\n      });\n    }\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    self.collection._observeQueue.drain();\n\n    return handle;\n  }\n});\n\n// Returns a collection of matching objects, but doesn't deep copy them.\n//\n// If ordered is set, returns a sorted array, respecting sorter, skip, and limit\n// properties of the query.  if sorter is falsey, no sort -- you get the natural\n// order.\n//\n// If ordered is not set, returns an object mapping from ID to doc (sorter, skip\n// and limit should not be set).\n//\n// If ordered is set and this cursor is a $near geoquery, then this function\n// will use an _IdMap to track each distance from the $near argument point in\n// order to use it as a sort key. If an _IdMap is passed in the 'distances'\n// argument, this function will clear it and use it for this purpose (otherwise\n// it will just create its own _IdMap). The observeChanges implementation uses\n// this to remember the distances after this function returns.\nLocalCollection.Cursor.prototype._getRawObjects = function (options) {\n  var self = this;\n  options = options || {};\n\n  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n  // compatible\n  var results = options.ordered ? [] : new LocalCollection._IdMap;\n\n  // fast path for single ID value\n  if (self._selectorId !== undefined) {\n    // If you have non-zero skip and ask for a single id, you get\n    // nothing. This is so it matches the behavior of the '{_id: foo}'\n    // path.\n    if (self.skip)\n      return results;\n\n    var selectedDoc = self.collection._docs.get(self._selectorId);\n    if (selectedDoc) {\n      if (options.ordered)\n        results.push(selectedDoc);\n      else\n        results.set(self._selectorId, selectedDoc);\n    }\n    return results;\n  }\n\n  // slow path for arbitrary selector, sort, skip, limit\n\n  // in the observeChanges case, distances is actually part of the \"query\" (ie,\n  // live results set) object.  in other cases, distances is only used inside\n  // this function.\n  var distances;\n  if (self.matcher.hasGeoQuery() && options.ordered) {\n    if (options.distances) {\n      distances = options.distances;\n      distances.clear();\n    } else {\n      distances = new LocalCollection._IdMap();\n    }\n  }\n\n  self.collection._docs.forEach(function (doc, id) {\n    var matchResult = self.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (options.ordered) {\n        results.push(doc);\n        if (distances && matchResult.distance !== undefined)\n          distances.set(id, matchResult.distance);\n      } else {\n        results.set(id, doc);\n      }\n    }\n    // Fast path for limited unsorted queries.\n    // XXX 'length' check here seems wrong for ordered\n    if (self.limit && !self.skip && !self.sorter &&\n        results.length === self.limit)\n      return false;  // break\n    return true;  // continue\n  });\n\n  if (!options.ordered)\n    return results;\n\n  if (self.sorter) {\n    var comparator = self.sorter.getComparator({distances: distances});\n    results.sort(comparator);\n  }\n\n  var idx_start = self.skip || 0;\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;\n  return results.slice(idx_start, idx_end);\n};\n\n// XXX Maybe we need a version of observe that just calls a callback if\n// anything changed.\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\n  var self = this;\n\n  if (Tracker.active) {\n    var v = new Tracker.Dependency;\n    v.depend();\n    var notifyChange = _.bind(v.changed, v);\n\n    var options = {\n      _suppress_initial: true,\n      _allow_unordered: _allow_unordered\n    };\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],\n           function (fnName) {\n             if (changers[fnName])\n               options[fnName] = notifyChange;\n           });\n\n    // observeChanges will stop() when this computation is invalidated\n    self.observeChanges(options);\n  }\n};\n\n// XXX possibly enforce that 'undefined' does not appear (we assume\n// this in our handling of null and $exists)\nLocalCollection.prototype.insert = function (doc, callback) {\n  var self = this;\n  doc = EJSON.clone(doc);\n\n  assertHasValidFieldNames(doc);\n\n  if (!_.has(doc, '_id')) {\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    doc._id = LocalCollection._useOID ? new MongoID.ObjectID()\n                                      : Random.id();\n  }\n  var id = doc._id;\n\n  if (self._docs.has(id))\n    throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n\n  self._saveOriginal(id, undefined);\n  self._docs.set(id, doc);\n\n  var queriesToRecompute = [];\n  // trigger live queries that match\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) continue;\n    var matchResult = query.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (query.distances && matchResult.distance !== undefined)\n        query.distances.set(id, matchResult.distance);\n      if (query.cursor.skip || query.cursor.limit)\n        queriesToRecompute.push(qid);\n      else\n        LocalCollection._insertInResults(query, doc);\n    }\n  }\n\n  _.each(queriesToRecompute, function (qid) {\n    if (self.queries[qid])\n      self._recomputeResults(self.queries[qid]);\n  });\n  self._observeQueue.drain();\n\n  // Defer because the caller likely doesn't expect the callback to be run\n  // immediately.\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, id);\n    });\n  return id;\n};\n\n// Iterates over a subset of documents that could match selector; calls\n// f(doc, id) on each of them.  Specifically, if selector specifies\n// specific _id's, it only looks at those.  doc is *not* cloned: it is the\n// same object that is in _docs.\nLocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {\n  var self = this;\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    for (var i = 0; i < specificIds.length; ++i) {\n      var id = specificIds[i];\n      var doc = self._docs.get(id);\n      if (doc) {\n        var breakIfFalse = f(doc, id);\n        if (breakIfFalse === false)\n          break;\n      }\n    }\n  } else {\n    self._docs.forEach(f);\n  }\n};\n\nLocalCollection.prototype.remove = function (selector, callback) {\n  var self = this;\n\n  // Easy special case: if we're not calling observeChanges callbacks and we're\n  // not saving originals and we got asked to remove everything, then just empty\n  // everything directly.\n  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {\n    var result = self._docs.size();\n    self._docs.clear();\n    _.each(self.queries, function (query) {\n      if (query.ordered) {\n        query.results = [];\n      } else {\n        query.results.clear();\n      }\n    });\n    if (callback) {\n      Meteor.defer(function () {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n\n  var matcher = new Minimongo.Matcher(selector);\n  var remove = [];\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    if (matcher.documentMatches(doc).result)\n      remove.push(id);\n  });\n\n  var queriesToRecompute = [];\n  var queryRemove = [];\n  for (var i = 0; i < remove.length; i++) {\n    var removeId = remove[i];\n    var removeDoc = self._docs.get(removeId);\n    _.each(self.queries, function (query, qid) {\n      if (query.dirty) return;\n\n      if (query.matcher.documentMatches(removeDoc).result) {\n        if (query.cursor.skip || query.cursor.limit)\n          queriesToRecompute.push(qid);\n        else\n          queryRemove.push({qid: qid, doc: removeDoc});\n      }\n    });\n    self._saveOriginal(removeId, removeDoc);\n    self._docs.remove(removeId);\n  }\n\n  // run live query callbacks _after_ we've removed the documents.\n  _.each(queryRemove, function (remove) {\n    var query = self.queries[remove.qid];\n    if (query) {\n      query.distances && query.distances.remove(remove.doc._id);\n      LocalCollection._removeFromResults(query, remove.doc);\n    }\n  });\n  _.each(queriesToRecompute, function (qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query);\n  });\n  self._observeQueue.drain();\n  result = remove.length;\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// XXX atomicity: if multi is true, and one modification fails, do\n// we rollback the whole operation, or what?\nLocalCollection.prototype.update = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n  if (!options) options = {};\n\n  var matcher = new Minimongo.Matcher(selector);\n\n  // Save the original results of any query that we might need to\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n  // it. (We don't need to save the original results of paused queries because\n  // they already have a resultsSnapshot and we won't be diffing in\n  // _recomputeResults.)\n  var qidToOriginalResults = {};\n  // We should only clone each document once, even if it appears in multiple queries\n  var docMap = new LocalCollection._IdMap;\n  var idsMatchedBySelector = LocalCollection._idsMatchedBySelector(selector);\n\n  _.each(self.queries, function (query, qid) {\n    if ((query.cursor.skip || query.cursor.limit) && ! self.paused) {\n      // Catch the case of a reactive `count()` on a cursor with skip\n      // or limit, which registers an unordered observe. This is a\n      // pretty rare case, so we just clone the entire result set with\n      // no optimizations for documents that appear in these result\n      // sets and other queries.\n      if (query.results instanceof LocalCollection._IdMap) {\n        qidToOriginalResults[qid] = query.results.clone();\n        return;\n      }\n\n      if (!(query.results instanceof Array)) {\n        throw new Error(\"Assertion failed: query.results not an array\");\n      }\n\n      // Clones a document to be stored in `qidToOriginalResults`\n      // because it may be modified before the new and old result sets\n      // are diffed. But if we know exactly which document IDs we're\n      // going to modify, then we only need to clone those.\n      var memoizedCloneIfNeeded = function(doc) {\n        if (docMap.has(doc._id)) {\n          return docMap.get(doc._id);\n        } else {\n          var docToMemoize;\n\n          if (idsMatchedBySelector && !_.any(idsMatchedBySelector, function(id) {\n            return EJSON.equals(id, doc._id);\n          })) {\n            docToMemoize = doc;\n          } else {\n            docToMemoize = EJSON.clone(doc);\n          }\n\n          docMap.set(doc._id, docToMemoize);\n          return docToMemoize;\n        }\n      };\n\n      qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n    }\n  });\n  var recomputeQids = {};\n\n  var updateCount = 0;\n\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    var queryResult = matcher.documentMatches(doc);\n    if (queryResult.result) {\n      // XXX Should we save the original even if mod ends up being a no-op?\n      self._saveOriginal(id, doc);\n      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n      ++updateCount;\n      if (!options.multi)\n        return false;  // break\n    }\n    return true;\n  });\n\n  _.each(recomputeQids, function (dummy, qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query, qidToOriginalResults[qid]);\n  });\n  self._observeQueue.drain();\n\n  // If we are doing an upsert, and we didn't modify any documents yet, then\n  // it's time to do an insert. Figure out what document we are inserting, and\n  // generate an id for it.\n  var insertedId;\n  if (updateCount === 0 && options.upsert) {\n    var newDoc = LocalCollection._removeDollarOperators(selector);\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n    if (! newDoc._id && options.insertedId)\n      newDoc._id = options.insertedId;\n    insertedId = self.insert(newDoc);\n    updateCount = 1;\n  }\n\n  // Return the number of affected documents, or in the upsert case, an object\n  // containing the number of affected docs and the id of the doc that was\n  // inserted, if any.\n  var result;\n  if (options._returnObject) {\n    result = {\n      numberAffected: updateCount\n    };\n    if (insertedId !== undefined)\n      result.insertedId = insertedId;\n  } else {\n    result = updateCount;\n  }\n\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\n// true }).\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  return self.update(selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nLocalCollection.prototype._modifyAndNotify = function (\n    doc, mod, recomputeQids, arrayIndices) {\n  var self = this;\n\n  var matched_before = {};\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) continue;\n\n    if (query.ordered) {\n      matched_before[qid] = query.matcher.documentMatches(doc).result;\n    } else {\n      // Because we don't support skip or limit (yet) in unordered queries, we\n      // can just do a direct lookup.\n      matched_before[qid] = query.results.has(doc._id);\n    }\n  }\n\n  var old_doc = EJSON.clone(doc);\n\n  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});\n\n  for (qid in self.queries) {\n    query = self.queries[qid];\n    if (query.dirty) continue;\n\n    var before = matched_before[qid];\n    var afterMatch = query.matcher.documentMatches(doc);\n    var after = afterMatch.result;\n    if (after && query.distances && afterMatch.distance !== undefined)\n      query.distances.set(doc._id, afterMatch.distance);\n\n    if (query.cursor.skip || query.cursor.limit) {\n      // We need to recompute any query where the doc may have been in the\n      // cursor's window either before or after the update. (Note that if skip\n      // or limit is set, \"before\" and \"after\" being true do not necessarily\n      // mean that the document is in the cursor's output after skip/limit is\n      // applied... but if they are false, then the document definitely is NOT\n      // in the output. So it's safe to skip recompute if neither before or\n      // after are true.)\n      if (before || after)\n        recomputeQids[qid] = true;\n    } else if (before && !after) {\n      LocalCollection._removeFromResults(query, doc);\n    } else if (!before && after) {\n      LocalCollection._insertInResults(query, doc);\n    } else if (before && after) {\n      LocalCollection._updateInResults(query, doc, old_doc);\n    }\n  }\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results, doc);\n      var next = query.results[i+1];\n      if (next)\n        next = next._id;\n      else\n        next = null;\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id;  // in case callback mutates doc\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id))\n    throw new Error(\"Can't change a doc's _id while updating\");\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc), projectionFn(old_doc));\n\n  if (!query.ordered) {\n    if (!_.isEmpty(changedFields)) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (!_.isEmpty(changedFields))\n    query.changed(doc._id, changedFields);\n  if (!query.sorter)\n    return;\n\n  // just take it out and put it back in again, and see if the index\n  // changes\n  query.results.splice(orig_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results, doc);\n  if (orig_idx !== new_idx) {\n    var next = query.results[new_idx+1];\n    if (next)\n      next = next._id;\n    else\n      next = null;\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\n// Recomputes the results of a query and runs observe callbacks for the\n// difference between the previous results and the current results (unless\n// paused). Used for skip/limit queries.\n//\n// When this is used by insert or remove, it can just use query.results for the\n// old results (and there's no need to pass in oldResults), because these\n// operations don't mutate the documents in the collection. Update needs to pass\n// in an oldResults which was deep-copied before the modifier was applied.\n//\n// oldResults is guaranteed to be ignored if the query is not paused.\nLocalCollection.prototype._recomputeResults = function (query, oldResults) {\n  var self = this;\n  if (self.paused) {\n    // There's no reason to recompute the results now as we're still paused.\n    // By flagging the query as \"dirty\", the recompute will be performed\n    // when resumeObservers is called.\n    query.dirty = true;\n    return;\n  }\n\n  if (! self.paused && ! oldResults)\n    oldResults = query.results;\n  if (query.distances)\n    query.distances.clear();\n  query.results = query.cursor._getRawObjects({\n    ordered: query.ordered, distances: query.distances});\n\n  if (! self.paused) {\n    LocalCollection._diffQueryChanges(\n      query.ordered, oldResults, query.results, query,\n      { projectionFn: query.projectionFn });\n  }\n};\n\n\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered)\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");\n  for (var i = 0; i < query.results.length; i++)\n    if (query.results[i] === doc)\n      return i;\n  throw Error(\"object missing from query\");\n};\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0, rangeLength = array.length;\n\n  while (rangeLength > 0) {\n    var halfRange = Math.floor(rangeLength/2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      rangeLength -= halfRange + 1;\n    } else {\n      rangeLength = halfRange;\n    }\n  }\n  return first;\n};\n\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  var idx = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(idx, 0, value);\n  return idx;\n};\n\n// To track what documents are affected by a piece of code, call saveOriginals()\n// before it and retrieveOriginals() after it. retrieveOriginals returns an\n// object whose keys are the ids of the documents that were affected since the\n// call to saveOriginals(), and the values are equal to the document's contents\n// at the time of saveOriginals. (In the case of an inserted document, undefined\n// is the value.) You must alternate between calls to saveOriginals() and\n// retrieveOriginals().\nLocalCollection.prototype.saveOriginals = function () {\n  var self = this;\n  if (self._savedOriginals)\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\n  self._savedOriginals = new LocalCollection._IdMap;\n};\nLocalCollection.prototype.retrieveOriginals = function () {\n  var self = this;\n  if (!self._savedOriginals)\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");\n\n  var originals = self._savedOriginals;\n  self._savedOriginals = null;\n  return originals;\n};\n\nLocalCollection.prototype._saveOriginal = function (id, doc) {\n  var self = this;\n  // Are we even trying to save originals?\n  if (!self._savedOriginals)\n    return;\n  // Have we previously mutated the original (and so 'doc' is not actually\n  // original)?  (Note the 'has' check rather than truth: we store undefined\n  // here for inserted docs!)\n  if (self._savedOriginals.has(id))\n    return;\n  self._savedOriginals.set(id, EJSON.clone(doc));\n};\n\n// Pause the observers. No callbacks from observers will fire until\n// 'resumeObservers' is called.\nLocalCollection.prototype.pauseObservers = function () {\n  // No-op if already paused.\n  if (this.paused)\n    return;\n\n  // Set the 'paused' flag such that new observer messages don't fire.\n  this.paused = true;\n\n  // Take a snapshot of the query results for each query.\n  for (var qid in this.queries) {\n    var query = this.queries[qid];\n\n    query.resultsSnapshot = EJSON.clone(query.results);\n  }\n};\n\n// Resume the observers. Observers immediately receive change\n// notifications to bring them to the current state of the\n// database. Note that this is not just replaying all the changes that\n// happened during the pause, it is a smarter 'coalesced' diff.\nLocalCollection.prototype.resumeObservers = function () {\n  var self = this;\n  // No-op if not paused.\n  if (!this.paused)\n    return;\n\n  // Unset the 'paused' flag. Make sure to do this first, otherwise\n  // observer methods won't actually fire when we trigger them.\n  this.paused = false;\n\n  for (var qid in this.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) {\n      query.dirty = false;\n      // re-compute results will perform `LocalCollection._diffQueryChanges` automatically.\n      self._recomputeResults(query, query.resultsSnapshot);\n    } else {\n      // Diff the current results against the snapshot and send to observers.\n      // pass the query object for its observer callbacks.\n      LocalCollection._diffQueryChanges(\n        query.ordered, query.resultsSnapshot, query.results, query,\n        {projectionFn: query.projectionFn});\n    }\n    query.resultsSnapshot = null;\n  }\n  self._observeQueue.drain();\n};\n","// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = function (transform) {\n  if (! transform)\n    return null;\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__)\n    return transform;\n\n  var wrapped = function (doc) {\n    if (!_.has(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error(\"can only transform documents with _id\");\n    }\n\n    var id = doc._id;\n    // XXX consider making tracker a weak dependency and checking Package.tracker here\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n\n    if (!isPlainObject(transformed)) {\n      throw new Error(\"transform must return object\");\n    }\n\n    if (_.has(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error(\"transformed document can't have different _id\");\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n","// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n// arrays.\n// XXX maybe this should be EJSON.isArray\nisArray = function (x) {\n  return _.isArray(x) && !EJSON.isBinary(x);\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nisPlainObject = LocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\nisIndexable = function (x) {\n  return isArray(x) || isPlainObject(x);\n};\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nisOperatorObject = function (valueSelector, inconsistentOK) {\n  if (!isPlainObject(valueSelector))\n    return false;\n\n  var theseAreOperators = undefined;\n  _.each(valueSelector, function (value, selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK)\n        throw new Error(\"Inconsistent operator: \" +\n                        JSON.stringify(valueSelector));\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators;  // {} has no operators\n};\n\n\n// string can be converted to integer\nisNumericKey = function (s) {\n  return /^[0-9]+$/.test(s);\n};","// The minimongo selector compiler!\n\n// Terminology:\n//  - a \"selector\" is the EJSON object representing a selector\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a \"result object\" is an object with a \"result\" field and maybe\n//    distance and arrayIndices.\n//  - a \"branched value\" is an object with a \"value\" field and maybe\n//    \"dontIterate\" and \"arrayIndices\".\n//  - a \"document\" is a top-level object that can be stored in a collection.\n//  - a \"lookup function\" is a function that takes in a document and returns\n//    an array of \"branched values\".\n//  - a \"branched matcher\" maps from an array of branched values to a result\n//    object.\n//  - an \"element matcher\" maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nMinimongo.Matcher = function (selector) {\n  var self = this;\n  // A set (object mapping string -> *) of all of the document paths looked\n  // at by the selector. Also includes the empty string if it may look at any\n  // path (eg, $where).\n  self._paths = {};\n  // Set to true if compilation finds a $near.\n  self._hasGeoQuery = false;\n  // Set to true if compilation finds a $where.\n  self._hasWhere = false;\n  // Set to false if compilation finds anything other than a simple equality or\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\n  // scalars as operands.\n  self._isSimple = true;\n  // Set to a dummy document which always matches this Matcher. Or set to null\n  // if such document is too hard to find.\n  self._matchingDocument = undefined;\n  // A clone of the original selector. It may just be a function if the user\n  // passed in a function; otherwise is definitely an object (eg, IDs are\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n  // Sorter._useWithMatcher.\n  self._selector = null;\n  self._docMatcher = self._compileSelector(selector);\n};\n\n_.extend(Minimongo.Matcher.prototype, {\n  documentMatches: function (doc) {\n    if (!doc || typeof doc !== \"object\") {\n      throw Error(\"documentMatches needs a document\");\n    }\n    return this._docMatcher(doc);\n  },\n  hasGeoQuery: function () {\n    return this._hasGeoQuery;\n  },\n  hasWhere: function () {\n    return this._hasWhere;\n  },\n  isSimple: function () {\n    return this._isSimple;\n  },\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector: function (selector) {\n    var self = this;\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      self._isSimple = false;\n      self._selector = selector;\n      self._recordPathUsed('');\n      return function (doc) {\n        return {result: !!selector.call(doc)};\n      };\n    }\n\n    // shorthand -- scalars match _id\n    if (LocalCollection._selectorIsId(selector)) {\n      self._selector = {_id: selector};\n      self._recordPathUsed('_id');\n      return function (doc) {\n        return {result: EJSON.equals(doc._id, selector)};\n      };\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || (('_id' in selector) && !selector._id)) {\n      self._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (typeof(selector) === 'boolean' || isArray(selector) ||\n        EJSON.isBinary(selector))\n      throw new Error(\"Invalid selector: \" + selector);\n\n    self._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, self, {isRoot: true});\n  },\n  _recordPathUsed: function (path) {\n    this._paths[path] = true;\n  },\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths: function () {\n    return _.keys(this._paths);\n  }\n});\n\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nvar compileDocumentSelector = function (docSelector, matcher, options) {\n  options = options || {};\n  var docMatchers = [];\n  _.each(docSelector, function (subSelector, key) {\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!_.has(LOGICAL_OPERATORS, key))\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      matcher._isSimple = false;\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,\n                                              options.inElemMatch));\n    } else {\n      // Record this path, but only if we aren't in an elemMatcher, since in an\n      // elemMatch this is a path inside an object in an array, not in the doc\n      // root.\n      if (!options.inElemMatch)\n        matcher._recordPathUsed(key);\n      var lookUpByIndex = makeLookupFunction(key);\n      var valueMatcher =\n        compileValueSelector(subSelector, matcher, options.isRoot);\n      docMatchers.push(function (doc) {\n        var branchValues = lookUpByIndex(doc);\n        return valueMatcher(branchValues);\n      });\n    }\n  });\n\n  return andDocumentMatchers(docMatchers);\n};\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector));\n  } else if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  } else {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(valueSelector));\n  }\n};\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nvar convertElementMatcherToBranchedMatcher = function (\n    elementMatcher, options) {\n  options = options || {};\n  return function (branches) {\n    var expanded = branches;\n    if (!options.dontExpandLeafArrays) {\n      expanded = expandArraysInBranches(\n        branches, options.dontIncludeLeafArrays);\n    }\n    var ret = {};\n    ret.result = _.any(expanded, function (element) {\n      var matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices)\n          element.arrayIndices = [matched];\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices)\n        ret.arrayIndices = element.arrayIndices;\n\n      return matched;\n    });\n    return ret;\n  };\n};\n\n// Takes a RegExp object and returns an element matcher.\nregexpElementMatcher = function (regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      // Comparing two regexps means seeing if the regexps are identical\n      // (really!). Underscore knows how.\n      return _.isEqual(value, regexp);\n    }\n    // Regexps only work against strings.\n    if (typeof value !== 'string')\n      return false;\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n};\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nequalityElementMatcher = function (elementSelector) {\n  if (isOperatorObject(elementSelector))\n    throw Error(\"Can't create equalityValueSelector for operator object\");\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  if (elementSelector == null) {  // undefined or null\n    return function (value) {\n      return value == null;  // undefined or null\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n};\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n\n  var operatorMatchers = [];\n  _.each(valueSelector, function (operand, operator) {\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&\n      _.isNumber(operand);\n    var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&\n      _.isArray(operand) && !_.any(operand, _.isObject);\n\n    if (! (simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (_.has(VALUE_OPERATORS, operator)) {\n      operatorMatchers.push(\n        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      operatorMatchers.push(\n        convertElementMatcherToBranchedMatcher(\n          options.compileElementSelector(\n            operand, valueSelector, matcher),\n          options));\n    } else {\n      throw new Error(\"Unrecognized operator: \" + operator);\n    }\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n};\n\nvar compileArrayOfDocumentSelectors = function (\n    selectors, matcher, inElemMatch) {\n  if (!isArray(selectors) || _.isEmpty(selectors))\n    throw Error(\"$and/$or/$nor must be nonempty array\");\n  return _.map(selectors, function (subSelector) {\n    if (!isPlainObject(subSelector))\n      throw Error(\"$or/$and/$nor entries need to be full objects\");\n    return compileDocumentSelector(\n      subSelector, matcher, {inElemMatch: inElemMatch});\n  });\n};\n\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return andDocumentMatchers(matchers);\n  },\n\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1)\n      return matchers[0];\n\n    return function (doc) {\n      var result = _.any(matchers, function (f) {\n        return f(doc).result;\n      });\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result: result};\n    };\n  },\n\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = _.all(matchers, function (f) {\n        return !f(doc).result;\n      });\n      // Never set arrayIndices, because we only match if nothing in particular\n      // \"matched\" (and because this is consistent with MongoDB).\n      return {result: result};\n    };\n  },\n\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add \"return\"; not sure exactly what it is.\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);\n    }\n    return function (doc) {\n      // We make the document available as both `this` and `obj`.\n      // XXX not sure what we should do if this throws\n      return {result: selectorValue.call(doc, doc)};\n    };\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {result: true};\n    };\n  }\n};\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nvar invertBranchedMatcher = function (branchedMatcher) {\n  return function (branchValues) {\n    var invertMe = branchedMatcher(branchValues);\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !invertMe.result};\n  };\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!_.has(valueSelector, '$regex'))\n      throw Error(\"$options needs a $regex\");\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near)\n      throw Error(\"$maxDistance needs a $near\");\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!isArray(operand))\n      throw Error(\"$all requires array\");\n    // Not sure why, but this seems to be what MongoDB does.\n    if (_.isEmpty(operand))\n      return nothingMatcher;\n\n    var branchedMatchers = [];\n    _.each(operand, function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion))\n        throw Error(\"no $ expressions in $all\");\n      // This is always a regexp or equality selector.\n      branchedMatchers.push(compileValueSelector(criterion, matcher));\n    });\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot)\n      throw Error(\"$near can't be inside another $ operator\");\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be \n    // matched using $geometry.\n\n    var maxDistance, point, distance;\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value)\n          return null;\n        if(!value.type)\n          return GeoJSON.pointDistance(point,\n            { type: \"Point\", coordinates: pointToArray(value) });\n        if (value.type === \"Point\") {\n          return GeoJSON.pointDistance(point, value);\n        } else {\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n            ? 0 : maxDistance + 1;\n        }\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n      if (!isArray(operand) && !isPlainObject(operand))\n        throw Error(\"$near argument must be coordinate pair or GeoJSON\");\n      point = pointToArray(operand);\n      distance = function (value) {\n        if (!isArray(value) && !isPlainObject(value))\n          return null;\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      branchedValues = expandArraysInBranches(branchedValues);\n      var result = {result: false};\n      _.each(branchedValues, function (branch) {\n        if (!(typeof branch.value === \"object\")){\n          return;\n        }\n        var curDistance = distance(branch.value);\n        // Skip branches that aren't real points or are too far away.\n        if (curDistance === null || curDistance > maxDistance)\n          return;\n        // Skip anything that's a tie.\n        if (result.distance !== undefined && result.distance <= curDistance)\n          return;\n        result.result = true;\n        result.distance = curDistance;\n        if (!branch.arrayIndices)\n          delete result.arrayIndices;\n        else\n          result.arrayIndices = branch.arrayIndices;\n      });\n      return result;\n    };\n  }\n};\n\n// Helpers for $near.\nvar distanceCoordinatePairs = function (a, b) {\n  a = pointToArray(a);\n  b = pointToArray(b);\n  var x = a[0] - b[0];\n  var y = a[1] - b[1];\n  if (_.isNaN(x) || _.isNaN(y))\n    return null;\n  return Math.sqrt(x * x + y * y);\n};\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nvar pointToArray = function (point) {\n  return _.map(point, _.identity);\n};\n\n// Helper for $lt/$gt/$lte/$gte.\nvar makeInequality = function (cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (isArray(operand)) {\n        return function () {\n          return false;\n        };\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined)\n        operand = null;\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined)\n          value = null;\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType)\n          return false;\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n};\n\nvar isBitSet = function (value, bit) {\n  if (value === 0)\n    return false;\n  return (value & 1 << bit) !== 0;\n};\n\nvar eightBits = [0,1,2,3,4,5,6,7];\nvar get8BitsSet = function (value) {\n  if (value === 0)\n    return [];\n  return _.filter(eightBits, function (bit) {\n    return isBitSet(value, bit);\n  });\n};\n\nvar convertNumberToUint8Array = function(number) {\n  var numOfBits = number.toString(2).length;\n  var num8BitGroups = Math.ceil(numOfBits / 8);\n  var byteArray = new Uint8Array(num8BitGroups);\n\n  for (var i = 0; i < byteArray.length; i++) {\n    var byte = number & 0xff;\n    byteArray[i] = byte;\n    number = (number - byte) / 256;\n  }\n\n  return byteArray;\n};\n\nvar ensureUint8Array = function (number) {\n  return (number instanceof Uint8Array) ?\n    number : convertNumberToUint8Array(number);\n};\n\nvar ensureOperandUint8Array = function (operand) {\n  if (!(operand instanceof Uint8Array)) {\n    operand = _.reduce(operand, function (num, n) {\n      return num | (1 << n);\n    }, 0);\n\n    operand = convertNumberToUint8Array(operand);\n  }\n\n  return operand;\n};\n\nvar bitsClear = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(\n    _.find(bitsSetOp, function (bit) {\n      return bitsSetVal.indexOf(bit) === -1;\n    })\n  );\n};\n\nvar bitsSet = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(\n    _.find(bitsSetOp, function (bit) {\n      return bitsSetVal.indexOf(bit) !== -1;\n    })\n  );\n};\n\nvar anyBitCompare = function (operand, value, setOrClear) {\n  return _.isUndefined(\n    _.find(operand, function (op, i) {\n      var bitsSetOp = get8BitsSet(op);\n      var bitsSetVal = get8BitsSet(value[i]);\n\n      return setOrClear(bitsSetOp, bitsSetVal);\n    })\n  );\n};\n\nvar allBitCompare = function (operand, value, setOrClear) {\n  return _.filter(operand, function (op, i) {\n      var bitsSetOp = get8BitsSet(op);\n      var bitsSetVal = get8BitsSet(value[i]);\n\n      return !setOrClear(bitsSetOp, bitsSetVal);\n    }).length === 0;\n};\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(isArray(operand) && operand.length === 2\n            && typeof(operand[0]) === 'number'\n            && typeof(operand[1]) === 'number')) {\n        throw Error(\"argument to $mod must be an array of two numbers\");\n      }\n      // XXX could require to be ints or round or something\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!isArray(operand))\n        throw Error(\"$in needs an array\");\n\n      var elementMatchers = [];\n      _.each(operand, function (option) {\n        if (option instanceof RegExp)\n          elementMatchers.push(regexpElementMatcher(option));\n        else if (isOperatorObject(option))\n          throw Error(\"cannot nest $ under $in\");\n        else\n          elementMatchers.push(equalityElementMatcher(option));\n      });\n\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined)\n          value = null;\n        return _.any(elementMatchers, function (e) {\n          return e(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error(\"$size needs a number\");\n      }\n      return function (value) {\n        return isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand !== 'number')\n        throw Error(\"$type needs a number\");\n      return function (value) {\n        return value !== undefined\n          && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $bitsAnyClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAnyClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        if (value === 0)\n          return true;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return anyBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAllClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAllClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        if (value === 0)\n          return true;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return allBitCompare(operand, value, bitsSet);\n      };\n    }\n  },\n  $bitsAllSet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAllSet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return allBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAnySet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAnySet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return _.isUndefined(\n          _.find(operand, function (op, i) {\n            var bitsSetOp = get8BitsSet(op);\n            var bitsSetVal = get8BitsSet(value[i]);\n\n            return bitsSet(bitsSetOp, bitsSetVal);\n          })\n        );\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp))\n        throw Error(\"$regex has to be a string or RegExp\");\n\n      var regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself. (See also\n        // Mongo.Collection._rewriteSelector.)\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options))\n          throw new Error(\"Only the i, m, and g regexp options are supported\");\n\n        var regexSource = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(regexSource, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isPlainObject(operand))\n        throw Error(\"$elemMatch need an object\");\n\n      var subMatcher, isDocMatcher;\n      if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {\n        subMatcher = compileValueSelector(operand, matcher);\n        isDocMatcher = false;\n      } else {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher,\n                                             {inElemMatch: true});\n        isDocMatcher = true;\n      }\n\n      return function (value) {\n        if (!isArray(value))\n          return false;\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement))\n              return false;\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result)\n            return i;   // specially understood to mean \"use as arrayIndices\"\n        }\n        return false;\n      };\n    }\n  }\n};\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we \"branch\". When we \"branch\", if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively \"branch\" over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like \"implicit\", but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nmakeLookupFunction = function (key, options) {\n  options = options || {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var firstPartIsNumeric = isNumericKey(firstPart);\n  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);\n  var lookupRest;\n  if (parts.length > 1) {\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));\n  }\n\n  var omitUnnecessaryFields = function (retVal) {\n    if (!retVal.dontIterate)\n      delete retVal.dontIterate;\n    if (retVal.arrayIndices && !retVal.arrayIndices.length)\n      delete retVal.arrayIndices;\n    return retVal;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return function (doc, arrayIndices) {\n    if (!arrayIndices)\n      arrayIndices = [];\n\n    if (isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(firstPartIsNumeric && firstPart < doc.length))\n        return [];\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    var firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as \"don't iterate\".\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        value: firstLevel,\n        dontIterate: isArray(doc) && isArray(firstLevel),\n        arrayIndices: arrayIndices})];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (isArray(doc))\n        return [];\n      return [omitUnnecessaryFields({value: undefined,\n                                      arrayIndices: arrayIndices})];\n    }\n\n    var result = [];\n    var appendToResult = function (more) {\n      Array.prototype.push.apply(result, more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also \"branch\": try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // \"look up this index\" in that case, not \"also look up this index in all\n    // the elements of the array\".\n    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {\n      _.each(firstLevel, function (branch, arrayIndex) {\n        if (isPlainObject(branch)) {\n          appendToResult(lookupRest(\n            branch,\n            arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n};\nMinimongoTest.makeLookupFunction = makeLookupFunction;\n\nexpandArraysInBranches = function (branches, skipTheArrays) {\n  var branchesOut = [];\n  _.each(branches, function (branch) {\n    var thisIsArray = isArray(branch.value);\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        value: branch.value,\n        arrayIndices: branch.arrayIndices\n      });\n    }\n    if (thisIsArray && !branch.dontIterate) {\n      _.each(branch.value, function (leaf, i) {\n        branchesOut.push({\n          value: leaf,\n          arrayIndices: (branch.arrayIndices || []).concat(i)\n        });\n      });\n    }\n  });\n  return branchesOut;\n};\n\nvar nothingMatcher = function (docOrBranchedValues) {\n  return {result: false};\n};\n\nvar everythingMatcher = function (docOrBranchedValues) {\n  return {result: true};\n};\n\n\n// NB: We are cheating and using this function to implement \"AND\" for both\n// \"document matchers\" and \"branched matchers\". They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of \"branched values\".\nvar andSomeMatchers = function (subMatchers) {\n  if (subMatchers.length === 0)\n    return everythingMatcher;\n  if (subMatchers.length === 1)\n    return subMatchers[0];\n\n  return function (docOrBranches) {\n    var ret = {};\n    ret.result = _.all(subMatchers, function (f) {\n      var subResult = f(docOrBranches);\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result && subResult.distance !== undefined\n          && ret.distance === undefined) {\n        ret.distance = subResult.distance;\n      }\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        ret.arrayIndices = subResult.arrayIndices;\n      }\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!ret.result) {\n      delete ret.distance;\n      delete ret.arrayIndices;\n    }\n    return ret;\n  };\n};\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\n\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n\n  _type: function (v) {\n    if (typeof v === \"number\")\n      return 1;\n    if (typeof v === \"string\")\n      return 2;\n    if (typeof v === \"boolean\")\n      return 8;\n    if (isArray(v))\n      return 4;\n    if (v === null)\n      return 10;\n    if (v instanceof RegExp)\n      // note that typeof(/x/) === \"object\"\n      return 11;\n    if (typeof v === \"function\")\n      return 13;\n    if (v instanceof Date)\n      return 9;\n    if (EJSON.isBinary(v))\n      return 5;\n    if (v instanceof MongoID.ObjectID)\n      return 7;\n    return 3; // object\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of\n  // different types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1,  // (not a type)\n            1,   // number\n            2,   // string\n            3,   // object\n            4,   // array\n            5,   // binary\n            -1,  // deprecated\n            6,   // ObjectID\n            7,   // bool\n            8,   // Date\n            0,   // null\n            9,   // RegExp\n            -1,  // deprecated\n            100, // JS code\n            2,   // deprecated (symbol)\n            100, // JS code\n            1,   // 32-bit int\n            8,   // Mongo timestamp\n            1    // 64-bit int\n           ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined)\n      return b === undefined ? 0 : -1;\n    if (b === undefined)\n      return 1;\n    var ta = LocalCollection._f._type(a);\n    var tb = LocalCollection._f._type(b);\n    var oa = LocalCollection._f._typeorder(ta);\n    var ob = LocalCollection._f._typeorder(tb);\n    if (oa !== ob)\n      return oa < ob ? -1 : 1;\n    if (ta !== tb)\n      // XXX need to implement this if we implement Symbol or integers, or\n      // Timestamp\n      throw Error(\"Missing type coercion logic in _cmp\");\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : (a === b ? 0 : 1);\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      var to_array = function (obj) {\n        var ret = [];\n        for (var key in obj) {\n          ret.push(key);\n          ret.push(obj[key]);\n        }\n        return ret;\n      };\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\n    }\n    if (ta === 4) { // Array\n      for (var i = 0; ; i++) {\n        if (i === a.length)\n          return (i === b.length) ? 0 : -1;\n        if (i === b.length)\n          return 1;\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0)\n          return s;\n      }\n    }\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length)\n        return a.length - b.length;\n      for (i = 0; i < a.length; i++) {\n        if (a[i] < b[i])\n          return -1;\n        if (a[i] > b[i])\n          return 1;\n      }\n      return 0;\n    }\n    if (ta === 8) { // boolean\n      if (a) return b ? 0 : 1;\n      return b ? -1 : 0;\n    }\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\n    throw Error(\"Unknown type to sort\");\n  }\n};\n\n// Oddball function used by upsert.\nLocalCollection._removeDollarOperators = function (selector) {\n  var selectorDoc = {};\n  for (var k in selector)\n    if (k.substr(0, 1) !== '$')\n      selectorDoc[k] = selector[k];\n  return selectorDoc;\n};\n","// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nMinimongo.Sorter = function (spec, options) {\n  var self = this;\n  options = options || {};\n\n  self._sortSpecParts = [];\n  self._sortFunction = null;\n\n  var addSpecPart = function (path, ascending) {\n    if (!path)\n      throw Error(\"sort keys must be non-empty\");\n    if (path.charAt(0) === '$')\n      throw Error(\"unsupported sort key: \" + path);\n    self._sortSpecParts.push({\n      path: path,\n      lookup: makeLookupFunction(path, {forSort: true}),\n      ascending: ascending\n    });\n  };\n\n  if (spec instanceof Array) {\n    for (var i = 0; i < spec.length; i++) {\n      if (typeof spec[i] === \"string\") {\n        addSpecPart(spec[i], true);\n      } else {\n        addSpecPart(spec[i][0], spec[i][1] !== \"desc\");\n      }\n    }\n  } else if (typeof spec === \"object\") {\n    _.each(spec, function (value, key) {\n      addSpecPart(key, value >= 0);\n    });\n  } else if (typeof spec === \"function\") {\n    self._sortFunction = spec;\n  } else {\n    throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n  }\n\n  // If a function is specified for sorting, we skip the rest.\n  if (self._sortFunction)\n    return;\n\n  // To implement affectedByModifier, we piggy-back on top of Matcher's\n  // affectedByModifier code; we create a selector that is affected by the same\n  // modifiers as this sort order. This is only implemented on the server.\n  if (self.affectedByModifier) {\n    var selector = {};\n    _.each(self._sortSpecParts, function (spec) {\n      selector[spec.path] = 1;\n    });\n    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n  }\n\n  self._keyComparator = composeComparators(\n    _.map(self._sortSpecParts, function (spec, i) {\n      return self._keyFieldComparator(i);\n    }));\n\n  // If you specify a matcher for this Sorter, _keyFilter may be set to a\n  // function which selects whether or not a given \"sort key\" (tuple of values\n  // for the different sort spec fields) is compatible with the selector.\n  self._keyFilter = null;\n  options.matcher && self._useWithMatcher(options.matcher);\n};\n\n// In addition to these methods, sorter_project.js defines combineIntoProjection\n// on the server only.\n_.extend(Minimongo.Sorter.prototype, {\n  getComparator: function (options) {\n    var self = this;\n\n    // If we have no distances, just use the comparator from the source\n    // specification (which defaults to \"everything is equal\".\n    if (!options || !options.distances) {\n      return self._getBaseComparator();\n    }\n\n    var distances = options.distances;\n\n    // Return a comparator which first tries the sort specification, and if that\n    // says \"it's equal\", breaks ties using $near distances.\n    return composeComparators([self._getBaseComparator(), function (a, b) {\n      if (!distances.has(a._id))\n        throw Error(\"Missing distance for \" + a._id);\n      if (!distances.has(b._id))\n        throw Error(\"Missing distance for \" + b._id);\n      return distances.get(a._id) - distances.get(b._id);\n    }]);\n  },\n\n  _getPaths: function () {\n    var self = this;\n    return _.pluck(self._sortSpecParts, 'path');\n  },\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc: function (doc) {\n    var self = this;\n    var minKey = null;\n\n    self._generateKeysFromDoc(doc, function (key) {\n      if (!self._keyCompatibleWithSelector(key))\n        return;\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n      if (self._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null)\n      throw Error(\"sort selector found no keys in doc?\");\n    return minKey;\n  },\n\n  _keyCompatibleWithSelector: function (key) {\n    var self = this;\n    return !self._keyFilter || self._keyFilter(key);\n  },\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc: function (doc, cb) {\n    var self = this;\n\n    if (self._sortSpecParts.length === 0)\n      throw new Error(\"can't generate keys without a spec\");\n\n    // maps index -> ({'' -> value} or {path -> value})\n    var valuesByIndexAndPath = [];\n\n    var pathFromIndices = function (indices) {\n      return indices.join(',') + ',';\n    };\n\n    var knownPaths = null;\n\n    _.each(self._sortSpecParts, function (spec, whichField) {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      var branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length)\n        branches = [{value: null}];\n\n      var usedPaths = false;\n      valuesByIndexAndPath[whichField] = {};\n      _.each(branches, function (branch) {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1)\n            throw Error(\"multiple branches but no array used?\");\n          valuesByIndexAndPath[whichField][''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n        var path = pathFromIndices(branch.arrayIndices);\n        if (_.has(valuesByIndexAndPath[whichField], path))\n          throw Error(\"duplicate path: \" + path);\n        valuesByIndexAndPath[whichField][path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !_.has(knownPaths, path)) {\n          throw Error(\"cannot index parallel arrays\");\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!_.has(valuesByIndexAndPath[whichField], '') &&\n            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {\n          throw Error(\"cannot index parallel arrays!\");\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n        _.each(valuesByIndexAndPath[whichField], function (x, path) {\n          knownPaths[path] = true;\n        });\n      }\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      var soleKey = _.map(valuesByIndexAndPath, function (values) {\n        if (!_.has(values, ''))\n          throw Error(\"no value in sole key case?\");\n        return values[''];\n      });\n      cb(soleKey);\n      return;\n    }\n\n    _.each(knownPaths, function (x, path) {\n      var key = _.map(valuesByIndexAndPath, function (values) {\n        if (_.has(values, ''))\n          return values[''];\n        if (!_.has(values, path))\n          throw Error(\"missing path?\");\n        return values[path];\n      });\n      cb(key);\n    });\n  },\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys: function (key1, key2) {\n    var self = this;\n    if (key1.length !== self._sortSpecParts.length ||\n        key2.length !== self._sortSpecParts.length) {\n      throw Error(\"Key has wrong length\");\n    }\n\n    return self._keyComparator(key1, key2);\n  },\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator: function (i) {\n    var self = this;\n    var invert = !self._sortSpecParts[i].ascending;\n    return function (key1, key2) {\n      var compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      if (invert)\n        compare = -compare;\n      return compare;\n    };\n  },\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator: function () {\n    var self = this;\n\n    if (self._sortFunction)\n      return self._sortFunction;\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!self._sortSpecParts.length) {\n      return function (doc1, doc2) {\n        return 0;\n      };\n    }\n\n    return function (doc1, doc2) {\n      var key1 = self._getMinKeyFromDoc(doc1);\n      var key2 = self._getMinKeyFromDoc(doc2);\n      return self._compareKeys(key1, key2);\n    };\n  },\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher: function (matcher) {\n    var self = this;\n\n    if (self._keyFilter)\n      throw Error(\"called _useWithMatcher twice?\");\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (_.isEmpty(self._sortSpecParts))\n      return;\n\n    var selector = matcher._selector;\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function)\n      return;\n\n    var constraintsByPath = {};\n    _.each(self._sortSpecParts, function (spec, i) {\n      constraintsByPath[spec.path] = [];\n    });\n\n    _.each(selector, function (subSelector, key) {\n      // XXX support $and and $or\n\n      var constraints = constraintsByPath[key];\n      if (!constraints)\n        return;\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline)\n          return;\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        _.each(subSelector, function (operand, operator) {\n          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand));\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand, subSelector));\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))\n      return;\n\n    self._keyFilter = function (key) {\n      return _.all(self._sortSpecParts, function (specPart, index) {\n        return _.all(constraintsByPath[specPart.path], function (f) {\n          return f(key[index]);\n        });\n      });\n    };\n  }\n});\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nvar composeComparators = function (comparatorArray) {\n  return function (a, b) {\n    for (var i = 0; i < comparatorArray.length; ++i) {\n      var compare = comparatorArray[i](a, b);\n      if (compare !== 0)\n        return compare;\n    }\n    return 0;\n  };\n};\n","// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (_.isArray(doc))\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });\n\n    var res = details.including ? {} : EJSON.clone(doc);\n    _.each(ruleTree, function (rule, key) {\n      if (!_.has(doc, key))\n        return;\n      if (_.isObject(rule)) {\n        // For sub-objects/subsets we branch\n        if (_.isObject(doc[key]))\n          res[key] = transform(doc[key], rule);\n        // Otherwise we don't even touch this subfield\n      } else if (details.including)\n        res[key] = EJSON.clone(doc[key]);\n      else\n        delete res[key];\n    });\n\n    return res;\n  };\n\n  return function (obj) {\n    var res = transform(obj, details.tree);\n\n    if (_idProjection && _.has(obj, '_id'))\n      res._id = obj._id;\n    if (!_idProjection && _.has(res, '_id'))\n      delete res._id;\n    return res;\n  };\n};\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nprojectionDetails = function (fields) {\n  // Find the non-_id keys (_id is handled specially because it is included unless\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = _.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (fieldsKeys.length > 0 &&\n      !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(_.contains(fieldsKeys, '_id') && fields['_id']))\n    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });\n\n  var including = null; // Unknown\n\n  _.each(fieldsKeys, function (keyPath) {\n    var rule = !!fields[keyPath];\n    if (including === null)\n      including = rule;\n    if (including !== rule)\n      // This error message is copied from MongoDB shell\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\n  });\n\n\n  var projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    function (path) { return including; },\n    function (node, path, fullPath) {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\n      //\n      // Note, how second time the return set of keys is different.\n\n      var currentPath = fullPath;\n      var anotherPath = path;\n      throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +\n                           \" found in fields option, using both of them may trigger \" +\n                           \"unexpected behavior. Did you mean to use only one of them?\");\n    });\n\n  return {\n    tree: projectionRulesTree,\n    including: including\n  };\n};\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\npathsToTree = function (paths, newLeafFn, conflictFn, tree) {\n  tree = tree || {};\n  _.each(paths, function (keyPath) {\n    var treePos = tree;\n    var pathArr = keyPath.split('.');\n\n    // use _.all just for iteration with break\n    var success = _.all(pathArr.slice(0, -1), function (key, idx) {\n      if (!_.has(treePos, key))\n        treePos[key] = {};\n      else if (!_.isObject(treePos[key])) {\n        treePos[key] = conflictFn(treePos[key],\n                                  pathArr.slice(0, idx + 1).join('.'),\n                                  keyPath);\n        // break out of loop if we are failing for this path\n        if (!_.isObject(treePos[key]))\n          return false;\n      }\n\n      treePos = treePos[key];\n      return true;\n    });\n\n    if (success) {\n      var lastKey = _.last(pathArr);\n      if (!_.has(treePos, lastKey))\n        treePos[lastKey] = newLeafFn(keyPath);\n      else\n        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);\n    }\n  });\n\n  return tree;\n};\n\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (!_.isObject(fields) || _.isArray(fields))\n    throw MinimongoError(\"fields option must be an object\");\n\n  _.each(fields, function (val, keyPath) {\n    if (_.contains(keyPath.split('.'), '$'))\n      throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");\n    if (typeof val === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0)\n      throw MinimongoError(\"Minimongo doesn't support operators in projections yet.\");\n    if (_.indexOf([1, 0, true, false], val) === -1)\n      throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\n  });\n};\n","import { assertHasValidFieldNames, assertIsValidFieldName } from './validation.js';\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, mod, options) {\n  options = options || {};\n  if (!isPlainObject(mod))\n    throw MinimongoError(\"Modifier must be an object\");\n\n  // Make sure the caller can't mutate our data structures.\n  mod = EJSON.clone(mod);\n\n  var isModifier = isOperatorObject(mod);\n\n  var newDoc;\n\n  if (!isModifier) {\n    if (mod._id && !EJSON.equals(doc._id, mod._id))\n      throw MinimongoError(\"Cannot change the _id of a document\");\n\n    // replace the whole document\n    assertHasValidFieldNames(mod);\n    newDoc = mod;\n  } else {\n    // apply modifiers to the doc.\n    newDoc = EJSON.clone(doc);\n\n    _.each(mod, function (operand, op) {\n      var modFunc = MODIFIERS[op];\n      // Treat $setOnInsert as $set if this is an insert.\n      if (options.isInsert && op === '$setOnInsert')\n        modFunc = MODIFIERS['$set'];\n      if (!modFunc)\n        throw MinimongoError(\"Invalid modifier specified \" + op);\n      _.each(operand, function (arg, keypath) {\n        if (keypath === '') {\n          throw MinimongoError(\"An empty update path is not valid.\");\n        }\n\n        if (keypath === '_id' && op !== '$setOnInsert') {\n          throw MinimongoError(\"Mod on _id not allowed\");\n        }\n\n        var keyparts = keypath.split('.');\n\n        if (! _.all(keyparts, _.identity)) {\n          throw MinimongoError(\n            \"The update path '\" + keypath +\n              \"' contains an empty field name, which is not allowed.\");\n        }\n\n        var noCreate = _.has(NO_CREATE_MODIFIERS, op);\n        var forbidArray = (op === \"$rename\");\n        var target = findModTarget(newDoc, keyparts, {\n          noCreate: NO_CREATE_MODIFIERS[op],\n          forbidArray: (op === \"$rename\"),\n          arrayIndices: options.arrayIndices\n        });\n        var field = keyparts.pop();\n        modFunc(target, field, arg, keypath, newDoc);\n      });\n    });\n  }\n\n  // move new document into place.\n  _.each(_.keys(doc), function (k) {\n    // Note: this used to be for (var k in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (k !== '_id')\n      delete doc[k];\n  });\n  _.each(newDoc, function (v, k) {\n    doc[k] = v;\n  });\n};\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nvar findModTarget = function (doc, keyparts, options) {\n  options = options || {};\n  var usedArrayIndex = false;\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = (i === keyparts.length - 1);\n    var keypart = keyparts[i];\n    var indexable = isIndexable(doc);\n    if (!indexable) {\n      if (options.noCreate)\n        return undefined;\n      var e = MinimongoError(\n        \"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray)\n        return null;\n      if (keypart === '$') {\n        if (usedArrayIndex)\n          throw MinimongoError(\"Too many positional (i.e. '$') elements\");\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\"The positional operator did not find the \" +\n                               \"match needed from the query\");\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate)\n          return undefined;\n        throw MinimongoError(\n          \"can't append to array using string field name [\"\n                    + keypart + \"]\");\n      }\n      if (last)\n        // handle 'a.01'\n        keyparts[i] = keypart;\n      if (options.noCreate && keypart >= doc.length)\n        return undefined;\n      while (doc.length < keypart)\n        doc.push(null);\n      if (!last) {\n        if (doc.length === keypart)\n          doc.push({});\n        else if (typeof doc[keypart] !== \"object\")\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] +\n                      \"' of list value \" + JSON.stringify(doc[keypart]));\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate)\n          return undefined;\n        if (!last)\n          doc[keypart] = {};\n      }\n    }\n\n    if (last)\n      return doc;\n    doc = doc[keypart];\n  }\n\n  // notreached\n};\n\nvar NO_CREATE_MODIFIERS = {\n  $unset: true,\n  $pop: true,\n  $rename: true,\n  $pull: true,\n  $pullAll: true\n};\n\nvar MODIFIERS = {\n  $currentDate: function (target, field, arg) {\n    if (typeof arg === \"object\" && arg.hasOwnProperty(\"$type\")) {\n       if (arg.$type !== \"date\") {\n          throw MinimongoError(\n            \"Minimongo does currently only support the date type \" +\n            \"in $currentDate modifiers\",\n            { field });\n       }\n    } else if (arg !== true) {\n      throw MinimongoError(\"Invalid $currentDate modifier\", { field });\n    }\n    target[field] = new Date();\n  },\n  $min: function (target, field, arg) {\n    if (typeof arg !== \"number\") {\n      throw MinimongoError(\"Modifier $min allowed for numbers only\", { field });\n    }\n    if (field in target) {\n      if (typeof target[field] !== \"number\") {\n        throw MinimongoError(\n          \"Cannot apply $min modifier to non-number\", { field });\n      }\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max: function (target, field, arg) {\n    if (typeof arg !== \"number\") {\n      throw MinimongoError(\"Modifier $max allowed for numbers only\", { field });\n    }\n    if (field in target) {\n      if (typeof target[field] !== \"number\") {\n        throw MinimongoError(\n          \"Cannot apply $max modifier to non-number\", { field });\n      }\n      if (target[field] < arg) {\n         target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc: function (target, field, arg) {\n    if (typeof arg !== \"number\")\n      throw MinimongoError(\"Modifier $inc allowed for numbers only\", { field });\n    if (field in target) {\n      if (typeof target[field] !== \"number\")\n        throw MinimongoError(\n          \"Cannot apply $inc modifier to non-number\", { field });\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set: function (target, field, arg) {\n    if (!_.isObject(target)) { // not an array or an object\n      var e = MinimongoError(\n        \"Cannot set property on non-object field\", { field });\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (target === null) {\n      var e = MinimongoError(\"Cannot set property on null\", { field });\n      e.setPropertyError = true;\n      throw e;\n    }\n    assertHasValidFieldNames(arg);\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target)\n          target[field] = null;\n      } else\n        delete target[field];\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined)\n      target[field] = [];\n    if (!(target[field] instanceof Array))\n      throw MinimongoError(\n        \"Cannot apply $push modifier to non-array\", { field });\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array))\n      throw MinimongoError(\"$each must be an array\", { field });\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    var position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== \"number\")\n        throw MinimongoError(\"$position must be a numeric value\", { field });\n      // XXX should check to make sure integer\n      if (arg.$position < 0)\n        throw MinimongoError(\n          \"$position in $push must be zero or positive\", { field });\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== \"number\")\n        throw MinimongoError(\"$slice must be a numeric value\", { field });\n      // XXX should check to make sure integer\n      if (arg.$slice > 0)\n        throw MinimongoError(\n          \"$slice in $push must be zero or negative\", { field });\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined)\n        throw MinimongoError(\"$sort requires $slice to be present\", { field });\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      for (var i = 0; i < toPush.length; i++) {\n        if (LocalCollection._f._type(toPush[i]) !== 3) {\n          throw MinimongoError(\"$push like modifiers using $sort \" +\n                      \"require all elements to be objects\", { field });\n        }\n      }\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      for (var j = 0; j < toPush.length; j++)\n        target[field].push(toPush[j]);\n    } else {\n      var spliceArguments = [position, 0];\n      for (var j = 0; j < toPush.length; j++)\n        spliceArguments.push(toPush[j]);\n      Array.prototype.splice.apply(target[field], spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction)\n      target[field].sort(sortFunction);\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0)\n        target[field] = [];  // differs from Array.slice!\n      else\n        target[field] = target[field].slice(slice);\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    assertHasValidFieldNames(arg);\n    var x = target[field];\n    if (x === undefined)\n      target[field] = arg;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\n        \"Cannot apply $pushAll modifier to non-array\", { field });\n    else {\n      for (var i = 0; i < arg.length; i++)\n        x.push(arg[i]);\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n    if (typeof arg === \"object\") {\n      //check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === \"$each\"){\n        isEach = true;\n      }\n    }\n    var values = isEach ? arg[\"$each\"] : [arg];\n    assertHasValidFieldNames(values);\n    var x = target[field];\n    if (x === undefined)\n      target[field] = values;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\n        \"Cannot apply $addToSet modifier to non-array\", { field });\n    else {\n      _.each(values, function (value) {\n        for (var i = 0; i < x.length; i++)\n          if (LocalCollection._f._equal(value, x[i]))\n            return;\n        x.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\n        \"Cannot apply $pop modifier to non-array\", { field });\n    else {\n      if (typeof arg === 'number' && arg < 0)\n        x.splice(0, 1);\n      else\n        x.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\n        \"Cannot apply $pull/pullAll modifier to non-array\", { field });\n    else {\n      var out = [];\n      if (arg != null && typeof arg === \"object\" && !(arg instanceof Array)) {\n        // XXX would be much nicer to compile this once, rather than\n        // for each document we modify.. but usually we're not\n        // modifying that many documents, so we'll let it slide for\n        // now\n\n        // XXX Minimongo.Matcher isn't up for the job, because we need\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n        // like {$gt: 4} is not normally a complete selector.\n        // same issue as $elemMatch possibly?\n        var matcher = new Minimongo.Matcher(arg);\n        for (var i = 0; i < x.length; i++)\n          if (!matcher.documentMatches(x[i]).result)\n            out.push(x[i]);\n      } else {\n        for (var i = 0; i < x.length; i++)\n          if (!LocalCollection._f._equal(x[i], arg))\n            out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\n        \"Modifier $pushAll/pullAll allowed for arrays only\", { field });\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\n        \"Cannot apply $pull/pullAll modifier to non-array\", { field });\n    else {\n      var out = [];\n      for (var i = 0; i < x.length; i++) {\n        var exclude = false;\n        for (var j = 0; j < arg.length; j++) {\n          if (LocalCollection._f._equal(x[i], arg[j])) {\n            exclude = true;\n            break;\n          }\n        }\n        if (!exclude)\n          out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    if (keypath === arg)\n      // no idea why mongo has this restriction..\n      throw MinimongoError(\"$rename source must differ from target\", { field });\n    if (target === null)\n      throw MinimongoError(\"$rename source field invalid\", { field });\n    if (typeof arg !== \"string\")\n      throw MinimongoError(\"$rename target must be a string\", { field });\n    if (arg.indexOf('\\0') > -1) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        \"The 'to' field for $rename cannot contain an embedded null byte\",\n        { field });\n    }\n    if (target === undefined)\n      return;\n    var v = target[field];\n    delete target[field];\n\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {forbidArray: true});\n    if (target2 === null)\n      throw MinimongoError(\"$rename target field invalid\", { field });\n    var field2 = keyparts.pop();\n    target2[field2] = v;\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError(\"$bit is not supported\", { field });\n  }\n};\n","// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\n\n\nLocalCollection._diffQueryOrderedChanges =\n  function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n","LocalCollection._IdMap = function () {\n  var self = this;\n  IdMap.call(self, MongoID.idStringify, MongoID.idParse);\n};\n\nMeteor._inherits(LocalCollection._IdMap, IdMap);\n\n","// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in self.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function (options) {\n  var self = this;\n  options = options || {};\n\n  var orderedFromCallbacks = options.callbacks &&\n        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n  if (_.has(options, 'ordered')) {\n    self.ordered = options.ordered;\n    if (options.callbacks && options.ordered !== orderedFromCallbacks)\n      throw Error(\"ordered option doesn't match callbacks\");\n  } else if (options.callbacks) {\n    self.ordered = orderedFromCallbacks;\n  } else {\n    throw Error(\"must provide ordered or callbacks\");\n  }\n  var callbacks = options.callbacks || {};\n\n  if (self.ordered) {\n    self.docs = new OrderedDict(MongoID.idStringify);\n    self.applyChange = {\n      addedBefore: function (id, fields, before) {\n        var doc = EJSON.clone(fields);\n        doc._id = id;\n        callbacks.addedBefore && callbacks.addedBefore.call(\n          self, id, fields, before);\n        // This line triggers if we provide added with movedBefore.\n        callbacks.added && callbacks.added.call(self, id, fields);\n        // XXX could `before` be a falsy ID?  Technically\n        // idStringify seems to allow for them -- though\n        // OrderedDict won't call stringify on a falsy arg.\n        self.docs.putBefore(id, doc, before || null);\n      },\n      movedBefore: function (id, before) {\n        var doc = self.docs.get(id);\n        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);\n        self.docs.moveBefore(id, before || null);\n      }\n    };\n  } else {\n    self.docs = new LocalCollection._IdMap;\n    self.applyChange = {\n      added: function (id, fields) {\n        var doc = EJSON.clone(fields);\n        callbacks.added && callbacks.added.call(self, id, fields);\n        doc._id = id;\n        self.docs.set(id,  doc);\n      }\n    };\n  }\n\n  // The methods in _IdMap and OrderedDict used by these callbacks are\n  // identical.\n  self.applyChange.changed = function (id, fields) {\n    var doc = self.docs.get(id);\n    if (!doc)\n      throw new Error(\"Unknown id for changed: \" + id);\n    callbacks.changed && callbacks.changed.call(\n      self, id, EJSON.clone(fields));\n    DiffSequence.applyChanges(doc, fields);\n  };\n  self.applyChange.removed = function (id) {\n    callbacks.removed && callbacks.removed.call(self, id);\n    self.docs.remove(id);\n  };\n};\n\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {return doc;};\n  var suppressed = !!observeCallbacks._suppress_initial;\n\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        var self = this;\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))\n          return;\n        var doc = transform(_.extend(fields, {_id: id}));\n        if (observeCallbacks.addedAt) {\n          var index = indices\n                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n          observeCallbacks.addedAt(doc, index, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed))\n          return;\n        var doc = EJSON.clone(self.docs.get(id));\n        if (!doc)\n          throw new Error(\"Unknown id for changed: \" + id);\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        doc = transform(doc);\n        if (observeCallbacks.changedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.changedAt(doc, oldDoc, index);\n        } else {\n          observeCallbacks.changed(doc, oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        var self = this;\n        if (!observeCallbacks.movedTo)\n          return;\n        var from = indices ? self.docs.indexOf(id) : -1;\n\n        var to = indices\n              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from)\n          --to;\n        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),\n                                 from, to, before || null);\n      },\n      removed: function (id) {\n        var self = this;\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed))\n          return;\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from self.docs!\n        var doc = transform(self.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.removedAt(doc, index);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          var doc = _.extend(fields, {_id:  id});\n          observeCallbacks.added(transform(doc));\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (observeCallbacks.changed) {\n          var oldDoc = self.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc),\n                                   transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        var self = this;\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(self.docs.get(id)));\n        }\n      }\n    };\n  }\n\n  var changeObserver = new LocalCollection._CachingChangeObserver(\n    {callbacks: observeChangesCallbacks});\n  var handle = cursor.observeChanges(changeObserver.applyChange);\n  suppressed = false;\n\n  return handle;\n};\n","// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return (typeof selector === \"string\") ||\n    (typeof selector === \"number\") ||\n    selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) ||\n    (selector && typeof selector === \"object\" &&\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\n     _.size(selector) === 1);\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector))\n    return [selector];\n  if (!selector)\n    return null;\n\n  // Do we have an _id clause?\n  if (_.has(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id))\n      return [selector._id];\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && selector._id.$in\n        && _.isArray(selector._id.$in)\n        && !_.isEmpty(selector._id.$in)\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (selector.$and && _.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds)\n        return subIds;\n    }\n  }\n\n  return null;\n};\n\n\n","// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  '.': \"contain '.'\",\n  '$': \"start with '$'\",\n  '\\0': \"contain null bytes\",\n};\nexport function assertIsValidFieldName(key) {\n  let match;\n  if (_.isString(key) && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n};\n\n// checks if all field names in an object are valid\nexport function assertHasValidFieldNames(doc){\n  if (doc && typeof doc === \"object\") {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n};"]}