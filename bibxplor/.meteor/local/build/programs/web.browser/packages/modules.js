//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var meteorInstall = Package['modules-runtime'].meteorInstall;

/* Package-scope variables */
var Buffer, process;

var require = meteorInstall({"node_modules":{"meteor":{"modules":{"client.js":["./install-packages.js","./stubs.js","./buffer.js","./process.js","./reify.js","./css",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/client.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("./install-packages.js");                                                                                      // 1
require("./stubs.js");                                                                                                 // 2
require("./buffer.js");                                                                                                // 3
require("./process.js");                                                                                               // 4
require("./reify.js");                                                                                                 // 5
                                                                                                                       // 6
exports.addStyles = require("./css").addStyles;                                                                        // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"buffer.js":["buffer",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/buffer.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
try {                                                                                                                  // 1
  Buffer = global.Buffer || require("buffer").Buffer;                                                                  // 2
} catch (noBuffer) {}                                                                                                  // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"css.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/css.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var doc = document;                                                                                                    // 1
var head = doc.getElementsByTagName("head").item(0);                                                                   // 2
                                                                                                                       // 3
exports.addStyles = function (css) {                                                                                   // 4
  var style = doc.createElement("style");                                                                              // 5
                                                                                                                       // 6
  style.setAttribute("type", "text/css");                                                                              // 7
                                                                                                                       // 8
  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9
  var internetExplorerSheetObject =                                                                                    // 10
    style.sheet || // Edge/IE11.                                                                                       // 11
    style.styleSheet; // Older IEs.                                                                                    // 12
                                                                                                                       // 13
  if (internetExplorerSheetObject) {                                                                                   // 14
    internetExplorerSheetObject.cssText = css;                                                                         // 15
  } else {                                                                                                             // 16
    style.appendChild(doc.createTextNode(css));                                                                        // 17
  }                                                                                                                    // 18
                                                                                                                       // 19
  return head.appendChild(style);                                                                                      // 20
};                                                                                                                     // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"install-packages.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/install-packages.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function install(name, mainModule) {                                                                                   // 1
  var meteorDir = {};                                                                                                  // 2
                                                                                                                       // 3
  // Given a package name <name>, install a stub module in the                                                         // 4
  // /node_modules/meteor directory called <name>.js, so that                                                          // 5
  // require.resolve("meteor/<name>") will always return                                                               // 6
  // /node_modules/meteor/<name>.js instead of something like                                                          // 7
  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8
  // that the package contains a file called index.js (#6590).                                                         // 9
                                                                                                                       // 10
  if (mainModule) {                                                                                                    // 11
    meteorDir[name + ".js"] = [mainModule, function (require, e, module) {                                             // 12
      module.exports = require(mainModule);                                                                            // 13
    }];                                                                                                                // 14
  } else {                                                                                                             // 15
    // back compat with old Meteor packages                                                                            // 16
    meteorDir[name + ".js"] = function (r, e, module) {                                                                // 17
      module.exports = Package[name];                                                                                  // 18
    };                                                                                                                 // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  meteorInstall({                                                                                                      // 22
    node_modules: {                                                                                                    // 23
      meteor: meteorDir                                                                                                // 24
    }                                                                                                                  // 25
  });                                                                                                                  // 26
}                                                                                                                      // 27
                                                                                                                       // 28
// This file will be modified during computeJsOutputFilesMap to include                                                // 29
// install(<name>) calls for every Meteor package.                                                                     // 30
                                                                                                                       // 31
install("underscore");                                                                                                 // 32
install("meteor");                                                                                                     // 33
install("meteor-base");                                                                                                // 34
install("mobile-experience");                                                                                          // 35
install("modules-runtime");                                                                                            // 36
install("modules", "meteor/modules/client.js");                                                                        // 37
install("es5-shim", "meteor/es5-shim/client.js");                                                                      // 38
install("promise", "meteor/promise/client.js");                                                                        // 39
install("ecmascript-runtime", "meteor/ecmascript-runtime/runtime.js");                                                 // 40
install("babel-compiler");                                                                                             // 41
install("ecmascript");                                                                                                 // 42
install("base64");                                                                                                     // 43
install("ejson");                                                                                                      // 44
install("id-map");                                                                                                     // 45
install("ordered-dict");                                                                                               // 46
install("tracker");                                                                                                    // 47
install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");                                                     // 48
install("random");                                                                                                     // 49
install("mongo-id");                                                                                                   // 50
install("diff-sequence");                                                                                              // 51
install("geojson-utils", "meteor/geojson-utils/main.js");                                                              // 52
install("minimongo");                                                                                                  // 53
install("check", "meteor/check/match.js");                                                                             // 54
install("retry");                                                                                                      // 55
install("ddp-common");                                                                                                 // 56
install("reload");                                                                                                     // 57
install("ddp-client", "meteor/ddp-client/namespace.js");                                                               // 58
install("ddp");                                                                                                        // 59
install("ddp-server");                                                                                                 // 60
install("allow-deny");                                                                                                 // 61
install("insecure");                                                                                                   // 62
install("mongo");                                                                                                      // 63
install("blaze-html-templates");                                                                                       // 64
install("reactive-var");                                                                                               // 65
install("standard-minifier-css");                                                                                      // 66
install("standard-minifier-js");                                                                                       // 67
install("shell-server");                                                                                               // 68
install("autopublish");                                                                                                // 69
install("url");                                                                                                        // 70
install("http");                                                                                                       // 71
install("webapp");                                                                                                     // 72
install("livedata");                                                                                                   // 73
install("hot-code-push");                                                                                              // 74
install("jquery", "meteor/jquery/main.js");                                                                            // 75
install("observe-sequence");                                                                                           // 76
install("deps");                                                                                                       // 77
install("htmljs");                                                                                                     // 78
install("blaze");                                                                                                      // 79
install("spacebars");                                                                                                  // 80
install("templating-compiler");                                                                                        // 81
install("templating-runtime");                                                                                         // 82
install("templating");                                                                                                 // 83
install("launch-screen");                                                                                              // 84
install("ui");                                                                                                         // 85
install("autoupdate");                                                                                                 // 86
                                                                                                                       // 87
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"process.js":["process",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/process.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
try {                                                                                                                  // 1
  // The application can run `npm install process` to provide its own                                                  // 2
  // process stub; otherwise this module will provide a partial stub.                                                  // 3
  process = global.process || require("process");                                                                      // 4
} catch (noProcess) {                                                                                                  // 5
  process = {};                                                                                                        // 6
}                                                                                                                      // 7
                                                                                                                       // 8
if (Meteor.isServer) {                                                                                                 // 9
  // Make require("process") work on the server in all versions of Node.                                               // 10
  meteorInstall({                                                                                                      // 11
    node_modules: {                                                                                                    // 12
      "process.js": function (r, e, module) {                                                                          // 13
        module.exports = process;                                                                                      // 14
      }                                                                                                                // 15
    }                                                                                                                  // 16
  });                                                                                                                  // 17
} else {                                                                                                               // 18
  process.platform = "browser";                                                                                        // 19
  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20
}                                                                                                                      // 21
                                                                                                                       // 22
if (typeof process.env !== "object") {                                                                                 // 23
  process.env = {};                                                                                                    // 24
}                                                                                                                      // 25
                                                                                                                       // 26
_.extend(process.env, meteorEnv);                                                                                      // 27
                                                                                                                       // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"reify.js":["reify/lib/runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/reify.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module = module.constructor;                                                                                       // 1
require("reify/lib/runtime").enable(Module);                                                                           // 2
var Mp = Module.prototype;                                                                                             // 3
Mp.importSync = Mp.importSync || Mp.import;                                                                            // 4
Mp.import = Mp.import || Mp.importSync;                                                                                // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"stubs.js":["meteor-node-stubs",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/stubs.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var haveStubs = false;                                                                                                 // 1
try {                                                                                                                  // 2
  require.resolve("meteor-node-stubs");                                                                                // 3
  haveStubs = true;                                                                                                    // 4
} catch (noStubs) {}                                                                                                   // 5
                                                                                                                       // 6
if (haveStubs) {                                                                                                       // 7
  // When meteor-node-stubs is installed in the application's root                                                     // 8
  // node_modules directory, requiring it here installs aliases for stubs                                              // 9
  // for all Node built-in modules, such as fs, util, and http.                                                        // 10
  require("meteor-node-stubs");                                                                                        // 11
}                                                                                                                      // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"reify":{"lib":{"runtime.js":["./entry.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 3
var Entry = require("./entry.js").Entry;                                                                               // 4
                                                                                                                       // 5
exports.enable = function (Module) {                                                                                   // 6
  var Mp = Module.prototype;                                                                                           // 7
                                                                                                                       // 8
  if (typeof Mp.importSync === "function" &&                                                                           // 9
      typeof Mp.export === "function") {                                                                               // 10
    // If the Mp.{importSync,export} methods have already been defined,                                                // 11
    // abandon reification immediately.                                                                                // 12
    return Module;                                                                                                     // 13
  }                                                                                                                    // 14
                                                                                                                       // 15
  // Platform-specific code should implement this method however                                                       // 16
  // appropriate. Module.prototype.resolve(id) should return an absolute                                               // 17
  // version of the given module identifier, like require.resolve.                                                     // 18
  Mp.resolve = Mp.resolve || function resolve(id) {                                                                    // 19
    throw new Error("Module.prototype.resolve not implemented");                                                       // 20
  };                                                                                                                   // 21
                                                                                                                       // 22
  // Platform-specific code should find a way to call this method whenever                                             // 23
  // the module system is about to return module.exports from require. This                                            // 24
  // might happen more than once per module, in case of dependency cycles,                                             // 25
  // so we want Module.prototype.runModuleSetters to run each time.                                                    // 26
  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                                // 27
    var entry = Entry.get(this.id);                                                                                    // 28
    if (entry) {                                                                                                       // 29
      entry.runModuleSetters(this);                                                                                    // 30
    }                                                                                                                  // 31
                                                                                                                       // 32
    // Assignments to exported local variables get wrapped with calls to                                               // 33
    // module.runModuleSetters, so module.runModuleSetters returns the                                                 // 34
    // valueToPassThrough parameter to allow the value of the original                                                 // 35
    // expression to pass through. For example,                                                                        // 36
    //                                                                                                                 // 37
    //   export var a = 1;                                                                                             // 38
    //   console.log(a += 3);                                                                                          // 39
    //                                                                                                                 // 40
    // becomes                                                                                                         // 41
    //                                                                                                                 // 42
    //   module.export("a", () => a);                                                                                  // 43
    //   var a = 1;                                                                                                    // 44
    //   console.log(module.runModuleSetters(a += 3));                                                                 // 45
    //                                                                                                                 // 46
    // This ensures module.runModuleSetters runs immediately after the                                                 // 47
    // assignment, and does not interfere with the larger computation.                                                 // 48
    return valueToPassThrough;                                                                                         // 49
  };                                                                                                                   // 50
                                                                                                                       // 51
  function setESModule(module) {                                                                                       // 52
    var exports = module.exports;                                                                                      // 53
    if (exports &&                                                                                                     // 54
        typeof exports === "object" &&                                                                                 // 55
        ! hasOwn.call(exports, "__esModule")) {                                                                        // 56
      Object.defineProperty(exports, "__esModule", {                                                                   // 57
        value: true,                                                                                                   // 58
        enumerable: false,                                                                                             // 59
        writable: false,                                                                                               // 60
        configurable: true                                                                                             // 61
      });                                                                                                              // 62
    }                                                                                                                  // 63
  }                                                                                                                    // 64
                                                                                                                       // 65
  // If key is provided, it will be used to identify the given setters so                                              // 66
  // that they can be replaced if module.importSync is called again with the                                           // 67
  // same key. This avoids potential memory leaks from import declarations                                             // 68
  // inside loops. The compiler generates these keys automatically (and                                                // 69
  // deterministically) when compiling nested import declarations.                                                     // 70
  Mp.importSync = function (id, setters, key) {                                                                        // 71
    setESModule(this);                                                                                                 // 72
                                                                                                                       // 73
    var absoluteId = this.resolve(id);                                                                                 // 74
                                                                                                                       // 75
    if (setters && typeof setters === "object") {                                                                      // 76
      var entry = Entry.getOrCreate(absoluteId);                                                                       // 77
      entry.addSetters(this, setters, key);                                                                            // 78
    }                                                                                                                  // 79
                                                                                                                       // 80
    var countBefore = entry ? entry.runCount : 0;                                                                      // 81
    var exports = this.require(absoluteId);                                                                            // 82
                                                                                                                       // 83
    if (entry && entry.runCount === countBefore) {                                                                     // 84
      // If require(absoluteId) didn't run any setters for this entry,                                                 // 85
      // perhaps because it's not the first time this module has been                                                  // 86
      // required, run the setters now using an object that passes as the                                              // 87
      // real module object.                                                                                           // 88
      entry.runModuleSetters({                                                                                         // 89
        id: absoluteId,                                                                                                // 90
        exports: exports,                                                                                              // 91
        getExportByName: Mp.getExportByName                                                                            // 92
      });                                                                                                              // 93
    }                                                                                                                  // 94
  };                                                                                                                   // 95
                                                                                                                       // 96
  // Register getter functions for local variables in the scope of an                                                  // 97
  // export statement. The keys of the getters object are exported names,                                              // 98
  // and the values are functions that return local values.                                                            // 99
  Mp.export = function (getters) {                                                                                     // 100
    setESModule(this);                                                                                                 // 101
                                                                                                                       // 102
    if (getters && typeof getters === "object") {                                                                      // 103
      Entry.getOrCreate(this.id).addGetters(getters);                                                                  // 104
    }                                                                                                                  // 105
                                                                                                                       // 106
    if (this.loaded) {                                                                                                 // 107
      // If the module has already been evaluated, then we need to trigger                                             // 108
      // another round of entry.runModuleSetters calls, which begins by                                                // 109
      // calling entry.runModuleGetters(module).                                                                       // 110
      this.runModuleSetters();                                                                                         // 111
    }                                                                                                                  // 112
  };                                                                                                                   // 113
                                                                                                                       // 114
  // This method can be overridden by client code to implement custom export                                           // 115
  // naming logic. The current implementation works well with Babel's                                                  // 116
  // __esModule convention.                                                                                            // 117
  Mp.getExportByName = function (name) {                                                                               // 118
    var exports = this.exports;                                                                                        // 119
                                                                                                                       // 120
    if (name === "*") {                                                                                                // 121
      return exports;                                                                                                  // 122
    }                                                                                                                  // 123
                                                                                                                       // 124
    if (name === "default" &&                                                                                          // 125
        ! (exports &&                                                                                                  // 126
           typeof exports === "object" &&                                                                              // 127
           exports.__esModule &&                                                                                       // 128
           "default" in exports)) {                                                                                    // 129
      return exports;                                                                                                  // 130
    }                                                                                                                  // 131
                                                                                                                       // 132
    return exports && exports[name];                                                                                   // 133
  };                                                                                                                   // 134
                                                                                                                       // 135
  return Module;                                                                                                       // 136
};                                                                                                                     // 137
                                                                                                                       // 138
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"entry.js":["./utils.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
var utils = require("./utils.js");                                                                                     // 3
                                                                                                                       // 4
var entryMap = Object.create(null);                                                                                    // 5
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 6
                                                                                                                       // 7
function Entry(id) {                                                                                                   // 8
  // Same as module.id for this module.                                                                                // 9
  this.id = id;                                                                                                        // 10
  // The number of times this.runModuleSetters has been called.                                                        // 11
  this.runCount = 0;                                                                                                   // 12
  // Setters for assigning to local variables in parent modules.                                                       // 13
  this.setters = Object.create(null);                                                                                  // 14
  // Getters for local variables exported from this module.                                                            // 15
  this.getters = Object.create(null);                                                                                  // 16
}                                                                                                                      // 17
                                                                                                                       // 18
var Ep = Entry.prototype;                                                                                              // 19
                                                                                                                       // 20
Entry.get = function (id) {                                                                                            // 21
  return entryMap[id] || null;                                                                                         // 22
};                                                                                                                     // 23
                                                                                                                       // 24
Entry.getOrCreate = function (id) {                                                                                    // 25
  return entryMap[id] = entryMap[id] || new Entry(id);                                                                 // 26
};                                                                                                                     // 27
                                                                                                                       // 28
var keySalt = 0;                                                                                                       // 29
function makeUniqueKey() {                                                                                             // 30
  return Math.random()                                                                                                 // 31
    .toString(36)                                                                                                      // 32
    // Add an incrementing salt to help track key ordering and also                                                    // 33
    // absolutely guarantee we never return the same key twice.                                                        // 34
    .replace("0.", ++keySalt + ":");                                                                                   // 35
}                                                                                                                      // 36
                                                                                                                       // 37
Ep.addSetters = function (parent, setters, key) {                                                                      // 38
  if (typeof key === "undefined") {                                                                                    // 39
    // If no key was provided, make a new unique key that won't collide                                                // 40
    // with any other keys.                                                                                            // 41
    key = makeUniqueKey();                                                                                             // 42
  } else {                                                                                                             // 43
    // If a key was provided, make sure it is distinct from keys provided                                              // 44
    // by other parent modules.                                                                                        // 45
    key = parent.id + ":" + key;                                                                                       // 46
  }                                                                                                                    // 47
                                                                                                                       // 48
  var names = Object.keys(setters);                                                                                    // 49
  var nameCount = names.length;                                                                                        // 50
                                                                                                                       // 51
  for (var i = 0; i < nameCount; ++i) {                                                                                // 52
    var name = names[i];                                                                                               // 53
    var setter = setters[name];                                                                                        // 54
    if (typeof setter === "function" &&                                                                                // 55
        // Ignore any requests for the exports.__esModule property."                                                   // 56
        name !== "__esModule") {                                                                                       // 57
      setter.parent = parent;                                                                                          // 58
      (this.setters[name] =                                                                                            // 59
       this.setters[name] || Object.create(null)                                                                       // 60
      )[key] = setter;                                                                                                 // 61
    }                                                                                                                  // 62
  }                                                                                                                    // 63
};                                                                                                                     // 64
                                                                                                                       // 65
Ep.addGetters = function (getters) {                                                                                   // 66
  var names = Object.keys(getters);                                                                                    // 67
  var nameCount = names.length;                                                                                        // 68
                                                                                                                       // 69
  for (var i = 0; i < nameCount; ++i) {                                                                                // 70
    var name = names[i];                                                                                               // 71
    var getter = getters[name];                                                                                        // 72
    if (typeof getter === "function" &&                                                                                // 73
        // Ignore any requests for the exports.__esModule property."                                                   // 74
        name !== "__esModule" &&                                                                                       // 75
        // Should this throw if hasOwn.call(this.getters, name)?                                                       // 76
        ! hasOwn.call(this.getters, name)) {                                                                           // 77
      this.getters[name] = getter;                                                                                     // 78
    }                                                                                                                  // 79
  }                                                                                                                    // 80
};                                                                                                                     // 81
                                                                                                                       // 82
function runModuleSetters(module) {                                                                                    // 83
  var entry = entryMap[module.id];                                                                                     // 84
  if (entry) {                                                                                                         // 85
    entry.runModuleSetters(module);                                                                                    // 86
  }                                                                                                                    // 87
}                                                                                                                      // 88
                                                                                                                       // 89
Ep.runModuleGetters = function (module) {                                                                              // 90
  var names = Object.keys(this.getters);                                                                               // 91
  var nameCount = names.length;                                                                                        // 92
                                                                                                                       // 93
  for (var i = 0; i < nameCount; ++i) {                                                                                // 94
    this.runGetter(module, names[i]);                                                                                  // 95
  }                                                                                                                    // 96
};                                                                                                                     // 97
                                                                                                                       // 98
// Returns true iff the getter updated module.exports with a new value.                                                // 99
Ep.runGetter = function (module, name) {                                                                               // 100
  if (hasOwn.call(this.getters, name)) {                                                                               // 101
    try {                                                                                                              // 102
      // Update module.exports[name] with the current value so that CommonJS                                           // 103
      // require calls remain consistent with module.importSync.                                                       // 104
      return module.exports[name] =                                                                                    // 105
        this.getters[name].call(module);                                                                               // 106
                                                                                                                       // 107
    } catch (e) {                                                                                                      // 108
      // If the getter threw an exception, avoid updating module.exports                                               // 109
      // and return undefined.                                                                                         // 110
    }                                                                                                                  // 111
  }                                                                                                                    // 112
};                                                                                                                     // 113
                                                                                                                       // 114
// Called whenever module.exports might have changed, to trigger any                                                   // 115
// setters associated with the newly exported values.                                                                  // 116
Ep.runModuleSetters = function (module) {                                                                              // 117
  var entry = this;                                                                                                    // 118
  var names = Object.keys(this.setters);                                                                               // 119
                                                                                                                       // 120
  // Make sure module.exports is up to date before we call                                                             // 121
  // module.getExportByName(name).                                                                                     // 122
  this.runModuleGetters(module);                                                                                       // 123
                                                                                                                       // 124
  if (! names.length) {                                                                                                // 125
    ++this.runCount;                                                                                                   // 126
    return;                                                                                                            // 127
  }                                                                                                                    // 128
                                                                                                                       // 129
  // Invoke the given callback once for every (setter, value, name) triple                                             // 130
  // that needs to be called. Note that forEachSetter does not call any                                                // 131
  // setters itself, only the given callback.                                                                          // 132
  function forEachSetter(callback, context) {                                                                          // 133
    var nameCount = names.length;                                                                                      // 134
                                                                                                                       // 135
    for (var i = 0; i < nameCount; ++i) {                                                                              // 136
      var name = names[i];                                                                                             // 137
      var setters = entry.setters[name];                                                                               // 138
      var keys = Object.keys(setters);                                                                                 // 139
      var keyCount = keys.length;                                                                                      // 140
                                                                                                                       // 141
      for (var j = 0; j < keyCount; ++j) {                                                                             // 142
        var key = keys[j];                                                                                             // 143
        var value = module.getExportByName(name);                                                                      // 144
                                                                                                                       // 145
        if (name === "*") {                                                                                            // 146
          var valueNames = Object.keys(value);                                                                         // 147
          var valueNameCount = valueNames.length;                                                                      // 148
                                                                                                                       // 149
          for (var k = 0; k < valueNameCount; ++k) {                                                                   // 150
            var valueName = valueNames[k];                                                                             // 151
            call(setters[key], value[valueName], valueName);                                                           // 152
          }                                                                                                            // 153
                                                                                                                       // 154
        } else {                                                                                                       // 155
          call(setters[key], value, name);                                                                             // 156
        }                                                                                                              // 157
      }                                                                                                                // 158
    }                                                                                                                  // 159
                                                                                                                       // 160
    function call(setter, value, name) {                                                                               // 161
      if (name === "__esModule") {                                                                                     // 162
        // Ignore setters asking for module.exports.__esModule.                                                        // 163
        return;                                                                                                        // 164
      }                                                                                                                // 165
                                                                                                                       // 166
      setter.last = setter.last || Object.create(null);                                                                // 167
                                                                                                                       // 168
      if (! hasOwn.call(setter.last, name) ||                                                                          // 169
          setter.last[name] !== value) {                                                                               // 170
        // Only invoke the callback if we have not called this setter                                                  // 171
        // (with a value of this name) before, or the current value is                                                 // 172
        // different from the last value we passed to this setter.                                                     // 173
        return callback.apply(context, arguments);                                                                     // 174
      }                                                                                                                // 175
    }                                                                                                                  // 176
  }                                                                                                                    // 177
                                                                                                                       // 178
  // Lazily-initialized object mapping parent module identifiers to parent                                             // 179
  // module objects whose setters we might need to run.                                                                // 180
  var relevantParents;                                                                                                 // 181
                                                                                                                       // 182
  // Take snapshots of setter.parent.exports for any setters that we are                                               // 183
  // planning to call, so that we can later determine if calling the                                                   // 184
  // setters modified any of those exports objects.                                                                    // 185
  forEachSetter(function (setter, value, name) {                                                                       // 186
    relevantParents = relevantParents || Object.create(null);                                                          // 187
    relevantParents[setter.parent.id] = setter.parent;                                                                 // 188
    setter.call(module, setter.last[name] = value, name);                                                              // 189
  });                                                                                                                  // 190
                                                                                                                       // 191
  ++entry.runCount;                                                                                                    // 192
                                                                                                                       // 193
  if (! relevantParents) {                                                                                             // 194
    return;                                                                                                            // 195
  }                                                                                                                    // 196
                                                                                                                       // 197
  // If any of the setters updated the module.exports of a parent module,                                              // 198
  // or updated local variables that are exported by that parent module,                                               // 199
  // then we must re-run any setters registered by that parent module.                                                 // 200
                                                                                                                       // 201
  var parentIDs = Object.keys(relevantParents);                                                                        // 202
  var parentIDCount = parentIDs.length;                                                                                // 203
                                                                                                                       // 204
  for (var i = 0; i < parentIDCount; ++i) {                                                                            // 205
    // What happens if relevantParents[parentIDs[id]] === module, or if                                                // 206
    // longer cycles exist in the parent chain? Thanks to our setter.last                                              // 207
    // bookkeeping above, the runModuleSetters broadcast will only proceed                                             // 208
    // as far as there are any actual changes to report.                                                               // 209
    runModuleSetters(relevantParents[parentIDs[i]]);                                                                   // 210
  }                                                                                                                    // 211
};                                                                                                                     // 212
                                                                                                                       // 213
exports.Entry = Entry;                                                                                                 // 214
                                                                                                                       // 215
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"utils.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.getNamesFromPattern = function (pattern) {                                                                     // 3
  var queue = [pattern];                                                                                               // 4
  var names = [];                                                                                                      // 5
                                                                                                                       // 6
  for (var i = 0; i < queue.length; ++i) {                                                                             // 7
    var pattern = queue[i];                                                                                            // 8
    if (! pattern) {                                                                                                   // 9
      continue;                                                                                                        // 10
    }                                                                                                                  // 11
                                                                                                                       // 12
    switch (pattern.type) {                                                                                            // 13
    case "Identifier":                                                                                                 // 14
      names.push(pattern.name);                                                                                        // 15
      break;                                                                                                           // 16
    case "Property":                                                                                                   // 17
    case "ObjectProperty":                                                                                             // 18
      queue.push(pattern.value);                                                                                       // 19
      break;                                                                                                           // 20
    case "AssignmentPattern":                                                                                          // 21
      queue.push(pattern.left);                                                                                        // 22
      break;                                                                                                           // 23
    case "ObjectPattern":                                                                                              // 24
      queue.push.apply(queue, pattern.properties);                                                                     // 25
      break;                                                                                                           // 26
    case "ArrayPattern":                                                                                               // 27
      queue.push.apply(queue, pattern.elements);                                                                       // 28
      break;                                                                                                           // 29
    case "RestElement":                                                                                                // 30
      queue.push(pattern.argument);                                                                                    // 31
      break;                                                                                                           // 32
    }                                                                                                                  // 33
  }                                                                                                                    // 34
                                                                                                                       // 35
  return names;                                                                                                        // 36
};                                                                                                                     // 37
                                                                                                                       // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}},"d3":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/d3/package.json                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "d3";                                                                                                   // 1
exports.version = "4.9.1";                                                                                             // 2
exports.main = "build/d3.node.js";                                                                                     // 3
exports.browser = "build/d3.js";                                                                                       // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"build":{"d3.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/d3/build/d3.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://d3js.org Version 4.9.1. Copyright 2017 Mike Bostock.                                                        // 1
(function (global, factory) {                                                                                          // 2
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :                                     // 3
	typeof define === 'function' && define.amd ? define(['exports'], factory) :                                           // 4
	(factory((global.d3 = global.d3 || {})));                                                                             // 5
}(this, (function (exports) { 'use strict';                                                                            // 6
                                                                                                                       // 7
var version = "4.9.1";                                                                                                 // 8
                                                                                                                       // 9
var ascending = function(a, b) {                                                                                       // 10
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;                                                                    // 11
};                                                                                                                     // 12
                                                                                                                       // 13
var bisector = function(compare) {                                                                                     // 14
  if (compare.length === 1) compare = ascendingComparator(compare);                                                    // 15
  return {                                                                                                             // 16
    left: function(a, x, lo, hi) {                                                                                     // 17
      if (lo == null) lo = 0;                                                                                          // 18
      if (hi == null) hi = a.length;                                                                                   // 19
      while (lo < hi) {                                                                                                // 20
        var mid = lo + hi >>> 1;                                                                                       // 21
        if (compare(a[mid], x) < 0) lo = mid + 1;                                                                      // 22
        else hi = mid;                                                                                                 // 23
      }                                                                                                                // 24
      return lo;                                                                                                       // 25
    },                                                                                                                 // 26
    right: function(a, x, lo, hi) {                                                                                    // 27
      if (lo == null) lo = 0;                                                                                          // 28
      if (hi == null) hi = a.length;                                                                                   // 29
      while (lo < hi) {                                                                                                // 30
        var mid = lo + hi >>> 1;                                                                                       // 31
        if (compare(a[mid], x) > 0) hi = mid;                                                                          // 32
        else lo = mid + 1;                                                                                             // 33
      }                                                                                                                // 34
      return lo;                                                                                                       // 35
    }                                                                                                                  // 36
  };                                                                                                                   // 37
};                                                                                                                     // 38
                                                                                                                       // 39
function ascendingComparator(f) {                                                                                      // 40
  return function(d, x) {                                                                                              // 41
    return ascending(f(d), x);                                                                                         // 42
  };                                                                                                                   // 43
}                                                                                                                      // 44
                                                                                                                       // 45
var ascendingBisect = bisector(ascending);                                                                             // 46
var bisectRight = ascendingBisect.right;                                                                               // 47
var bisectLeft = ascendingBisect.left;                                                                                 // 48
                                                                                                                       // 49
var pairs = function(array, f) {                                                                                       // 50
  if (f == null) f = pair;                                                                                             // 51
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);                                     // 52
  while (i < n) pairs[i] = f(p, p = array[++i]);                                                                       // 53
  return pairs;                                                                                                        // 54
};                                                                                                                     // 55
                                                                                                                       // 56
function pair(a, b) {                                                                                                  // 57
  return [a, b];                                                                                                       // 58
}                                                                                                                      // 59
                                                                                                                       // 60
var cross = function(values0, values1, reduce) {                                                                       // 61
  var n0 = values0.length,                                                                                             // 62
      n1 = values1.length,                                                                                             // 63
      values = new Array(n0 * n1),                                                                                     // 64
      i0,                                                                                                              // 65
      i1,                                                                                                              // 66
      i,                                                                                                               // 67
      value0;                                                                                                          // 68
                                                                                                                       // 69
  if (reduce == null) reduce = pair;                                                                                   // 70
                                                                                                                       // 71
  for (i0 = i = 0; i0 < n0; ++i0) {                                                                                    // 72
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {                                                           // 73
      values[i] = reduce(value0, values1[i1]);                                                                         // 74
    }                                                                                                                  // 75
  }                                                                                                                    // 76
                                                                                                                       // 77
  return values;                                                                                                       // 78
};                                                                                                                     // 79
                                                                                                                       // 80
var descending = function(a, b) {                                                                                      // 81
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;                                                                    // 82
};                                                                                                                     // 83
                                                                                                                       // 84
var number = function(x) {                                                                                             // 85
  return x === null ? NaN : +x;                                                                                        // 86
};                                                                                                                     // 87
                                                                                                                       // 88
var variance = function(values, valueof) {                                                                             // 89
  var n = values.length,                                                                                               // 90
      m = 0,                                                                                                           // 91
      i = -1,                                                                                                          // 92
      mean = 0,                                                                                                        // 93
      value,                                                                                                           // 94
      delta,                                                                                                           // 95
      sum = 0;                                                                                                         // 96
                                                                                                                       // 97
  if (valueof == null) {                                                                                               // 98
    while (++i < n) {                                                                                                  // 99
      if (!isNaN(value = number(values[i]))) {                                                                         // 100
        delta = value - mean;                                                                                          // 101
        mean += delta / ++m;                                                                                           // 102
        sum += delta * (value - mean);                                                                                 // 103
      }                                                                                                                // 104
    }                                                                                                                  // 105
  }                                                                                                                    // 106
                                                                                                                       // 107
  else {                                                                                                               // 108
    while (++i < n) {                                                                                                  // 109
      if (!isNaN(value = number(valueof(values[i], i, values)))) {                                                     // 110
        delta = value - mean;                                                                                          // 111
        mean += delta / ++m;                                                                                           // 112
        sum += delta * (value - mean);                                                                                 // 113
      }                                                                                                                // 114
    }                                                                                                                  // 115
  }                                                                                                                    // 116
                                                                                                                       // 117
  if (m > 1) return sum / (m - 1);                                                                                     // 118
};                                                                                                                     // 119
                                                                                                                       // 120
var deviation = function(array, f) {                                                                                   // 121
  var v = variance(array, f);                                                                                          // 122
  return v ? Math.sqrt(v) : v;                                                                                         // 123
};                                                                                                                     // 124
                                                                                                                       // 125
var extent = function(values, valueof) {                                                                               // 126
  var n = values.length,                                                                                               // 127
      i = -1,                                                                                                          // 128
      value,                                                                                                           // 129
      min,                                                                                                             // 130
      max;                                                                                                             // 131
                                                                                                                       // 132
  if (valueof == null) {                                                                                               // 133
    while (++i < n) { // Find the first comparable value.                                                              // 134
      if ((value = values[i]) != null && value >= value) {                                                             // 135
        min = max = value;                                                                                             // 136
        while (++i < n) { // Compare the remaining values.                                                             // 137
          if ((value = values[i]) != null) {                                                                           // 138
            if (min > value) min = value;                                                                              // 139
            if (max < value) max = value;                                                                              // 140
          }                                                                                                            // 141
        }                                                                                                              // 142
      }                                                                                                                // 143
    }                                                                                                                  // 144
  }                                                                                                                    // 145
                                                                                                                       // 146
  else {                                                                                                               // 147
    while (++i < n) { // Find the first comparable value.                                                              // 148
      if ((value = valueof(values[i], i, values)) != null && value >= value) {                                         // 149
        min = max = value;                                                                                             // 150
        while (++i < n) { // Compare the remaining values.                                                             // 151
          if ((value = valueof(values[i], i, values)) != null) {                                                       // 152
            if (min > value) min = value;                                                                              // 153
            if (max < value) max = value;                                                                              // 154
          }                                                                                                            // 155
        }                                                                                                              // 156
      }                                                                                                                // 157
    }                                                                                                                  // 158
  }                                                                                                                    // 159
                                                                                                                       // 160
  return [min, max];                                                                                                   // 161
};                                                                                                                     // 162
                                                                                                                       // 163
var array = Array.prototype;                                                                                           // 164
                                                                                                                       // 165
var slice = array.slice;                                                                                               // 166
var map = array.map;                                                                                                   // 167
                                                                                                                       // 168
var constant = function(x) {                                                                                           // 169
  return function() {                                                                                                  // 170
    return x;                                                                                                          // 171
  };                                                                                                                   // 172
};                                                                                                                     // 173
                                                                                                                       // 174
var identity = function(x) {                                                                                           // 175
  return x;                                                                                                            // 176
};                                                                                                                     // 177
                                                                                                                       // 178
var sequence = function(start, stop, step) {                                                                           // 179
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;  // 180
                                                                                                                       // 181
  var i = -1,                                                                                                          // 182
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,                                                           // 183
      range = new Array(n);                                                                                            // 184
                                                                                                                       // 185
  while (++i < n) {                                                                                                    // 186
    range[i] = start + i * step;                                                                                       // 187
  }                                                                                                                    // 188
                                                                                                                       // 189
  return range;                                                                                                        // 190
};                                                                                                                     // 191
                                                                                                                       // 192
var e10 = Math.sqrt(50);                                                                                               // 193
var e5 = Math.sqrt(10);                                                                                                // 194
var e2 = Math.sqrt(2);                                                                                                 // 195
                                                                                                                       // 196
var ticks = function(start, stop, count) {                                                                             // 197
  var reverse = stop < start,                                                                                          // 198
      i = -1,                                                                                                          // 199
      n,                                                                                                               // 200
      ticks,                                                                                                           // 201
      step;                                                                                                            // 202
                                                                                                                       // 203
  if (reverse) n = start, start = stop, stop = n;                                                                      // 204
                                                                                                                       // 205
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];                                  // 206
                                                                                                                       // 207
  if (step > 0) {                                                                                                      // 208
    start = Math.ceil(start / step);                                                                                   // 209
    stop = Math.floor(stop / step);                                                                                    // 210
    ticks = new Array(n = Math.ceil(stop - start + 1));                                                                // 211
    while (++i < n) ticks[i] = (start + i) * step;                                                                     // 212
  } else {                                                                                                             // 213
    start = Math.floor(start * step);                                                                                  // 214
    stop = Math.ceil(stop * step);                                                                                     // 215
    ticks = new Array(n = Math.ceil(start - stop + 1));                                                                // 216
    while (++i < n) ticks[i] = (start - i) / step;                                                                     // 217
  }                                                                                                                    // 218
                                                                                                                       // 219
  if (reverse) ticks.reverse();                                                                                        // 220
                                                                                                                       // 221
  return ticks;                                                                                                        // 222
};                                                                                                                     // 223
                                                                                                                       // 224
function tickIncrement(start, stop, count) {                                                                           // 225
  var step = (stop - start) / Math.max(0, count),                                                                      // 226
      power = Math.floor(Math.log(step) / Math.LN10),                                                                  // 227
      error = step / Math.pow(10, power);                                                                              // 228
  return power >= 0                                                                                                    // 229
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)                              // 230
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);                           // 231
}                                                                                                                      // 232
                                                                                                                       // 233
function tickStep(start, stop, count) {                                                                                // 234
  var step0 = Math.abs(stop - start) / Math.max(0, count),                                                             // 235
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),                                                   // 236
      error = step0 / step1;                                                                                           // 237
  if (error >= e10) step1 *= 10;                                                                                       // 238
  else if (error >= e5) step1 *= 5;                                                                                    // 239
  else if (error >= e2) step1 *= 2;                                                                                    // 240
  return stop < start ? -step1 : step1;                                                                                // 241
}                                                                                                                      // 242
                                                                                                                       // 243
var sturges = function(values) {                                                                                       // 244
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;                                                            // 245
};                                                                                                                     // 246
                                                                                                                       // 247
var histogram = function() {                                                                                           // 248
  var value = identity,                                                                                                // 249
      domain = extent,                                                                                                 // 250
      threshold = sturges;                                                                                             // 251
                                                                                                                       // 252
  function histogram(data) {                                                                                           // 253
    var i,                                                                                                             // 254
        n = data.length,                                                                                               // 255
        x,                                                                                                             // 256
        values = new Array(n);                                                                                         // 257
                                                                                                                       // 258
    for (i = 0; i < n; ++i) {                                                                                          // 259
      values[i] = value(data[i], i, data);                                                                             // 260
    }                                                                                                                  // 261
                                                                                                                       // 262
    var xz = domain(values),                                                                                           // 263
        x0 = xz[0],                                                                                                    // 264
        x1 = xz[1],                                                                                                    // 265
        tz = threshold(values, x0, x1);                                                                                // 266
                                                                                                                       // 267
    // Convert number of thresholds into uniform thresholds.                                                           // 268
    if (!Array.isArray(tz)) {                                                                                          // 269
      tz = tickStep(x0, x1, tz);                                                                                       // 270
      tz = sequence(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive                               // 271
    }                                                                                                                  // 272
                                                                                                                       // 273
    // Remove any thresholds outside the domain.                                                                       // 274
    var m = tz.length;                                                                                                 // 275
    while (tz[0] <= x0) tz.shift(), --m;                                                                               // 276
    while (tz[m - 1] > x1) tz.pop(), --m;                                                                              // 277
                                                                                                                       // 278
    var bins = new Array(m + 1),                                                                                       // 279
        bin;                                                                                                           // 280
                                                                                                                       // 281
    // Initialize bins.                                                                                                // 282
    for (i = 0; i <= m; ++i) {                                                                                         // 283
      bin = bins[i] = [];                                                                                              // 284
      bin.x0 = i > 0 ? tz[i - 1] : x0;                                                                                 // 285
      bin.x1 = i < m ? tz[i] : x1;                                                                                     // 286
    }                                                                                                                  // 287
                                                                                                                       // 288
    // Assign data to bins by value, ignoring any outside the domain.                                                  // 289
    for (i = 0; i < n; ++i) {                                                                                          // 290
      x = values[i];                                                                                                   // 291
      if (x0 <= x && x <= x1) {                                                                                        // 292
        bins[bisectRight(tz, x, 0, m)].push(data[i]);                                                                  // 293
      }                                                                                                                // 294
    }                                                                                                                  // 295
                                                                                                                       // 296
    return bins;                                                                                                       // 297
  }                                                                                                                    // 298
                                                                                                                       // 299
  histogram.value = function(_) {                                                                                      // 300
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;                  // 301
  };                                                                                                                   // 302
                                                                                                                       // 303
  histogram.domain = function(_) {                                                                                     // 304
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;     // 305
  };                                                                                                                   // 306
                                                                                                                       // 307
  histogram.thresholds = function(_) {                                                                                 // 308
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
  };                                                                                                                   // 310
                                                                                                                       // 311
  return histogram;                                                                                                    // 312
};                                                                                                                     // 313
                                                                                                                       // 314
var threshold = function(values, p, valueof) {                                                                         // 315
  if (valueof == null) valueof = number;                                                                               // 316
  if (!(n = values.length)) return;                                                                                    // 317
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);                                                   // 318
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);                                                           // 319
  var n,                                                                                                               // 320
      i = (n - 1) * p,                                                                                                 // 321
      i0 = Math.floor(i),                                                                                              // 322
      value0 = +valueof(values[i0], i0, values),                                                                       // 323
      value1 = +valueof(values[i0 + 1], i0 + 1, values);                                                               // 324
  return value0 + (value1 - value0) * (i - i0);                                                                        // 325
};                                                                                                                     // 326
                                                                                                                       // 327
var freedmanDiaconis = function(values, min, max) {                                                                    // 328
  values = map.call(values, number).sort(ascending);                                                                   // 329
  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
};                                                                                                                     // 331
                                                                                                                       // 332
var scott = function(values, min, max) {                                                                               // 333
  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));                         // 334
};                                                                                                                     // 335
                                                                                                                       // 336
var max = function(values, valueof) {                                                                                  // 337
  var n = values.length,                                                                                               // 338
      i = -1,                                                                                                          // 339
      value,                                                                                                           // 340
      max;                                                                                                             // 341
                                                                                                                       // 342
  if (valueof == null) {                                                                                               // 343
    while (++i < n) { // Find the first comparable value.                                                              // 344
      if ((value = values[i]) != null && value >= value) {                                                             // 345
        max = value;                                                                                                   // 346
        while (++i < n) { // Compare the remaining values.                                                             // 347
          if ((value = values[i]) != null && value > max) {                                                            // 348
            max = value;                                                                                               // 349
          }                                                                                                            // 350
        }                                                                                                              // 351
      }                                                                                                                // 352
    }                                                                                                                  // 353
  }                                                                                                                    // 354
                                                                                                                       // 355
  else {                                                                                                               // 356
    while (++i < n) { // Find the first comparable value.                                                              // 357
      if ((value = valueof(values[i], i, values)) != null && value >= value) {                                         // 358
        max = value;                                                                                                   // 359
        while (++i < n) { // Compare the remaining values.                                                             // 360
          if ((value = valueof(values[i], i, values)) != null && value > max) {                                        // 361
            max = value;                                                                                               // 362
          }                                                                                                            // 363
        }                                                                                                              // 364
      }                                                                                                                // 365
    }                                                                                                                  // 366
  }                                                                                                                    // 367
                                                                                                                       // 368
  return max;                                                                                                          // 369
};                                                                                                                     // 370
                                                                                                                       // 371
var mean = function(values, valueof) {                                                                                 // 372
  var n = values.length,                                                                                               // 373
      m = n,                                                                                                           // 374
      i = -1,                                                                                                          // 375
      value,                                                                                                           // 376
      sum = 0;                                                                                                         // 377
                                                                                                                       // 378
  if (valueof == null) {                                                                                               // 379
    while (++i < n) {                                                                                                  // 380
      if (!isNaN(value = number(values[i]))) sum += value;                                                             // 381
      else --m;                                                                                                        // 382
    }                                                                                                                  // 383
  }                                                                                                                    // 384
                                                                                                                       // 385
  else {                                                                                                               // 386
    while (++i < n) {                                                                                                  // 387
      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;                                         // 388
      else --m;                                                                                                        // 389
    }                                                                                                                  // 390
  }                                                                                                                    // 391
                                                                                                                       // 392
  if (m) return sum / m;                                                                                               // 393
};                                                                                                                     // 394
                                                                                                                       // 395
var median = function(values, valueof) {                                                                               // 396
  var n = values.length,                                                                                               // 397
      i = -1,                                                                                                          // 398
      value,                                                                                                           // 399
      numbers = [];                                                                                                    // 400
                                                                                                                       // 401
  if (valueof == null) {                                                                                               // 402
    while (++i < n) {                                                                                                  // 403
      if (!isNaN(value = number(values[i]))) {                                                                         // 404
        numbers.push(value);                                                                                           // 405
      }                                                                                                                // 406
    }                                                                                                                  // 407
  }                                                                                                                    // 408
                                                                                                                       // 409
  else {                                                                                                               // 410
    while (++i < n) {                                                                                                  // 411
      if (!isNaN(value = number(valueof(values[i], i, values)))) {                                                     // 412
        numbers.push(value);                                                                                           // 413
      }                                                                                                                // 414
    }                                                                                                                  // 415
  }                                                                                                                    // 416
                                                                                                                       // 417
  return threshold(numbers.sort(ascending), 0.5);                                                                      // 418
};                                                                                                                     // 419
                                                                                                                       // 420
var merge = function(arrays) {                                                                                         // 421
  var n = arrays.length,                                                                                               // 422
      m,                                                                                                               // 423
      i = -1,                                                                                                          // 424
      j = 0,                                                                                                           // 425
      merged,                                                                                                          // 426
      array;                                                                                                           // 427
                                                                                                                       // 428
  while (++i < n) j += arrays[i].length;                                                                               // 429
  merged = new Array(j);                                                                                               // 430
                                                                                                                       // 431
  while (--n >= 0) {                                                                                                   // 432
    array = arrays[n];                                                                                                 // 433
    m = array.length;                                                                                                  // 434
    while (--m >= 0) {                                                                                                 // 435
      merged[--j] = array[m];                                                                                          // 436
    }                                                                                                                  // 437
  }                                                                                                                    // 438
                                                                                                                       // 439
  return merged;                                                                                                       // 440
};                                                                                                                     // 441
                                                                                                                       // 442
var min = function(values, valueof) {                                                                                  // 443
  var n = values.length,                                                                                               // 444
      i = -1,                                                                                                          // 445
      value,                                                                                                           // 446
      min;                                                                                                             // 447
                                                                                                                       // 448
  if (valueof == null) {                                                                                               // 449
    while (++i < n) { // Find the first comparable value.                                                              // 450
      if ((value = values[i]) != null && value >= value) {                                                             // 451
        min = value;                                                                                                   // 452
        while (++i < n) { // Compare the remaining values.                                                             // 453
          if ((value = values[i]) != null && min > value) {                                                            // 454
            min = value;                                                                                               // 455
          }                                                                                                            // 456
        }                                                                                                              // 457
      }                                                                                                                // 458
    }                                                                                                                  // 459
  }                                                                                                                    // 460
                                                                                                                       // 461
  else {                                                                                                               // 462
    while (++i < n) { // Find the first comparable value.                                                              // 463
      if ((value = valueof(values[i], i, values)) != null && value >= value) {                                         // 464
        min = value;                                                                                                   // 465
        while (++i < n) { // Compare the remaining values.                                                             // 466
          if ((value = valueof(values[i], i, values)) != null && min > value) {                                        // 467
            min = value;                                                                                               // 468
          }                                                                                                            // 469
        }                                                                                                              // 470
      }                                                                                                                // 471
    }                                                                                                                  // 472
  }                                                                                                                    // 473
                                                                                                                       // 474
  return min;                                                                                                          // 475
};                                                                                                                     // 476
                                                                                                                       // 477
var permute = function(array, indexes) {                                                                               // 478
  var i = indexes.length, permutes = new Array(i);                                                                     // 479
  while (i--) permutes[i] = array[indexes[i]];                                                                         // 480
  return permutes;                                                                                                     // 481
};                                                                                                                     // 482
                                                                                                                       // 483
var scan = function(values, compare) {                                                                                 // 484
  if (!(n = values.length)) return;                                                                                    // 485
  var n,                                                                                                               // 486
      i = 0,                                                                                                           // 487
      j = 0,                                                                                                           // 488
      xi,                                                                                                              // 489
      xj = values[j];                                                                                                  // 490
                                                                                                                       // 491
  if (compare == null) compare = ascending;                                                                            // 492
                                                                                                                       // 493
  while (++i < n) {                                                                                                    // 494
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {                                                    // 495
      xj = xi, j = i;                                                                                                  // 496
    }                                                                                                                  // 497
  }                                                                                                                    // 498
                                                                                                                       // 499
  if (compare(xj, xj) === 0) return j;                                                                                 // 500
};                                                                                                                     // 501
                                                                                                                       // 502
var shuffle = function(array, i0, i1) {                                                                                // 503
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),                                              // 504
      t,                                                                                                               // 505
      i;                                                                                                               // 506
                                                                                                                       // 507
  while (m) {                                                                                                          // 508
    i = Math.random() * m-- | 0;                                                                                       // 509
    t = array[m + i0];                                                                                                 // 510
    array[m + i0] = array[i + i0];                                                                                     // 511
    array[i + i0] = t;                                                                                                 // 512
  }                                                                                                                    // 513
                                                                                                                       // 514
  return array;                                                                                                        // 515
};                                                                                                                     // 516
                                                                                                                       // 517
var sum = function(values, valueof) {                                                                                  // 518
  var n = values.length,                                                                                               // 519
      i = -1,                                                                                                          // 520
      value,                                                                                                           // 521
      sum = 0;                                                                                                         // 522
                                                                                                                       // 523
  if (valueof == null) {                                                                                               // 524
    while (++i < n) {                                                                                                  // 525
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.                                     // 526
    }                                                                                                                  // 527
  }                                                                                                                    // 528
                                                                                                                       // 529
  else {                                                                                                               // 530
    while (++i < n) {                                                                                                  // 531
      if (value = +valueof(values[i], i, values)) sum += value;                                                        // 532
    }                                                                                                                  // 533
  }                                                                                                                    // 534
                                                                                                                       // 535
  return sum;                                                                                                          // 536
};                                                                                                                     // 537
                                                                                                                       // 538
var transpose = function(matrix) {                                                                                     // 539
  if (!(n = matrix.length)) return [];                                                                                 // 540
  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {                                      // 541
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {                                                 // 542
      row[j] = matrix[j][i];                                                                                           // 543
    }                                                                                                                  // 544
  }                                                                                                                    // 545
  return transpose;                                                                                                    // 546
};                                                                                                                     // 547
                                                                                                                       // 548
function length(d) {                                                                                                   // 549
  return d.length;                                                                                                     // 550
}                                                                                                                      // 551
                                                                                                                       // 552
var zip = function() {                                                                                                 // 553
  return transpose(arguments);                                                                                         // 554
};                                                                                                                     // 555
                                                                                                                       // 556
var slice$1 = Array.prototype.slice;                                                                                   // 557
                                                                                                                       // 558
var identity$1 = function(x) {                                                                                         // 559
  return x;                                                                                                            // 560
};                                                                                                                     // 561
                                                                                                                       // 562
var top = 1;                                                                                                           // 563
var right = 2;                                                                                                         // 564
var bottom = 3;                                                                                                        // 565
var left = 4;                                                                                                          // 566
var epsilon = 1e-6;                                                                                                    // 567
                                                                                                                       // 568
function translateX(x) {                                                                                               // 569
  return "translate(" + (x + 0.5) + ",0)";                                                                             // 570
}                                                                                                                      // 571
                                                                                                                       // 572
function translateY(y) {                                                                                               // 573
  return "translate(0," + (y + 0.5) + ")";                                                                             // 574
}                                                                                                                      // 575
                                                                                                                       // 576
function center(scale) {                                                                                               // 577
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.                                     // 578
  if (scale.round()) offset = Math.round(offset);                                                                      // 579
  return function(d) {                                                                                                 // 580
    return scale(d) + offset;                                                                                          // 581
  };                                                                                                                   // 582
}                                                                                                                      // 583
                                                                                                                       // 584
function entering() {                                                                                                  // 585
  return !this.__axis;                                                                                                 // 586
}                                                                                                                      // 587
                                                                                                                       // 588
function axis(orient, scale) {                                                                                         // 589
  var tickArguments = [],                                                                                              // 590
      tickValues = null,                                                                                               // 591
      tickFormat = null,                                                                                               // 592
      tickSizeInner = 6,                                                                                               // 593
      tickSizeOuter = 6,                                                                                               // 594
      tickPadding = 3,                                                                                                 // 595
      k = orient === top || orient === left ? -1 : 1,                                                                  // 596
      x = orient === left || orient === right ? "x" : "y",                                                             // 597
      transform = orient === top || orient === bottom ? translateX : translateY;                                       // 598
                                                                                                                       // 599
  function axis(context) {                                                                                             // 600
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,                                                            // 603
        range = scale.range(),                                                                                         // 604
        range0 = range[0] + 0.5,                                                                                       // 605
        range1 = range[range.length - 1] + 0.5,                                                                        // 606
        position = (scale.bandwidth ? center : identity$1)(scale.copy()),                                              // 607
        selection = context.selection ? context.selection() : context,                                                 // 608
        path = selection.selectAll(".domain").data([null]),                                                            // 609
        tick = selection.selectAll(".tick").data(values, scale).order(),                                               // 610
        tickExit = tick.exit(),                                                                                        // 611
        tickEnter = tick.enter().append("g").attr("class", "tick"),                                                    // 612
        line = tick.select("line"),                                                                                    // 613
        text = tick.select("text");                                                                                    // 614
                                                                                                                       // 615
    path = path.merge(path.enter().insert("path", ".tick")                                                             // 616
        .attr("class", "domain")                                                                                       // 617
        .attr("stroke", "#000"));                                                                                      // 618
                                                                                                                       // 619
    tick = tick.merge(tickEnter);                                                                                      // 620
                                                                                                                       // 621
    line = line.merge(tickEnter.append("line")                                                                         // 622
        .attr("stroke", "#000")                                                                                        // 623
        .attr(x + "2", k * tickSizeInner));                                                                            // 624
                                                                                                                       // 625
    text = text.merge(tickEnter.append("text")                                                                         // 626
        .attr("fill", "#000")                                                                                          // 627
        .attr(x, k * spacing)                                                                                          // 628
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));                                // 629
                                                                                                                       // 630
    if (context !== selection) {                                                                                       // 631
      path = path.transition(context);                                                                                 // 632
      tick = tick.transition(context);                                                                                 // 633
      line = line.transition(context);                                                                                 // 634
      text = text.transition(context);                                                                                 // 635
                                                                                                                       // 636
      tickExit = tickExit.transition(context)                                                                          // 637
          .attr("opacity", epsilon)                                                                                    // 638
          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });
                                                                                                                       // 640
      tickEnter                                                                                                        // 641
          .attr("opacity", epsilon)                                                                                    // 642
          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
    }                                                                                                                  // 644
                                                                                                                       // 645
    tickExit.remove();                                                                                                 // 646
                                                                                                                       // 647
    path                                                                                                               // 648
        .attr("d", orient === left || orient == right                                                                  // 649
            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter                      // 650
            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);                    // 651
                                                                                                                       // 652
    tick                                                                                                               // 653
        .attr("opacity", 1)                                                                                            // 654
        .attr("transform", function(d) { return transform(position(d)); });                                            // 655
                                                                                                                       // 656
    line                                                                                                               // 657
        .attr(x + "2", k * tickSizeInner);                                                                             // 658
                                                                                                                       // 659
    text                                                                                                               // 660
        .attr(x, k * spacing)                                                                                          // 661
        .text(format);                                                                                                 // 662
                                                                                                                       // 663
    selection.filter(entering)                                                                                         // 664
        .attr("fill", "none")                                                                                          // 665
        .attr("font-size", 10)                                                                                         // 666
        .attr("font-family", "sans-serif")                                                                             // 667
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");                         // 668
                                                                                                                       // 669
    selection                                                                                                          // 670
        .each(function() { this.__axis = position; });                                                                 // 671
  }                                                                                                                    // 672
                                                                                                                       // 673
  axis.scale = function(_) {                                                                                           // 674
    return arguments.length ? (scale = _, axis) : scale;                                                               // 675
  };                                                                                                                   // 676
                                                                                                                       // 677
  axis.ticks = function() {                                                                                            // 678
    return tickArguments = slice$1.call(arguments), axis;                                                              // 679
  };                                                                                                                   // 680
                                                                                                                       // 681
  axis.tickArguments = function(_) {                                                                                   // 682
    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();        // 683
  };                                                                                                                   // 684
                                                                                                                       // 685
  axis.tickValues = function(_) {                                                                                      // 686
    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
  };                                                                                                                   // 688
                                                                                                                       // 689
  axis.tickFormat = function(_) {                                                                                      // 690
    return arguments.length ? (tickFormat = _, axis) : tickFormat;                                                     // 691
  };                                                                                                                   // 692
                                                                                                                       // 693
  axis.tickSize = function(_) {                                                                                        // 694
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;                              // 695
  };                                                                                                                   // 696
                                                                                                                       // 697
  axis.tickSizeInner = function(_) {                                                                                   // 698
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;                                              // 699
  };                                                                                                                   // 700
                                                                                                                       // 701
  axis.tickSizeOuter = function(_) {                                                                                   // 702
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;                                              // 703
  };                                                                                                                   // 704
                                                                                                                       // 705
  axis.tickPadding = function(_) {                                                                                     // 706
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;                                                  // 707
  };                                                                                                                   // 708
                                                                                                                       // 709
  return axis;                                                                                                         // 710
}                                                                                                                      // 711
                                                                                                                       // 712
function axisTop(scale) {                                                                                              // 713
  return axis(top, scale);                                                                                             // 714
}                                                                                                                      // 715
                                                                                                                       // 716
function axisRight(scale) {                                                                                            // 717
  return axis(right, scale);                                                                                           // 718
}                                                                                                                      // 719
                                                                                                                       // 720
function axisBottom(scale) {                                                                                           // 721
  return axis(bottom, scale);                                                                                          // 722
}                                                                                                                      // 723
                                                                                                                       // 724
function axisLeft(scale) {                                                                                             // 725
  return axis(left, scale);                                                                                            // 726
}                                                                                                                      // 727
                                                                                                                       // 728
var noop = {value: function() {}};                                                                                     // 729
                                                                                                                       // 730
function dispatch() {                                                                                                  // 731
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {                                                       // 732
    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);                                   // 733
    _[t] = [];                                                                                                         // 734
  }                                                                                                                    // 735
  return new Dispatch(_);                                                                                              // 736
}                                                                                                                      // 737
                                                                                                                       // 738
function Dispatch(_) {                                                                                                 // 739
  this._ = _;                                                                                                          // 740
}                                                                                                                      // 741
                                                                                                                       // 742
function parseTypenames(typenames, types) {                                                                            // 743
  return typenames.trim().split(/^|\s+/).map(function(t) {                                                             // 744
    var name = "", i = t.indexOf(".");                                                                                 // 745
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);                                                              // 746
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);                                          // 747
    return {type: t, name: name};                                                                                      // 748
  });                                                                                                                  // 749
}                                                                                                                      // 750
                                                                                                                       // 751
Dispatch.prototype = dispatch.prototype = {                                                                            // 752
  constructor: Dispatch,                                                                                               // 753
  on: function(typename, callback) {                                                                                   // 754
    var _ = this._,                                                                                                    // 755
        T = parseTypenames(typename + "", _),                                                                          // 756
        t,                                                                                                             // 757
        i = -1,                                                                                                        // 758
        n = T.length;                                                                                                  // 759
                                                                                                                       // 760
    // If no callback was specified, return the callback of the given type and name.                                   // 761
    if (arguments.length < 2) {                                                                                        // 762
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;                    // 763
      return;                                                                                                          // 764
    }                                                                                                                  // 765
                                                                                                                       // 766
    // If a type was specified, set the callback for the given type and name.                                          // 767
    // Otherwise, if a null callback was specified, remove callbacks of the given name.                                // 768
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);          // 769
    while (++i < n) {                                                                                                  // 770
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);                                       // 771
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);                                   // 772
    }                                                                                                                  // 773
                                                                                                                       // 774
    return this;                                                                                                       // 775
  },                                                                                                                   // 776
  copy: function() {                                                                                                   // 777
    var copy = {}, _ = this._;                                                                                         // 778
    for (var t in _) copy[t] = _[t].slice();                                                                           // 779
    return new Dispatch(copy);                                                                                         // 780
  },                                                                                                                   // 781
  call: function(type, that) {                                                                                         // 782
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);                                        // 784
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);                              // 785
  },                                                                                                                   // 786
  apply: function(type, that, args) {                                                                                  // 787
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);                                        // 788
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);                          // 789
  }                                                                                                                    // 790
};                                                                                                                     // 791
                                                                                                                       // 792
function get(type, name) {                                                                                             // 793
  for (var i = 0, n = type.length, c; i < n; ++i) {                                                                    // 794
    if ((c = type[i]).name === name) {                                                                                 // 795
      return c.value;                                                                                                  // 796
    }                                                                                                                  // 797
  }                                                                                                                    // 798
}                                                                                                                      // 799
                                                                                                                       // 800
function set(type, name, callback) {                                                                                   // 801
  for (var i = 0, n = type.length; i < n; ++i) {                                                                       // 802
    if (type[i].name === name) {                                                                                       // 803
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));                                               // 804
      break;                                                                                                           // 805
    }                                                                                                                  // 806
  }                                                                                                                    // 807
  if (callback != null) type.push({name: name, value: callback});                                                      // 808
  return type;                                                                                                         // 809
}                                                                                                                      // 810
                                                                                                                       // 811
var xhtml = "http://www.w3.org/1999/xhtml";                                                                            // 812
                                                                                                                       // 813
var namespaces = {                                                                                                     // 814
  svg: "http://www.w3.org/2000/svg",                                                                                   // 815
  xhtml: xhtml,                                                                                                        // 816
  xlink: "http://www.w3.org/1999/xlink",                                                                               // 817
  xml: "http://www.w3.org/XML/1998/namespace",                                                                         // 818
  xmlns: "http://www.w3.org/2000/xmlns/"                                                                               // 819
};                                                                                                                     // 820
                                                                                                                       // 821
var namespace = function(name) {                                                                                       // 822
  var prefix = name += "", i = prefix.indexOf(":");                                                                    // 823
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);                                     // 824
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;                          // 825
};                                                                                                                     // 826
                                                                                                                       // 827
function creatorInherit(name) {                                                                                        // 828
  return function() {                                                                                                  // 829
    var document = this.ownerDocument,                                                                                 // 830
        uri = this.namespaceURI;                                                                                       // 831
    return uri === xhtml && document.documentElement.namespaceURI === xhtml                                            // 832
        ? document.createElement(name)                                                                                 // 833
        : document.createElementNS(uri, name);                                                                         // 834
  };                                                                                                                   // 835
}                                                                                                                      // 836
                                                                                                                       // 837
function creatorFixed(fullname) {                                                                                      // 838
  return function() {                                                                                                  // 839
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);                                         // 840
  };                                                                                                                   // 841
}                                                                                                                      // 842
                                                                                                                       // 843
var creator = function(name) {                                                                                         // 844
  var fullname = namespace(name);                                                                                      // 845
  return (fullname.local                                                                                               // 846
      ? creatorFixed                                                                                                   // 847
      : creatorInherit)(fullname);                                                                                     // 848
};                                                                                                                     // 849
                                                                                                                       // 850
var nextId = 0;                                                                                                        // 851
                                                                                                                       // 852
function local$1() {                                                                                                   // 853
  return new Local;                                                                                                    // 854
}                                                                                                                      // 855
                                                                                                                       // 856
function Local() {                                                                                                     // 857
  this._ = "@" + (++nextId).toString(36);                                                                              // 858
}                                                                                                                      // 859
                                                                                                                       // 860
Local.prototype = local$1.prototype = {                                                                                // 861
  constructor: Local,                                                                                                  // 862
  get: function(node) {                                                                                                // 863
    var id = this._;                                                                                                   // 864
    while (!(id in node)) if (!(node = node.parentNode)) return;                                                       // 865
    return node[id];                                                                                                   // 866
  },                                                                                                                   // 867
  set: function(node, value) {                                                                                         // 868
    return node[this._] = value;                                                                                       // 869
  },                                                                                                                   // 870
  remove: function(node) {                                                                                             // 871
    return this._ in node && delete node[this._];                                                                      // 872
  },                                                                                                                   // 873
  toString: function() {                                                                                               // 874
    return this._;                                                                                                     // 875
  }                                                                                                                    // 876
};                                                                                                                     // 877
                                                                                                                       // 878
var matcher = function(selector) {                                                                                     // 879
  return function() {                                                                                                  // 880
    return this.matches(selector);                                                                                     // 881
  };                                                                                                                   // 882
};                                                                                                                     // 883
                                                                                                                       // 884
if (typeof document !== "undefined") {                                                                                 // 885
  var element = document.documentElement;                                                                              // 886
  if (!element.matches) {                                                                                              // 887
    var vendorMatches = element.webkitMatchesSelector                                                                  // 888
        || element.msMatchesSelector                                                                                   // 889
        || element.mozMatchesSelector                                                                                  // 890
        || element.oMatchesSelector;                                                                                   // 891
    matcher = function(selector) {                                                                                     // 892
      return function() {                                                                                              // 893
        return vendorMatches.call(this, selector);                                                                     // 894
      };                                                                                                               // 895
    };                                                                                                                 // 896
  }                                                                                                                    // 897
}                                                                                                                      // 898
                                                                                                                       // 899
var matcher$1 = matcher;                                                                                               // 900
                                                                                                                       // 901
var filterEvents = {};                                                                                                 // 902
                                                                                                                       // 903
exports.event = null;                                                                                                  // 904
                                                                                                                       // 905
if (typeof document !== "undefined") {                                                                                 // 906
  var element$1 = document.documentElement;                                                                            // 907
  if (!("onmouseenter" in element$1)) {                                                                                // 908
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};                                                  // 909
  }                                                                                                                    // 910
}                                                                                                                      // 911
                                                                                                                       // 912
function filterContextListener(listener, index, group) {                                                               // 913
  listener = contextListener(listener, index, group);                                                                  // 914
  return function(event) {                                                                                             // 915
    var related = event.relatedTarget;                                                                                 // 916
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {                              // 917
      listener.call(this, event);                                                                                      // 918
    }                                                                                                                  // 919
  };                                                                                                                   // 920
}                                                                                                                      // 921
                                                                                                                       // 922
function contextListener(listener, index, group) {                                                                     // 923
  return function(event1) {                                                                                            // 924
    var event0 = exports.event; // Events can be reentrant (e.g., focus).                                              // 925
    exports.event = event1;                                                                                            // 926
    try {                                                                                                              // 927
      listener.call(this, this.__data__, index, group);                                                                // 928
    } finally {                                                                                                        // 929
      exports.event = event0;                                                                                          // 930
    }                                                                                                                  // 931
  };                                                                                                                   // 932
}                                                                                                                      // 933
                                                                                                                       // 934
function parseTypenames$1(typenames) {                                                                                 // 935
  return typenames.trim().split(/^|\s+/).map(function(t) {                                                             // 936
    var name = "", i = t.indexOf(".");                                                                                 // 937
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);                                                              // 938
    return {type: t, name: name};                                                                                      // 939
  });                                                                                                                  // 940
}                                                                                                                      // 941
                                                                                                                       // 942
function onRemove(typename) {                                                                                          // 943
  return function() {                                                                                                  // 944
    var on = this.__on;                                                                                                // 945
    if (!on) return;                                                                                                   // 946
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {                                                            // 947
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {                       // 948
        this.removeEventListener(o.type, o.listener, o.capture);                                                       // 949
      } else {                                                                                                         // 950
        on[++i] = o;                                                                                                   // 951
      }                                                                                                                // 952
    }                                                                                                                  // 953
    if (++i) on.length = i;                                                                                            // 954
    else delete this.__on;                                                                                             // 955
  };                                                                                                                   // 956
}                                                                                                                      // 957
                                                                                                                       // 958
function onAdd(typename, value, capture) {                                                                             // 959
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;                     // 960
  return function(d, i, group) {                                                                                       // 961
    var on = this.__on, o, listener = wrap(value, i, group);                                                           // 962
    if (on) for (var j = 0, m = on.length; j < m; ++j) {                                                               // 963
      if ((o = on[j]).type === typename.type && o.name === typename.name) {                                            // 964
        this.removeEventListener(o.type, o.listener, o.capture);                                                       // 965
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);                                     // 966
        o.value = value;                                                                                               // 967
        return;                                                                                                        // 968
      }                                                                                                                // 969
    }                                                                                                                  // 970
    this.addEventListener(typename.type, listener, capture);                                                           // 971
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};                // 972
    if (!on) this.__on = [o];                                                                                          // 973
    else on.push(o);                                                                                                   // 974
  };                                                                                                                   // 975
}                                                                                                                      // 976
                                                                                                                       // 977
var selection_on = function(typename, value, capture) {                                                                // 978
  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;                                         // 979
                                                                                                                       // 980
  if (arguments.length < 2) {                                                                                          // 981
    var on = this.node().__on;                                                                                         // 982
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {                                                            // 983
      for (i = 0, o = on[j]; i < n; ++i) {                                                                             // 984
        if ((t = typenames[i]).type === o.type && t.name === o.name) {                                                 // 985
          return o.value;                                                                                              // 986
        }                                                                                                              // 987
      }                                                                                                                // 988
    }                                                                                                                  // 989
    return;                                                                                                            // 990
  }                                                                                                                    // 991
                                                                                                                       // 992
  on = value ? onAdd : onRemove;                                                                                       // 993
  if (capture == null) capture = false;                                                                                // 994
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));                                                 // 995
  return this;                                                                                                         // 996
};                                                                                                                     // 997
                                                                                                                       // 998
function customEvent(event1, listener, that, args) {                                                                   // 999
  var event0 = exports.event;                                                                                          // 1000
  event1.sourceEvent = exports.event;                                                                                  // 1001
  exports.event = event1;                                                                                              // 1002
  try {                                                                                                                // 1003
    return listener.apply(that, args);                                                                                 // 1004
  } finally {                                                                                                          // 1005
    exports.event = event0;                                                                                            // 1006
  }                                                                                                                    // 1007
}                                                                                                                      // 1008
                                                                                                                       // 1009
var sourceEvent = function() {                                                                                         // 1010
  var current = exports.event, source;                                                                                 // 1011
  while (source = current.sourceEvent) current = source;                                                               // 1012
  return current;                                                                                                      // 1013
};                                                                                                                     // 1014
                                                                                                                       // 1015
var point = function(node, event) {                                                                                    // 1016
  var svg = node.ownerSVGElement || node;                                                                              // 1017
                                                                                                                       // 1018
  if (svg.createSVGPoint) {                                                                                            // 1019
    var point = svg.createSVGPoint();                                                                                  // 1020
    point.x = event.clientX, point.y = event.clientY;                                                                  // 1021
    point = point.matrixTransform(node.getScreenCTM().inverse());                                                      // 1022
    return [point.x, point.y];                                                                                         // 1023
  }                                                                                                                    // 1024
                                                                                                                       // 1025
  var rect = node.getBoundingClientRect();                                                                             // 1026
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];                     // 1027
};                                                                                                                     // 1028
                                                                                                                       // 1029
var mouse = function(node) {                                                                                           // 1030
  var event = sourceEvent();                                                                                           // 1031
  if (event.changedTouches) event = event.changedTouches[0];                                                           // 1032
  return point(node, event);                                                                                           // 1033
};                                                                                                                     // 1034
                                                                                                                       // 1035
function none() {}                                                                                                     // 1036
                                                                                                                       // 1037
var selector = function(selector) {                                                                                    // 1038
  return selector == null ? none : function() {                                                                        // 1039
    return this.querySelector(selector);                                                                               // 1040
  };                                                                                                                   // 1041
};                                                                                                                     // 1042
                                                                                                                       // 1043
var selection_select = function(select) {                                                                              // 1044
  if (typeof select !== "function") select = selector(select);                                                         // 1045
                                                                                                                       // 1046
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {                    // 1047
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {                               // 1049
        if ("__data__" in node) subnode.__data__ = node.__data__;                                                      // 1050
        subgroup[i] = subnode;                                                                                         // 1051
      }                                                                                                                // 1052
    }                                                                                                                  // 1053
  }                                                                                                                    // 1054
                                                                                                                       // 1055
  return new Selection(subgroups, this._parents);                                                                      // 1056
};                                                                                                                     // 1057
                                                                                                                       // 1058
function empty$1() {                                                                                                   // 1059
  return [];                                                                                                           // 1060
}                                                                                                                      // 1061
                                                                                                                       // 1062
var selectorAll = function(selector) {                                                                                 // 1063
  return selector == null ? empty$1 : function() {                                                                     // 1064
    return this.querySelectorAll(selector);                                                                            // 1065
  };                                                                                                                   // 1066
};                                                                                                                     // 1067
                                                                                                                       // 1068
var selection_selectAll = function(select) {                                                                           // 1069
  if (typeof select !== "function") select = selectorAll(select);                                                      // 1070
                                                                                                                       // 1071
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {                // 1072
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {                                           // 1073
      if (node = group[i]) {                                                                                           // 1074
        subgroups.push(select.call(node, node.__data__, i, group));                                                    // 1075
        parents.push(node);                                                                                            // 1076
      }                                                                                                                // 1077
    }                                                                                                                  // 1078
  }                                                                                                                    // 1079
                                                                                                                       // 1080
  return new Selection(subgroups, parents);                                                                            // 1081
};                                                                                                                     // 1082
                                                                                                                       // 1083
var selection_filter = function(match) {                                                                               // 1084
  if (typeof match !== "function") match = matcher$1(match);                                                           // 1085
                                                                                                                       // 1086
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {                    // 1087
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {             // 1088
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {                                            // 1089
        subgroup.push(node);                                                                                           // 1090
      }                                                                                                                // 1091
    }                                                                                                                  // 1092
  }                                                                                                                    // 1093
                                                                                                                       // 1094
  return new Selection(subgroups, this._parents);                                                                      // 1095
};                                                                                                                     // 1096
                                                                                                                       // 1097
var sparse = function(update) {                                                                                        // 1098
  return new Array(update.length);                                                                                     // 1099
};                                                                                                                     // 1100
                                                                                                                       // 1101
var selection_enter = function() {                                                                                     // 1102
  return new Selection(this._enter || this._groups.map(sparse), this._parents);                                        // 1103
};                                                                                                                     // 1104
                                                                                                                       // 1105
function EnterNode(parent, datum) {                                                                                    // 1106
  this.ownerDocument = parent.ownerDocument;                                                                           // 1107
  this.namespaceURI = parent.namespaceURI;                                                                             // 1108
  this._next = null;                                                                                                   // 1109
  this._parent = parent;                                                                                               // 1110
  this.__data__ = datum;                                                                                               // 1111
}                                                                                                                      // 1112
                                                                                                                       // 1113
EnterNode.prototype = {                                                                                                // 1114
  constructor: EnterNode,                                                                                              // 1115
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },                               // 1116
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },                              // 1117
  querySelector: function(selector) { return this._parent.querySelector(selector); },                                  // 1118
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }                             // 1119
};                                                                                                                     // 1120
                                                                                                                       // 1121
var constant$1 = function(x) {                                                                                         // 1122
  return function() {                                                                                                  // 1123
    return x;                                                                                                          // 1124
  };                                                                                                                   // 1125
};                                                                                                                     // 1126
                                                                                                                       // 1127
var keyPrefix = "$"; // Protect against keys like “__proto__”.                                                         // 1128
                                                                                                                       // 1129
function bindIndex(parent, group, enter, update, exit, data) {                                                         // 1130
  var i = 0,                                                                                                           // 1131
      node,                                                                                                            // 1132
      groupLength = group.length,                                                                                      // 1133
      dataLength = data.length;                                                                                        // 1134
                                                                                                                       // 1135
  // Put any non-null nodes that fit into update.                                                                      // 1136
  // Put any null nodes into enter.                                                                                    // 1137
  // Put any remaining data into enter.                                                                                // 1138
  for (; i < dataLength; ++i) {                                                                                        // 1139
    if (node = group[i]) {                                                                                             // 1140
      node.__data__ = data[i];                                                                                         // 1141
      update[i] = node;                                                                                                // 1142
    } else {                                                                                                           // 1143
      enter[i] = new EnterNode(parent, data[i]);                                                                       // 1144
    }                                                                                                                  // 1145
  }                                                                                                                    // 1146
                                                                                                                       // 1147
  // Put any non-null nodes that don’t fit into exit.                                                                  // 1148
  for (; i < groupLength; ++i) {                                                                                       // 1149
    if (node = group[i]) {                                                                                             // 1150
      exit[i] = node;                                                                                                  // 1151
    }                                                                                                                  // 1152
  }                                                                                                                    // 1153
}                                                                                                                      // 1154
                                                                                                                       // 1155
function bindKey(parent, group, enter, update, exit, data, key) {                                                      // 1156
  var i,                                                                                                               // 1157
      node,                                                                                                            // 1158
      nodeByKeyValue = {},                                                                                             // 1159
      groupLength = group.length,                                                                                      // 1160
      dataLength = data.length,                                                                                        // 1161
      keyValues = new Array(groupLength),                                                                              // 1162
      keyValue;                                                                                                        // 1163
                                                                                                                       // 1164
  // Compute the key for each node.                                                                                    // 1165
  // If multiple nodes have the same key, the duplicates are added to exit.                                            // 1166
  for (i = 0; i < groupLength; ++i) {                                                                                  // 1167
    if (node = group[i]) {                                                                                             // 1168
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);                                   // 1169
      if (keyValue in nodeByKeyValue) {                                                                                // 1170
        exit[i] = node;                                                                                                // 1171
      } else {                                                                                                         // 1172
        nodeByKeyValue[keyValue] = node;                                                                               // 1173
      }                                                                                                                // 1174
    }                                                                                                                  // 1175
  }                                                                                                                    // 1176
                                                                                                                       // 1177
  // Compute the key for each datum.                                                                                   // 1178
  // If there a node associated with this key, join and add it to update.                                              // 1179
  // If there is not (or the key is a duplicate), add it to enter.                                                     // 1180
  for (i = 0; i < dataLength; ++i) {                                                                                   // 1181
    keyValue = keyPrefix + key.call(parent, data[i], i, data);                                                         // 1182
    if (node = nodeByKeyValue[keyValue]) {                                                                             // 1183
      update[i] = node;                                                                                                // 1184
      node.__data__ = data[i];                                                                                         // 1185
      nodeByKeyValue[keyValue] = null;                                                                                 // 1186
    } else {                                                                                                           // 1187
      enter[i] = new EnterNode(parent, data[i]);                                                                       // 1188
    }                                                                                                                  // 1189
  }                                                                                                                    // 1190
                                                                                                                       // 1191
  // Add any remaining nodes that were not bound to data to exit.                                                      // 1192
  for (i = 0; i < groupLength; ++i) {                                                                                  // 1193
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {                                                // 1194
      exit[i] = node;                                                                                                  // 1195
    }                                                                                                                  // 1196
  }                                                                                                                    // 1197
}                                                                                                                      // 1198
                                                                                                                       // 1199
var selection_data = function(value, key) {                                                                            // 1200
  if (!value) {                                                                                                        // 1201
    data = new Array(this.size()), j = -1;                                                                             // 1202
    this.each(function(d) { data[++j] = d; });                                                                         // 1203
    return data;                                                                                                       // 1204
  }                                                                                                                    // 1205
                                                                                                                       // 1206
  var bind = key ? bindKey : bindIndex,                                                                                // 1207
      parents = this._parents,                                                                                         // 1208
      groups = this._groups;                                                                                           // 1209
                                                                                                                       // 1210
  if (typeof value !== "function") value = constant$1(value);                                                          // 1211
                                                                                                                       // 1212
  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {   // 1213
    var parent = parents[j],                                                                                           // 1214
        group = groups[j],                                                                                             // 1215
        groupLength = group.length,                                                                                    // 1216
        data = value.call(parent, parent && parent.__data__, j, parents),                                              // 1217
        dataLength = data.length,                                                                                      // 1218
        enterGroup = enter[j] = new Array(dataLength),                                                                 // 1219
        updateGroup = update[j] = new Array(dataLength),                                                               // 1220
        exitGroup = exit[j] = new Array(groupLength);                                                                  // 1221
                                                                                                                       // 1222
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);                                                // 1223
                                                                                                                       // 1224
    // Now connect the enter nodes to their following update node, such that                                           // 1225
    // appendChild can insert the materialized enter node before this node,                                            // 1226
    // rather than at the end of the parent node.                                                                      // 1227
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {                                                  // 1228
      if (previous = enterGroup[i0]) {                                                                                 // 1229
        if (i0 >= i1) i1 = i0 + 1;                                                                                     // 1230
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);                                                        // 1231
        previous._next = next || null;                                                                                 // 1232
      }                                                                                                                // 1233
    }                                                                                                                  // 1234
  }                                                                                                                    // 1235
                                                                                                                       // 1236
  update = new Selection(update, parents);                                                                             // 1237
  update._enter = enter;                                                                                               // 1238
  update._exit = exit;                                                                                                 // 1239
  return update;                                                                                                       // 1240
};                                                                                                                     // 1241
                                                                                                                       // 1242
var selection_exit = function() {                                                                                      // 1243
  return new Selection(this._exit || this._groups.map(sparse), this._parents);                                         // 1244
};                                                                                                                     // 1245
                                                                                                                       // 1246
var selection_merge = function(selection) {                                                                            // 1247
                                                                                                                       // 1248
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {                                                                             // 1251
        merge[i] = node;                                                                                               // 1252
      }                                                                                                                // 1253
    }                                                                                                                  // 1254
  }                                                                                                                    // 1255
                                                                                                                       // 1256
  for (; j < m0; ++j) {                                                                                                // 1257
    merges[j] = groups0[j];                                                                                            // 1258
  }                                                                                                                    // 1259
                                                                                                                       // 1260
  return new Selection(merges, this._parents);                                                                         // 1261
};                                                                                                                     // 1262
                                                                                                                       // 1263
var selection_order = function() {                                                                                     // 1264
                                                                                                                       // 1265
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {                                               // 1266
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {                              // 1267
      if (node = group[i]) {                                                                                           // 1268
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);                               // 1269
        next = node;                                                                                                   // 1270
      }                                                                                                                // 1271
    }                                                                                                                  // 1272
  }                                                                                                                    // 1273
                                                                                                                       // 1274
  return this;                                                                                                         // 1275
};                                                                                                                     // 1276
                                                                                                                       // 1277
var selection_sort = function(compare) {                                                                               // 1278
  if (!compare) compare = ascending$1;                                                                                 // 1279
                                                                                                                       // 1280
  function compareNode(a, b) {                                                                                         // 1281
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;                                                         // 1282
  }                                                                                                                    // 1283
                                                                                                                       // 1284
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {                   // 1285
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {                                                                                           // 1287
        sortgroup[i] = node;                                                                                           // 1288
      }                                                                                                                // 1289
    }                                                                                                                  // 1290
    sortgroup.sort(compareNode);                                                                                       // 1291
  }                                                                                                                    // 1292
                                                                                                                       // 1293
  return new Selection(sortgroups, this._parents).order();                                                             // 1294
};                                                                                                                     // 1295
                                                                                                                       // 1296
function ascending$1(a, b) {                                                                                           // 1297
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;                                                                    // 1298
}                                                                                                                      // 1299
                                                                                                                       // 1300
var selection_call = function() {                                                                                      // 1301
  var callback = arguments[0];                                                                                         // 1302
  arguments[0] = this;                                                                                                 // 1303
  callback.apply(null, arguments);                                                                                     // 1304
  return this;                                                                                                         // 1305
};                                                                                                                     // 1306
                                                                                                                       // 1307
var selection_nodes = function() {                                                                                     // 1308
  var nodes = new Array(this.size()), i = -1;                                                                          // 1309
  this.each(function() { nodes[++i] = this; });                                                                        // 1310
  return nodes;                                                                                                        // 1311
};                                                                                                                     // 1312
                                                                                                                       // 1313
var selection_node = function() {                                                                                      // 1314
                                                                                                                       // 1315
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {                                              // 1316
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {                                                 // 1317
      var node = group[i];                                                                                             // 1318
      if (node) return node;                                                                                           // 1319
    }                                                                                                                  // 1320
  }                                                                                                                    // 1321
                                                                                                                       // 1322
  return null;                                                                                                         // 1323
};                                                                                                                     // 1324
                                                                                                                       // 1325
var selection_size = function() {                                                                                      // 1326
  var size = 0;                                                                                                        // 1327
  this.each(function() { ++size; });                                                                                   // 1328
  return size;                                                                                                         // 1329
};                                                                                                                     // 1330
                                                                                                                       // 1331
var selection_empty = function() {                                                                                     // 1332
  return !this.node();                                                                                                 // 1333
};                                                                                                                     // 1334
                                                                                                                       // 1335
var selection_each = function(callback) {                                                                              // 1336
                                                                                                                       // 1337
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {                                              // 1338
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {                                           // 1339
      if (node = group[i]) callback.call(node, node.__data__, i, group);                                               // 1340
    }                                                                                                                  // 1341
  }                                                                                                                    // 1342
                                                                                                                       // 1343
  return this;                                                                                                         // 1344
};                                                                                                                     // 1345
                                                                                                                       // 1346
function attrRemove(name) {                                                                                            // 1347
  return function() {                                                                                                  // 1348
    this.removeAttribute(name);                                                                                        // 1349
  };                                                                                                                   // 1350
}                                                                                                                      // 1351
                                                                                                                       // 1352
function attrRemoveNS(fullname) {                                                                                      // 1353
  return function() {                                                                                                  // 1354
    this.removeAttributeNS(fullname.space, fullname.local);                                                            // 1355
  };                                                                                                                   // 1356
}                                                                                                                      // 1357
                                                                                                                       // 1358
function attrConstant(name, value) {                                                                                   // 1359
  return function() {                                                                                                  // 1360
    this.setAttribute(name, value);                                                                                    // 1361
  };                                                                                                                   // 1362
}                                                                                                                      // 1363
                                                                                                                       // 1364
function attrConstantNS(fullname, value) {                                                                             // 1365
  return function() {                                                                                                  // 1366
    this.setAttributeNS(fullname.space, fullname.local, value);                                                        // 1367
  };                                                                                                                   // 1368
}                                                                                                                      // 1369
                                                                                                                       // 1370
function attrFunction(name, value) {                                                                                   // 1371
  return function() {                                                                                                  // 1372
    var v = value.apply(this, arguments);                                                                              // 1373
    if (v == null) this.removeAttribute(name);                                                                         // 1374
    else this.setAttribute(name, v);                                                                                   // 1375
  };                                                                                                                   // 1376
}                                                                                                                      // 1377
                                                                                                                       // 1378
function attrFunctionNS(fullname, value) {                                                                             // 1379
  return function() {                                                                                                  // 1380
    var v = value.apply(this, arguments);                                                                              // 1381
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);                                             // 1382
    else this.setAttributeNS(fullname.space, fullname.local, v);                                                       // 1383
  };                                                                                                                   // 1384
}                                                                                                                      // 1385
                                                                                                                       // 1386
var selection_attr = function(name, value) {                                                                           // 1387
  var fullname = namespace(name);                                                                                      // 1388
                                                                                                                       // 1389
  if (arguments.length < 2) {                                                                                          // 1390
    var node = this.node();                                                                                            // 1391
    return fullname.local                                                                                              // 1392
        ? node.getAttributeNS(fullname.space, fullname.local)                                                          // 1393
        : node.getAttribute(fullname);                                                                                 // 1394
  }                                                                                                                    // 1395
                                                                                                                       // 1396
  return this.each((value == null                                                                                      // 1397
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"                                    // 1398
      ? (fullname.local ? attrFunctionNS : attrFunction)                                                               // 1399
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));                                          // 1400
};                                                                                                                     // 1401
                                                                                                                       // 1402
var defaultView = function(node) {                                                                                     // 1403
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node                                      // 1404
      || (node.document && node) // node is a Window                                                                   // 1405
      || node.defaultView; // node is a Document                                                                       // 1406
};                                                                                                                     // 1407
                                                                                                                       // 1408
function styleRemove(name) {                                                                                           // 1409
  return function() {                                                                                                  // 1410
    this.style.removeProperty(name);                                                                                   // 1411
  };                                                                                                                   // 1412
}                                                                                                                      // 1413
                                                                                                                       // 1414
function styleConstant(name, value, priority) {                                                                        // 1415
  return function() {                                                                                                  // 1416
    this.style.setProperty(name, value, priority);                                                                     // 1417
  };                                                                                                                   // 1418
}                                                                                                                      // 1419
                                                                                                                       // 1420
function styleFunction(name, value, priority) {                                                                        // 1421
  return function() {                                                                                                  // 1422
    var v = value.apply(this, arguments);                                                                              // 1423
    if (v == null) this.style.removeProperty(name);                                                                    // 1424
    else this.style.setProperty(name, v, priority);                                                                    // 1425
  };                                                                                                                   // 1426
}                                                                                                                      // 1427
                                                                                                                       // 1428
var selection_style = function(name, value, priority) {                                                                // 1429
  return arguments.length > 1                                                                                          // 1430
      ? this.each((value == null                                                                                       // 1431
            ? styleRemove : typeof value === "function"                                                                // 1432
            ? styleFunction                                                                                            // 1433
            : styleConstant)(name, value, priority == null ? "" : priority))                                           // 1434
      : styleValue(this.node(), name);                                                                                 // 1435
};                                                                                                                     // 1436
                                                                                                                       // 1437
function styleValue(node, name) {                                                                                      // 1438
  return node.style.getPropertyValue(name)                                                                             // 1439
      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);                                        // 1440
}                                                                                                                      // 1441
                                                                                                                       // 1442
function propertyRemove(name) {                                                                                        // 1443
  return function() {                                                                                                  // 1444
    delete this[name];                                                                                                 // 1445
  };                                                                                                                   // 1446
}                                                                                                                      // 1447
                                                                                                                       // 1448
function propertyConstant(name, value) {                                                                               // 1449
  return function() {                                                                                                  // 1450
    this[name] = value;                                                                                                // 1451
  };                                                                                                                   // 1452
}                                                                                                                      // 1453
                                                                                                                       // 1454
function propertyFunction(name, value) {                                                                               // 1455
  return function() {                                                                                                  // 1456
    var v = value.apply(this, arguments);                                                                              // 1457
    if (v == null) delete this[name];                                                                                  // 1458
    else this[name] = v;                                                                                               // 1459
  };                                                                                                                   // 1460
}                                                                                                                      // 1461
                                                                                                                       // 1462
var selection_property = function(name, value) {                                                                       // 1463
  return arguments.length > 1                                                                                          // 1464
      ? this.each((value == null                                                                                       // 1465
          ? propertyRemove : typeof value === "function"                                                               // 1466
          ? propertyFunction                                                                                           // 1467
          : propertyConstant)(name, value))                                                                            // 1468
      : this.node()[name];                                                                                             // 1469
};                                                                                                                     // 1470
                                                                                                                       // 1471
function classArray(string) {                                                                                          // 1472
  return string.trim().split(/^|\s+/);                                                                                 // 1473
}                                                                                                                      // 1474
                                                                                                                       // 1475
function classList(node) {                                                                                             // 1476
  return node.classList || new ClassList(node);                                                                        // 1477
}                                                                                                                      // 1478
                                                                                                                       // 1479
function ClassList(node) {                                                                                             // 1480
  this._node = node;                                                                                                   // 1481
  this._names = classArray(node.getAttribute("class") || "");                                                          // 1482
}                                                                                                                      // 1483
                                                                                                                       // 1484
ClassList.prototype = {                                                                                                // 1485
  add: function(name) {                                                                                                // 1486
    var i = this._names.indexOf(name);                                                                                 // 1487
    if (i < 0) {                                                                                                       // 1488
      this._names.push(name);                                                                                          // 1489
      this._node.setAttribute("class", this._names.join(" "));                                                         // 1490
    }                                                                                                                  // 1491
  },                                                                                                                   // 1492
  remove: function(name) {                                                                                             // 1493
    var i = this._names.indexOf(name);                                                                                 // 1494
    if (i >= 0) {                                                                                                      // 1495
      this._names.splice(i, 1);                                                                                        // 1496
      this._node.setAttribute("class", this._names.join(" "));                                                         // 1497
    }                                                                                                                  // 1498
  },                                                                                                                   // 1499
  contains: function(name) {                                                                                           // 1500
    return this._names.indexOf(name) >= 0;                                                                             // 1501
  }                                                                                                                    // 1502
};                                                                                                                     // 1503
                                                                                                                       // 1504
function classedAdd(node, names) {                                                                                     // 1505
  var list = classList(node), i = -1, n = names.length;                                                                // 1506
  while (++i < n) list.add(names[i]);                                                                                  // 1507
}                                                                                                                      // 1508
                                                                                                                       // 1509
function classedRemove(node, names) {                                                                                  // 1510
  var list = classList(node), i = -1, n = names.length;                                                                // 1511
  while (++i < n) list.remove(names[i]);                                                                               // 1512
}                                                                                                                      // 1513
                                                                                                                       // 1514
function classedTrue(names) {                                                                                          // 1515
  return function() {                                                                                                  // 1516
    classedAdd(this, names);                                                                                           // 1517
  };                                                                                                                   // 1518
}                                                                                                                      // 1519
                                                                                                                       // 1520
function classedFalse(names) {                                                                                         // 1521
  return function() {                                                                                                  // 1522
    classedRemove(this, names);                                                                                        // 1523
  };                                                                                                                   // 1524
}                                                                                                                      // 1525
                                                                                                                       // 1526
function classedFunction(names, value) {                                                                               // 1527
  return function() {                                                                                                  // 1528
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);                                          // 1529
  };                                                                                                                   // 1530
}                                                                                                                      // 1531
                                                                                                                       // 1532
var selection_classed = function(name, value) {                                                                        // 1533
  var names = classArray(name + "");                                                                                   // 1534
                                                                                                                       // 1535
  if (arguments.length < 2) {                                                                                          // 1536
    var list = classList(this.node()), i = -1, n = names.length;                                                       // 1537
    while (++i < n) if (!list.contains(names[i])) return false;                                                        // 1538
    return true;                                                                                                       // 1539
  }                                                                                                                    // 1540
                                                                                                                       // 1541
  return this.each((typeof value === "function"                                                                        // 1542
      ? classedFunction : value                                                                                        // 1543
      ? classedTrue                                                                                                    // 1544
      : classedFalse)(names, value));                                                                                  // 1545
};                                                                                                                     // 1546
                                                                                                                       // 1547
function textRemove() {                                                                                                // 1548
  this.textContent = "";                                                                                               // 1549
}                                                                                                                      // 1550
                                                                                                                       // 1551
function textConstant(value) {                                                                                         // 1552
  return function() {                                                                                                  // 1553
    this.textContent = value;                                                                                          // 1554
  };                                                                                                                   // 1555
}                                                                                                                      // 1556
                                                                                                                       // 1557
function textFunction(value) {                                                                                         // 1558
  return function() {                                                                                                  // 1559
    var v = value.apply(this, arguments);                                                                              // 1560
    this.textContent = v == null ? "" : v;                                                                             // 1561
  };                                                                                                                   // 1562
}                                                                                                                      // 1563
                                                                                                                       // 1564
var selection_text = function(value) {                                                                                 // 1565
  return arguments.length                                                                                              // 1566
      ? this.each(value == null                                                                                        // 1567
          ? textRemove : (typeof value === "function"                                                                  // 1568
          ? textFunction                                                                                               // 1569
          : textConstant)(value))                                                                                      // 1570
      : this.node().textContent;                                                                                       // 1571
};                                                                                                                     // 1572
                                                                                                                       // 1573
function htmlRemove() {                                                                                                // 1574
  this.innerHTML = "";                                                                                                 // 1575
}                                                                                                                      // 1576
                                                                                                                       // 1577
function htmlConstant(value) {                                                                                         // 1578
  return function() {                                                                                                  // 1579
    this.innerHTML = value;                                                                                            // 1580
  };                                                                                                                   // 1581
}                                                                                                                      // 1582
                                                                                                                       // 1583
function htmlFunction(value) {                                                                                         // 1584
  return function() {                                                                                                  // 1585
    var v = value.apply(this, arguments);                                                                              // 1586
    this.innerHTML = v == null ? "" : v;                                                                               // 1587
  };                                                                                                                   // 1588
}                                                                                                                      // 1589
                                                                                                                       // 1590
var selection_html = function(value) {                                                                                 // 1591
  return arguments.length                                                                                              // 1592
      ? this.each(value == null                                                                                        // 1593
          ? htmlRemove : (typeof value === "function"                                                                  // 1594
          ? htmlFunction                                                                                               // 1595
          : htmlConstant)(value))                                                                                      // 1596
      : this.node().innerHTML;                                                                                         // 1597
};                                                                                                                     // 1598
                                                                                                                       // 1599
function raise() {                                                                                                     // 1600
  if (this.nextSibling) this.parentNode.appendChild(this);                                                             // 1601
}                                                                                                                      // 1602
                                                                                                                       // 1603
var selection_raise = function() {                                                                                     // 1604
  return this.each(raise);                                                                                             // 1605
};                                                                                                                     // 1606
                                                                                                                       // 1607
function lower() {                                                                                                     // 1608
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);                            // 1609
}                                                                                                                      // 1610
                                                                                                                       // 1611
var selection_lower = function() {                                                                                     // 1612
  return this.each(lower);                                                                                             // 1613
};                                                                                                                     // 1614
                                                                                                                       // 1615
var selection_append = function(name) {                                                                                // 1616
  var create = typeof name === "function" ? name : creator(name);                                                      // 1617
  return this.select(function() {                                                                                      // 1618
    return this.appendChild(create.apply(this, arguments));                                                            // 1619
  });                                                                                                                  // 1620
};                                                                                                                     // 1621
                                                                                                                       // 1622
function constantNull() {                                                                                              // 1623
  return null;                                                                                                         // 1624
}                                                                                                                      // 1625
                                                                                                                       // 1626
var selection_insert = function(name, before) {                                                                        // 1627
  var create = typeof name === "function" ? name : creator(name),                                                      // 1628
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);               // 1629
  return this.select(function() {                                                                                      // 1630
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);                    // 1631
  });                                                                                                                  // 1632
};                                                                                                                     // 1633
                                                                                                                       // 1634
function remove() {                                                                                                    // 1635
  var parent = this.parentNode;                                                                                        // 1636
  if (parent) parent.removeChild(this);                                                                                // 1637
}                                                                                                                      // 1638
                                                                                                                       // 1639
var selection_remove = function() {                                                                                    // 1640
  return this.each(remove);                                                                                            // 1641
};                                                                                                                     // 1642
                                                                                                                       // 1643
var selection_datum = function(value) {                                                                                // 1644
  return arguments.length                                                                                              // 1645
      ? this.property("__data__", value)                                                                               // 1646
      : this.node().__data__;                                                                                          // 1647
};                                                                                                                     // 1648
                                                                                                                       // 1649
function dispatchEvent(node, type, params) {                                                                           // 1650
  var window = defaultView(node),                                                                                      // 1651
      event = window.CustomEvent;                                                                                      // 1652
                                                                                                                       // 1653
  if (typeof event === "function") {                                                                                   // 1654
    event = new event(type, params);                                                                                   // 1655
  } else {                                                                                                             // 1656
    event = window.document.createEvent("Event");                                                                      // 1657
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;                // 1658
    else event.initEvent(type, false, false);                                                                          // 1659
  }                                                                                                                    // 1660
                                                                                                                       // 1661
  node.dispatchEvent(event);                                                                                           // 1662
}                                                                                                                      // 1663
                                                                                                                       // 1664
function dispatchConstant(type, params) {                                                                              // 1665
  return function() {                                                                                                  // 1666
    return dispatchEvent(this, type, params);                                                                          // 1667
  };                                                                                                                   // 1668
}                                                                                                                      // 1669
                                                                                                                       // 1670
function dispatchFunction(type, params) {                                                                              // 1671
  return function() {                                                                                                  // 1672
    return dispatchEvent(this, type, params.apply(this, arguments));                                                   // 1673
  };                                                                                                                   // 1674
}                                                                                                                      // 1675
                                                                                                                       // 1676
var selection_dispatch = function(type, params) {                                                                      // 1677
  return this.each((typeof params === "function"                                                                       // 1678
      ? dispatchFunction                                                                                               // 1679
      : dispatchConstant)(type, params));                                                                              // 1680
};                                                                                                                     // 1681
                                                                                                                       // 1682
var root = [null];                                                                                                     // 1683
                                                                                                                       // 1684
function Selection(groups, parents) {                                                                                  // 1685
  this._groups = groups;                                                                                               // 1686
  this._parents = parents;                                                                                             // 1687
}                                                                                                                      // 1688
                                                                                                                       // 1689
function selection() {                                                                                                 // 1690
  return new Selection([[document.documentElement]], root);                                                            // 1691
}                                                                                                                      // 1692
                                                                                                                       // 1693
Selection.prototype = selection.prototype = {                                                                          // 1694
  constructor: Selection,                                                                                              // 1695
  select: selection_select,                                                                                            // 1696
  selectAll: selection_selectAll,                                                                                      // 1697
  filter: selection_filter,                                                                                            // 1698
  data: selection_data,                                                                                                // 1699
  enter: selection_enter,                                                                                              // 1700
  exit: selection_exit,                                                                                                // 1701
  merge: selection_merge,                                                                                              // 1702
  order: selection_order,                                                                                              // 1703
  sort: selection_sort,                                                                                                // 1704
  call: selection_call,                                                                                                // 1705
  nodes: selection_nodes,                                                                                              // 1706
  node: selection_node,                                                                                                // 1707
  size: selection_size,                                                                                                // 1708
  empty: selection_empty,                                                                                              // 1709
  each: selection_each,                                                                                                // 1710
  attr: selection_attr,                                                                                                // 1711
  style: selection_style,                                                                                              // 1712
  property: selection_property,                                                                                        // 1713
  classed: selection_classed,                                                                                          // 1714
  text: selection_text,                                                                                                // 1715
  html: selection_html,                                                                                                // 1716
  raise: selection_raise,                                                                                              // 1717
  lower: selection_lower,                                                                                              // 1718
  append: selection_append,                                                                                            // 1719
  insert: selection_insert,                                                                                            // 1720
  remove: selection_remove,                                                                                            // 1721
  datum: selection_datum,                                                                                              // 1722
  on: selection_on,                                                                                                    // 1723
  dispatch: selection_dispatch                                                                                         // 1724
};                                                                                                                     // 1725
                                                                                                                       // 1726
var select = function(selector) {                                                                                      // 1727
  return typeof selector === "string"                                                                                  // 1728
      ? new Selection([[document.querySelector(selector)]], [document.documentElement])                                // 1729
      : new Selection([[selector]], root);                                                                             // 1730
};                                                                                                                     // 1731
                                                                                                                       // 1732
var selectAll = function(selector) {                                                                                   // 1733
  return typeof selector === "string"                                                                                  // 1734
      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])                               // 1735
      : new Selection([selector == null ? [] : selector], root);                                                       // 1736
};                                                                                                                     // 1737
                                                                                                                       // 1738
var touch = function(node, touches, identifier) {                                                                      // 1739
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;                              // 1740
                                                                                                                       // 1741
  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {                                               // 1742
    if ((touch = touches[i]).identifier === identifier) {                                                              // 1743
      return point(node, touch);                                                                                       // 1744
    }                                                                                                                  // 1745
  }                                                                                                                    // 1746
                                                                                                                       // 1747
  return null;                                                                                                         // 1748
};                                                                                                                     // 1749
                                                                                                                       // 1750
var touches = function(node, touches) {                                                                                // 1751
  if (touches == null) touches = sourceEvent().touches;                                                                // 1752
                                                                                                                       // 1753
  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {                               // 1754
    points[i] = point(node, touches[i]);                                                                               // 1755
  }                                                                                                                    // 1756
                                                                                                                       // 1757
  return points;                                                                                                       // 1758
};                                                                                                                     // 1759
                                                                                                                       // 1760
function nopropagation() {                                                                                             // 1761
  exports.event.stopImmediatePropagation();                                                                            // 1762
}                                                                                                                      // 1763
                                                                                                                       // 1764
var noevent = function() {                                                                                             // 1765
  exports.event.preventDefault();                                                                                      // 1766
  exports.event.stopImmediatePropagation();                                                                            // 1767
};                                                                                                                     // 1768
                                                                                                                       // 1769
var dragDisable = function(view) {                                                                                     // 1770
  var root = view.document.documentElement,                                                                            // 1771
      selection$$1 = select(view).on("dragstart.drag", noevent, true);                                                 // 1772
  if ("onselectstart" in root) {                                                                                       // 1773
    selection$$1.on("selectstart.drag", noevent, true);                                                                // 1774
  } else {                                                                                                             // 1775
    root.__noselect = root.style.MozUserSelect;                                                                        // 1776
    root.style.MozUserSelect = "none";                                                                                 // 1777
  }                                                                                                                    // 1778
};                                                                                                                     // 1779
                                                                                                                       // 1780
function yesdrag(view, noclick) {                                                                                      // 1781
  var root = view.document.documentElement,                                                                            // 1782
      selection$$1 = select(view).on("dragstart.drag", null);                                                          // 1783
  if (noclick) {                                                                                                       // 1784
    selection$$1.on("click.drag", noevent, true);                                                                      // 1785
    setTimeout(function() { selection$$1.on("click.drag", null); }, 0);                                                // 1786
  }                                                                                                                    // 1787
  if ("onselectstart" in root) {                                                                                       // 1788
    selection$$1.on("selectstart.drag", null);                                                                         // 1789
  } else {                                                                                                             // 1790
    root.style.MozUserSelect = root.__noselect;                                                                        // 1791
    delete root.__noselect;                                                                                            // 1792
  }                                                                                                                    // 1793
}                                                                                                                      // 1794
                                                                                                                       // 1795
var constant$2 = function(x) {                                                                                         // 1796
  return function() {                                                                                                  // 1797
    return x;                                                                                                          // 1798
  };                                                                                                                   // 1799
};                                                                                                                     // 1800
                                                                                                                       // 1801
function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {                                        // 1802
  this.target = target;                                                                                                // 1803
  this.type = type;                                                                                                    // 1804
  this.subject = subject;                                                                                              // 1805
  this.identifier = id;                                                                                                // 1806
  this.active = active;                                                                                                // 1807
  this.x = x;                                                                                                          // 1808
  this.y = y;                                                                                                          // 1809
  this.dx = dx;                                                                                                        // 1810
  this.dy = dy;                                                                                                        // 1811
  this._ = dispatch;                                                                                                   // 1812
}                                                                                                                      // 1813
                                                                                                                       // 1814
DragEvent.prototype.on = function() {                                                                                  // 1815
  var value = this._.on.apply(this._, arguments);                                                                      // 1816
  return value === this._ ? this : value;                                                                              // 1817
};                                                                                                                     // 1818
                                                                                                                       // 1819
// Ignore right-click, since that should open the context menu.                                                        // 1820
function defaultFilter$1() {                                                                                           // 1821
  return !exports.event.button;                                                                                        // 1822
}                                                                                                                      // 1823
                                                                                                                       // 1824
function defaultContainer() {                                                                                          // 1825
  return this.parentNode;                                                                                              // 1826
}                                                                                                                      // 1827
                                                                                                                       // 1828
function defaultSubject(d) {                                                                                           // 1829
  return d == null ? {x: exports.event.x, y: exports.event.y} : d;                                                     // 1830
}                                                                                                                      // 1831
                                                                                                                       // 1832
var drag = function() {                                                                                                // 1833
  var filter = defaultFilter$1,                                                                                        // 1834
      container = defaultContainer,                                                                                    // 1835
      subject = defaultSubject,                                                                                        // 1836
      gestures = {},                                                                                                   // 1837
      listeners = dispatch("start", "drag", "end"),                                                                    // 1838
      active = 0,                                                                                                      // 1839
      mousedownx,                                                                                                      // 1840
      mousedowny,                                                                                                      // 1841
      mousemoving,                                                                                                     // 1842
      touchending,                                                                                                     // 1843
      clickDistance2 = 0;                                                                                              // 1844
                                                                                                                       // 1845
  function drag(selection$$1) {                                                                                        // 1846
    selection$$1                                                                                                       // 1847
        .on("mousedown.drag", mousedowned)                                                                             // 1848
        .on("touchstart.drag", touchstarted)                                                                           // 1849
        .on("touchmove.drag", touchmoved)                                                                              // 1850
        .on("touchend.drag touchcancel.drag", touchended)                                                              // 1851
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");                                                        // 1852
  }                                                                                                                    // 1853
                                                                                                                       // 1854
  function mousedowned() {                                                                                             // 1855
    if (touchending || !filter.apply(this, arguments)) return;                                                         // 1856
    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);                      // 1857
    if (!gesture) return;                                                                                              // 1858
    select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);            // 1859
    dragDisable(exports.event.view);                                                                                   // 1860
    nopropagation();                                                                                                   // 1861
    mousemoving = false;                                                                                               // 1862
    mousedownx = exports.event.clientX;                                                                                // 1863
    mousedowny = exports.event.clientY;                                                                                // 1864
    gesture("start");                                                                                                  // 1865
  }                                                                                                                    // 1866
                                                                                                                       // 1867
  function mousemoved() {                                                                                              // 1868
    noevent();                                                                                                         // 1869
    if (!mousemoving) {                                                                                                // 1870
      var dx = exports.event.clientX - mousedownx, dy = exports.event.clientY - mousedowny;                            // 1871
      mousemoving = dx * dx + dy * dy > clickDistance2;                                                                // 1872
    }                                                                                                                  // 1873
    gestures.mouse("drag");                                                                                            // 1874
  }                                                                                                                    // 1875
                                                                                                                       // 1876
  function mouseupped() {                                                                                              // 1877
    select(exports.event.view).on("mousemove.drag mouseup.drag", null);                                                // 1878
    yesdrag(exports.event.view, mousemoving);                                                                          // 1879
    noevent();                                                                                                         // 1880
    gestures.mouse("end");                                                                                             // 1881
  }                                                                                                                    // 1882
                                                                                                                       // 1883
  function touchstarted() {                                                                                            // 1884
    if (!filter.apply(this, arguments)) return;                                                                        // 1885
    var touches$$1 = exports.event.changedTouches,                                                                     // 1886
        c = container.apply(this, arguments),                                                                          // 1887
        n = touches$$1.length, i, gesture;                                                                             // 1888
                                                                                                                       // 1889
    for (i = 0; i < n; ++i) {                                                                                          // 1890
      if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {                                // 1891
        nopropagation();                                                                                               // 1892
        gesture("start");                                                                                              // 1893
      }                                                                                                                // 1894
    }                                                                                                                  // 1895
  }                                                                                                                    // 1896
                                                                                                                       // 1897
  function touchmoved() {                                                                                              // 1898
    var touches$$1 = exports.event.changedTouches,                                                                     // 1899
        n = touches$$1.length, i, gesture;                                                                             // 1900
                                                                                                                       // 1901
    for (i = 0; i < n; ++i) {                                                                                          // 1902
      if (gesture = gestures[touches$$1[i].identifier]) {                                                              // 1903
        noevent();                                                                                                     // 1904
        gesture("drag");                                                                                               // 1905
      }                                                                                                                // 1906
    }                                                                                                                  // 1907
  }                                                                                                                    // 1908
                                                                                                                       // 1909
  function touchended() {                                                                                              // 1910
    var touches$$1 = exports.event.changedTouches,                                                                     // 1911
        n = touches$$1.length, i, gesture;                                                                             // 1912
                                                                                                                       // 1913
    if (touchending) clearTimeout(touchending);                                                                        // 1914
    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!                    // 1915
    for (i = 0; i < n; ++i) {                                                                                          // 1916
      if (gesture = gestures[touches$$1[i].identifier]) {                                                              // 1917
        nopropagation();                                                                                               // 1918
        gesture("end");                                                                                                // 1919
      }                                                                                                                // 1920
    }                                                                                                                  // 1921
  }                                                                                                                    // 1922
                                                                                                                       // 1923
  function beforestart(id, container, point, that, args) {                                                             // 1924
    var p = point(container, id), s, dx, dy,                                                                           // 1925
        sublisteners = listeners.copy();                                                                               // 1926
                                                                                                                       // 1927
    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {   // 1928
      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;                               // 1929
      dx = s.x - p[0] || 0;                                                                                            // 1930
      dy = s.y - p[1] || 0;                                                                                            // 1931
      return true;                                                                                                     // 1932
    })) return;                                                                                                        // 1933
                                                                                                                       // 1934
    return function gesture(type) {                                                                                    // 1935
      var p0 = p, n;                                                                                                   // 1936
      switch (type) {                                                                                                  // 1937
        case "start": gestures[id] = gesture, n = active++; break;                                                     // 1938
        case "end": delete gestures[id], --active; // nobreak                                                          // 1939
        case "drag": p = point(container, id), n = active; break;                                                      // 1940
      }                                                                                                                // 1941
      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };                                                                                                                 // 1943
  }                                                                                                                    // 1944
                                                                                                                       // 1945
  drag.filter = function(_) {                                                                                          // 1946
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), drag) : filter;                 // 1947
  };                                                                                                                   // 1948
                                                                                                                       // 1949
  drag.container = function(_) {                                                                                       // 1950
    return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), drag) : container;             // 1951
  };                                                                                                                   // 1952
                                                                                                                       // 1953
  drag.subject = function(_) {                                                                                         // 1954
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), drag) : subject;                 // 1955
  };                                                                                                                   // 1956
                                                                                                                       // 1957
  drag.on = function() {                                                                                               // 1958
    var value = listeners.on.apply(listeners, arguments);                                                              // 1959
    return value === listeners ? drag : value;                                                                         // 1960
  };                                                                                                                   // 1961
                                                                                                                       // 1962
  drag.clickDistance = function(_) {                                                                                   // 1963
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);                       // 1964
  };                                                                                                                   // 1965
                                                                                                                       // 1966
  return drag;                                                                                                         // 1967
};                                                                                                                     // 1968
                                                                                                                       // 1969
var define = function(constructor, factory, prototype) {                                                               // 1970
  constructor.prototype = factory.prototype = prototype;                                                               // 1971
  prototype.constructor = constructor;                                                                                 // 1972
};                                                                                                                     // 1973
                                                                                                                       // 1974
function extend(parent, definition) {                                                                                  // 1975
  var prototype = Object.create(parent.prototype);                                                                     // 1976
  for (var key in definition) prototype[key] = definition[key];                                                        // 1977
  return prototype;                                                                                                    // 1978
}                                                                                                                      // 1979
                                                                                                                       // 1980
function Color() {}                                                                                                    // 1981
                                                                                                                       // 1982
var darker = 0.7;                                                                                                      // 1983
var brighter = 1 / darker;                                                                                             // 1984
                                                                                                                       // 1985
var reI = "\\s*([+-]?\\d+)\\s*";                                                                                       // 1986
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";                                                             // 1987
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";                                                            // 1988
var reHex3 = /^#([0-9a-f]{3})$/;                                                                                       // 1989
var reHex6 = /^#([0-9a-f]{6})$/;                                                                                       // 1990
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");                                                   // 1991
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");                                                   // 1992
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");                                            // 1993
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");                                            // 1994
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");                                                   // 1995
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");                                            // 1996
                                                                                                                       // 1997
var named = {                                                                                                          // 1998
  aliceblue: 0xf0f8ff,                                                                                                 // 1999
  antiquewhite: 0xfaebd7,                                                                                              // 2000
  aqua: 0x00ffff,                                                                                                      // 2001
  aquamarine: 0x7fffd4,                                                                                                // 2002
  azure: 0xf0ffff,                                                                                                     // 2003
  beige: 0xf5f5dc,                                                                                                     // 2004
  bisque: 0xffe4c4,                                                                                                    // 2005
  black: 0x000000,                                                                                                     // 2006
  blanchedalmond: 0xffebcd,                                                                                            // 2007
  blue: 0x0000ff,                                                                                                      // 2008
  blueviolet: 0x8a2be2,                                                                                                // 2009
  brown: 0xa52a2a,                                                                                                     // 2010
  burlywood: 0xdeb887,                                                                                                 // 2011
  cadetblue: 0x5f9ea0,                                                                                                 // 2012
  chartreuse: 0x7fff00,                                                                                                // 2013
  chocolate: 0xd2691e,                                                                                                 // 2014
  coral: 0xff7f50,                                                                                                     // 2015
  cornflowerblue: 0x6495ed,                                                                                            // 2016
  cornsilk: 0xfff8dc,                                                                                                  // 2017
  crimson: 0xdc143c,                                                                                                   // 2018
  cyan: 0x00ffff,                                                                                                      // 2019
  darkblue: 0x00008b,                                                                                                  // 2020
  darkcyan: 0x008b8b,                                                                                                  // 2021
  darkgoldenrod: 0xb8860b,                                                                                             // 2022
  darkgray: 0xa9a9a9,                                                                                                  // 2023
  darkgreen: 0x006400,                                                                                                 // 2024
  darkgrey: 0xa9a9a9,                                                                                                  // 2025
  darkkhaki: 0xbdb76b,                                                                                                 // 2026
  darkmagenta: 0x8b008b,                                                                                               // 2027
  darkolivegreen: 0x556b2f,                                                                                            // 2028
  darkorange: 0xff8c00,                                                                                                // 2029
  darkorchid: 0x9932cc,                                                                                                // 2030
  darkred: 0x8b0000,                                                                                                   // 2031
  darksalmon: 0xe9967a,                                                                                                // 2032
  darkseagreen: 0x8fbc8f,                                                                                              // 2033
  darkslateblue: 0x483d8b,                                                                                             // 2034
  darkslategray: 0x2f4f4f,                                                                                             // 2035
  darkslategrey: 0x2f4f4f,                                                                                             // 2036
  darkturquoise: 0x00ced1,                                                                                             // 2037
  darkviolet: 0x9400d3,                                                                                                // 2038
  deeppink: 0xff1493,                                                                                                  // 2039
  deepskyblue: 0x00bfff,                                                                                               // 2040
  dimgray: 0x696969,                                                                                                   // 2041
  dimgrey: 0x696969,                                                                                                   // 2042
  dodgerblue: 0x1e90ff,                                                                                                // 2043
  firebrick: 0xb22222,                                                                                                 // 2044
  floralwhite: 0xfffaf0,                                                                                               // 2045
  forestgreen: 0x228b22,                                                                                               // 2046
  fuchsia: 0xff00ff,                                                                                                   // 2047
  gainsboro: 0xdcdcdc,                                                                                                 // 2048
  ghostwhite: 0xf8f8ff,                                                                                                // 2049
  gold: 0xffd700,                                                                                                      // 2050
  goldenrod: 0xdaa520,                                                                                                 // 2051
  gray: 0x808080,                                                                                                      // 2052
  green: 0x008000,                                                                                                     // 2053
  greenyellow: 0xadff2f,                                                                                               // 2054
  grey: 0x808080,                                                                                                      // 2055
  honeydew: 0xf0fff0,                                                                                                  // 2056
  hotpink: 0xff69b4,                                                                                                   // 2057
  indianred: 0xcd5c5c,                                                                                                 // 2058
  indigo: 0x4b0082,                                                                                                    // 2059
  ivory: 0xfffff0,                                                                                                     // 2060
  khaki: 0xf0e68c,                                                                                                     // 2061
  lavender: 0xe6e6fa,                                                                                                  // 2062
  lavenderblush: 0xfff0f5,                                                                                             // 2063
  lawngreen: 0x7cfc00,                                                                                                 // 2064
  lemonchiffon: 0xfffacd,                                                                                              // 2065
  lightblue: 0xadd8e6,                                                                                                 // 2066
  lightcoral: 0xf08080,                                                                                                // 2067
  lightcyan: 0xe0ffff,                                                                                                 // 2068
  lightgoldenrodyellow: 0xfafad2,                                                                                      // 2069
  lightgray: 0xd3d3d3,                                                                                                 // 2070
  lightgreen: 0x90ee90,                                                                                                // 2071
  lightgrey: 0xd3d3d3,                                                                                                 // 2072
  lightpink: 0xffb6c1,                                                                                                 // 2073
  lightsalmon: 0xffa07a,                                                                                               // 2074
  lightseagreen: 0x20b2aa,                                                                                             // 2075
  lightskyblue: 0x87cefa,                                                                                              // 2076
  lightslategray: 0x778899,                                                                                            // 2077
  lightslategrey: 0x778899,                                                                                            // 2078
  lightsteelblue: 0xb0c4de,                                                                                            // 2079
  lightyellow: 0xffffe0,                                                                                               // 2080
  lime: 0x00ff00,                                                                                                      // 2081
  limegreen: 0x32cd32,                                                                                                 // 2082
  linen: 0xfaf0e6,                                                                                                     // 2083
  magenta: 0xff00ff,                                                                                                   // 2084
  maroon: 0x800000,                                                                                                    // 2085
  mediumaquamarine: 0x66cdaa,                                                                                          // 2086
  mediumblue: 0x0000cd,                                                                                                // 2087
  mediumorchid: 0xba55d3,                                                                                              // 2088
  mediumpurple: 0x9370db,                                                                                              // 2089
  mediumseagreen: 0x3cb371,                                                                                            // 2090
  mediumslateblue: 0x7b68ee,                                                                                           // 2091
  mediumspringgreen: 0x00fa9a,                                                                                         // 2092
  mediumturquoise: 0x48d1cc,                                                                                           // 2093
  mediumvioletred: 0xc71585,                                                                                           // 2094
  midnightblue: 0x191970,                                                                                              // 2095
  mintcream: 0xf5fffa,                                                                                                 // 2096
  mistyrose: 0xffe4e1,                                                                                                 // 2097
  moccasin: 0xffe4b5,                                                                                                  // 2098
  navajowhite: 0xffdead,                                                                                               // 2099
  navy: 0x000080,                                                                                                      // 2100
  oldlace: 0xfdf5e6,                                                                                                   // 2101
  olive: 0x808000,                                                                                                     // 2102
  olivedrab: 0x6b8e23,                                                                                                 // 2103
  orange: 0xffa500,                                                                                                    // 2104
  orangered: 0xff4500,                                                                                                 // 2105
  orchid: 0xda70d6,                                                                                                    // 2106
  palegoldenrod: 0xeee8aa,                                                                                             // 2107
  palegreen: 0x98fb98,                                                                                                 // 2108
  paleturquoise: 0xafeeee,                                                                                             // 2109
  palevioletred: 0xdb7093,                                                                                             // 2110
  papayawhip: 0xffefd5,                                                                                                // 2111
  peachpuff: 0xffdab9,                                                                                                 // 2112
  peru: 0xcd853f,                                                                                                      // 2113
  pink: 0xffc0cb,                                                                                                      // 2114
  plum: 0xdda0dd,                                                                                                      // 2115
  powderblue: 0xb0e0e6,                                                                                                // 2116
  purple: 0x800080,                                                                                                    // 2117
  rebeccapurple: 0x663399,                                                                                             // 2118
  red: 0xff0000,                                                                                                       // 2119
  rosybrown: 0xbc8f8f,                                                                                                 // 2120
  royalblue: 0x4169e1,                                                                                                 // 2121
  saddlebrown: 0x8b4513,                                                                                               // 2122
  salmon: 0xfa8072,                                                                                                    // 2123
  sandybrown: 0xf4a460,                                                                                                // 2124
  seagreen: 0x2e8b57,                                                                                                  // 2125
  seashell: 0xfff5ee,                                                                                                  // 2126
  sienna: 0xa0522d,                                                                                                    // 2127
  silver: 0xc0c0c0,                                                                                                    // 2128
  skyblue: 0x87ceeb,                                                                                                   // 2129
  slateblue: 0x6a5acd,                                                                                                 // 2130
  slategray: 0x708090,                                                                                                 // 2131
  slategrey: 0x708090,                                                                                                 // 2132
  snow: 0xfffafa,                                                                                                      // 2133
  springgreen: 0x00ff7f,                                                                                               // 2134
  steelblue: 0x4682b4,                                                                                                 // 2135
  tan: 0xd2b48c,                                                                                                       // 2136
  teal: 0x008080,                                                                                                      // 2137
  thistle: 0xd8bfd8,                                                                                                   // 2138
  tomato: 0xff6347,                                                                                                    // 2139
  turquoise: 0x40e0d0,                                                                                                 // 2140
  violet: 0xee82ee,                                                                                                    // 2141
  wheat: 0xf5deb3,                                                                                                     // 2142
  white: 0xffffff,                                                                                                     // 2143
  whitesmoke: 0xf5f5f5,                                                                                                // 2144
  yellow: 0xffff00,                                                                                                    // 2145
  yellowgreen: 0x9acd32                                                                                                // 2146
};                                                                                                                     // 2147
                                                                                                                       // 2148
define(Color, color, {                                                                                                 // 2149
  displayable: function() {                                                                                            // 2150
    return this.rgb().displayable();                                                                                   // 2151
  },                                                                                                                   // 2152
  toString: function() {                                                                                               // 2153
    return this.rgb() + "";                                                                                            // 2154
  }                                                                                                                    // 2155
});                                                                                                                    // 2156
                                                                                                                       // 2157
function color(format) {                                                                                               // 2158
  var m;                                                                                                               // 2159
  format = (format + "").trim().toLowerCase();                                                                         // 2160
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000                                                // 2162
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)                               // 2163
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)                          // 2165
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)                  // 2167
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)          // 2168
      : named.hasOwnProperty(format) ? rgbn(named[format])                                                             // 2169
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)                                                           // 2170
      : null;                                                                                                          // 2171
}                                                                                                                      // 2172
                                                                                                                       // 2173
function rgbn(n) {                                                                                                     // 2174
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);                                                          // 2175
}                                                                                                                      // 2176
                                                                                                                       // 2177
function rgba(r, g, b, a) {                                                                                            // 2178
  if (a <= 0) r = g = b = NaN;                                                                                         // 2179
  return new Rgb(r, g, b, a);                                                                                          // 2180
}                                                                                                                      // 2181
                                                                                                                       // 2182
function rgbConvert(o) {                                                                                               // 2183
  if (!(o instanceof Color)) o = color(o);                                                                             // 2184
  if (!o) return new Rgb;                                                                                              // 2185
  o = o.rgb();                                                                                                         // 2186
  return new Rgb(o.r, o.g, o.b, o.opacity);                                                                            // 2187
}                                                                                                                      // 2188
                                                                                                                       // 2189
function rgb(r, g, b, opacity) {                                                                                       // 2190
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);                     // 2191
}                                                                                                                      // 2192
                                                                                                                       // 2193
function Rgb(r, g, b, opacity) {                                                                                       // 2194
  this.r = +r;                                                                                                         // 2195
  this.g = +g;                                                                                                         // 2196
  this.b = +b;                                                                                                         // 2197
  this.opacity = +opacity;                                                                                             // 2198
}                                                                                                                      // 2199
                                                                                                                       // 2200
define(Rgb, rgb, extend(Color, {                                                                                       // 2201
  brighter: function(k) {                                                                                              // 2202
    k = k == null ? brighter : Math.pow(brighter, k);                                                                  // 2203
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);                                                  // 2204
  },                                                                                                                   // 2205
  darker: function(k) {                                                                                                // 2206
    k = k == null ? darker : Math.pow(darker, k);                                                                      // 2207
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);                                                  // 2208
  },                                                                                                                   // 2209
  rgb: function() {                                                                                                    // 2210
    return this;                                                                                                       // 2211
  },                                                                                                                   // 2212
  displayable: function() {                                                                                            // 2213
    return (0 <= this.r && this.r <= 255)                                                                              // 2214
        && (0 <= this.g && this.g <= 255)                                                                              // 2215
        && (0 <= this.b && this.b <= 255)                                                                              // 2216
        && (0 <= this.opacity && this.opacity <= 1);                                                                   // 2217
  },                                                                                                                   // 2218
  toString: function() {                                                                                               // 2219
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));                                              // 2220
    return (a === 1 ? "rgb(" : "rgba(")                                                                                // 2221
        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "                                                   // 2222
        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "                                                   // 2223
        + Math.max(0, Math.min(255, Math.round(this.b) || 0))                                                          // 2224
        + (a === 1 ? ")" : ", " + a + ")");                                                                            // 2225
  }                                                                                                                    // 2226
}));                                                                                                                   // 2227
                                                                                                                       // 2228
function hsla(h, s, l, a) {                                                                                            // 2229
  if (a <= 0) h = s = l = NaN;                                                                                         // 2230
  else if (l <= 0 || l >= 1) h = s = NaN;                                                                              // 2231
  else if (s <= 0) h = NaN;                                                                                            // 2232
  return new Hsl(h, s, l, a);                                                                                          // 2233
}                                                                                                                      // 2234
                                                                                                                       // 2235
function hslConvert(o) {                                                                                               // 2236
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);                                                      // 2237
  if (!(o instanceof Color)) o = color(o);                                                                             // 2238
  if (!o) return new Hsl;                                                                                              // 2239
  if (o instanceof Hsl) return o;                                                                                      // 2240
  o = o.rgb();                                                                                                         // 2241
  var r = o.r / 255,                                                                                                   // 2242
      g = o.g / 255,                                                                                                   // 2243
      b = o.b / 255,                                                                                                   // 2244
      min = Math.min(r, g, b),                                                                                         // 2245
      max = Math.max(r, g, b),                                                                                         // 2246
      h = NaN,                                                                                                         // 2247
      s = max - min,                                                                                                   // 2248
      l = (max + min) / 2;                                                                                             // 2249
  if (s) {                                                                                                             // 2250
    if (r === max) h = (g - b) / s + (g < b) * 6;                                                                      // 2251
    else if (g === max) h = (b - r) / s + 2;                                                                           // 2252
    else h = (r - g) / s + 4;                                                                                          // 2253
    s /= l < 0.5 ? max + min : 2 - max - min;                                                                          // 2254
    h *= 60;                                                                                                           // 2255
  } else {                                                                                                             // 2256
    s = l > 0 && l < 1 ? 0 : h;                                                                                        // 2257
  }                                                                                                                    // 2258
  return new Hsl(h, s, l, o.opacity);                                                                                  // 2259
}                                                                                                                      // 2260
                                                                                                                       // 2261
function hsl(h, s, l, opacity) {                                                                                       // 2262
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);                     // 2263
}                                                                                                                      // 2264
                                                                                                                       // 2265
function Hsl(h, s, l, opacity) {                                                                                       // 2266
  this.h = +h;                                                                                                         // 2267
  this.s = +s;                                                                                                         // 2268
  this.l = +l;                                                                                                         // 2269
  this.opacity = +opacity;                                                                                             // 2270
}                                                                                                                      // 2271
                                                                                                                       // 2272
define(Hsl, hsl, extend(Color, {                                                                                       // 2273
  brighter: function(k) {                                                                                              // 2274
    k = k == null ? brighter : Math.pow(brighter, k);                                                                  // 2275
    return new Hsl(this.h, this.s, this.l * k, this.opacity);                                                          // 2276
  },                                                                                                                   // 2277
  darker: function(k) {                                                                                                // 2278
    k = k == null ? darker : Math.pow(darker, k);                                                                      // 2279
    return new Hsl(this.h, this.s, this.l * k, this.opacity);                                                          // 2280
  },                                                                                                                   // 2281
  rgb: function() {                                                                                                    // 2282
    var h = this.h % 360 + (this.h < 0) * 360,                                                                         // 2283
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,                                                                    // 2284
        l = this.l,                                                                                                    // 2285
        m2 = l + (l < 0.5 ? l : 1 - l) * s,                                                                            // 2286
        m1 = 2 * l - m2;                                                                                               // 2287
    return new Rgb(                                                                                                    // 2288
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),                                                                   // 2289
      hsl2rgb(h, m1, m2),                                                                                              // 2290
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),                                                                    // 2291
      this.opacity                                                                                                     // 2292
    );                                                                                                                 // 2293
  },                                                                                                                   // 2294
  displayable: function() {                                                                                            // 2295
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))                                                               // 2296
        && (0 <= this.l && this.l <= 1)                                                                                // 2297
        && (0 <= this.opacity && this.opacity <= 1);                                                                   // 2298
  }                                                                                                                    // 2299
}));                                                                                                                   // 2300
                                                                                                                       // 2301
/* From FvD 13.37, CSS Color Module Level 3 */                                                                         // 2302
function hsl2rgb(h, m1, m2) {                                                                                          // 2303
  return (h < 60 ? m1 + (m2 - m1) * h / 60                                                                             // 2304
      : h < 180 ? m2                                                                                                   // 2305
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60                                                                      // 2306
      : m1) * 255;                                                                                                     // 2307
}                                                                                                                      // 2308
                                                                                                                       // 2309
var deg2rad = Math.PI / 180;                                                                                           // 2310
var rad2deg = 180 / Math.PI;                                                                                           // 2311
                                                                                                                       // 2312
var Kn = 18;                                                                                                           // 2313
var Xn = 0.950470;                                                                                                     // 2314
var Yn = 1;                                                                                                            // 2315
var Zn = 1.088830;                                                                                                     // 2316
var t0 = 4 / 29;                                                                                                       // 2317
var t1 = 6 / 29;                                                                                                       // 2318
var t2 = 3 * t1 * t1;                                                                                                  // 2319
var t3 = t1 * t1 * t1;                                                                                                 // 2320
                                                                                                                       // 2321
function labConvert(o) {                                                                                               // 2322
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);                                                      // 2323
  if (o instanceof Hcl) {                                                                                              // 2324
    var h = o.h * deg2rad;                                                                                             // 2325
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);                                              // 2326
  }                                                                                                                    // 2327
  if (!(o instanceof Rgb)) o = rgbConvert(o);                                                                          // 2328
  var b = rgb2xyz(o.r),                                                                                                // 2329
      a = rgb2xyz(o.g),                                                                                                // 2330
      l = rgb2xyz(o.b),                                                                                                // 2331
      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),                                               // 2332
      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),                                               // 2333
      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);                                               // 2334
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);                                               // 2335
}                                                                                                                      // 2336
                                                                                                                       // 2337
function lab(l, a, b, opacity) {                                                                                       // 2338
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);                     // 2339
}                                                                                                                      // 2340
                                                                                                                       // 2341
function Lab(l, a, b, opacity) {                                                                                       // 2342
  this.l = +l;                                                                                                         // 2343
  this.a = +a;                                                                                                         // 2344
  this.b = +b;                                                                                                         // 2345
  this.opacity = +opacity;                                                                                             // 2346
}                                                                                                                      // 2347
                                                                                                                       // 2348
define(Lab, lab, extend(Color, {                                                                                       // 2349
  brighter: function(k) {                                                                                              // 2350
    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);                                   // 2351
  },                                                                                                                   // 2352
  darker: function(k) {                                                                                                // 2353
    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);                                   // 2354
  },                                                                                                                   // 2355
  rgb: function() {                                                                                                    // 2356
    var y = (this.l + 16) / 116,                                                                                       // 2357
        x = isNaN(this.a) ? y : y + this.a / 500,                                                                      // 2358
        z = isNaN(this.b) ? y : y - this.b / 200;                                                                      // 2359
    y = Yn * lab2xyz(y);                                                                                               // 2360
    x = Xn * lab2xyz(x);                                                                                               // 2361
    z = Zn * lab2xyz(z);                                                                                               // 2362
    return new Rgb(                                                                                                    // 2363
      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB                                          // 2364
      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),                                                         // 2365
      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),                                                         // 2366
      this.opacity                                                                                                     // 2367
    );                                                                                                                 // 2368
  }                                                                                                                    // 2369
}));                                                                                                                   // 2370
                                                                                                                       // 2371
function xyz2lab(t) {                                                                                                  // 2372
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;                                                                    // 2373
}                                                                                                                      // 2374
                                                                                                                       // 2375
function lab2xyz(t) {                                                                                                  // 2376
  return t > t1 ? t * t * t : t2 * (t - t0);                                                                           // 2377
}                                                                                                                      // 2378
                                                                                                                       // 2379
function xyz2rgb(x) {                                                                                                  // 2380
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);                                    // 2381
}                                                                                                                      // 2382
                                                                                                                       // 2383
function rgb2xyz(x) {                                                                                                  // 2384
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);                                       // 2385
}                                                                                                                      // 2386
                                                                                                                       // 2387
function hclConvert(o) {                                                                                               // 2388
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);                                                      // 2389
  if (!(o instanceof Lab)) o = labConvert(o);                                                                          // 2390
  var h = Math.atan2(o.b, o.a) * rad2deg;                                                                              // 2391
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);                               // 2392
}                                                                                                                      // 2393
                                                                                                                       // 2394
function hcl(h, c, l, opacity) {                                                                                       // 2395
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);                     // 2396
}                                                                                                                      // 2397
                                                                                                                       // 2398
function Hcl(h, c, l, opacity) {                                                                                       // 2399
  this.h = +h;                                                                                                         // 2400
  this.c = +c;                                                                                                         // 2401
  this.l = +l;                                                                                                         // 2402
  this.opacity = +opacity;                                                                                             // 2403
}                                                                                                                      // 2404
                                                                                                                       // 2405
define(Hcl, hcl, extend(Color, {                                                                                       // 2406
  brighter: function(k) {                                                                                              // 2407
    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);                                   // 2408
  },                                                                                                                   // 2409
  darker: function(k) {                                                                                                // 2410
    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);                                   // 2411
  },                                                                                                                   // 2412
  rgb: function() {                                                                                                    // 2413
    return labConvert(this).rgb();                                                                                     // 2414
  }                                                                                                                    // 2415
}));                                                                                                                   // 2416
                                                                                                                       // 2417
var A = -0.14861;                                                                                                      // 2418
var B = +1.78277;                                                                                                      // 2419
var C = -0.29227;                                                                                                      // 2420
var D = -0.90649;                                                                                                      // 2421
var E = +1.97294;                                                                                                      // 2422
var ED = E * D;                                                                                                        // 2423
var EB = E * B;                                                                                                        // 2424
var BC_DA = B * C - D * A;                                                                                             // 2425
                                                                                                                       // 2426
function cubehelixConvert(o) {                                                                                         // 2427
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);                                          // 2428
  if (!(o instanceof Rgb)) o = rgbConvert(o);                                                                          // 2429
  var r = o.r / 255,                                                                                                   // 2430
      g = o.g / 255,                                                                                                   // 2431
      b = o.b / 255,                                                                                                   // 2432
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),                                                           // 2433
      bl = b - l,                                                                                                      // 2434
      k = (E * (g - l) - C * bl) / D,                                                                                  // 2435
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1                                         // 2436
      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;                                                                 // 2437
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);                                                          // 2438
}                                                                                                                      // 2439
                                                                                                                       // 2440
function cubehelix(h, s, l, opacity) {                                                                                 // 2441
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);         // 2442
}                                                                                                                      // 2443
                                                                                                                       // 2444
function Cubehelix(h, s, l, opacity) {                                                                                 // 2445
  this.h = +h;                                                                                                         // 2446
  this.s = +s;                                                                                                         // 2447
  this.l = +l;                                                                                                         // 2448
  this.opacity = +opacity;                                                                                             // 2449
}                                                                                                                      // 2450
                                                                                                                       // 2451
define(Cubehelix, cubehelix, extend(Color, {                                                                           // 2452
  brighter: function(k) {                                                                                              // 2453
    k = k == null ? brighter : Math.pow(brighter, k);                                                                  // 2454
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);                                                    // 2455
  },                                                                                                                   // 2456
  darker: function(k) {                                                                                                // 2457
    k = k == null ? darker : Math.pow(darker, k);                                                                      // 2458
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);                                                    // 2459
  },                                                                                                                   // 2460
  rgb: function() {                                                                                                    // 2461
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,                                                              // 2462
        l = +this.l,                                                                                                   // 2463
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),                                                                  // 2464
        cosh = Math.cos(h),                                                                                            // 2465
        sinh = Math.sin(h);                                                                                            // 2466
    return new Rgb(                                                                                                    // 2467
      255 * (l + a * (A * cosh + B * sinh)),                                                                           // 2468
      255 * (l + a * (C * cosh + D * sinh)),                                                                           // 2469
      255 * (l + a * (E * cosh)),                                                                                      // 2470
      this.opacity                                                                                                     // 2471
    );                                                                                                                 // 2472
  }                                                                                                                    // 2473
}));                                                                                                                   // 2474
                                                                                                                       // 2475
function basis(t1, v0, v1, v2, v3) {                                                                                   // 2476
  var t2 = t1 * t1, t3 = t2 * t1;                                                                                      // 2477
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0                                                                              // 2478
      + (4 - 6 * t2 + 3 * t3) * v1                                                                                     // 2479
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2                                                                            // 2480
      + t3 * v3) / 6;                                                                                                  // 2481
}                                                                                                                      // 2482
                                                                                                                       // 2483
var basis$1 = function(values) {                                                                                       // 2484
  var n = values.length - 1;                                                                                           // 2485
  return function(t) {                                                                                                 // 2486
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),                                            // 2487
        v1 = values[i],                                                                                                // 2488
        v2 = values[i + 1],                                                                                            // 2489
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,                                                                      // 2490
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;                                                                  // 2491
    return basis((t - i / n) * n, v0, v1, v2, v3);                                                                     // 2492
  };                                                                                                                   // 2493
};                                                                                                                     // 2494
                                                                                                                       // 2495
var basisClosed = function(values) {                                                                                   // 2496
  var n = values.length;                                                                                               // 2497
  return function(t) {                                                                                                 // 2498
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),                                                                  // 2499
        v0 = values[(i + n - 1) % n],                                                                                  // 2500
        v1 = values[i % n],                                                                                            // 2501
        v2 = values[(i + 1) % n],                                                                                      // 2502
        v3 = values[(i + 2) % n];                                                                                      // 2503
    return basis((t - i / n) * n, v0, v1, v2, v3);                                                                     // 2504
  };                                                                                                                   // 2505
};                                                                                                                     // 2506
                                                                                                                       // 2507
var constant$3 = function(x) {                                                                                         // 2508
  return function() {                                                                                                  // 2509
    return x;                                                                                                          // 2510
  };                                                                                                                   // 2511
};                                                                                                                     // 2512
                                                                                                                       // 2513
function linear(a, d) {                                                                                                // 2514
  return function(t) {                                                                                                 // 2515
    return a + t * d;                                                                                                  // 2516
  };                                                                                                                   // 2517
}                                                                                                                      // 2518
                                                                                                                       // 2519
function exponential(a, b, y) {                                                                                        // 2520
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {                                          // 2521
    return Math.pow(a + t * b, y);                                                                                     // 2522
  };                                                                                                                   // 2523
}                                                                                                                      // 2524
                                                                                                                       // 2525
function hue(a, b) {                                                                                                   // 2526
  var d = b - a;                                                                                                       // 2527
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);        // 2528
}                                                                                                                      // 2529
                                                                                                                       // 2530
function gamma(y) {                                                                                                    // 2531
  return (y = +y) === 1 ? nogamma : function(a, b) {                                                                   // 2532
    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);                                                // 2533
  };                                                                                                                   // 2534
}                                                                                                                      // 2535
                                                                                                                       // 2536
function nogamma(a, b) {                                                                                               // 2537
  var d = b - a;                                                                                                       // 2538
  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);                                                              // 2539
}                                                                                                                      // 2540
                                                                                                                       // 2541
var interpolateRgb = ((function rgbGamma(y) {                                                                          // 2542
  var color$$1 = gamma(y);                                                                                             // 2543
                                                                                                                       // 2544
  function rgb$$1(start, end) {                                                                                        // 2545
    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),                                                      // 2546
        g = color$$1(start.g, end.g),                                                                                  // 2547
        b = color$$1(start.b, end.b),                                                                                  // 2548
        opacity = nogamma(start.opacity, end.opacity);                                                                 // 2549
    return function(t) {                                                                                               // 2550
      start.r = r(t);                                                                                                  // 2551
      start.g = g(t);                                                                                                  // 2552
      start.b = b(t);                                                                                                  // 2553
      start.opacity = opacity(t);                                                                                      // 2554
      return start + "";                                                                                               // 2555
    };                                                                                                                 // 2556
  }                                                                                                                    // 2557
                                                                                                                       // 2558
  rgb$$1.gamma = rgbGamma;                                                                                             // 2559
                                                                                                                       // 2560
  return rgb$$1;                                                                                                       // 2561
}))(1);                                                                                                                // 2562
                                                                                                                       // 2563
function rgbSpline(spline) {                                                                                           // 2564
  return function(colors) {                                                                                            // 2565
    var n = colors.length,                                                                                             // 2566
        r = new Array(n),                                                                                              // 2567
        g = new Array(n),                                                                                              // 2568
        b = new Array(n),                                                                                              // 2569
        i, color$$1;                                                                                                   // 2570
    for (i = 0; i < n; ++i) {                                                                                          // 2571
      color$$1 = rgb(colors[i]);                                                                                       // 2572
      r[i] = color$$1.r || 0;                                                                                          // 2573
      g[i] = color$$1.g || 0;                                                                                          // 2574
      b[i] = color$$1.b || 0;                                                                                          // 2575
    }                                                                                                                  // 2576
    r = spline(r);                                                                                                     // 2577
    g = spline(g);                                                                                                     // 2578
    b = spline(b);                                                                                                     // 2579
    color$$1.opacity = 1;                                                                                              // 2580
    return function(t) {                                                                                               // 2581
      color$$1.r = r(t);                                                                                               // 2582
      color$$1.g = g(t);                                                                                               // 2583
      color$$1.b = b(t);                                                                                               // 2584
      return color$$1 + "";                                                                                            // 2585
    };                                                                                                                 // 2586
  };                                                                                                                   // 2587
}                                                                                                                      // 2588
                                                                                                                       // 2589
var rgbBasis = rgbSpline(basis$1);                                                                                     // 2590
var rgbBasisClosed = rgbSpline(basisClosed);                                                                           // 2591
                                                                                                                       // 2592
var array$1 = function(a, b) {                                                                                         // 2593
  var nb = b ? b.length : 0,                                                                                           // 2594
      na = a ? Math.min(nb, a.length) : 0,                                                                             // 2595
      x = new Array(nb),                                                                                               // 2596
      c = new Array(nb),                                                                                               // 2597
      i;                                                                                                               // 2598
                                                                                                                       // 2599
  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);                                                        // 2600
  for (; i < nb; ++i) c[i] = b[i];                                                                                     // 2601
                                                                                                                       // 2602
  return function(t) {                                                                                                 // 2603
    for (i = 0; i < na; ++i) c[i] = x[i](t);                                                                           // 2604
    return c;                                                                                                          // 2605
  };                                                                                                                   // 2606
};                                                                                                                     // 2607
                                                                                                                       // 2608
var date = function(a, b) {                                                                                            // 2609
  var d = new Date;                                                                                                    // 2610
  return a = +a, b -= a, function(t) {                                                                                 // 2611
    return d.setTime(a + b * t), d;                                                                                    // 2612
  };                                                                                                                   // 2613
};                                                                                                                     // 2614
                                                                                                                       // 2615
var reinterpolate = function(a, b) {                                                                                   // 2616
  return a = +a, b -= a, function(t) {                                                                                 // 2617
    return a + b * t;                                                                                                  // 2618
  };                                                                                                                   // 2619
};                                                                                                                     // 2620
                                                                                                                       // 2621
var object = function(a, b) {                                                                                          // 2622
  var i = {},                                                                                                          // 2623
      c = {},                                                                                                          // 2624
      k;                                                                                                               // 2625
                                                                                                                       // 2626
  if (a === null || typeof a !== "object") a = {};                                                                     // 2627
  if (b === null || typeof b !== "object") b = {};                                                                     // 2628
                                                                                                                       // 2629
  for (k in b) {                                                                                                       // 2630
    if (k in a) {                                                                                                      // 2631
      i[k] = interpolateValue(a[k], b[k]);                                                                             // 2632
    } else {                                                                                                           // 2633
      c[k] = b[k];                                                                                                     // 2634
    }                                                                                                                  // 2635
  }                                                                                                                    // 2636
                                                                                                                       // 2637
  return function(t) {                                                                                                 // 2638
    for (k in i) c[k] = i[k](t);                                                                                       // 2639
    return c;                                                                                                          // 2640
  };                                                                                                                   // 2641
};                                                                                                                     // 2642
                                                                                                                       // 2643
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;                                                               // 2644
var reB = new RegExp(reA.source, "g");                                                                                 // 2645
                                                                                                                       // 2646
function zero(b) {                                                                                                     // 2647
  return function() {                                                                                                  // 2648
    return b;                                                                                                          // 2649
  };                                                                                                                   // 2650
}                                                                                                                      // 2651
                                                                                                                       // 2652
function one(b) {                                                                                                      // 2653
  return function(t) {                                                                                                 // 2654
    return b(t) + "";                                                                                                  // 2655
  };                                                                                                                   // 2656
}                                                                                                                      // 2657
                                                                                                                       // 2658
var interpolateString = function(a, b) {                                                                               // 2659
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b                                       // 2660
      am, // current match in a                                                                                        // 2661
      bm, // current match in b                                                                                        // 2662
      bs, // string preceding current number in b, if any                                                              // 2663
      i = -1, // index in s                                                                                            // 2664
      s = [], // string constants and placeholders                                                                     // 2665
      q = []; // number interpolators                                                                                  // 2666
                                                                                                                       // 2667
  // Coerce inputs to strings.                                                                                         // 2668
  a = a + "", b = b + "";                                                                                              // 2669
                                                                                                                       // 2670
  // Interpolate pairs of numbers in a & b.                                                                            // 2671
  while ((am = reA.exec(a))                                                                                            // 2672
      && (bm = reB.exec(b))) {                                                                                         // 2673
    if ((bs = bm.index) > bi) { // a string precedes the next number in b                                              // 2674
      bs = b.slice(bi, bs);                                                                                            // 2675
      if (s[i]) s[i] += bs; // coalesce with previous string                                                           // 2676
      else s[++i] = bs;                                                                                                // 2677
    }                                                                                                                  // 2678
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match                                                     // 2679
      if (s[i]) s[i] += bm; // coalesce with previous string                                                           // 2680
      else s[++i] = bm;                                                                                                // 2681
    } else { // interpolate non-matching numbers                                                                       // 2682
      s[++i] = null;                                                                                                   // 2683
      q.push({i: i, x: reinterpolate(am, bm)});                                                                        // 2684
    }                                                                                                                  // 2685
    bi = reB.lastIndex;                                                                                                // 2686
  }                                                                                                                    // 2687
                                                                                                                       // 2688
  // Add remains of b.                                                                                                 // 2689
  if (bi < b.length) {                                                                                                 // 2690
    bs = b.slice(bi);                                                                                                  // 2691
    if (s[i]) s[i] += bs; // coalesce with previous string                                                             // 2692
    else s[++i] = bs;                                                                                                  // 2693
  }                                                                                                                    // 2694
                                                                                                                       // 2695
  // Special optimization for only a single match.                                                                     // 2696
  // Otherwise, interpolate each of the numbers and rejoin the string.                                                 // 2697
  return s.length < 2 ? (q[0]                                                                                          // 2698
      ? one(q[0].x)                                                                                                    // 2699
      : zero(b))                                                                                                       // 2700
      : (b = q.length, function(t) {                                                                                   // 2701
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);                                                     // 2702
          return s.join("");                                                                                           // 2703
        });                                                                                                            // 2704
};                                                                                                                     // 2705
                                                                                                                       // 2706
var interpolateValue = function(a, b) {                                                                                // 2707
  var t = typeof b, c;                                                                                                 // 2708
  return b == null || t === "boolean" ? constant$3(b)                                                                  // 2709
      : (t === "number" ? reinterpolate                                                                                // 2710
      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)                                // 2711
      : b instanceof color ? interpolateRgb                                                                            // 2712
      : b instanceof Date ? date                                                                                       // 2713
      : Array.isArray(b) ? array$1                                                                                     // 2714
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object                       // 2715
      : reinterpolate)(a, b);                                                                                          // 2716
};                                                                                                                     // 2717
                                                                                                                       // 2718
var interpolateRound = function(a, b) {                                                                                // 2719
  return a = +a, b -= a, function(t) {                                                                                 // 2720
    return Math.round(a + b * t);                                                                                      // 2721
  };                                                                                                                   // 2722
};                                                                                                                     // 2723
                                                                                                                       // 2724
var degrees = 180 / Math.PI;                                                                                           // 2725
                                                                                                                       // 2726
var identity$2 = {                                                                                                     // 2727
  translateX: 0,                                                                                                       // 2728
  translateY: 0,                                                                                                       // 2729
  rotate: 0,                                                                                                           // 2730
  skewX: 0,                                                                                                            // 2731
  scaleX: 1,                                                                                                           // 2732
  scaleY: 1                                                                                                            // 2733
};                                                                                                                     // 2734
                                                                                                                       // 2735
var decompose = function(a, b, c, d, e, f) {                                                                           // 2736
  var scaleX, scaleY, skewX;                                                                                           // 2737
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;                                                     // 2738
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;                                                           // 2739
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;                                    // 2740
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;                                                 // 2741
  return {                                                                                                             // 2742
    translateX: e,                                                                                                     // 2743
    translateY: f,                                                                                                     // 2744
    rotate: Math.atan2(b, a) * degrees,                                                                                // 2745
    skewX: Math.atan(skewX) * degrees,                                                                                 // 2746
    scaleX: scaleX,                                                                                                    // 2747
    scaleY: scaleY                                                                                                     // 2748
  };                                                                                                                   // 2749
};                                                                                                                     // 2750
                                                                                                                       // 2751
var cssNode;                                                                                                           // 2752
var cssRoot;                                                                                                           // 2753
var cssView;                                                                                                           // 2754
var svgNode;                                                                                                           // 2755
                                                                                                                       // 2756
function parseCss(value) {                                                                                             // 2757
  if (value === "none") return identity$2;                                                                             // 2758
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;                                                                                     // 2760
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");                  // 2761
  cssRoot.removeChild(cssNode);                                                                                        // 2762
  value = value.slice(7, -1).split(",");                                                                               // 2763
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);                                  // 2764
}                                                                                                                      // 2765
                                                                                                                       // 2766
function parseSvg(value) {                                                                                             // 2767
  if (value == null) return identity$2;                                                                                // 2768
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");                                 // 2769
  svgNode.setAttribute("transform", value);                                                                            // 2770
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;                                           // 2771
  value = value.matrix;                                                                                                // 2772
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);                                              // 2773
}                                                                                                                      // 2774
                                                                                                                       // 2775
function interpolateTransform(parse, pxComma, pxParen, degParen) {                                                     // 2776
                                                                                                                       // 2777
  function pop(s) {                                                                                                    // 2778
    return s.length ? s.pop() + " " : "";                                                                              // 2779
  }                                                                                                                    // 2780
                                                                                                                       // 2781
  function translate(xa, ya, xb, yb, s, q) {                                                                           // 2782
    if (xa !== xb || ya !== yb) {                                                                                      // 2783
      var i = s.push("translate(", null, pxComma, null, pxParen);                                                      // 2784
      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});                              // 2785
    } else if (xb || yb) {                                                                                             // 2786
      s.push("translate(" + xb + pxComma + yb + pxParen);                                                              // 2787
    }                                                                                                                  // 2788
  }                                                                                                                    // 2789
                                                                                                                       // 2790
  function rotate(a, b, s, q) {                                                                                        // 2791
    if (a !== b) {                                                                                                     // 2792
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path                                      // 2793
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});                             // 2794
    } else if (b) {                                                                                                    // 2795
      s.push(pop(s) + "rotate(" + b + degParen);                                                                       // 2796
    }                                                                                                                  // 2797
  }                                                                                                                    // 2798
                                                                                                                       // 2799
  function skewX(a, b, s, q) {                                                                                         // 2800
    if (a !== b) {                                                                                                     // 2801
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});                              // 2802
    } else if (b) {                                                                                                    // 2803
      s.push(pop(s) + "skewX(" + b + degParen);                                                                        // 2804
    }                                                                                                                  // 2805
  }                                                                                                                    // 2806
                                                                                                                       // 2807
  function scale(xa, ya, xb, yb, s, q) {                                                                               // 2808
    if (xa !== xb || ya !== yb) {                                                                                      // 2809
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");                                                         // 2810
      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});                              // 2811
    } else if (xb !== 1 || yb !== 1) {                                                                                 // 2812
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");                                                                 // 2813
    }                                                                                                                  // 2814
  }                                                                                                                    // 2815
                                                                                                                       // 2816
  return function(a, b) {                                                                                              // 2817
    var s = [], // string constants and placeholders                                                                   // 2818
        q = []; // number interpolators                                                                                // 2819
    a = parse(a), b = parse(b);                                                                                        // 2820
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);                                           // 2821
    rotate(a.rotate, b.rotate, s, q);                                                                                  // 2822
    skewX(a.skewX, b.skewX, s, q);                                                                                     // 2823
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);                                                               // 2824
    a = b = null; // gc                                                                                                // 2825
    return function(t) {                                                                                               // 2826
      var i = -1, n = q.length, o;                                                                                     // 2827
      while (++i < n) s[(o = q[i]).i] = o.x(t);                                                                        // 2828
      return s.join("");                                                                                               // 2829
    };                                                                                                                 // 2830
  };                                                                                                                   // 2831
}                                                                                                                      // 2832
                                                                                                                       // 2833
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");                                   // 2834
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");                                          // 2835
                                                                                                                       // 2836
var rho = Math.SQRT2;                                                                                                  // 2837
var rho2 = 2;                                                                                                          // 2838
var rho4 = 4;                                                                                                          // 2839
var epsilon2 = 1e-12;                                                                                                  // 2840
                                                                                                                       // 2841
function cosh(x) {                                                                                                     // 2842
  return ((x = Math.exp(x)) + 1 / x) / 2;                                                                              // 2843
}                                                                                                                      // 2844
                                                                                                                       // 2845
function sinh(x) {                                                                                                     // 2846
  return ((x = Math.exp(x)) - 1 / x) / 2;                                                                              // 2847
}                                                                                                                      // 2848
                                                                                                                       // 2849
function tanh(x) {                                                                                                     // 2850
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);                                                                        // 2851
}                                                                                                                      // 2852
                                                                                                                       // 2853
// p0 = [ux0, uy0, w0]                                                                                                 // 2854
// p1 = [ux1, uy1, w1]                                                                                                 // 2855
var interpolateZoom = function(p0, p1) {                                                                               // 2856
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],                                                                            // 2857
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],                                                                            // 2858
      dx = ux1 - ux0,                                                                                                  // 2859
      dy = uy1 - uy0,                                                                                                  // 2860
      d2 = dx * dx + dy * dy,                                                                                          // 2861
      i,                                                                                                               // 2862
      S;                                                                                                               // 2863
                                                                                                                       // 2864
  // Special case for u0 ≅ u1.                                                                                         // 2865
  if (d2 < epsilon2) {                                                                                                 // 2866
    S = Math.log(w1 / w0) / rho;                                                                                       // 2867
    i = function(t) {                                                                                                  // 2868
      return [                                                                                                         // 2869
        ux0 + t * dx,                                                                                                  // 2870
        uy0 + t * dy,                                                                                                  // 2871
        w0 * Math.exp(rho * t * S)                                                                                     // 2872
      ];                                                                                                               // 2873
    };                                                                                                                 // 2874
  }                                                                                                                    // 2875
                                                                                                                       // 2876
  // General case.                                                                                                     // 2877
  else {                                                                                                               // 2878
    var d1 = Math.sqrt(d2),                                                                                            // 2879
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),                                                   // 2880
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),                                                   // 2881
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),                                                                    // 2882
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);                                                                    // 2883
    S = (r1 - r0) / rho;                                                                                               // 2884
    i = function(t) {                                                                                                  // 2885
      var s = t * S,                                                                                                   // 2886
          coshr0 = cosh(r0),                                                                                           // 2887
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));                                             // 2888
      return [                                                                                                         // 2889
        ux0 + u * dx,                                                                                                  // 2890
        uy0 + u * dy,                                                                                                  // 2891
        w0 * coshr0 / cosh(rho * s + r0)                                                                               // 2892
      ];                                                                                                               // 2893
    };                                                                                                                 // 2894
  }                                                                                                                    // 2895
                                                                                                                       // 2896
  i.duration = S * 1000;                                                                                               // 2897
                                                                                                                       // 2898
  return i;                                                                                                            // 2899
};                                                                                                                     // 2900
                                                                                                                       // 2901
function hsl$1(hue$$1) {                                                                                               // 2902
  return function(start, end) {                                                                                        // 2903
    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),                                                        // 2904
        s = nogamma(start.s, end.s),                                                                                   // 2905
        l = nogamma(start.l, end.l),                                                                                   // 2906
        opacity = nogamma(start.opacity, end.opacity);                                                                 // 2907
    return function(t) {                                                                                               // 2908
      start.h = h(t);                                                                                                  // 2909
      start.s = s(t);                                                                                                  // 2910
      start.l = l(t);                                                                                                  // 2911
      start.opacity = opacity(t);                                                                                      // 2912
      return start + "";                                                                                               // 2913
    };                                                                                                                 // 2914
  }                                                                                                                    // 2915
}                                                                                                                      // 2916
                                                                                                                       // 2917
var hsl$2 = hsl$1(hue);                                                                                                // 2918
var hslLong = hsl$1(nogamma);                                                                                          // 2919
                                                                                                                       // 2920
function lab$1(start, end) {                                                                                           // 2921
  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),                                                         // 2922
      a = nogamma(start.a, end.a),                                                                                     // 2923
      b = nogamma(start.b, end.b),                                                                                     // 2924
      opacity = nogamma(start.opacity, end.opacity);                                                                   // 2925
  return function(t) {                                                                                                 // 2926
    start.l = l(t);                                                                                                    // 2927
    start.a = a(t);                                                                                                    // 2928
    start.b = b(t);                                                                                                    // 2929
    start.opacity = opacity(t);                                                                                        // 2930
    return start + "";                                                                                                 // 2931
  };                                                                                                                   // 2932
}                                                                                                                      // 2933
                                                                                                                       // 2934
function hcl$1(hue$$1) {                                                                                               // 2935
  return function(start, end) {                                                                                        // 2936
    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),                                                        // 2937
        c = nogamma(start.c, end.c),                                                                                   // 2938
        l = nogamma(start.l, end.l),                                                                                   // 2939
        opacity = nogamma(start.opacity, end.opacity);                                                                 // 2940
    return function(t) {                                                                                               // 2941
      start.h = h(t);                                                                                                  // 2942
      start.c = c(t);                                                                                                  // 2943
      start.l = l(t);                                                                                                  // 2944
      start.opacity = opacity(t);                                                                                      // 2945
      return start + "";                                                                                               // 2946
    };                                                                                                                 // 2947
  }                                                                                                                    // 2948
}                                                                                                                      // 2949
                                                                                                                       // 2950
var hcl$2 = hcl$1(hue);                                                                                                // 2951
var hclLong = hcl$1(nogamma);                                                                                          // 2952
                                                                                                                       // 2953
function cubehelix$1(hue$$1) {                                                                                         // 2954
  return (function cubehelixGamma(y) {                                                                                 // 2955
    y = +y;                                                                                                            // 2956
                                                                                                                       // 2957
    function cubehelix$$1(start, end) {                                                                                // 2958
      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),                                          // 2959
          s = nogamma(start.s, end.s),                                                                                 // 2960
          l = nogamma(start.l, end.l),                                                                                 // 2961
          opacity = nogamma(start.opacity, end.opacity);                                                               // 2962
      return function(t) {                                                                                             // 2963
        start.h = h(t);                                                                                                // 2964
        start.s = s(t);                                                                                                // 2965
        start.l = l(Math.pow(t, y));                                                                                   // 2966
        start.opacity = opacity(t);                                                                                    // 2967
        return start + "";                                                                                             // 2968
      };                                                                                                               // 2969
    }                                                                                                                  // 2970
                                                                                                                       // 2971
    cubehelix$$1.gamma = cubehelixGamma;                                                                               // 2972
                                                                                                                       // 2973
    return cubehelix$$1;                                                                                               // 2974
  })(1);                                                                                                               // 2975
}                                                                                                                      // 2976
                                                                                                                       // 2977
var cubehelix$2 = cubehelix$1(hue);                                                                                    // 2978
var cubehelixLong = cubehelix$1(nogamma);                                                                              // 2979
                                                                                                                       // 2980
var quantize = function(interpolator, n) {                                                                             // 2981
  var samples = new Array(n);                                                                                          // 2982
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));                                                  // 2983
  return samples;                                                                                                      // 2984
};                                                                                                                     // 2985
                                                                                                                       // 2986
var frame = 0;                                                                                                         // 2987
var timeout = 0;                                                                                                       // 2988
var interval = 0;                                                                                                      // 2989
var pokeDelay = 1000;                                                                                                  // 2990
var taskHead;                                                                                                          // 2991
var taskTail;                                                                                                          // 2992
var clockLast = 0;                                                                                                     // 2993
var clockNow = 0;                                                                                                      // 2994
var clockSkew = 0;                                                                                                     // 2995
var clock = typeof performance === "object" && performance.now ? performance : Date;                                   // 2996
var setFrame = typeof requestAnimationFrame === "function" ? requestAnimationFrame : function(f) { setTimeout(f, 17); };
                                                                                                                       // 2998
function now() {                                                                                                       // 2999
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);                                         // 3000
}                                                                                                                      // 3001
                                                                                                                       // 3002
function clearNow() {                                                                                                  // 3003
  clockNow = 0;                                                                                                        // 3004
}                                                                                                                      // 3005
                                                                                                                       // 3006
function Timer() {                                                                                                     // 3007
  this._call =                                                                                                         // 3008
  this._time =                                                                                                         // 3009
  this._next = null;                                                                                                   // 3010
}                                                                                                                      // 3011
                                                                                                                       // 3012
Timer.prototype = timer.prototype = {                                                                                  // 3013
  constructor: Timer,                                                                                                  // 3014
  restart: function(callback, delay, time) {                                                                           // 3015
    if (typeof callback !== "function") throw new TypeError("callback is not a function");                             // 3016
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);                                              // 3017
    if (!this._next && taskTail !== this) {                                                                            // 3018
      if (taskTail) taskTail._next = this;                                                                             // 3019
      else taskHead = this;                                                                                            // 3020
      taskTail = this;                                                                                                 // 3021
    }                                                                                                                  // 3022
    this._call = callback;                                                                                             // 3023
    this._time = time;                                                                                                 // 3024
    sleep();                                                                                                           // 3025
  },                                                                                                                   // 3026
  stop: function() {                                                                                                   // 3027
    if (this._call) {                                                                                                  // 3028
      this._call = null;                                                                                               // 3029
      this._time = Infinity;                                                                                           // 3030
      sleep();                                                                                                         // 3031
    }                                                                                                                  // 3032
  }                                                                                                                    // 3033
};                                                                                                                     // 3034
                                                                                                                       // 3035
function timer(callback, delay, time) {                                                                                // 3036
  var t = new Timer;                                                                                                   // 3037
  t.restart(callback, delay, time);                                                                                    // 3038
  return t;                                                                                                            // 3039
}                                                                                                                      // 3040
                                                                                                                       // 3041
function timerFlush() {                                                                                                // 3042
  now(); // Get the current time, if not already set.                                                                  // 3043
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.                                                       // 3044
  var t = taskHead, e;                                                                                                 // 3045
  while (t) {                                                                                                          // 3046
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);                                                          // 3047
    t = t._next;                                                                                                       // 3048
  }                                                                                                                    // 3049
  --frame;                                                                                                             // 3050
}                                                                                                                      // 3051
                                                                                                                       // 3052
function wake() {                                                                                                      // 3053
  clockNow = (clockLast = clock.now()) + clockSkew;                                                                    // 3054
  frame = timeout = 0;                                                                                                 // 3055
  try {                                                                                                                // 3056
    timerFlush();                                                                                                      // 3057
  } finally {                                                                                                          // 3058
    frame = 0;                                                                                                         // 3059
    nap();                                                                                                             // 3060
    clockNow = 0;                                                                                                      // 3061
  }                                                                                                                    // 3062
}                                                                                                                      // 3063
                                                                                                                       // 3064
function poke() {                                                                                                      // 3065
  var now = clock.now(), delay = now - clockLast;                                                                      // 3066
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;                                                          // 3067
}                                                                                                                      // 3068
                                                                                                                       // 3069
function nap() {                                                                                                       // 3070
  var t0, t1 = taskHead, t2, time = Infinity;                                                                          // 3071
  while (t1) {                                                                                                         // 3072
    if (t1._call) {                                                                                                    // 3073
      if (time > t1._time) time = t1._time;                                                                            // 3074
      t0 = t1, t1 = t1._next;                                                                                          // 3075
    } else {                                                                                                           // 3076
      t2 = t1._next, t1._next = null;                                                                                  // 3077
      t1 = t0 ? t0._next = t2 : taskHead = t2;                                                                         // 3078
    }                                                                                                                  // 3079
  }                                                                                                                    // 3080
  taskTail = t0;                                                                                                       // 3081
  sleep(time);                                                                                                         // 3082
}                                                                                                                      // 3083
                                                                                                                       // 3084
function sleep(time) {                                                                                                 // 3085
  if (frame) return; // Soonest alarm already set, or will be.                                                         // 3086
  if (timeout) timeout = clearTimeout(timeout);                                                                        // 3087
  var delay = time - clockNow;                                                                                         // 3088
  if (delay > 24) {                                                                                                    // 3089
    if (time < Infinity) timeout = setTimeout(wake, delay);                                                            // 3090
    if (interval) interval = clearInterval(interval);                                                                  // 3091
  } else {                                                                                                             // 3092
    if (!interval) clockLast = clockNow, interval = setInterval(poke, pokeDelay);                                      // 3093
    frame = 1, setFrame(wake);                                                                                         // 3094
  }                                                                                                                    // 3095
}                                                                                                                      // 3096
                                                                                                                       // 3097
var timeout$1 = function(callback, delay, time) {                                                                      // 3098
  var t = new Timer;                                                                                                   // 3099
  delay = delay == null ? 0 : +delay;                                                                                  // 3100
  t.restart(function(elapsed) {                                                                                        // 3101
    t.stop();                                                                                                          // 3102
    callback(elapsed + delay);                                                                                         // 3103
  }, delay, time);                                                                                                     // 3104
  return t;                                                                                                            // 3105
};                                                                                                                     // 3106
                                                                                                                       // 3107
var interval$1 = function(callback, delay, time) {                                                                     // 3108
  var t = new Timer, total = delay;                                                                                    // 3109
  if (delay == null) return t.restart(callback, delay, time), t;                                                       // 3110
  delay = +delay, time = time == null ? now() : +time;                                                                 // 3111
  t.restart(function tick(elapsed) {                                                                                   // 3112
    elapsed += total;                                                                                                  // 3113
    t.restart(tick, total += delay, time);                                                                             // 3114
    callback(elapsed);                                                                                                 // 3115
  }, delay, time);                                                                                                     // 3116
  return t;                                                                                                            // 3117
};                                                                                                                     // 3118
                                                                                                                       // 3119
var emptyOn = dispatch("start", "end", "interrupt");                                                                   // 3120
var emptyTween = [];                                                                                                   // 3121
                                                                                                                       // 3122
var CREATED = 0;                                                                                                       // 3123
var SCHEDULED = 1;                                                                                                     // 3124
var STARTING = 2;                                                                                                      // 3125
var STARTED = 3;                                                                                                       // 3126
var RUNNING = 4;                                                                                                       // 3127
var ENDING = 5;                                                                                                        // 3128
var ENDED = 6;                                                                                                         // 3129
                                                                                                                       // 3130
var schedule = function(node, name, id, index, group, timing) {                                                        // 3131
  var schedules = node.__transition;                                                                                   // 3132
  if (!schedules) node.__transition = {};                                                                              // 3133
  else if (id in schedules) return;                                                                                    // 3134
  create(node, id, {                                                                                                   // 3135
    name: name,                                                                                                        // 3136
    index: index, // For context during callback.                                                                      // 3137
    group: group, // For context during callback.                                                                      // 3138
    on: emptyOn,                                                                                                       // 3139
    tween: emptyTween,                                                                                                 // 3140
    time: timing.time,                                                                                                 // 3141
    delay: timing.delay,                                                                                               // 3142
    duration: timing.duration,                                                                                         // 3143
    ease: timing.ease,                                                                                                 // 3144
    timer: null,                                                                                                       // 3145
    state: CREATED                                                                                                     // 3146
  });                                                                                                                  // 3147
};                                                                                                                     // 3148
                                                                                                                       // 3149
function init(node, id) {                                                                                              // 3150
  var schedule = node.__transition;                                                                                    // 3151
  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");                // 3152
  return schedule;                                                                                                     // 3153
}                                                                                                                      // 3154
                                                                                                                       // 3155
function set$1(node, id) {                                                                                             // 3156
  var schedule = node.__transition;                                                                                    // 3157
  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");               // 3158
  return schedule;                                                                                                     // 3159
}                                                                                                                      // 3160
                                                                                                                       // 3161
function get$1(node, id) {                                                                                             // 3162
  var schedule = node.__transition;                                                                                    // 3163
  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");                                            // 3164
  return schedule;                                                                                                     // 3165
}                                                                                                                      // 3166
                                                                                                                       // 3167
function create(node, id, self) {                                                                                      // 3168
  var schedules = node.__transition,                                                                                   // 3169
      tween;                                                                                                           // 3170
                                                                                                                       // 3171
  // Initialize the self timer when the transition is created.                                                         // 3172
  // Note the actual delay is not known until the first callback!                                                      // 3173
  schedules[id] = self;                                                                                                // 3174
  self.timer = timer(schedule, 0, self.time);                                                                          // 3175
                                                                                                                       // 3176
  function schedule(elapsed) {                                                                                         // 3177
    self.state = SCHEDULED;                                                                                            // 3178
    self.timer.restart(start, self.delay, self.time);                                                                  // 3179
                                                                                                                       // 3180
    // If the elapsed delay is less than our first sleep, start immediately.                                           // 3181
    if (self.delay <= elapsed) start(elapsed - self.delay);                                                            // 3182
  }                                                                                                                    // 3183
                                                                                                                       // 3184
  function start(elapsed) {                                                                                            // 3185
    var i, j, n, o;                                                                                                    // 3186
                                                                                                                       // 3187
    // If the state is not SCHEDULED, then we previously errored on start.                                             // 3188
    if (self.state !== SCHEDULED) return stop();                                                                       // 3189
                                                                                                                       // 3190
    for (i in schedules) {                                                                                             // 3191
      o = schedules[i];                                                                                                // 3192
      if (o.name !== self.name) continue;                                                                              // 3193
                                                                                                                       // 3194
      // While this element already has a starting transition during this frame,                                       // 3195
      // defer starting an interrupting transition until that transition has a                                         // 3196
      // chance to tick (and possibly end); see d3/d3-transition#54!                                                   // 3197
      if (o.state === STARTED) return timeout$1(start);                                                                // 3198
                                                                                                                       // 3199
      // Interrupt the active transition, if any.                                                                      // 3200
      // Dispatch the interrupt event.                                                                                 // 3201
      if (o.state === RUNNING) {                                                                                       // 3202
        o.state = ENDED;                                                                                               // 3203
        o.timer.stop();                                                                                                // 3204
        o.on.call("interrupt", node, node.__data__, o.index, o.group);                                                 // 3205
        delete schedules[i];                                                                                           // 3206
      }                                                                                                                // 3207
                                                                                                                       // 3208
      // Cancel any pre-empted transitions. No interrupt event is dispatched                                           // 3209
      // because the cancelled transitions never started. Note that this also                                          // 3210
      // removes this transition from the pending list!                                                                // 3211
      else if (+i < id) {                                                                                              // 3212
        o.state = ENDED;                                                                                               // 3213
        o.timer.stop();                                                                                                // 3214
        delete schedules[i];                                                                                           // 3215
      }                                                                                                                // 3216
    }                                                                                                                  // 3217
                                                                                                                       // 3218
    // Defer the first tick to end of the current frame; see d3/d3#1576.                                               // 3219
    // Note the transition may be canceled after start and before the first tick!                                      // 3220
    // Note this must be scheduled before the start event; see d3/d3-transition#16!                                    // 3221
    // Assuming this is successful, subsequent callbacks go straight to tick.                                          // 3222
    timeout$1(function() {                                                                                             // 3223
      if (self.state === STARTED) {                                                                                    // 3224
        self.state = RUNNING;                                                                                          // 3225
        self.timer.restart(tick, self.delay, self.time);                                                               // 3226
        tick(elapsed);                                                                                                 // 3227
      }                                                                                                                // 3228
    });                                                                                                                // 3229
                                                                                                                       // 3230
    // Dispatch the start event.                                                                                       // 3231
    // Note this must be done before the tween are initialized.                                                        // 3232
    self.state = STARTING;                                                                                             // 3233
    self.on.call("start", node, node.__data__, self.index, self.group);                                                // 3234
    if (self.state !== STARTING) return; // interrupted                                                                // 3235
    self.state = STARTED;                                                                                              // 3236
                                                                                                                       // 3237
    // Initialize the tween, deleting null tween.                                                                      // 3238
    tween = new Array(n = self.tween.length);                                                                          // 3239
    for (i = 0, j = -1; i < n; ++i) {                                                                                  // 3240
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {                                 // 3241
        tween[++j] = o;                                                                                                // 3242
      }                                                                                                                // 3243
    }                                                                                                                  // 3244
    tween.length = j + 1;                                                                                              // 3245
  }                                                                                                                    // 3246
                                                                                                                       // 3247
  function tick(elapsed) {                                                                                             // 3248
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,                                                                                                        // 3250
        n = tween.length;                                                                                              // 3251
                                                                                                                       // 3252
    while (++i < n) {                                                                                                  // 3253
      tween[i].call(null, t);                                                                                          // 3254
    }                                                                                                                  // 3255
                                                                                                                       // 3256
    // Dispatch the end event.                                                                                         // 3257
    if (self.state === ENDING) {                                                                                       // 3258
      self.on.call("end", node, node.__data__, self.index, self.group);                                                // 3259
      stop();                                                                                                          // 3260
    }                                                                                                                  // 3261
  }                                                                                                                    // 3262
                                                                                                                       // 3263
  function stop() {                                                                                                    // 3264
    self.state = ENDED;                                                                                                // 3265
    self.timer.stop();                                                                                                 // 3266
    delete schedules[id];                                                                                              // 3267
    for (var i in schedules) return; // eslint-disable-line no-unused-vars                                             // 3268
    delete node.__transition;                                                                                          // 3269
  }                                                                                                                    // 3270
}                                                                                                                      // 3271
                                                                                                                       // 3272
var interrupt = function(node, name) {                                                                                 // 3273
  var schedules = node.__transition,                                                                                   // 3274
      schedule,                                                                                                        // 3275
      active,                                                                                                          // 3276
      empty = true,                                                                                                    // 3277
      i;                                                                                                               // 3278
                                                                                                                       // 3279
  if (!schedules) return;                                                                                              // 3280
                                                                                                                       // 3281
  name = name == null ? null : name + "";                                                                              // 3282
                                                                                                                       // 3283
  for (i in schedules) {                                                                                               // 3284
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }                                          // 3285
    active = schedule.state > STARTING && schedule.state < ENDING;                                                     // 3286
    schedule.state = ENDED;                                                                                            // 3287
    schedule.timer.stop();                                                                                             // 3288
    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);                    // 3289
    delete schedules[i];                                                                                               // 3290
  }                                                                                                                    // 3291
                                                                                                                       // 3292
  if (empty) delete node.__transition;                                                                                 // 3293
};                                                                                                                     // 3294
                                                                                                                       // 3295
var selection_interrupt = function(name) {                                                                             // 3296
  return this.each(function() {                                                                                        // 3297
    interrupt(this, name);                                                                                             // 3298
  });                                                                                                                  // 3299
};                                                                                                                     // 3300
                                                                                                                       // 3301
function tweenRemove(id, name) {                                                                                       // 3302
  var tween0, tween1;                                                                                                  // 3303
  return function() {                                                                                                  // 3304
    var schedule = set$1(this, id),                                                                                    // 3305
        tween = schedule.tween;                                                                                        // 3306
                                                                                                                       // 3307
    // If this node shared tween with the previous node,                                                               // 3308
    // just assign the updated shared tween and we’re done!                                                            // 3309
    // Otherwise, copy-on-write.                                                                                       // 3310
    if (tween !== tween0) {                                                                                            // 3311
      tween1 = tween0 = tween;                                                                                         // 3312
      for (var i = 0, n = tween1.length; i < n; ++i) {                                                                 // 3313
        if (tween1[i].name === name) {                                                                                 // 3314
          tween1 = tween1.slice();                                                                                     // 3315
          tween1.splice(i, 1);                                                                                         // 3316
          break;                                                                                                       // 3317
        }                                                                                                              // 3318
      }                                                                                                                // 3319
    }                                                                                                                  // 3320
                                                                                                                       // 3321
    schedule.tween = tween1;                                                                                           // 3322
  };                                                                                                                   // 3323
}                                                                                                                      // 3324
                                                                                                                       // 3325
function tweenFunction(id, name, value) {                                                                              // 3326
  var tween0, tween1;                                                                                                  // 3327
  if (typeof value !== "function") throw new Error;                                                                    // 3328
  return function() {                                                                                                  // 3329
    var schedule = set$1(this, id),                                                                                    // 3330
        tween = schedule.tween;                                                                                        // 3331
                                                                                                                       // 3332
    // If this node shared tween with the previous node,                                                               // 3333
    // just assign the updated shared tween and we’re done!                                                            // 3334
    // Otherwise, copy-on-write.                                                                                       // 3335
    if (tween !== tween0) {                                                                                            // 3336
      tween1 = (tween0 = tween).slice();                                                                               // 3337
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {                                 // 3338
        if (tween1[i].name === name) {                                                                                 // 3339
          tween1[i] = t;                                                                                               // 3340
          break;                                                                                                       // 3341
        }                                                                                                              // 3342
      }                                                                                                                // 3343
      if (i === n) tween1.push(t);                                                                                     // 3344
    }                                                                                                                  // 3345
                                                                                                                       // 3346
    schedule.tween = tween1;                                                                                           // 3347
  };                                                                                                                   // 3348
}                                                                                                                      // 3349
                                                                                                                       // 3350
var transition_tween = function(name, value) {                                                                         // 3351
  var id = this._id;                                                                                                   // 3352
                                                                                                                       // 3353
  name += "";                                                                                                          // 3354
                                                                                                                       // 3355
  if (arguments.length < 2) {                                                                                          // 3356
    var tween = get$1(this.node(), id).tween;                                                                          // 3357
    for (var i = 0, n = tween.length, t; i < n; ++i) {                                                                 // 3358
      if ((t = tween[i]).name === name) {                                                                              // 3359
        return t.value;                                                                                                // 3360
      }                                                                                                                // 3361
    }                                                                                                                  // 3362
    return null;                                                                                                       // 3363
  }                                                                                                                    // 3364
                                                                                                                       // 3365
  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));                                    // 3366
};                                                                                                                     // 3367
                                                                                                                       // 3368
function tweenValue(transition, name, value) {                                                                         // 3369
  var id = transition._id;                                                                                             // 3370
                                                                                                                       // 3371
  transition.each(function() {                                                                                         // 3372
    var schedule = set$1(this, id);                                                                                    // 3373
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);                                    // 3374
  });                                                                                                                  // 3375
                                                                                                                       // 3376
  return function(node) {                                                                                              // 3377
    return get$1(node, id).value[name];                                                                                // 3378
  };                                                                                                                   // 3379
}                                                                                                                      // 3380
                                                                                                                       // 3381
var interpolate$$1 = function(a, b) {                                                                                  // 3382
  var c;                                                                                                               // 3383
  return (typeof b === "number" ? reinterpolate                                                                        // 3384
      : b instanceof color ? interpolateRgb                                                                            // 3385
      : (c = color(b)) ? (b = c, interpolateRgb)                                                                       // 3386
      : interpolateString)(a, b);                                                                                      // 3387
};                                                                                                                     // 3388
                                                                                                                       // 3389
function attrRemove$1(name) {                                                                                          // 3390
  return function() {                                                                                                  // 3391
    this.removeAttribute(name);                                                                                        // 3392
  };                                                                                                                   // 3393
}                                                                                                                      // 3394
                                                                                                                       // 3395
function attrRemoveNS$1(fullname) {                                                                                    // 3396
  return function() {                                                                                                  // 3397
    this.removeAttributeNS(fullname.space, fullname.local);                                                            // 3398
  };                                                                                                                   // 3399
}                                                                                                                      // 3400
                                                                                                                       // 3401
function attrConstant$1(name, interpolate$$1, value1) {                                                                // 3402
  var value00,                                                                                                         // 3403
      interpolate0;                                                                                                    // 3404
  return function() {                                                                                                  // 3405
    var value0 = this.getAttribute(name);                                                                              // 3406
    return value0 === value1 ? null                                                                                    // 3407
        : value0 === value00 ? interpolate0                                                                            // 3408
        : interpolate0 = interpolate$$1(value00 = value0, value1);                                                     // 3409
  };                                                                                                                   // 3410
}                                                                                                                      // 3411
                                                                                                                       // 3412
function attrConstantNS$1(fullname, interpolate$$1, value1) {                                                          // 3413
  var value00,                                                                                                         // 3414
      interpolate0;                                                                                                    // 3415
  return function() {                                                                                                  // 3416
    var value0 = this.getAttributeNS(fullname.space, fullname.local);                                                  // 3417
    return value0 === value1 ? null                                                                                    // 3418
        : value0 === value00 ? interpolate0                                                                            // 3419
        : interpolate0 = interpolate$$1(value00 = value0, value1);                                                     // 3420
  };                                                                                                                   // 3421
}                                                                                                                      // 3422
                                                                                                                       // 3423
function attrFunction$1(name, interpolate$$1, value) {                                                                 // 3424
  var value00,                                                                                                         // 3425
      value10,                                                                                                         // 3426
      interpolate0;                                                                                                    // 3427
  return function() {                                                                                                  // 3428
    var value0, value1 = value(this);                                                                                  // 3429
    if (value1 == null) return void this.removeAttribute(name);                                                        // 3430
    value0 = this.getAttribute(name);                                                                                  // 3431
    return value0 === value1 ? null                                                                                    // 3432
        : value0 === value00 && value1 === value10 ? interpolate0                                                      // 3433
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);                                           // 3434
  };                                                                                                                   // 3435
}                                                                                                                      // 3436
                                                                                                                       // 3437
function attrFunctionNS$1(fullname, interpolate$$1, value) {                                                           // 3438
  var value00,                                                                                                         // 3439
      value10,                                                                                                         // 3440
      interpolate0;                                                                                                    // 3441
  return function() {                                                                                                  // 3442
    var value0, value1 = value(this);                                                                                  // 3443
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);                            // 3444
    value0 = this.getAttributeNS(fullname.space, fullname.local);                                                      // 3445
    return value0 === value1 ? null                                                                                    // 3446
        : value0 === value00 && value1 === value10 ? interpolate0                                                      // 3447
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);                                           // 3448
  };                                                                                                                   // 3449
}                                                                                                                      // 3450
                                                                                                                       // 3451
var transition_attr = function(name, value) {                                                                          // 3452
  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$$1;             // 3453
  return this.attrTween(name, typeof value === "function"                                                              // 3454
      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))     // 3455
      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)                                     // 3456
      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value + ""));                                // 3457
};                                                                                                                     // 3458
                                                                                                                       // 3459
function attrTweenNS(fullname, value) {                                                                                // 3460
  function tween() {                                                                                                   // 3461
    var node = this, i = value.apply(node, arguments);                                                                 // 3462
    return i && function(t) {                                                                                          // 3463
      node.setAttributeNS(fullname.space, fullname.local, i(t));                                                       // 3464
    };                                                                                                                 // 3465
  }                                                                                                                    // 3466
  tween._value = value;                                                                                                // 3467
  return tween;                                                                                                        // 3468
}                                                                                                                      // 3469
                                                                                                                       // 3470
function attrTween(name, value) {                                                                                      // 3471
  function tween() {                                                                                                   // 3472
    var node = this, i = value.apply(node, arguments);                                                                 // 3473
    return i && function(t) {                                                                                          // 3474
      node.setAttribute(name, i(t));                                                                                   // 3475
    };                                                                                                                 // 3476
  }                                                                                                                    // 3477
  tween._value = value;                                                                                                // 3478
  return tween;                                                                                                        // 3479
}                                                                                                                      // 3480
                                                                                                                       // 3481
var transition_attrTween = function(name, value) {                                                                     // 3482
  var key = "attr." + name;                                                                                            // 3483
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;                                              // 3484
  if (value == null) return this.tween(key, null);                                                                     // 3485
  if (typeof value !== "function") throw new Error;                                                                    // 3486
  var fullname = namespace(name);                                                                                      // 3487
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));                                 // 3488
};                                                                                                                     // 3489
                                                                                                                       // 3490
function delayFunction(id, value) {                                                                                    // 3491
  return function() {                                                                                                  // 3492
    init(this, id).delay = +value.apply(this, arguments);                                                              // 3493
  };                                                                                                                   // 3494
}                                                                                                                      // 3495
                                                                                                                       // 3496
function delayConstant(id, value) {                                                                                    // 3497
  return value = +value, function() {                                                                                  // 3498
    init(this, id).delay = value;                                                                                      // 3499
  };                                                                                                                   // 3500
}                                                                                                                      // 3501
                                                                                                                       // 3502
var transition_delay = function(value) {                                                                               // 3503
  var id = this._id;                                                                                                   // 3504
                                                                                                                       // 3505
  return arguments.length                                                                                              // 3506
      ? this.each((typeof value === "function"                                                                         // 3507
          ? delayFunction                                                                                              // 3508
          : delayConstant)(id, value))                                                                                 // 3509
      : get$1(this.node(), id).delay;                                                                                  // 3510
};                                                                                                                     // 3511
                                                                                                                       // 3512
function durationFunction(id, value) {                                                                                 // 3513
  return function() {                                                                                                  // 3514
    set$1(this, id).duration = +value.apply(this, arguments);                                                          // 3515
  };                                                                                                                   // 3516
}                                                                                                                      // 3517
                                                                                                                       // 3518
function durationConstant(id, value) {                                                                                 // 3519
  return value = +value, function() {                                                                                  // 3520
    set$1(this, id).duration = value;                                                                                  // 3521
  };                                                                                                                   // 3522
}                                                                                                                      // 3523
                                                                                                                       // 3524
var transition_duration = function(value) {                                                                            // 3525
  var id = this._id;                                                                                                   // 3526
                                                                                                                       // 3527
  return arguments.length                                                                                              // 3528
      ? this.each((typeof value === "function"                                                                         // 3529
          ? durationFunction                                                                                           // 3530
          : durationConstant)(id, value))                                                                              // 3531
      : get$1(this.node(), id).duration;                                                                               // 3532
};                                                                                                                     // 3533
                                                                                                                       // 3534
function easeConstant(id, value) {                                                                                     // 3535
  if (typeof value !== "function") throw new Error;                                                                    // 3536
  return function() {                                                                                                  // 3537
    set$1(this, id).ease = value;                                                                                      // 3538
  };                                                                                                                   // 3539
}                                                                                                                      // 3540
                                                                                                                       // 3541
var transition_ease = function(value) {                                                                                // 3542
  var id = this._id;                                                                                                   // 3543
                                                                                                                       // 3544
  return arguments.length                                                                                              // 3545
      ? this.each(easeConstant(id, value))                                                                             // 3546
      : get$1(this.node(), id).ease;                                                                                   // 3547
};                                                                                                                     // 3548
                                                                                                                       // 3549
var transition_filter = function(match) {                                                                              // 3550
  if (typeof match !== "function") match = matcher$1(match);                                                           // 3551
                                                                                                                       // 3552
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {                    // 3553
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {             // 3554
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {                                            // 3555
        subgroup.push(node);                                                                                           // 3556
      }                                                                                                                // 3557
    }                                                                                                                  // 3558
  }                                                                                                                    // 3559
                                                                                                                       // 3560
  return new Transition(subgroups, this._parents, this._name, this._id);                                               // 3561
};                                                                                                                     // 3562
                                                                                                                       // 3563
var transition_merge = function(transition) {                                                                          // 3564
  if (transition._id !== this._id) throw new Error;                                                                    // 3565
                                                                                                                       // 3566
  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {                                                                             // 3569
        merge[i] = node;                                                                                               // 3570
      }                                                                                                                // 3571
    }                                                                                                                  // 3572
  }                                                                                                                    // 3573
                                                                                                                       // 3574
  for (; j < m0; ++j) {                                                                                                // 3575
    merges[j] = groups0[j];                                                                                            // 3576
  }                                                                                                                    // 3577
                                                                                                                       // 3578
  return new Transition(merges, this._parents, this._name, this._id);                                                  // 3579
};                                                                                                                     // 3580
                                                                                                                       // 3581
function start(name) {                                                                                                 // 3582
  return (name + "").trim().split(/^|\s+/).every(function(t) {                                                         // 3583
    var i = t.indexOf(".");                                                                                            // 3584
    if (i >= 0) t = t.slice(0, i);                                                                                     // 3585
    return !t || t === "start";                                                                                        // 3586
  });                                                                                                                  // 3587
}                                                                                                                      // 3588
                                                                                                                       // 3589
function onFunction(id, name, listener) {                                                                              // 3590
  var on0, on1, sit = start(name) ? init : set$1;                                                                      // 3591
  return function() {                                                                                                  // 3592
    var schedule = sit(this, id),                                                                                      // 3593
        on = schedule.on;                                                                                              // 3594
                                                                                                                       // 3595
    // If this node shared a dispatch with the previous node,                                                          // 3596
    // just assign the updated shared dispatch and we’re done!                                                         // 3597
    // Otherwise, copy-on-write.                                                                                       // 3598
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);                                                      // 3599
                                                                                                                       // 3600
    schedule.on = on1;                                                                                                 // 3601
  };                                                                                                                   // 3602
}                                                                                                                      // 3603
                                                                                                                       // 3604
var transition_on = function(name, listener) {                                                                         // 3605
  var id = this._id;                                                                                                   // 3606
                                                                                                                       // 3607
  return arguments.length < 2                                                                                          // 3608
      ? get$1(this.node(), id).on.on(name)                                                                             // 3609
      : this.each(onFunction(id, name, listener));                                                                     // 3610
};                                                                                                                     // 3611
                                                                                                                       // 3612
function removeFunction(id) {                                                                                          // 3613
  return function() {                                                                                                  // 3614
    var parent = this.parentNode;                                                                                      // 3615
    for (var i in this.__transition) if (+i !== id) return;                                                            // 3616
    if (parent) parent.removeChild(this);                                                                              // 3617
  };                                                                                                                   // 3618
}                                                                                                                      // 3619
                                                                                                                       // 3620
var transition_remove = function() {                                                                                   // 3621
  return this.on("end.remove", removeFunction(this._id));                                                              // 3622
};                                                                                                                     // 3623
                                                                                                                       // 3624
var transition_select = function(select$$1) {                                                                          // 3625
  var name = this._name,                                                                                               // 3626
      id = this._id;                                                                                                   // 3627
                                                                                                                       // 3628
  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);                                                // 3629
                                                                                                                       // 3630
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {                    // 3631
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {                            // 3633
        if ("__data__" in node) subnode.__data__ = node.__data__;                                                      // 3634
        subgroup[i] = subnode;                                                                                         // 3635
        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));                                                 // 3636
      }                                                                                                                // 3637
    }                                                                                                                  // 3638
  }                                                                                                                    // 3639
                                                                                                                       // 3640
  return new Transition(subgroups, this._parents, name, id);                                                           // 3641
};                                                                                                                     // 3642
                                                                                                                       // 3643
var transition_selectAll = function(select$$1) {                                                                       // 3644
  var name = this._name,                                                                                               // 3645
      id = this._id;                                                                                                   // 3646
                                                                                                                       // 3647
  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);                                             // 3648
                                                                                                                       // 3649
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {                // 3650
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {                                           // 3651
      if (node = group[i]) {                                                                                           // 3652
        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {                                                                                   // 3654
            schedule(child, name, id, k, children, inherit);                                                           // 3655
          }                                                                                                            // 3656
        }                                                                                                              // 3657
        subgroups.push(children);                                                                                      // 3658
        parents.push(node);                                                                                            // 3659
      }                                                                                                                // 3660
    }                                                                                                                  // 3661
  }                                                                                                                    // 3662
                                                                                                                       // 3663
  return new Transition(subgroups, parents, name, id);                                                                 // 3664
};                                                                                                                     // 3665
                                                                                                                       // 3666
var Selection$1 = selection.prototype.constructor;                                                                     // 3667
                                                                                                                       // 3668
var transition_selection = function() {                                                                                // 3669
  return new Selection$1(this._groups, this._parents);                                                                 // 3670
};                                                                                                                     // 3671
                                                                                                                       // 3672
function styleRemove$1(name, interpolate$$2) {                                                                         // 3673
  var value00,                                                                                                         // 3674
      value10,                                                                                                         // 3675
      interpolate0;                                                                                                    // 3676
  return function() {                                                                                                  // 3677
    var value0 = styleValue(this, name),                                                                               // 3678
        value1 = (this.style.removeProperty(name), styleValue(this, name));                                            // 3679
    return value0 === value1 ? null                                                                                    // 3680
        : value0 === value00 && value1 === value10 ? interpolate0                                                      // 3681
        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);                                           // 3682
  };                                                                                                                   // 3683
}                                                                                                                      // 3684
                                                                                                                       // 3685
function styleRemoveEnd(name) {                                                                                        // 3686
  return function() {                                                                                                  // 3687
    this.style.removeProperty(name);                                                                                   // 3688
  };                                                                                                                   // 3689
}                                                                                                                      // 3690
                                                                                                                       // 3691
function styleConstant$1(name, interpolate$$2, value1) {                                                               // 3692
  var value00,                                                                                                         // 3693
      interpolate0;                                                                                                    // 3694
  return function() {                                                                                                  // 3695
    var value0 = styleValue(this, name);                                                                               // 3696
    return value0 === value1 ? null                                                                                    // 3697
        : value0 === value00 ? interpolate0                                                                            // 3698
        : interpolate0 = interpolate$$2(value00 = value0, value1);                                                     // 3699
  };                                                                                                                   // 3700
}                                                                                                                      // 3701
                                                                                                                       // 3702
function styleFunction$1(name, interpolate$$2, value) {                                                                // 3703
  var value00,                                                                                                         // 3704
      value10,                                                                                                         // 3705
      interpolate0;                                                                                                    // 3706
  return function() {                                                                                                  // 3707
    var value0 = styleValue(this, name),                                                                               // 3708
        value1 = value(this);                                                                                          // 3709
    if (value1 == null) value1 = (this.style.removeProperty(name), styleValue(this, name));                            // 3710
    return value0 === value1 ? null                                                                                    // 3711
        : value0 === value00 && value1 === value10 ? interpolate0                                                      // 3712
        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);                                           // 3713
  };                                                                                                                   // 3714
}                                                                                                                      // 3715
                                                                                                                       // 3716
var transition_style = function(name, value, priority) {                                                               // 3717
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$$1;                                     // 3718
  return value == null ? this                                                                                          // 3719
          .styleTween(name, styleRemove$1(name, i))                                                                    // 3720
          .on("end.style." + name, styleRemoveEnd(name))                                                               // 3721
      : this.styleTween(name, typeof value === "function"                                                              // 3722
          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))                                         // 3723
          : styleConstant$1(name, i, value + ""), priority);                                                           // 3724
};                                                                                                                     // 3725
                                                                                                                       // 3726
function styleTween(name, value, priority) {                                                                           // 3727
  function tween() {                                                                                                   // 3728
    var node = this, i = value.apply(node, arguments);                                                                 // 3729
    return i && function(t) {                                                                                          // 3730
      node.style.setProperty(name, i(t), priority);                                                                    // 3731
    };                                                                                                                 // 3732
  }                                                                                                                    // 3733
  tween._value = value;                                                                                                // 3734
  return tween;                                                                                                        // 3735
}                                                                                                                      // 3736
                                                                                                                       // 3737
var transition_styleTween = function(name, value, priority) {                                                          // 3738
  var key = "style." + (name += "");                                                                                   // 3739
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;                                              // 3740
  if (value == null) return this.tween(key, null);                                                                     // 3741
  if (typeof value !== "function") throw new Error;                                                                    // 3742
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));                                   // 3743
};                                                                                                                     // 3744
                                                                                                                       // 3745
function textConstant$1(value) {                                                                                       // 3746
  return function() {                                                                                                  // 3747
    this.textContent = value;                                                                                          // 3748
  };                                                                                                                   // 3749
}                                                                                                                      // 3750
                                                                                                                       // 3751
function textFunction$1(value) {                                                                                       // 3752
  return function() {                                                                                                  // 3753
    var value1 = value(this);                                                                                          // 3754
    this.textContent = value1 == null ? "" : value1;                                                                   // 3755
  };                                                                                                                   // 3756
}                                                                                                                      // 3757
                                                                                                                       // 3758
var transition_text = function(value) {                                                                                // 3759
  return this.tween("text", typeof value === "function"                                                                // 3760
      ? textFunction$1(tweenValue(this, "text", value))                                                                // 3761
      : textConstant$1(value == null ? "" : value + ""));                                                              // 3762
};                                                                                                                     // 3763
                                                                                                                       // 3764
var transition_transition = function() {                                                                               // 3765
  var name = this._name,                                                                                               // 3766
      id0 = this._id,                                                                                                  // 3767
      id1 = newId();                                                                                                   // 3768
                                                                                                                       // 3769
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {                                              // 3770
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {                                           // 3771
      if (node = group[i]) {                                                                                           // 3772
        var inherit = get$1(node, id0);                                                                                // 3773
        schedule(node, name, id1, i, group, {                                                                          // 3774
          time: inherit.time + inherit.delay + inherit.duration,                                                       // 3775
          delay: 0,                                                                                                    // 3776
          duration: inherit.duration,                                                                                  // 3777
          ease: inherit.ease                                                                                           // 3778
        });                                                                                                            // 3779
      }                                                                                                                // 3780
    }                                                                                                                  // 3781
  }                                                                                                                    // 3782
                                                                                                                       // 3783
  return new Transition(groups, this._parents, name, id1);                                                             // 3784
};                                                                                                                     // 3785
                                                                                                                       // 3786
var id = 0;                                                                                                            // 3787
                                                                                                                       // 3788
function Transition(groups, parents, name, id) {                                                                       // 3789
  this._groups = groups;                                                                                               // 3790
  this._parents = parents;                                                                                             // 3791
  this._name = name;                                                                                                   // 3792
  this._id = id;                                                                                                       // 3793
}                                                                                                                      // 3794
                                                                                                                       // 3795
function transition(name) {                                                                                            // 3796
  return selection().transition(name);                                                                                 // 3797
}                                                                                                                      // 3798
                                                                                                                       // 3799
function newId() {                                                                                                     // 3800
  return ++id;                                                                                                         // 3801
}                                                                                                                      // 3802
                                                                                                                       // 3803
var selection_prototype = selection.prototype;                                                                         // 3804
                                                                                                                       // 3805
Transition.prototype = transition.prototype = {                                                                        // 3806
  constructor: Transition,                                                                                             // 3807
  select: transition_select,                                                                                           // 3808
  selectAll: transition_selectAll,                                                                                     // 3809
  filter: transition_filter,                                                                                           // 3810
  merge: transition_merge,                                                                                             // 3811
  selection: transition_selection,                                                                                     // 3812
  transition: transition_transition,                                                                                   // 3813
  call: selection_prototype.call,                                                                                      // 3814
  nodes: selection_prototype.nodes,                                                                                    // 3815
  node: selection_prototype.node,                                                                                      // 3816
  size: selection_prototype.size,                                                                                      // 3817
  empty: selection_prototype.empty,                                                                                    // 3818
  each: selection_prototype.each,                                                                                      // 3819
  on: transition_on,                                                                                                   // 3820
  attr: transition_attr,                                                                                               // 3821
  attrTween: transition_attrTween,                                                                                     // 3822
  style: transition_style,                                                                                             // 3823
  styleTween: transition_styleTween,                                                                                   // 3824
  text: transition_text,                                                                                               // 3825
  remove: transition_remove,                                                                                           // 3826
  tween: transition_tween,                                                                                             // 3827
  delay: transition_delay,                                                                                             // 3828
  duration: transition_duration,                                                                                       // 3829
  ease: transition_ease                                                                                                // 3830
};                                                                                                                     // 3831
                                                                                                                       // 3832
function linear$1(t) {                                                                                                 // 3833
  return +t;                                                                                                           // 3834
}                                                                                                                      // 3835
                                                                                                                       // 3836
function quadIn(t) {                                                                                                   // 3837
  return t * t;                                                                                                        // 3838
}                                                                                                                      // 3839
                                                                                                                       // 3840
function quadOut(t) {                                                                                                  // 3841
  return t * (2 - t);                                                                                                  // 3842
}                                                                                                                      // 3843
                                                                                                                       // 3844
function quadInOut(t) {                                                                                                // 3845
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;                                                              // 3846
}                                                                                                                      // 3847
                                                                                                                       // 3848
function cubicIn(t) {                                                                                                  // 3849
  return t * t * t;                                                                                                    // 3850
}                                                                                                                      // 3851
                                                                                                                       // 3852
function cubicOut(t) {                                                                                                 // 3853
  return --t * t * t + 1;                                                                                              // 3854
}                                                                                                                      // 3855
                                                                                                                       // 3856
function cubicInOut(t) {                                                                                               // 3857
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;                                                       // 3858
}                                                                                                                      // 3859
                                                                                                                       // 3860
var exponent = 3;                                                                                                      // 3861
                                                                                                                       // 3862
var polyIn = (function custom(e) {                                                                                     // 3863
  e = +e;                                                                                                              // 3864
                                                                                                                       // 3865
  function polyIn(t) {                                                                                                 // 3866
    return Math.pow(t, e);                                                                                             // 3867
  }                                                                                                                    // 3868
                                                                                                                       // 3869
  polyIn.exponent = custom;                                                                                            // 3870
                                                                                                                       // 3871
  return polyIn;                                                                                                       // 3872
})(exponent);                                                                                                          // 3873
                                                                                                                       // 3874
var polyOut = (function custom(e) {                                                                                    // 3875
  e = +e;                                                                                                              // 3876
                                                                                                                       // 3877
  function polyOut(t) {                                                                                                // 3878
    return 1 - Math.pow(1 - t, e);                                                                                     // 3879
  }                                                                                                                    // 3880
                                                                                                                       // 3881
  polyOut.exponent = custom;                                                                                           // 3882
                                                                                                                       // 3883
  return polyOut;                                                                                                      // 3884
})(exponent);                                                                                                          // 3885
                                                                                                                       // 3886
var polyInOut = (function custom(e) {                                                                                  // 3887
  e = +e;                                                                                                              // 3888
                                                                                                                       // 3889
  function polyInOut(t) {                                                                                              // 3890
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;                                              // 3891
  }                                                                                                                    // 3892
                                                                                                                       // 3893
  polyInOut.exponent = custom;                                                                                         // 3894
                                                                                                                       // 3895
  return polyInOut;                                                                                                    // 3896
})(exponent);                                                                                                          // 3897
                                                                                                                       // 3898
var pi = Math.PI;                                                                                                      // 3899
var halfPi = pi / 2;                                                                                                   // 3900
                                                                                                                       // 3901
function sinIn(t) {                                                                                                    // 3902
  return 1 - Math.cos(t * halfPi);                                                                                     // 3903
}                                                                                                                      // 3904
                                                                                                                       // 3905
function sinOut(t) {                                                                                                   // 3906
  return Math.sin(t * halfPi);                                                                                         // 3907
}                                                                                                                      // 3908
                                                                                                                       // 3909
function sinInOut(t) {                                                                                                 // 3910
  return (1 - Math.cos(pi * t)) / 2;                                                                                   // 3911
}                                                                                                                      // 3912
                                                                                                                       // 3913
function expIn(t) {                                                                                                    // 3914
  return Math.pow(2, 10 * t - 10);                                                                                     // 3915
}                                                                                                                      // 3916
                                                                                                                       // 3917
function expOut(t) {                                                                                                   // 3918
  return 1 - Math.pow(2, -10 * t);                                                                                     // 3919
}                                                                                                                      // 3920
                                                                                                                       // 3921
function expInOut(t) {                                                                                                 // 3922
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;                                // 3923
}                                                                                                                      // 3924
                                                                                                                       // 3925
function circleIn(t) {                                                                                                 // 3926
  return 1 - Math.sqrt(1 - t * t);                                                                                     // 3927
}                                                                                                                      // 3928
                                                                                                                       // 3929
function circleOut(t) {                                                                                                // 3930
  return Math.sqrt(1 - --t * t);                                                                                       // 3931
}                                                                                                                      // 3932
                                                                                                                       // 3933
function circleInOut(t) {                                                                                              // 3934
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;                             // 3935
}                                                                                                                      // 3936
                                                                                                                       // 3937
var b1 = 4 / 11;                                                                                                       // 3938
var b2 = 6 / 11;                                                                                                       // 3939
var b3 = 8 / 11;                                                                                                       // 3940
var b4 = 3 / 4;                                                                                                        // 3941
var b5 = 9 / 11;                                                                                                       // 3942
var b6 = 10 / 11;                                                                                                      // 3943
var b7 = 15 / 16;                                                                                                      // 3944
var b8 = 21 / 22;                                                                                                      // 3945
var b9 = 63 / 64;                                                                                                      // 3946
var b0 = 1 / b1 / b1;                                                                                                  // 3947
                                                                                                                       // 3948
function bounceIn(t) {                                                                                                 // 3949
  return 1 - bounceOut(1 - t);                                                                                         // 3950
}                                                                                                                      // 3951
                                                                                                                       // 3952
function bounceOut(t) {                                                                                                // 3953
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}                                                                                                                      // 3955
                                                                                                                       // 3956
function bounceInOut(t) {                                                                                              // 3957
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;                                            // 3958
}                                                                                                                      // 3959
                                                                                                                       // 3960
var overshoot = 1.70158;                                                                                               // 3961
                                                                                                                       // 3962
var backIn = (function custom(s) {                                                                                     // 3963
  s = +s;                                                                                                              // 3964
                                                                                                                       // 3965
  function backIn(t) {                                                                                                 // 3966
    return t * t * ((s + 1) * t - s);                                                                                  // 3967
  }                                                                                                                    // 3968
                                                                                                                       // 3969
  backIn.overshoot = custom;                                                                                           // 3970
                                                                                                                       // 3971
  return backIn;                                                                                                       // 3972
})(overshoot);                                                                                                         // 3973
                                                                                                                       // 3974
var backOut = (function custom(s) {                                                                                    // 3975
  s = +s;                                                                                                              // 3976
                                                                                                                       // 3977
  function backOut(t) {                                                                                                // 3978
    return --t * t * ((s + 1) * t + s) + 1;                                                                            // 3979
  }                                                                                                                    // 3980
                                                                                                                       // 3981
  backOut.overshoot = custom;                                                                                          // 3982
                                                                                                                       // 3983
  return backOut;                                                                                                      // 3984
})(overshoot);                                                                                                         // 3985
                                                                                                                       // 3986
var backInOut = (function custom(s) {                                                                                  // 3987
  s = +s;                                                                                                              // 3988
                                                                                                                       // 3989
  function backInOut(t) {                                                                                              // 3990
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;                      // 3991
  }                                                                                                                    // 3992
                                                                                                                       // 3993
  backInOut.overshoot = custom;                                                                                        // 3994
                                                                                                                       // 3995
  return backInOut;                                                                                                    // 3996
})(overshoot);                                                                                                         // 3997
                                                                                                                       // 3998
var tau = 2 * Math.PI;                                                                                                 // 3999
var amplitude = 1;                                                                                                     // 4000
var period = 0.3;                                                                                                      // 4001
                                                                                                                       // 4002
var elasticIn = (function custom(a, p) {                                                                               // 4003
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);                                                            // 4004
                                                                                                                       // 4005
  function elasticIn(t) {                                                                                              // 4006
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);                                                          // 4007
  }                                                                                                                    // 4008
                                                                                                                       // 4009
  elasticIn.amplitude = function(a) { return custom(a, p * tau); };                                                    // 4010
  elasticIn.period = function(p) { return custom(a, p); };                                                             // 4011
                                                                                                                       // 4012
  return elasticIn;                                                                                                    // 4013
})(amplitude, period);                                                                                                 // 4014
                                                                                                                       // 4015
var elasticOut = (function custom(a, p) {                                                                              // 4016
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);                                                            // 4017
                                                                                                                       // 4018
  function elasticOut(t) {                                                                                             // 4019
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);                                                // 4020
  }                                                                                                                    // 4021
                                                                                                                       // 4022
  elasticOut.amplitude = function(a) { return custom(a, p * tau); };                                                   // 4023
  elasticOut.period = function(p) { return custom(a, p); };                                                            // 4024
                                                                                                                       // 4025
  return elasticOut;                                                                                                   // 4026
})(amplitude, period);                                                                                                 // 4027
                                                                                                                       // 4028
var elasticInOut = (function custom(a, p) {                                                                            // 4029
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);                                                            // 4030
                                                                                                                       // 4031
  function elasticInOut(t) {                                                                                           // 4032
    return ((t = t * 2 - 1) < 0                                                                                        // 4033
        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)                                                              // 4034
        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;                                                   // 4035
  }                                                                                                                    // 4036
                                                                                                                       // 4037
  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };                                                 // 4038
  elasticInOut.period = function(p) { return custom(a, p); };                                                          // 4039
                                                                                                                       // 4040
  return elasticInOut;                                                                                                 // 4041
})(amplitude, period);                                                                                                 // 4042
                                                                                                                       // 4043
var defaultTiming = {                                                                                                  // 4044
  time: null, // Set on use.                                                                                           // 4045
  delay: 0,                                                                                                            // 4046
  duration: 250,                                                                                                       // 4047
  ease: cubicInOut                                                                                                     // 4048
};                                                                                                                     // 4049
                                                                                                                       // 4050
function inherit(node, id) {                                                                                           // 4051
  var timing;                                                                                                          // 4052
  while (!(timing = node.__transition) || !(timing = timing[id])) {                                                    // 4053
    if (!(node = node.parentNode)) {                                                                                   // 4054
      return defaultTiming.time = now(), defaultTiming;                                                                // 4055
    }                                                                                                                  // 4056
  }                                                                                                                    // 4057
  return timing;                                                                                                       // 4058
}                                                                                                                      // 4059
                                                                                                                       // 4060
var selection_transition = function(name) {                                                                            // 4061
  var id,                                                                                                              // 4062
      timing;                                                                                                          // 4063
                                                                                                                       // 4064
  if (name instanceof Transition) {                                                                                    // 4065
    id = name._id, name = name._name;                                                                                  // 4066
  } else {                                                                                                             // 4067
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";                       // 4068
  }                                                                                                                    // 4069
                                                                                                                       // 4070
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {                                              // 4071
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {                                           // 4072
      if (node = group[i]) {                                                                                           // 4073
        schedule(node, name, id, i, group, timing || inherit(node, id));                                               // 4074
      }                                                                                                                // 4075
    }                                                                                                                  // 4076
  }                                                                                                                    // 4077
                                                                                                                       // 4078
  return new Transition(groups, this._parents, name, id);                                                              // 4079
};                                                                                                                     // 4080
                                                                                                                       // 4081
selection.prototype.interrupt = selection_interrupt;                                                                   // 4082
selection.prototype.transition = selection_transition;                                                                 // 4083
                                                                                                                       // 4084
var root$1 = [null];                                                                                                   // 4085
                                                                                                                       // 4086
var active = function(node, name) {                                                                                    // 4087
  var schedules = node.__transition,                                                                                   // 4088
      schedule,                                                                                                        // 4089
      i;                                                                                                               // 4090
                                                                                                                       // 4091
  if (schedules) {                                                                                                     // 4092
    name = name == null ? null : name + "";                                                                            // 4093
    for (i in schedules) {                                                                                             // 4094
      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {                                     // 4095
        return new Transition([[node]], root$1, name, +i);                                                             // 4096
      }                                                                                                                // 4097
    }                                                                                                                  // 4098
  }                                                                                                                    // 4099
                                                                                                                       // 4100
  return null;                                                                                                         // 4101
};                                                                                                                     // 4102
                                                                                                                       // 4103
var constant$4 = function(x) {                                                                                         // 4104
  return function() {                                                                                                  // 4105
    return x;                                                                                                          // 4106
  };                                                                                                                   // 4107
};                                                                                                                     // 4108
                                                                                                                       // 4109
var BrushEvent = function(target, type, selection) {                                                                   // 4110
  this.target = target;                                                                                                // 4111
  this.type = type;                                                                                                    // 4112
  this.selection = selection;                                                                                          // 4113
};                                                                                                                     // 4114
                                                                                                                       // 4115
function nopropagation$1() {                                                                                           // 4116
  exports.event.stopImmediatePropagation();                                                                            // 4117
}                                                                                                                      // 4118
                                                                                                                       // 4119
var noevent$1 = function() {                                                                                           // 4120
  exports.event.preventDefault();                                                                                      // 4121
  exports.event.stopImmediatePropagation();                                                                            // 4122
};                                                                                                                     // 4123
                                                                                                                       // 4124
var MODE_DRAG = {name: "drag"};                                                                                        // 4125
var MODE_SPACE = {name: "space"};                                                                                      // 4126
var MODE_HANDLE = {name: "handle"};                                                                                    // 4127
var MODE_CENTER = {name: "center"};                                                                                    // 4128
                                                                                                                       // 4129
var X = {                                                                                                              // 4130
  name: "x",                                                                                                           // 4131
  handles: ["e", "w"].map(type),                                                                                       // 4132
  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },                                           // 4133
  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }                                                          // 4134
};                                                                                                                     // 4135
                                                                                                                       // 4136
var Y = {                                                                                                              // 4137
  name: "y",                                                                                                           // 4138
  handles: ["n", "s"].map(type),                                                                                       // 4139
  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },                                           // 4140
  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }                                                          // 4141
};                                                                                                                     // 4142
                                                                                                                       // 4143
var XY = {                                                                                                             // 4144
  name: "xy",                                                                                                          // 4145
  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),                                                     // 4146
  input: function(xy) { return xy; },                                                                                  // 4147
  output: function(xy) { return xy; }                                                                                  // 4148
};                                                                                                                     // 4149
                                                                                                                       // 4150
var cursors = {                                                                                                        // 4151
  overlay: "crosshair",                                                                                                // 4152
  selection: "move",                                                                                                   // 4153
  n: "ns-resize",                                                                                                      // 4154
  e: "ew-resize",                                                                                                      // 4155
  s: "ns-resize",                                                                                                      // 4156
  w: "ew-resize",                                                                                                      // 4157
  nw: "nwse-resize",                                                                                                   // 4158
  ne: "nesw-resize",                                                                                                   // 4159
  se: "nwse-resize",                                                                                                   // 4160
  sw: "nesw-resize"                                                                                                    // 4161
};                                                                                                                     // 4162
                                                                                                                       // 4163
var flipX = {                                                                                                          // 4164
  e: "w",                                                                                                              // 4165
  w: "e",                                                                                                              // 4166
  nw: "ne",                                                                                                            // 4167
  ne: "nw",                                                                                                            // 4168
  se: "sw",                                                                                                            // 4169
  sw: "se"                                                                                                             // 4170
};                                                                                                                     // 4171
                                                                                                                       // 4172
var flipY = {                                                                                                          // 4173
  n: "s",                                                                                                              // 4174
  s: "n",                                                                                                              // 4175
  nw: "sw",                                                                                                            // 4176
  ne: "se",                                                                                                            // 4177
  se: "ne",                                                                                                            // 4178
  sw: "nw"                                                                                                             // 4179
};                                                                                                                     // 4180
                                                                                                                       // 4181
var signsX = {                                                                                                         // 4182
  overlay: +1,                                                                                                         // 4183
  selection: +1,                                                                                                       // 4184
  n: null,                                                                                                             // 4185
  e: +1,                                                                                                               // 4186
  s: null,                                                                                                             // 4187
  w: -1,                                                                                                               // 4188
  nw: -1,                                                                                                              // 4189
  ne: +1,                                                                                                              // 4190
  se: +1,                                                                                                              // 4191
  sw: -1                                                                                                               // 4192
};                                                                                                                     // 4193
                                                                                                                       // 4194
var signsY = {                                                                                                         // 4195
  overlay: +1,                                                                                                         // 4196
  selection: +1,                                                                                                       // 4197
  n: -1,                                                                                                               // 4198
  e: null,                                                                                                             // 4199
  s: +1,                                                                                                               // 4200
  w: null,                                                                                                             // 4201
  nw: -1,                                                                                                              // 4202
  ne: -1,                                                                                                              // 4203
  se: +1,                                                                                                              // 4204
  sw: +1                                                                                                               // 4205
};                                                                                                                     // 4206
                                                                                                                       // 4207
function type(t) {                                                                                                     // 4208
  return {type: t};                                                                                                    // 4209
}                                                                                                                      // 4210
                                                                                                                       // 4211
// Ignore right-click, since that should open the context menu.                                                        // 4212
function defaultFilter() {                                                                                             // 4213
  return !exports.event.button;                                                                                        // 4214
}                                                                                                                      // 4215
                                                                                                                       // 4216
function defaultExtent() {                                                                                             // 4217
  var svg = this.ownerSVGElement || this;                                                                              // 4218
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];                                                // 4219
}                                                                                                                      // 4220
                                                                                                                       // 4221
// Like d3.local, but with the name “__brush” rather than auto-generated.                                              // 4222
function local$$1(node) {                                                                                              // 4223
  while (!node.__brush) if (!(node = node.parentNode)) return;                                                         // 4224
  return node.__brush;                                                                                                 // 4225
}                                                                                                                      // 4226
                                                                                                                       // 4227
function empty(extent) {                                                                                               // 4228
  return extent[0][0] === extent[1][0]                                                                                 // 4229
      || extent[0][1] === extent[1][1];                                                                                // 4230
}                                                                                                                      // 4231
                                                                                                                       // 4232
function brushSelection(node) {                                                                                        // 4233
  var state = node.__brush;                                                                                            // 4234
  return state ? state.dim.output(state.selection) : null;                                                             // 4235
}                                                                                                                      // 4236
                                                                                                                       // 4237
function brushX() {                                                                                                    // 4238
  return brush$1(X);                                                                                                   // 4239
}                                                                                                                      // 4240
                                                                                                                       // 4241
function brushY() {                                                                                                    // 4242
  return brush$1(Y);                                                                                                   // 4243
}                                                                                                                      // 4244
                                                                                                                       // 4245
var brush = function() {                                                                                               // 4246
  return brush$1(XY);                                                                                                  // 4247
};                                                                                                                     // 4248
                                                                                                                       // 4249
function brush$1(dim) {                                                                                                // 4250
  var extent = defaultExtent,                                                                                          // 4251
      filter = defaultFilter,                                                                                          // 4252
      listeners = dispatch(brush, "start", "brush", "end"),                                                            // 4253
      handleSize = 6,                                                                                                  // 4254
      touchending;                                                                                                     // 4255
                                                                                                                       // 4256
  function brush(group) {                                                                                              // 4257
    var overlay = group                                                                                                // 4258
        .property("__brush", initialize)                                                                               // 4259
      .selectAll(".overlay")                                                                                           // 4260
      .data([type("overlay")]);                                                                                        // 4261
                                                                                                                       // 4262
    overlay.enter().append("rect")                                                                                     // 4263
        .attr("class", "overlay")                                                                                      // 4264
        .attr("pointer-events", "all")                                                                                 // 4265
        .attr("cursor", cursors.overlay)                                                                               // 4266
      .merge(overlay)                                                                                                  // 4267
        .each(function() {                                                                                             // 4268
          var extent = local$$1(this).extent;                                                                          // 4269
          select(this)                                                                                                 // 4270
              .attr("x", extent[0][0])                                                                                 // 4271
              .attr("y", extent[0][1])                                                                                 // 4272
              .attr("width", extent[1][0] - extent[0][0])                                                              // 4273
              .attr("height", extent[1][1] - extent[0][1]);                                                            // 4274
        });                                                                                                            // 4275
                                                                                                                       // 4276
    group.selectAll(".selection")                                                                                      // 4277
      .data([type("selection")])                                                                                       // 4278
      .enter().append("rect")                                                                                          // 4279
        .attr("class", "selection")                                                                                    // 4280
        .attr("cursor", cursors.selection)                                                                             // 4281
        .attr("fill", "#777")                                                                                          // 4282
        .attr("fill-opacity", 0.3)                                                                                     // 4283
        .attr("stroke", "#fff")                                                                                        // 4284
        .attr("shape-rendering", "crispEdges");                                                                        // 4285
                                                                                                                       // 4286
    var handle = group.selectAll(".handle")                                                                            // 4287
      .data(dim.handles, function(d) { return d.type; });                                                              // 4288
                                                                                                                       // 4289
    handle.exit().remove();                                                                                            // 4290
                                                                                                                       // 4291
    handle.enter().append("rect")                                                                                      // 4292
        .attr("class", function(d) { return "handle handle--" + d.type; })                                             // 4293
        .attr("cursor", function(d) { return cursors[d.type]; });                                                      // 4294
                                                                                                                       // 4295
    group                                                                                                              // 4296
        .each(redraw)                                                                                                  // 4297
        .attr("fill", "none")                                                                                          // 4298
        .attr("pointer-events", "all")                                                                                 // 4299
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")                                                         // 4300
        .on("mousedown.brush touchstart.brush", started);                                                              // 4301
  }                                                                                                                    // 4302
                                                                                                                       // 4303
  brush.move = function(group, selection$$1) {                                                                         // 4304
    if (group.selection) {                                                                                             // 4305
      group                                                                                                            // 4306
          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })                           // 4307
          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })                             // 4308
          .tween("brush", function() {                                                                                 // 4309
            var that = this,                                                                                           // 4310
                state = that.__brush,                                                                                  // 4311
                emit = emitter(that, arguments),                                                                       // 4312
                selection0 = state.selection,                                                                          // 4313
                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(this, arguments) : selection$$1, state.extent),
                i = interpolateValue(selection0, selection1);                                                          // 4315
                                                                                                                       // 4316
            function tween(t) {                                                                                        // 4317
              state.selection = t === 1 && empty(selection1) ? null : i(t);                                            // 4318
              redraw.call(that);                                                                                       // 4319
              emit.brush();                                                                                            // 4320
            }                                                                                                          // 4321
                                                                                                                       // 4322
            return selection0 && selection1 ? tween : tween(1);                                                        // 4323
          });                                                                                                          // 4324
    } else {                                                                                                           // 4325
      group                                                                                                            // 4326
          .each(function() {                                                                                           // 4327
            var that = this,                                                                                           // 4328
                args = arguments,                                                                                      // 4329
                state = that.__brush,                                                                                  // 4330
                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(that, args) : selection$$1, state.extent),
                emit = emitter(that, args).beforestart();                                                              // 4332
                                                                                                                       // 4333
            interrupt(that);                                                                                           // 4334
            state.selection = selection1 == null || empty(selection1) ? null : selection1;                             // 4335
            redraw.call(that);                                                                                         // 4336
            emit.start().brush().end();                                                                                // 4337
          });                                                                                                          // 4338
    }                                                                                                                  // 4339
  };                                                                                                                   // 4340
                                                                                                                       // 4341
  function redraw() {                                                                                                  // 4342
    var group = select(this),                                                                                          // 4343
        selection$$1 = local$$1(this).selection;                                                                       // 4344
                                                                                                                       // 4345
    if (selection$$1) {                                                                                                // 4346
      group.selectAll(".selection")                                                                                    // 4347
          .style("display", null)                                                                                      // 4348
          .attr("x", selection$$1[0][0])                                                                               // 4349
          .attr("y", selection$$1[0][1])                                                                               // 4350
          .attr("width", selection$$1[1][0] - selection$$1[0][0])                                                      // 4351
          .attr("height", selection$$1[1][1] - selection$$1[0][1]);                                                    // 4352
                                                                                                                       // 4353
      group.selectAll(".handle")                                                                                       // 4354
          .style("display", null)                                                                                      // 4355
          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection$$1[1][0] - handleSize / 2 : selection$$1[0][0] - handleSize / 2; })
          .attr("y", function(d) { return d.type[0] === "s" ? selection$$1[1][1] - handleSize / 2 : selection$$1[0][1] - handleSize / 2; })
          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection$$1[1][0] - selection$$1[0][0] + handleSize : handleSize; })
          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection$$1[1][1] - selection$$1[0][1] + handleSize : handleSize; });
    }                                                                                                                  // 4360
                                                                                                                       // 4361
    else {                                                                                                             // 4362
      group.selectAll(".selection,.handle")                                                                            // 4363
          .style("display", "none")                                                                                    // 4364
          .attr("x", null)                                                                                             // 4365
          .attr("y", null)                                                                                             // 4366
          .attr("width", null)                                                                                         // 4367
          .attr("height", null);                                                                                       // 4368
    }                                                                                                                  // 4369
  }                                                                                                                    // 4370
                                                                                                                       // 4371
  function emitter(that, args) {                                                                                       // 4372
    return that.__brush.emitter || new Emitter(that, args);                                                            // 4373
  }                                                                                                                    // 4374
                                                                                                                       // 4375
  function Emitter(that, args) {                                                                                       // 4376
    this.that = that;                                                                                                  // 4377
    this.args = args;                                                                                                  // 4378
    this.state = that.__brush;                                                                                         // 4379
    this.active = 0;                                                                                                   // 4380
  }                                                                                                                    // 4381
                                                                                                                       // 4382
  Emitter.prototype = {                                                                                                // 4383
    beforestart: function() {                                                                                          // 4384
      if (++this.active === 1) this.state.emitter = this, this.starting = true;                                        // 4385
      return this;                                                                                                     // 4386
    },                                                                                                                 // 4387
    start: function() {                                                                                                // 4388
      if (this.starting) this.starting = false, this.emit("start");                                                    // 4389
      return this;                                                                                                     // 4390
    },                                                                                                                 // 4391
    brush: function() {                                                                                                // 4392
      this.emit("brush");                                                                                              // 4393
      return this;                                                                                                     // 4394
    },                                                                                                                 // 4395
    end: function() {                                                                                                  // 4396
      if (--this.active === 0) delete this.state.emitter, this.emit("end");                                            // 4397
      return this;                                                                                                     // 4398
    },                                                                                                                 // 4399
    emit: function(type) {                                                                                             // 4400
      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }                                                                                                                  // 4402
  };                                                                                                                   // 4403
                                                                                                                       // 4404
  function started() {                                                                                                 // 4405
    if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$1(); }
    else if (touchending) return;                                                                                      // 4407
    if (!filter.apply(this, arguments)) return;                                                                        // 4408
                                                                                                                       // 4409
    var that = this,                                                                                                   // 4410
        type = exports.event.target.__data__.type,                                                                     // 4411
        mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
        signX = dim === Y ? null : signsX[type],                                                                       // 4413
        signY = dim === X ? null : signsY[type],                                                                       // 4414
        state = local$$1(that),                                                                                        // 4415
        extent = state.extent,                                                                                         // 4416
        selection$$1 = state.selection,                                                                                // 4417
        W = extent[0][0], w0, w1,                                                                                      // 4418
        N = extent[0][1], n0, n1,                                                                                      // 4419
        E = extent[1][0], e0, e1,                                                                                      // 4420
        S = extent[1][1], s0, s1,                                                                                      // 4421
        dx,                                                                                                            // 4422
        dy,                                                                                                            // 4423
        moving,                                                                                                        // 4424
        shifting = signX && signY && exports.event.shiftKey,                                                           // 4425
        lockX,                                                                                                         // 4426
        lockY,                                                                                                         // 4427
        point0 = mouse(that),                                                                                          // 4428
        point = point0,                                                                                                // 4429
        emit = emitter(that, arguments).beforestart();                                                                 // 4430
                                                                                                                       // 4431
    if (type === "overlay") {                                                                                          // 4432
      state.selection = selection$$1 = [                                                                               // 4433
        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],                                              // 4434
        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]                                                             // 4435
      ];                                                                                                               // 4436
    } else {                                                                                                           // 4437
      w0 = selection$$1[0][0];                                                                                         // 4438
      n0 = selection$$1[0][1];                                                                                         // 4439
      e0 = selection$$1[1][0];                                                                                         // 4440
      s0 = selection$$1[1][1];                                                                                         // 4441
    }                                                                                                                  // 4442
                                                                                                                       // 4443
    w1 = w0;                                                                                                           // 4444
    n1 = n0;                                                                                                           // 4445
    e1 = e0;                                                                                                           // 4446
    s1 = s0;                                                                                                           // 4447
                                                                                                                       // 4448
    var group = select(that)                                                                                           // 4449
        .attr("pointer-events", "none");                                                                               // 4450
                                                                                                                       // 4451
    var overlay = group.selectAll(".overlay")                                                                          // 4452
        .attr("cursor", cursors[type]);                                                                                // 4453
                                                                                                                       // 4454
    if (exports.event.touches) {                                                                                       // 4455
      group                                                                                                            // 4456
          .on("touchmove.brush", moved, true)                                                                          // 4457
          .on("touchend.brush touchcancel.brush", ended, true);                                                        // 4458
    } else {                                                                                                           // 4459
      var view = select(exports.event.view)                                                                            // 4460
          .on("keydown.brush", keydowned, true)                                                                        // 4461
          .on("keyup.brush", keyupped, true)                                                                           // 4462
          .on("mousemove.brush", moved, true)                                                                          // 4463
          .on("mouseup.brush", ended, true);                                                                           // 4464
                                                                                                                       // 4465
      dragDisable(exports.event.view);                                                                                 // 4466
    }                                                                                                                  // 4467
                                                                                                                       // 4468
    nopropagation$1();                                                                                                 // 4469
    interrupt(that);                                                                                                   // 4470
    redraw.call(that);                                                                                                 // 4471
    emit.start();                                                                                                      // 4472
                                                                                                                       // 4473
    function moved() {                                                                                                 // 4474
      var point1 = mouse(that);                                                                                        // 4475
      if (shifting && !lockX && !lockY) {                                                                              // 4476
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;                             // 4477
        else lockX = true;                                                                                             // 4478
      }                                                                                                                // 4479
      point = point1;                                                                                                  // 4480
      moving = true;                                                                                                   // 4481
      noevent$1();                                                                                                     // 4482
      move();                                                                                                          // 4483
    }                                                                                                                  // 4484
                                                                                                                       // 4485
    function move() {                                                                                                  // 4486
      var t;                                                                                                           // 4487
                                                                                                                       // 4488
      dx = point[0] - point0[0];                                                                                       // 4489
      dy = point[1] - point0[1];                                                                                       // 4490
                                                                                                                       // 4491
      switch (mode) {                                                                                                  // 4492
        case MODE_SPACE:                                                                                               // 4493
        case MODE_DRAG: {                                                                                              // 4494
          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;                          // 4495
          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;                          // 4496
          break;                                                                                                       // 4497
        }                                                                                                              // 4498
        case MODE_HANDLE: {                                                                                            // 4499
          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;                           // 4500
          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;                      // 4501
          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;                           // 4502
          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;                      // 4503
          break;                                                                                                       // 4504
        }                                                                                                              // 4505
        case MODE_CENTER: {                                                                                            // 4506
          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));   // 4507
          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));   // 4508
          break;                                                                                                       // 4509
        }                                                                                                              // 4510
      }                                                                                                                // 4511
                                                                                                                       // 4512
      if (e1 < w1) {                                                                                                   // 4513
        signX *= -1;                                                                                                   // 4514
        t = w0, w0 = e0, e0 = t;                                                                                       // 4515
        t = w1, w1 = e1, e1 = t;                                                                                       // 4516
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);                                        // 4517
      }                                                                                                                // 4518
                                                                                                                       // 4519
      if (s1 < n1) {                                                                                                   // 4520
        signY *= -1;                                                                                                   // 4521
        t = n0, n0 = s0, s0 = t;                                                                                       // 4522
        t = n1, n1 = s1, s1 = t;                                                                                       // 4523
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);                                        // 4524
      }                                                                                                                // 4525
                                                                                                                       // 4526
      if (state.selection) selection$$1 = state.selection; // May be set by brush.move!                                // 4527
      if (lockX) w1 = selection$$1[0][0], e1 = selection$$1[1][0];                                                     // 4528
      if (lockY) n1 = selection$$1[0][1], s1 = selection$$1[1][1];                                                     // 4529
                                                                                                                       // 4530
      if (selection$$1[0][0] !== w1                                                                                    // 4531
          || selection$$1[0][1] !== n1                                                                                 // 4532
          || selection$$1[1][0] !== e1                                                                                 // 4533
          || selection$$1[1][1] !== s1) {                                                                              // 4534
        state.selection = [[w1, n1], [e1, s1]];                                                                        // 4535
        redraw.call(that);                                                                                             // 4536
        emit.brush();                                                                                                  // 4537
      }                                                                                                                // 4538
    }                                                                                                                  // 4539
                                                                                                                       // 4540
    function ended() {                                                                                                 // 4541
      nopropagation$1();                                                                                               // 4542
      if (exports.event.touches) {                                                                                     // 4543
        if (exports.event.touches.length) return;                                                                      // 4544
        if (touchending) clearTimeout(touchending);                                                                    // 4545
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!                // 4546
        group.on("touchmove.brush touchend.brush touchcancel.brush", null);                                            // 4547
      } else {                                                                                                         // 4548
        yesdrag(exports.event.view, moving);                                                                           // 4549
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);                                      // 4550
      }                                                                                                                // 4551
      group.attr("pointer-events", "all");                                                                             // 4552
      overlay.attr("cursor", cursors.overlay);                                                                         // 4553
      if (state.selection) selection$$1 = state.selection; // May be set by brush.move (on start)!                     // 4554
      if (empty(selection$$1)) state.selection = null, redraw.call(that);                                              // 4555
      emit.end();                                                                                                      // 4556
    }                                                                                                                  // 4557
                                                                                                                       // 4558
    function keydowned() {                                                                                             // 4559
      switch (exports.event.keyCode) {                                                                                 // 4560
        case 16: { // SHIFT                                                                                            // 4561
          shifting = signX && signY;                                                                                   // 4562
          break;                                                                                                       // 4563
        }                                                                                                              // 4564
        case 18: { // ALT                                                                                              // 4565
          if (mode === MODE_HANDLE) {                                                                                  // 4566
            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;                                                     // 4567
            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;                                                     // 4568
            mode = MODE_CENTER;                                                                                        // 4569
            move();                                                                                                    // 4570
          }                                                                                                            // 4571
          break;                                                                                                       // 4572
        }                                                                                                              // 4573
        case 32: { // SPACE; takes priority over ALT                                                                   // 4574
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {                                                          // 4575
            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;                                             // 4576
            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;                                             // 4577
            mode = MODE_SPACE;                                                                                         // 4578
            overlay.attr("cursor", cursors.selection);                                                                 // 4579
            move();                                                                                                    // 4580
          }                                                                                                            // 4581
          break;                                                                                                       // 4582
        }                                                                                                              // 4583
        default: return;                                                                                               // 4584
      }                                                                                                                // 4585
      noevent$1();                                                                                                     // 4586
    }                                                                                                                  // 4587
                                                                                                                       // 4588
    function keyupped() {                                                                                              // 4589
      switch (exports.event.keyCode) {                                                                                 // 4590
        case 16: { // SHIFT                                                                                            // 4591
          if (shifting) {                                                                                              // 4592
            lockX = lockY = shifting = false;                                                                          // 4593
            move();                                                                                                    // 4594
          }                                                                                                            // 4595
          break;                                                                                                       // 4596
        }                                                                                                              // 4597
        case 18: { // ALT                                                                                              // 4598
          if (mode === MODE_CENTER) {                                                                                  // 4599
            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;                                                       // 4600
            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;                                                       // 4601
            mode = MODE_HANDLE;                                                                                        // 4602
            move();                                                                                                    // 4603
          }                                                                                                            // 4604
          break;                                                                                                       // 4605
        }                                                                                                              // 4606
        case 32: { // SPACE                                                                                            // 4607
          if (mode === MODE_SPACE) {                                                                                   // 4608
            if (exports.event.altKey) {                                                                                // 4609
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;                                                   // 4610
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;                                                   // 4611
              mode = MODE_CENTER;                                                                                      // 4612
            } else {                                                                                                   // 4613
              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;                                                     // 4614
              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;                                                     // 4615
              mode = MODE_HANDLE;                                                                                      // 4616
            }                                                                                                          // 4617
            overlay.attr("cursor", cursors[type]);                                                                     // 4618
            move();                                                                                                    // 4619
          }                                                                                                            // 4620
          break;                                                                                                       // 4621
        }                                                                                                              // 4622
        default: return;                                                                                               // 4623
      }                                                                                                                // 4624
      noevent$1();                                                                                                     // 4625
    }                                                                                                                  // 4626
  }                                                                                                                    // 4627
                                                                                                                       // 4628
  function initialize() {                                                                                              // 4629
    var state = this.__brush || {selection: null};                                                                     // 4630
    state.extent = extent.apply(this, arguments);                                                                      // 4631
    state.dim = dim;                                                                                                   // 4632
    return state;                                                                                                      // 4633
  }                                                                                                                    // 4634
                                                                                                                       // 4635
  brush.extent = function(_) {                                                                                         // 4636
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$4([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
  };                                                                                                                   // 4638
                                                                                                                       // 4639
  brush.filter = function(_) {                                                                                         // 4640
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), brush) : filter;                // 4641
  };                                                                                                                   // 4642
                                                                                                                       // 4643
  brush.handleSize = function(_) {                                                                                     // 4644
    return arguments.length ? (handleSize = +_, brush) : handleSize;                                                   // 4645
  };                                                                                                                   // 4646
                                                                                                                       // 4647
  brush.on = function() {                                                                                              // 4648
    var value = listeners.on.apply(listeners, arguments);                                                              // 4649
    return value === listeners ? brush : value;                                                                        // 4650
  };                                                                                                                   // 4651
                                                                                                                       // 4652
  return brush;                                                                                                        // 4653
}                                                                                                                      // 4654
                                                                                                                       // 4655
var cos = Math.cos;                                                                                                    // 4656
var sin = Math.sin;                                                                                                    // 4657
var pi$1 = Math.PI;                                                                                                    // 4658
var halfPi$1 = pi$1 / 2;                                                                                               // 4659
var tau$1 = pi$1 * 2;                                                                                                  // 4660
var max$1 = Math.max;                                                                                                  // 4661
                                                                                                                       // 4662
function compareValue(compare) {                                                                                       // 4663
  return function(a, b) {                                                                                              // 4664
    return compare(                                                                                                    // 4665
      a.source.value + a.target.value,                                                                                 // 4666
      b.source.value + b.target.value                                                                                  // 4667
    );                                                                                                                 // 4668
  };                                                                                                                   // 4669
}                                                                                                                      // 4670
                                                                                                                       // 4671
var chord = function() {                                                                                               // 4672
  var padAngle = 0,                                                                                                    // 4673
      sortGroups = null,                                                                                               // 4674
      sortSubgroups = null,                                                                                            // 4675
      sortChords = null;                                                                                               // 4676
                                                                                                                       // 4677
  function chord(matrix) {                                                                                             // 4678
    var n = matrix.length,                                                                                             // 4679
        groupSums = [],                                                                                                // 4680
        groupIndex = sequence(n),                                                                                      // 4681
        subgroupIndex = [],                                                                                            // 4682
        chords = [],                                                                                                   // 4683
        groups = chords.groups = new Array(n),                                                                         // 4684
        subgroups = new Array(n * n),                                                                                  // 4685
        k,                                                                                                             // 4686
        x,                                                                                                             // 4687
        x0,                                                                                                            // 4688
        dx,                                                                                                            // 4689
        i,                                                                                                             // 4690
        j;                                                                                                             // 4691
                                                                                                                       // 4692
    // Compute the sum.                                                                                                // 4693
    k = 0, i = -1; while (++i < n) {                                                                                   // 4694
      x = 0, j = -1; while (++j < n) {                                                                                 // 4695
        x += matrix[i][j];                                                                                             // 4696
      }                                                                                                                // 4697
      groupSums.push(x);                                                                                               // 4698
      subgroupIndex.push(sequence(n));                                                                                 // 4699
      k += x;                                                                                                          // 4700
    }                                                                                                                  // 4701
                                                                                                                       // 4702
    // Sort groups…                                                                                                    // 4703
    if (sortGroups) groupIndex.sort(function(a, b) {                                                                   // 4704
      return sortGroups(groupSums[a], groupSums[b]);                                                                   // 4705
    });                                                                                                                // 4706
                                                                                                                       // 4707
    // Sort subgroups…                                                                                                 // 4708
    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {                                                          // 4709
      d.sort(function(a, b) {                                                                                          // 4710
        return sortSubgroups(matrix[i][a], matrix[i][b]);                                                              // 4711
      });                                                                                                              // 4712
    });                                                                                                                // 4713
                                                                                                                       // 4714
    // Convert the sum to scaling factor for [0, 2pi].                                                                 // 4715
    // TODO Allow start and end angle to be specified?                                                                 // 4716
    // TODO Allow padding to be specified as percentage?                                                               // 4717
    k = max$1(0, tau$1 - padAngle * n) / k;                                                                            // 4718
    dx = k ? padAngle : tau$1 / n;                                                                                     // 4719
                                                                                                                       // 4720
    // Compute the start and end angle for each group and subgroup.                                                    // 4721
    // Note: Opera has a bug reordering object literal properties!                                                     // 4722
    x = 0, i = -1; while (++i < n) {                                                                                   // 4723
      x0 = x, j = -1; while (++j < n) {                                                                                // 4724
        var di = groupIndex[i],                                                                                        // 4725
            dj = subgroupIndex[di][j],                                                                                 // 4726
            v = matrix[di][dj],                                                                                        // 4727
            a0 = x,                                                                                                    // 4728
            a1 = x += v * k;                                                                                           // 4729
        subgroups[dj * n + di] = {                                                                                     // 4730
          index: di,                                                                                                   // 4731
          subindex: dj,                                                                                                // 4732
          startAngle: a0,                                                                                              // 4733
          endAngle: a1,                                                                                                // 4734
          value: v                                                                                                     // 4735
        };                                                                                                             // 4736
      }                                                                                                                // 4737
      groups[di] = {                                                                                                   // 4738
        index: di,                                                                                                     // 4739
        startAngle: x0,                                                                                                // 4740
        endAngle: x,                                                                                                   // 4741
        value: groupSums[di]                                                                                           // 4742
      };                                                                                                               // 4743
      x += dx;                                                                                                         // 4744
    }                                                                                                                  // 4745
                                                                                                                       // 4746
    // Generate chords for each (non-empty) subgroup-subgroup link.                                                    // 4747
    i = -1; while (++i < n) {                                                                                          // 4748
      j = i - 1; while (++j < n) {                                                                                     // 4749
        var source = subgroups[j * n + i],                                                                             // 4750
            target = subgroups[i * n + j];                                                                             // 4751
        if (source.value || target.value) {                                                                            // 4752
          chords.push(source.value < target.value                                                                      // 4753
              ? {source: target, target: source}                                                                       // 4754
              : {source: source, target: target});                                                                     // 4755
        }                                                                                                              // 4756
      }                                                                                                                // 4757
    }                                                                                                                  // 4758
                                                                                                                       // 4759
    return sortChords ? chords.sort(sortChords) : chords;                                                              // 4760
  }                                                                                                                    // 4761
                                                                                                                       // 4762
  chord.padAngle = function(_) {                                                                                       // 4763
    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;                                              // 4764
  };                                                                                                                   // 4765
                                                                                                                       // 4766
  chord.sortGroups = function(_) {                                                                                     // 4767
    return arguments.length ? (sortGroups = _, chord) : sortGroups;                                                    // 4768
  };                                                                                                                   // 4769
                                                                                                                       // 4770
  chord.sortSubgroups = function(_) {                                                                                  // 4771
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;                                              // 4772
  };                                                                                                                   // 4773
                                                                                                                       // 4774
  chord.sortChords = function(_) {                                                                                     // 4775
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };                                                                                                                   // 4777
                                                                                                                       // 4778
  return chord;                                                                                                        // 4779
};                                                                                                                     // 4780
                                                                                                                       // 4781
var slice$2 = Array.prototype.slice;                                                                                   // 4782
                                                                                                                       // 4783
var constant$5 = function(x) {                                                                                         // 4784
  return function() {                                                                                                  // 4785
    return x;                                                                                                          // 4786
  };                                                                                                                   // 4787
};                                                                                                                     // 4788
                                                                                                                       // 4789
var pi$2 = Math.PI;                                                                                                    // 4790
var tau$2 = 2 * pi$2;                                                                                                  // 4791
var epsilon$1 = 1e-6;                                                                                                  // 4792
var tauEpsilon = tau$2 - epsilon$1;                                                                                    // 4793
                                                                                                                       // 4794
function Path() {                                                                                                      // 4795
  this._x0 = this._y0 = // start of current subpath                                                                    // 4796
  this._x1 = this._y1 = null; // end of current subpath                                                                // 4797
  this._ = "";                                                                                                         // 4798
}                                                                                                                      // 4799
                                                                                                                       // 4800
function path() {                                                                                                      // 4801
  return new Path;                                                                                                     // 4802
}                                                                                                                      // 4803
                                                                                                                       // 4804
Path.prototype = path.prototype = {                                                                                    // 4805
  constructor: Path,                                                                                                   // 4806
  moveTo: function(x, y) {                                                                                             // 4807
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);                                     // 4808
  },                                                                                                                   // 4809
  closePath: function() {                                                                                              // 4810
    if (this._x1 !== null) {                                                                                           // 4811
      this._x1 = this._x0, this._y1 = this._y0;                                                                        // 4812
      this._ += "Z";                                                                                                   // 4813
    }                                                                                                                  // 4814
  },                                                                                                                   // 4815
  lineTo: function(x, y) {                                                                                             // 4816
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);                                                           // 4817
  },                                                                                                                   // 4818
  quadraticCurveTo: function(x1, y1, x, y) {                                                                           // 4819
    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);                               // 4820
  },                                                                                                                   // 4821
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {                                                                      // 4822
    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);   // 4823
  },                                                                                                                   // 4824
  arcTo: function(x1, y1, x2, y2, r) {                                                                                 // 4825
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;                                                                    // 4826
    var x0 = this._x1,                                                                                                 // 4827
        y0 = this._y1,                                                                                                 // 4828
        x21 = x2 - x1,                                                                                                 // 4829
        y21 = y2 - y1,                                                                                                 // 4830
        x01 = x0 - x1,                                                                                                 // 4831
        y01 = y0 - y1,                                                                                                 // 4832
        l01_2 = x01 * x01 + y01 * y01;                                                                                 // 4833
                                                                                                                       // 4834
    // Is the radius negative? Error.                                                                                  // 4835
    if (r < 0) throw new Error("negative radius: " + r);                                                               // 4836
                                                                                                                       // 4837
    // Is this path empty? Move to (x1,y1).                                                                            // 4838
    if (this._x1 === null) {                                                                                           // 4839
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);                                                         // 4840
    }                                                                                                                  // 4841
                                                                                                                       // 4842
    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.                                                             // 4843
    else if (!(l01_2 > epsilon$1)) {}                                                                                  // 4844
                                                                                                                       // 4845
    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?                                                                 // 4846
    // Equivalently, is (x1,y1) coincident with (x2,y2)?                                                               // 4847
    // Or, is the radius zero? Line to (x1,y1).                                                                        // 4848
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {                                                   // 4849
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);                                                         // 4850
    }                                                                                                                  // 4851
                                                                                                                       // 4852
    // Otherwise, draw an arc!                                                                                         // 4853
    else {                                                                                                             // 4854
      var x20 = x2 - x0,                                                                                               // 4855
          y20 = y2 - y0,                                                                                               // 4856
          l21_2 = x21 * x21 + y21 * y21,                                                                               // 4857
          l20_2 = x20 * x20 + y20 * y20,                                                                               // 4858
          l21 = Math.sqrt(l21_2),                                                                                      // 4859
          l01 = Math.sqrt(l01_2),                                                                                      // 4860
          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),                         // 4861
          t01 = l / l01,                                                                                               // 4862
          t21 = l / l21;                                                                                               // 4863
                                                                                                                       // 4864
      // If the start tangent is not coincident with (x0,y0), line to.                                                 // 4865
      if (Math.abs(t01 - 1) > epsilon$1) {                                                                             // 4866
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);                                                     // 4867
      }                                                                                                                // 4868
                                                                                                                       // 4869
      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }                                                                                                                  // 4871
  },                                                                                                                   // 4872
  arc: function(x, y, r, a0, a1, ccw) {                                                                                // 4873
    x = +x, y = +y, r = +r;                                                                                            // 4874
    var dx = r * Math.cos(a0),                                                                                         // 4875
        dy = r * Math.sin(a0),                                                                                         // 4876
        x0 = x + dx,                                                                                                   // 4877
        y0 = y + dy,                                                                                                   // 4878
        cw = 1 ^ ccw,                                                                                                  // 4879
        da = ccw ? a0 - a1 : a1 - a0;                                                                                  // 4880
                                                                                                                       // 4881
    // Is the radius negative? Error.                                                                                  // 4882
    if (r < 0) throw new Error("negative radius: " + r);                                                               // 4883
                                                                                                                       // 4884
    // Is this path empty? Move to (x0,y0).                                                                            // 4885
    if (this._x1 === null) {                                                                                           // 4886
      this._ += "M" + x0 + "," + y0;                                                                                   // 4887
    }                                                                                                                  // 4888
                                                                                                                       // 4889
    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).                                         // 4890
    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {                             // 4891
      this._ += "L" + x0 + "," + y0;                                                                                   // 4892
    }                                                                                                                  // 4893
                                                                                                                       // 4894
    // Is this arc empty? We’re done.                                                                                  // 4895
    if (!r) return;                                                                                                    // 4896
                                                                                                                       // 4897
    // Does the angle go the wrong way? Flip the direction.                                                            // 4898
    if (da < 0) da = da % tau$2 + tau$2;                                                                               // 4899
                                                                                                                       // 4900
    // Is this a complete circle? Draw two arcs to complete the circle.                                                // 4901
    if (da > tauEpsilon) {                                                                                             // 4902
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }                                                                                                                  // 4904
                                                                                                                       // 4905
    // Is this arc non-empty? Draw an arc!                                                                             // 4906
    else if (da > epsilon$1) {                                                                                         // 4907
      this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }                                                                                                                  // 4909
  },                                                                                                                   // 4910
  rect: function(x, y, w, h) {                                                                                         // 4911
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  },                                                                                                                   // 4913
  toString: function() {                                                                                               // 4914
    return this._;                                                                                                     // 4915
  }                                                                                                                    // 4916
};                                                                                                                     // 4917
                                                                                                                       // 4918
function defaultSource(d) {                                                                                            // 4919
  return d.source;                                                                                                     // 4920
}                                                                                                                      // 4921
                                                                                                                       // 4922
function defaultTarget(d) {                                                                                            // 4923
  return d.target;                                                                                                     // 4924
}                                                                                                                      // 4925
                                                                                                                       // 4926
function defaultRadius(d) {                                                                                            // 4927
  return d.radius;                                                                                                     // 4928
}                                                                                                                      // 4929
                                                                                                                       // 4930
function defaultStartAngle(d) {                                                                                        // 4931
  return d.startAngle;                                                                                                 // 4932
}                                                                                                                      // 4933
                                                                                                                       // 4934
function defaultEndAngle(d) {                                                                                          // 4935
  return d.endAngle;                                                                                                   // 4936
}                                                                                                                      // 4937
                                                                                                                       // 4938
var ribbon = function() {                                                                                              // 4939
  var source = defaultSource,                                                                                          // 4940
      target = defaultTarget,                                                                                          // 4941
      radius = defaultRadius,                                                                                          // 4942
      startAngle = defaultStartAngle,                                                                                  // 4943
      endAngle = defaultEndAngle,                                                                                      // 4944
      context = null;                                                                                                  // 4945
                                                                                                                       // 4946
  function ribbon() {                                                                                                  // 4947
    var buffer,                                                                                                        // 4948
        argv = slice$2.call(arguments),                                                                                // 4949
        s = source.apply(this, argv),                                                                                  // 4950
        t = target.apply(this, argv),                                                                                  // 4951
        sr = +radius.apply(this, (argv[0] = s, argv)),                                                                 // 4952
        sa0 = startAngle.apply(this, argv) - halfPi$1,                                                                 // 4953
        sa1 = endAngle.apply(this, argv) - halfPi$1,                                                                   // 4954
        sx0 = sr * cos(sa0),                                                                                           // 4955
        sy0 = sr * sin(sa0),                                                                                           // 4956
        tr = +radius.apply(this, (argv[0] = t, argv)),                                                                 // 4957
        ta0 = startAngle.apply(this, argv) - halfPi$1,                                                                 // 4958
        ta1 = endAngle.apply(this, argv) - halfPi$1;                                                                   // 4959
                                                                                                                       // 4960
    if (!context) context = buffer = path();                                                                           // 4961
                                                                                                                       // 4962
    context.moveTo(sx0, sy0);                                                                                          // 4963
    context.arc(0, 0, sr, sa0, sa1);                                                                                   // 4964
    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?                                                               // 4965
      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));                                                    // 4966
      context.arc(0, 0, tr, ta0, ta1);                                                                                 // 4967
    }                                                                                                                  // 4968
    context.quadraticCurveTo(0, 0, sx0, sy0);                                                                          // 4969
    context.closePath();                                                                                               // 4970
                                                                                                                       // 4971
    if (buffer) return context = null, buffer + "" || null;                                                            // 4972
  }                                                                                                                    // 4973
                                                                                                                       // 4974
  ribbon.radius = function(_) {                                                                                        // 4975
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : radius;                // 4976
  };                                                                                                                   // 4977
                                                                                                                       // 4978
  ribbon.startAngle = function(_) {                                                                                    // 4979
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;        // 4980
  };                                                                                                                   // 4981
                                                                                                                       // 4982
  ribbon.endAngle = function(_) {                                                                                      // 4983
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;            // 4984
  };                                                                                                                   // 4985
                                                                                                                       // 4986
  ribbon.source = function(_) {                                                                                        // 4987
    return arguments.length ? (source = _, ribbon) : source;                                                           // 4988
  };                                                                                                                   // 4989
                                                                                                                       // 4990
  ribbon.target = function(_) {                                                                                        // 4991
    return arguments.length ? (target = _, ribbon) : target;                                                           // 4992
  };                                                                                                                   // 4993
                                                                                                                       // 4994
  ribbon.context = function(_) {                                                                                       // 4995
    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;                                    // 4996
  };                                                                                                                   // 4997
                                                                                                                       // 4998
  return ribbon;                                                                                                       // 4999
};                                                                                                                     // 5000
                                                                                                                       // 5001
var prefix = "$";                                                                                                      // 5002
                                                                                                                       // 5003
function Map() {}                                                                                                      // 5004
                                                                                                                       // 5005
Map.prototype = map$1.prototype = {                                                                                    // 5006
  constructor: Map,                                                                                                    // 5007
  has: function(key) {                                                                                                 // 5008
    return (prefix + key) in this;                                                                                     // 5009
  },                                                                                                                   // 5010
  get: function(key) {                                                                                                 // 5011
    return this[prefix + key];                                                                                         // 5012
  },                                                                                                                   // 5013
  set: function(key, value) {                                                                                          // 5014
    this[prefix + key] = value;                                                                                        // 5015
    return this;                                                                                                       // 5016
  },                                                                                                                   // 5017
  remove: function(key) {                                                                                              // 5018
    var property = prefix + key;                                                                                       // 5019
    return property in this && delete this[property];                                                                  // 5020
  },                                                                                                                   // 5021
  clear: function() {                                                                                                  // 5022
    for (var property in this) if (property[0] === prefix) delete this[property];                                      // 5023
  },                                                                                                                   // 5024
  keys: function() {                                                                                                   // 5025
    var keys = [];                                                                                                     // 5026
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));                               // 5027
    return keys;                                                                                                       // 5028
  },                                                                                                                   // 5029
  values: function() {                                                                                                 // 5030
    var values = [];                                                                                                   // 5031
    for (var property in this) if (property[0] === prefix) values.push(this[property]);                                // 5032
    return values;                                                                                                     // 5033
  },                                                                                                                   // 5034
  entries: function() {                                                                                                // 5035
    var entries = [];                                                                                                  // 5036
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;                                                                                                    // 5038
  },                                                                                                                   // 5039
  size: function() {                                                                                                   // 5040
    var size = 0;                                                                                                      // 5041
    for (var property in this) if (property[0] === prefix) ++size;                                                     // 5042
    return size;                                                                                                       // 5043
  },                                                                                                                   // 5044
  empty: function() {                                                                                                  // 5045
    for (var property in this) if (property[0] === prefix) return false;                                               // 5046
    return true;                                                                                                       // 5047
  },                                                                                                                   // 5048
  each: function(f) {                                                                                                  // 5049
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);                 // 5050
  }                                                                                                                    // 5051
};                                                                                                                     // 5052
                                                                                                                       // 5053
function map$1(object, f) {                                                                                            // 5054
  var map = new Map;                                                                                                   // 5055
                                                                                                                       // 5056
  // Copy constructor.                                                                                                 // 5057
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });                               // 5058
                                                                                                                       // 5059
  // Index array by numeric index or specified key function.                                                           // 5060
  else if (Array.isArray(object)) {                                                                                    // 5061
    var i = -1,                                                                                                        // 5062
        n = object.length,                                                                                             // 5063
        o;                                                                                                             // 5064
                                                                                                                       // 5065
    if (f == null) while (++i < n) map.set(i, object[i]);                                                              // 5066
    else while (++i < n) map.set(f(o = object[i], i, object), o);                                                      // 5067
  }                                                                                                                    // 5068
                                                                                                                       // 5069
  // Convert object to map.                                                                                            // 5070
  else if (object) for (var key in object) map.set(key, object[key]);                                                  // 5071
                                                                                                                       // 5072
  return map;                                                                                                          // 5073
}                                                                                                                      // 5074
                                                                                                                       // 5075
var nest = function() {                                                                                                // 5076
  var keys = [],                                                                                                       // 5077
      sortKeys = [],                                                                                                   // 5078
      sortValues,                                                                                                      // 5079
      rollup,                                                                                                          // 5080
      nest;                                                                                                            // 5081
                                                                                                                       // 5082
  function apply(array, depth, createResult, setResult) {                                                              // 5083
    if (depth >= keys.length) return rollup != null                                                                    // 5084
        ? rollup(array) : (sortValues != null                                                                          // 5085
        ? array.sort(sortValues)                                                                                       // 5086
        : array);                                                                                                      // 5087
                                                                                                                       // 5088
    var i = -1,                                                                                                        // 5089
        n = array.length,                                                                                              // 5090
        key = keys[depth++],                                                                                           // 5091
        keyValue,                                                                                                      // 5092
        value,                                                                                                         // 5093
        valuesByKey = map$1(),                                                                                         // 5094
        values,                                                                                                        // 5095
        result = createResult();                                                                                       // 5096
                                                                                                                       // 5097
    while (++i < n) {                                                                                                  // 5098
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {                                           // 5099
        values.push(value);                                                                                            // 5100
      } else {                                                                                                         // 5101
        valuesByKey.set(keyValue, [value]);                                                                            // 5102
      }                                                                                                                // 5103
    }                                                                                                                  // 5104
                                                                                                                       // 5105
    valuesByKey.each(function(values, key) {                                                                           // 5106
      setResult(result, key, apply(values, depth, createResult, setResult));                                           // 5107
    });                                                                                                                // 5108
                                                                                                                       // 5109
    return result;                                                                                                     // 5110
  }                                                                                                                    // 5111
                                                                                                                       // 5112
  function entries(map, depth) {                                                                                       // 5113
    if (++depth > keys.length) return map;                                                                             // 5114
    var array, sortKey = sortKeys[depth - 1];                                                                          // 5115
    if (rollup != null && depth >= keys.length) array = map.entries();                                                 // 5116
    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });                    // 5117
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;                     // 5118
  }                                                                                                                    // 5119
                                                                                                                       // 5120
  return nest = {                                                                                                      // 5121
    object: function(array) { return apply(array, 0, createObject, setObject); },                                      // 5122
    map: function(array) { return apply(array, 0, createMap, setMap); },                                               // 5123
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },                               // 5124
    key: function(d) { keys.push(d); return nest; },                                                                   // 5125
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },                                     // 5126
    sortValues: function(order) { sortValues = order; return nest; },                                                  // 5127
    rollup: function(f) { rollup = f; return nest; }                                                                   // 5128
  };                                                                                                                   // 5129
};                                                                                                                     // 5130
                                                                                                                       // 5131
function createObject() {                                                                                              // 5132
  return {};                                                                                                           // 5133
}                                                                                                                      // 5134
                                                                                                                       // 5135
function setObject(object, key, value) {                                                                               // 5136
  object[key] = value;                                                                                                 // 5137
}                                                                                                                      // 5138
                                                                                                                       // 5139
function createMap() {                                                                                                 // 5140
  return map$1();                                                                                                      // 5141
}                                                                                                                      // 5142
                                                                                                                       // 5143
function setMap(map, key, value) {                                                                                     // 5144
  map.set(key, value);                                                                                                 // 5145
}                                                                                                                      // 5146
                                                                                                                       // 5147
function Set() {}                                                                                                      // 5148
                                                                                                                       // 5149
var proto = map$1.prototype;                                                                                           // 5150
                                                                                                                       // 5151
Set.prototype = set$2.prototype = {                                                                                    // 5152
  constructor: Set,                                                                                                    // 5153
  has: proto.has,                                                                                                      // 5154
  add: function(value) {                                                                                               // 5155
    value += "";                                                                                                       // 5156
    this[prefix + value] = value;                                                                                      // 5157
    return this;                                                                                                       // 5158
  },                                                                                                                   // 5159
  remove: proto.remove,                                                                                                // 5160
  clear: proto.clear,                                                                                                  // 5161
  values: proto.keys,                                                                                                  // 5162
  size: proto.size,                                                                                                    // 5163
  empty: proto.empty,                                                                                                  // 5164
  each: proto.each                                                                                                     // 5165
};                                                                                                                     // 5166
                                                                                                                       // 5167
function set$2(object, f) {                                                                                            // 5168
  var set = new Set;                                                                                                   // 5169
                                                                                                                       // 5170
  // Copy constructor.                                                                                                 // 5171
  if (object instanceof Set) object.each(function(value) { set.add(value); });                                         // 5172
                                                                                                                       // 5173
  // Otherwise, assume it’s an array.                                                                                  // 5174
  else if (object) {                                                                                                   // 5175
    var i = -1, n = object.length;                                                                                     // 5176
    if (f == null) while (++i < n) set.add(object[i]);                                                                 // 5177
    else while (++i < n) set.add(f(object[i], i, object));                                                             // 5178
  }                                                                                                                    // 5179
                                                                                                                       // 5180
  return set;                                                                                                          // 5181
}                                                                                                                      // 5182
                                                                                                                       // 5183
var keys = function(map) {                                                                                             // 5184
  var keys = [];                                                                                                       // 5185
  for (var key in map) keys.push(key);                                                                                 // 5186
  return keys;                                                                                                         // 5187
};                                                                                                                     // 5188
                                                                                                                       // 5189
var values = function(map) {                                                                                           // 5190
  var values = [];                                                                                                     // 5191
  for (var key in map) values.push(map[key]);                                                                          // 5192
  return values;                                                                                                       // 5193
};                                                                                                                     // 5194
                                                                                                                       // 5195
var entries = function(map) {                                                                                          // 5196
  var entries = [];                                                                                                    // 5197
  for (var key in map) entries.push({key: key, value: map[key]});                                                      // 5198
  return entries;                                                                                                      // 5199
};                                                                                                                     // 5200
                                                                                                                       // 5201
function objectConverter(columns) {                                                                                    // 5202
  return new Function("d", "return {" + columns.map(function(name, i) {                                                // 5203
    return JSON.stringify(name) + ": d[" + i + "]";                                                                    // 5204
  }).join(",") + "}");                                                                                                 // 5205
}                                                                                                                      // 5206
                                                                                                                       // 5207
function customConverter(columns, f) {                                                                                 // 5208
  var object = objectConverter(columns);                                                                               // 5209
  return function(row, i) {                                                                                            // 5210
    return f(object(row), i, columns);                                                                                 // 5211
  };                                                                                                                   // 5212
}                                                                                                                      // 5213
                                                                                                                       // 5214
// Compute unique columns in order of discovery.                                                                       // 5215
function inferColumns(rows) {                                                                                          // 5216
  var columnSet = Object.create(null),                                                                                 // 5217
      columns = [];                                                                                                    // 5218
                                                                                                                       // 5219
  rows.forEach(function(row) {                                                                                         // 5220
    for (var column in row) {                                                                                          // 5221
      if (!(column in columnSet)) {                                                                                    // 5222
        columns.push(columnSet[column] = column);                                                                      // 5223
      }                                                                                                                // 5224
    }                                                                                                                  // 5225
  });                                                                                                                  // 5226
                                                                                                                       // 5227
  return columns;                                                                                                      // 5228
}                                                                                                                      // 5229
                                                                                                                       // 5230
var dsv = function(delimiter) {                                                                                        // 5231
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),                                                              // 5232
      delimiterCode = delimiter.charCodeAt(0);                                                                         // 5233
                                                                                                                       // 5234
  function parse(text, f) {                                                                                            // 5235
    var convert, columns, rows = parseRows(text, function(row, i) {                                                    // 5236
      if (convert) return convert(row, i - 1);                                                                         // 5237
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);                                     // 5238
    });                                                                                                                // 5239
    rows.columns = columns;                                                                                            // 5240
    return rows;                                                                                                       // 5241
  }                                                                                                                    // 5242
                                                                                                                       // 5243
  function parseRows(text, f) {                                                                                        // 5244
    var EOL = {}, // sentinel value for end-of-line                                                                    // 5245
        EOF = {}, // sentinel value for end-of-file                                                                    // 5246
        rows = [], // output rows                                                                                      // 5247
        N = text.length,                                                                                               // 5248
        I = 0, // current character index                                                                              // 5249
        n = 0, // the current line number                                                                              // 5250
        t, // the current token                                                                                        // 5251
        eol; // is the current token followed by EOL?                                                                  // 5252
                                                                                                                       // 5253
    function token() {                                                                                                 // 5254
      if (I >= N) return EOF; // special case: end of file                                                             // 5255
      if (eol) return eol = false, EOL; // special case: end of line                                                   // 5256
                                                                                                                       // 5257
      // special case: quotes                                                                                          // 5258
      var j = I, c;                                                                                                    // 5259
      if (text.charCodeAt(j) === 34) {                                                                                 // 5260
        var i = j;                                                                                                     // 5261
        while (i++ < N) {                                                                                              // 5262
          if (text.charCodeAt(i) === 34) {                                                                             // 5263
            if (text.charCodeAt(i + 1) !== 34) break;                                                                  // 5264
            ++i;                                                                                                       // 5265
          }                                                                                                            // 5266
        }                                                                                                              // 5267
        I = i + 2;                                                                                                     // 5268
        c = text.charCodeAt(i + 1);                                                                                    // 5269
        if (c === 13) {                                                                                                // 5270
          eol = true;                                                                                                  // 5271
          if (text.charCodeAt(i + 2) === 10) ++I;                                                                      // 5272
        } else if (c === 10) {                                                                                         // 5273
          eol = true;                                                                                                  // 5274
        }                                                                                                              // 5275
        return text.slice(j + 1, i).replace(/""/g, "\"");                                                              // 5276
      }                                                                                                                // 5277
                                                                                                                       // 5278
      // common case: find next delimiter or newline                                                                   // 5279
      while (I < N) {                                                                                                  // 5280
        var k = 1;                                                                                                     // 5281
        c = text.charCodeAt(I++);                                                                                      // 5282
        if (c === 10) eol = true; // \n                                                                                // 5283
        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n                         // 5284
        else if (c !== delimiterCode) continue;                                                                        // 5285
        return text.slice(j, I - k);                                                                                   // 5286
      }                                                                                                                // 5287
                                                                                                                       // 5288
      // special case: last token before EOF                                                                           // 5289
      return text.slice(j);                                                                                            // 5290
    }                                                                                                                  // 5291
                                                                                                                       // 5292
    while ((t = token()) !== EOF) {                                                                                    // 5293
      var a = [];                                                                                                      // 5294
      while (t !== EOL && t !== EOF) {                                                                                 // 5295
        a.push(t);                                                                                                     // 5296
        t = token();                                                                                                   // 5297
      }                                                                                                                // 5298
      if (f && (a = f(a, n++)) == null) continue;                                                                      // 5299
      rows.push(a);                                                                                                    // 5300
    }                                                                                                                  // 5301
                                                                                                                       // 5302
    return rows;                                                                                                       // 5303
  }                                                                                                                    // 5304
                                                                                                                       // 5305
  function format(rows, columns) {                                                                                     // 5306
    if (columns == null) columns = inferColumns(rows);                                                                 // 5307
    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {                                  // 5308
      return columns.map(function(column) {                                                                            // 5309
        return formatValue(row[column]);                                                                               // 5310
      }).join(delimiter);                                                                                              // 5311
    })).join("\n");                                                                                                    // 5312
  }                                                                                                                    // 5313
                                                                                                                       // 5314
  function formatRows(rows) {                                                                                          // 5315
    return rows.map(formatRow).join("\n");                                                                             // 5316
  }                                                                                                                    // 5317
                                                                                                                       // 5318
  function formatRow(row) {                                                                                            // 5319
    return row.map(formatValue).join(delimiter);                                                                       // 5320
  }                                                                                                                    // 5321
                                                                                                                       // 5322
  function formatValue(text) {                                                                                         // 5323
    return text == null ? ""                                                                                           // 5324
        : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""                                        // 5325
        : text;                                                                                                        // 5326
  }                                                                                                                    // 5327
                                                                                                                       // 5328
  return {                                                                                                             // 5329
    parse: parse,                                                                                                      // 5330
    parseRows: parseRows,                                                                                              // 5331
    format: format,                                                                                                    // 5332
    formatRows: formatRows                                                                                             // 5333
  };                                                                                                                   // 5334
};                                                                                                                     // 5335
                                                                                                                       // 5336
var csv = dsv(",");                                                                                                    // 5337
                                                                                                                       // 5338
var csvParse = csv.parse;                                                                                              // 5339
var csvParseRows = csv.parseRows;                                                                                      // 5340
var csvFormat = csv.format;                                                                                            // 5341
var csvFormatRows = csv.formatRows;                                                                                    // 5342
                                                                                                                       // 5343
var tsv = dsv("\t");                                                                                                   // 5344
                                                                                                                       // 5345
var tsvParse = tsv.parse;                                                                                              // 5346
var tsvParseRows = tsv.parseRows;                                                                                      // 5347
var tsvFormat = tsv.format;                                                                                            // 5348
var tsvFormatRows = tsv.formatRows;                                                                                    // 5349
                                                                                                                       // 5350
var center$1 = function(x, y) {                                                                                        // 5351
  var nodes;                                                                                                           // 5352
                                                                                                                       // 5353
  if (x == null) x = 0;                                                                                                // 5354
  if (y == null) y = 0;                                                                                                // 5355
                                                                                                                       // 5356
  function force() {                                                                                                   // 5357
    var i,                                                                                                             // 5358
        n = nodes.length,                                                                                              // 5359
        node,                                                                                                          // 5360
        sx = 0,                                                                                                        // 5361
        sy = 0;                                                                                                        // 5362
                                                                                                                       // 5363
    for (i = 0; i < n; ++i) {                                                                                          // 5364
      node = nodes[i], sx += node.x, sy += node.y;                                                                     // 5365
    }                                                                                                                  // 5366
                                                                                                                       // 5367
    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {                                                        // 5368
      node = nodes[i], node.x -= sx, node.y -= sy;                                                                     // 5369
    }                                                                                                                  // 5370
  }                                                                                                                    // 5371
                                                                                                                       // 5372
  force.initialize = function(_) {                                                                                     // 5373
    nodes = _;                                                                                                         // 5374
  };                                                                                                                   // 5375
                                                                                                                       // 5376
  force.x = function(_) {                                                                                              // 5377
    return arguments.length ? (x = +_, force) : x;                                                                     // 5378
  };                                                                                                                   // 5379
                                                                                                                       // 5380
  force.y = function(_) {                                                                                              // 5381
    return arguments.length ? (y = +_, force) : y;                                                                     // 5382
  };                                                                                                                   // 5383
                                                                                                                       // 5384
  return force;                                                                                                        // 5385
};                                                                                                                     // 5386
                                                                                                                       // 5387
var constant$6 = function(x) {                                                                                         // 5388
  return function() {                                                                                                  // 5389
    return x;                                                                                                          // 5390
  };                                                                                                                   // 5391
};                                                                                                                     // 5392
                                                                                                                       // 5393
var jiggle = function() {                                                                                              // 5394
  return (Math.random() - 0.5) * 1e-6;                                                                                 // 5395
};                                                                                                                     // 5396
                                                                                                                       // 5397
var tree_add = function(d) {                                                                                           // 5398
  var x = +this._x.call(null, d),                                                                                      // 5399
      y = +this._y.call(null, d);                                                                                      // 5400
  return add(this.cover(x, y), x, y, d);                                                                               // 5401
};                                                                                                                     // 5402
                                                                                                                       // 5403
function add(tree, x, y, d) {                                                                                          // 5404
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points                                                      // 5405
                                                                                                                       // 5406
  var parent,                                                                                                          // 5407
      node = tree._root,                                                                                               // 5408
      leaf = {data: d},                                                                                                // 5409
      x0 = tree._x0,                                                                                                   // 5410
      y0 = tree._y0,                                                                                                   // 5411
      x1 = tree._x1,                                                                                                   // 5412
      y1 = tree._y1,                                                                                                   // 5413
      xm,                                                                                                              // 5414
      ym,                                                                                                              // 5415
      xp,                                                                                                              // 5416
      yp,                                                                                                              // 5417
      right,                                                                                                           // 5418
      bottom,                                                                                                          // 5419
      i,                                                                                                               // 5420
      j;                                                                                                               // 5421
                                                                                                                       // 5422
  // If the tree is empty, initialize the root as a leaf.                                                              // 5423
  if (!node) return tree._root = leaf, tree;                                                                           // 5424
                                                                                                                       // 5425
  // Find the existing leaf for the new point, or add it.                                                              // 5426
  while (node.length) {                                                                                                // 5427
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;                                                      // 5428
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;                                                     // 5429
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;                         // 5430
  }                                                                                                                    // 5431
                                                                                                                       // 5432
  // Is the new point is exactly coincident with the existing point?                                                   // 5433
  xp = +tree._x.call(null, node.data);                                                                                 // 5434
  yp = +tree._y.call(null, node.data);                                                                                 // 5435
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;              // 5436
                                                                                                                       // 5437
  // Otherwise, split the leaf node until the old and new point are separated.                                         // 5438
  do {                                                                                                                 // 5439
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);                                            // 5440
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;                                                      // 5441
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;                                                     // 5442
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));                                          // 5443
  return parent[j] = node, parent[i] = leaf, tree;                                                                     // 5444
}                                                                                                                      // 5445
                                                                                                                       // 5446
function addAll(data) {                                                                                                // 5447
  var d, i, n = data.length,                                                                                           // 5448
      x,                                                                                                               // 5449
      y,                                                                                                               // 5450
      xz = new Array(n),                                                                                               // 5451
      yz = new Array(n),                                                                                               // 5452
      x0 = Infinity,                                                                                                   // 5453
      y0 = Infinity,                                                                                                   // 5454
      x1 = -Infinity,                                                                                                  // 5455
      y1 = -Infinity;                                                                                                  // 5456
                                                                                                                       // 5457
  // Compute the points and their extent.                                                                              // 5458
  for (i = 0; i < n; ++i) {                                                                                            // 5459
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;                    // 5460
    xz[i] = x;                                                                                                         // 5461
    yz[i] = y;                                                                                                         // 5462
    if (x < x0) x0 = x;                                                                                                // 5463
    if (x > x1) x1 = x;                                                                                                // 5464
    if (y < y0) y0 = y;                                                                                                // 5465
    if (y > y1) y1 = y;                                                                                                // 5466
  }                                                                                                                    // 5467
                                                                                                                       // 5468
  // If there were no (valid) points, inherit the existing extent.                                                     // 5469
  if (x1 < x0) x0 = this._x0, x1 = this._x1;                                                                           // 5470
  if (y1 < y0) y0 = this._y0, y1 = this._y1;                                                                           // 5471
                                                                                                                       // 5472
  // Expand the tree to cover the new points.                                                                          // 5473
  this.cover(x0, y0).cover(x1, y1);                                                                                    // 5474
                                                                                                                       // 5475
  // Add the new points.                                                                                               // 5476
  for (i = 0; i < n; ++i) {                                                                                            // 5477
    add(this, xz[i], yz[i], data[i]);                                                                                  // 5478
  }                                                                                                                    // 5479
                                                                                                                       // 5480
  return this;                                                                                                         // 5481
}                                                                                                                      // 5482
                                                                                                                       // 5483
var tree_cover = function(x, y) {                                                                                      // 5484
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points                                            // 5485
                                                                                                                       // 5486
  var x0 = this._x0,                                                                                                   // 5487
      y0 = this._y0,                                                                                                   // 5488
      x1 = this._x1,                                                                                                   // 5489
      y1 = this._y1;                                                                                                   // 5490
                                                                                                                       // 5491
  // If the quadtree has no extent, initialize them.                                                                   // 5492
  // Integer extent are necessary so that if we later double the extent,                                               // 5493
  // the existing quadrant boundaries don’t change due to floating point error!                                        // 5494
  if (isNaN(x0)) {                                                                                                     // 5495
    x1 = (x0 = Math.floor(x)) + 1;                                                                                     // 5496
    y1 = (y0 = Math.floor(y)) + 1;                                                                                     // 5497
  }                                                                                                                    // 5498
                                                                                                                       // 5499
  // Otherwise, double repeatedly to cover.                                                                            // 5500
  else if (x0 > x || x > x1 || y0 > y || y > y1) {                                                                     // 5501
    var z = x1 - x0,                                                                                                   // 5502
        node = this._root,                                                                                             // 5503
        parent,                                                                                                        // 5504
        i;                                                                                                             // 5505
                                                                                                                       // 5506
    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {                                                      // 5507
      case 0: {                                                                                                        // 5508
        do parent = new Array(4), parent[i] = node, node = parent;                                                     // 5509
        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);                                                    // 5510
        break;                                                                                                         // 5511
      }                                                                                                                // 5512
      case 1: {                                                                                                        // 5513
        do parent = new Array(4), parent[i] = node, node = parent;                                                     // 5514
        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);                                                    // 5515
        break;                                                                                                         // 5516
      }                                                                                                                // 5517
      case 2: {                                                                                                        // 5518
        do parent = new Array(4), parent[i] = node, node = parent;                                                     // 5519
        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);                                                    // 5520
        break;                                                                                                         // 5521
      }                                                                                                                // 5522
      case 3: {                                                                                                        // 5523
        do parent = new Array(4), parent[i] = node, node = parent;                                                     // 5524
        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);                                                    // 5525
        break;                                                                                                         // 5526
      }                                                                                                                // 5527
    }                                                                                                                  // 5528
                                                                                                                       // 5529
    if (this._root && this._root.length) this._root = node;                                                            // 5530
  }                                                                                                                    // 5531
                                                                                                                       // 5532
  // If the quadtree covers the point already, just return.                                                            // 5533
  else return this;                                                                                                    // 5534
                                                                                                                       // 5535
  this._x0 = x0;                                                                                                       // 5536
  this._y0 = y0;                                                                                                       // 5537
  this._x1 = x1;                                                                                                       // 5538
  this._y1 = y1;                                                                                                       // 5539
  return this;                                                                                                         // 5540
};                                                                                                                     // 5541
                                                                                                                       // 5542
var tree_data = function() {                                                                                           // 5543
  var data = [];                                                                                                       // 5544
  this.visit(function(node) {                                                                                          // 5545
    if (!node.length) do data.push(node.data); while (node = node.next)                                                // 5546
  });                                                                                                                  // 5547
  return data;                                                                                                         // 5548
};                                                                                                                     // 5549
                                                                                                                       // 5550
var tree_extent = function(_) {                                                                                        // 5551
  return arguments.length                                                                                              // 5552
      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])                                                       // 5553
      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];                                    // 5554
};                                                                                                                     // 5555
                                                                                                                       // 5556
var Quad = function(node, x0, y0, x1, y1) {                                                                            // 5557
  this.node = node;                                                                                                    // 5558
  this.x0 = x0;                                                                                                        // 5559
  this.y0 = y0;                                                                                                        // 5560
  this.x1 = x1;                                                                                                        // 5561
  this.y1 = y1;                                                                                                        // 5562
};                                                                                                                     // 5563
                                                                                                                       // 5564
var tree_find = function(x, y, radius) {                                                                               // 5565
  var data,                                                                                                            // 5566
      x0 = this._x0,                                                                                                   // 5567
      y0 = this._y0,                                                                                                   // 5568
      x1,                                                                                                              // 5569
      y1,                                                                                                              // 5570
      x2,                                                                                                              // 5571
      y2,                                                                                                              // 5572
      x3 = this._x1,                                                                                                   // 5573
      y3 = this._y1,                                                                                                   // 5574
      quads = [],                                                                                                      // 5575
      node = this._root,                                                                                               // 5576
      q,                                                                                                               // 5577
      i;                                                                                                               // 5578
                                                                                                                       // 5579
  if (node) quads.push(new Quad(node, x0, y0, x3, y3));                                                                // 5580
  if (radius == null) radius = Infinity;                                                                               // 5581
  else {                                                                                                               // 5582
    x0 = x - radius, y0 = y - radius;                                                                                  // 5583
    x3 = x + radius, y3 = y + radius;                                                                                  // 5584
    radius *= radius;                                                                                                  // 5585
  }                                                                                                                    // 5586
                                                                                                                       // 5587
  while (q = quads.pop()) {                                                                                            // 5588
                                                                                                                       // 5589
    // Stop searching if this quadrant can’t contain a closer node.                                                    // 5590
    if (!(node = q.node)                                                                                               // 5591
        || (x1 = q.x0) > x3                                                                                            // 5592
        || (y1 = q.y0) > y3                                                                                            // 5593
        || (x2 = q.x1) < x0                                                                                            // 5594
        || (y2 = q.y1) < y0) continue;                                                                                 // 5595
                                                                                                                       // 5596
    // Bisect the current quadrant.                                                                                    // 5597
    if (node.length) {                                                                                                 // 5598
      var xm = (x1 + x2) / 2,                                                                                          // 5599
          ym = (y1 + y2) / 2;                                                                                          // 5600
                                                                                                                       // 5601
      quads.push(                                                                                                      // 5602
        new Quad(node[3], xm, ym, x2, y2),                                                                             // 5603
        new Quad(node[2], x1, ym, xm, y2),                                                                             // 5604
        new Quad(node[1], xm, y1, x2, ym),                                                                             // 5605
        new Quad(node[0], x1, y1, xm, ym)                                                                              // 5606
      );                                                                                                               // 5607
                                                                                                                       // 5608
      // Visit the closest quadrant first.                                                                             // 5609
      if (i = (y >= ym) << 1 | (x >= xm)) {                                                                            // 5610
        q = quads[quads.length - 1];                                                                                   // 5611
        quads[quads.length - 1] = quads[quads.length - 1 - i];                                                         // 5612
        quads[quads.length - 1 - i] = q;                                                                               // 5613
      }                                                                                                                // 5614
    }                                                                                                                  // 5615
                                                                                                                       // 5616
    // Visit this point. (Visiting coincident points isn’t necessary!)                                                 // 5617
    else {                                                                                                             // 5618
      var dx = x - +this._x.call(null, node.data),                                                                     // 5619
          dy = y - +this._y.call(null, node.data),                                                                     // 5620
          d2 = dx * dx + dy * dy;                                                                                      // 5621
      if (d2 < radius) {                                                                                               // 5622
        var d = Math.sqrt(radius = d2);                                                                                // 5623
        x0 = x - d, y0 = y - d;                                                                                        // 5624
        x3 = x + d, y3 = y + d;                                                                                        // 5625
        data = node.data;                                                                                              // 5626
      }                                                                                                                // 5627
    }                                                                                                                  // 5628
  }                                                                                                                    // 5629
                                                                                                                       // 5630
  return data;                                                                                                         // 5631
};                                                                                                                     // 5632
                                                                                                                       // 5633
var tree_remove = function(d) {                                                                                        // 5634
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points    // 5635
                                                                                                                       // 5636
  var parent,                                                                                                          // 5637
      node = this._root,                                                                                               // 5638
      retainer,                                                                                                        // 5639
      previous,                                                                                                        // 5640
      next,                                                                                                            // 5641
      x0 = this._x0,                                                                                                   // 5642
      y0 = this._y0,                                                                                                   // 5643
      x1 = this._x1,                                                                                                   // 5644
      y1 = this._y1,                                                                                                   // 5645
      x,                                                                                                               // 5646
      y,                                                                                                               // 5647
      xm,                                                                                                              // 5648
      ym,                                                                                                              // 5649
      right,                                                                                                           // 5650
      bottom,                                                                                                          // 5651
      i,                                                                                                               // 5652
      j;                                                                                                               // 5653
                                                                                                                       // 5654
  // If the tree is empty, initialize the root as a leaf.                                                              // 5655
  if (!node) return this;                                                                                              // 5656
                                                                                                                       // 5657
  // Find the leaf node for the point.                                                                                 // 5658
  // While descending, also retain the deepest parent with a non-removed sibling.                                      // 5659
  if (node.length) while (true) {                                                                                      // 5660
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;                                                      // 5661
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;                                                     // 5662
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;                                           // 5663
    if (!node.length) break;                                                                                           // 5664
    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;                   // 5665
  }                                                                                                                    // 5666
                                                                                                                       // 5667
  // Find the point to remove.                                                                                         // 5668
  while (node.data !== d) if (!(previous = node, node = node.next)) return this;                                       // 5669
  if (next = node.next) delete node.next;                                                                              // 5670
                                                                                                                       // 5671
  // If there are multiple coincident points, remove just the point.                                                   // 5672
  if (previous) return (next ? previous.next = next : delete previous.next), this;                                     // 5673
                                                                                                                       // 5674
  // If this is the root point, remove it.                                                                             // 5675
  if (!parent) return this._root = next, this;                                                                         // 5676
                                                                                                                       // 5677
  // Remove this leaf.                                                                                                 // 5678
  next ? parent[i] = next : delete parent[i];                                                                          // 5679
                                                                                                                       // 5680
  // If the parent now contains exactly one leaf, collapse superfluous parents.                                        // 5681
  if ((node = parent[0] || parent[1] || parent[2] || parent[3])                                                        // 5682
      && node === (parent[3] || parent[2] || parent[1] || parent[0])                                                   // 5683
      && !node.length) {                                                                                               // 5684
    if (retainer) retainer[j] = node;                                                                                  // 5685
    else this._root = node;                                                                                            // 5686
  }                                                                                                                    // 5687
                                                                                                                       // 5688
  return this;                                                                                                         // 5689
};                                                                                                                     // 5690
                                                                                                                       // 5691
function removeAll(data) {                                                                                             // 5692
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);                                                   // 5693
  return this;                                                                                                         // 5694
}                                                                                                                      // 5695
                                                                                                                       // 5696
var tree_root = function() {                                                                                           // 5697
  return this._root;                                                                                                   // 5698
};                                                                                                                     // 5699
                                                                                                                       // 5700
var tree_size = function() {                                                                                           // 5701
  var size = 0;                                                                                                        // 5702
  this.visit(function(node) {                                                                                          // 5703
    if (!node.length) do ++size; while (node = node.next)                                                              // 5704
  });                                                                                                                  // 5705
  return size;                                                                                                         // 5706
};                                                                                                                     // 5707
                                                                                                                       // 5708
var tree_visit = function(callback) {                                                                                  // 5709
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;                                                         // 5710
  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));                                        // 5711
  while (q = quads.pop()) {                                                                                            // 5712
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {                         // 5713
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;                                                                      // 5714
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));                                                // 5715
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));                                                // 5716
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));                                                // 5717
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));                                                // 5718
    }                                                                                                                  // 5719
  }                                                                                                                    // 5720
  return this;                                                                                                         // 5721
};                                                                                                                     // 5722
                                                                                                                       // 5723
var tree_visitAfter = function(callback) {                                                                             // 5724
  var quads = [], next = [], q;                                                                                        // 5725
  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));                            // 5726
  while (q = quads.pop()) {                                                                                            // 5727
    var node = q.node;                                                                                                 // 5728
    if (node.length) {                                                                                                 // 5729
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;                   // 5730
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));                                                // 5731
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));                                                // 5732
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));                                                // 5733
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));                                                // 5734
    }                                                                                                                  // 5735
    next.push(q);                                                                                                      // 5736
  }                                                                                                                    // 5737
  while (q = next.pop()) {                                                                                             // 5738
    callback(q.node, q.x0, q.y0, q.x1, q.y1);                                                                          // 5739
  }                                                                                                                    // 5740
  return this;                                                                                                         // 5741
};                                                                                                                     // 5742
                                                                                                                       // 5743
function defaultX(d) {                                                                                                 // 5744
  return d[0];                                                                                                         // 5745
}                                                                                                                      // 5746
                                                                                                                       // 5747
var tree_x = function(_) {                                                                                             // 5748
  return arguments.length ? (this._x = _, this) : this._x;                                                             // 5749
};                                                                                                                     // 5750
                                                                                                                       // 5751
function defaultY(d) {                                                                                                 // 5752
  return d[1];                                                                                                         // 5753
}                                                                                                                      // 5754
                                                                                                                       // 5755
var tree_y = function(_) {                                                                                             // 5756
  return arguments.length ? (this._y = _, this) : this._y;                                                             // 5757
};                                                                                                                     // 5758
                                                                                                                       // 5759
function quadtree(nodes, x, y) {                                                                                       // 5760
  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);                     // 5761
  return nodes == null ? tree : tree.addAll(nodes);                                                                    // 5762
}                                                                                                                      // 5763
                                                                                                                       // 5764
function Quadtree(x, y, x0, y0, x1, y1) {                                                                              // 5765
  this._x = x;                                                                                                         // 5766
  this._y = y;                                                                                                         // 5767
  this._x0 = x0;                                                                                                       // 5768
  this._y0 = y0;                                                                                                       // 5769
  this._x1 = x1;                                                                                                       // 5770
  this._y1 = y1;                                                                                                       // 5771
  this._root = undefined;                                                                                              // 5772
}                                                                                                                      // 5773
                                                                                                                       // 5774
function leaf_copy(leaf) {                                                                                             // 5775
  var copy = {data: leaf.data}, next = copy;                                                                           // 5776
  while (leaf = leaf.next) next = next.next = {data: leaf.data};                                                       // 5777
  return copy;                                                                                                         // 5778
}                                                                                                                      // 5779
                                                                                                                       // 5780
var treeProto = quadtree.prototype = Quadtree.prototype;                                                               // 5781
                                                                                                                       // 5782
treeProto.copy = function() {                                                                                          // 5783
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),                                   // 5784
      node = this._root,                                                                                               // 5785
      nodes,                                                                                                           // 5786
      child;                                                                                                           // 5787
                                                                                                                       // 5788
  if (!node) return copy;                                                                                              // 5789
                                                                                                                       // 5790
  if (!node.length) return copy._root = leaf_copy(node), copy;                                                         // 5791
                                                                                                                       // 5792
  nodes = [{source: node, target: copy._root = new Array(4)}];                                                         // 5793
  while (node = nodes.pop()) {                                                                                         // 5794
    for (var i = 0; i < 4; ++i) {                                                                                      // 5795
      if (child = node.source[i]) {                                                                                    // 5796
        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});                          // 5797
        else node.target[i] = leaf_copy(child);                                                                        // 5798
      }                                                                                                                // 5799
    }                                                                                                                  // 5800
  }                                                                                                                    // 5801
                                                                                                                       // 5802
  return copy;                                                                                                         // 5803
};                                                                                                                     // 5804
                                                                                                                       // 5805
treeProto.add = tree_add;                                                                                              // 5806
treeProto.addAll = addAll;                                                                                             // 5807
treeProto.cover = tree_cover;                                                                                          // 5808
treeProto.data = tree_data;                                                                                            // 5809
treeProto.extent = tree_extent;                                                                                        // 5810
treeProto.find = tree_find;                                                                                            // 5811
treeProto.remove = tree_remove;                                                                                        // 5812
treeProto.removeAll = removeAll;                                                                                       // 5813
treeProto.root = tree_root;                                                                                            // 5814
treeProto.size = tree_size;                                                                                            // 5815
treeProto.visit = tree_visit;                                                                                          // 5816
treeProto.visitAfter = tree_visitAfter;                                                                                // 5817
treeProto.x = tree_x;                                                                                                  // 5818
treeProto.y = tree_y;                                                                                                  // 5819
                                                                                                                       // 5820
function x(d) {                                                                                                        // 5821
  return d.x + d.vx;                                                                                                   // 5822
}                                                                                                                      // 5823
                                                                                                                       // 5824
function y(d) {                                                                                                        // 5825
  return d.y + d.vy;                                                                                                   // 5826
}                                                                                                                      // 5827
                                                                                                                       // 5828
var collide = function(radius) {                                                                                       // 5829
  var nodes,                                                                                                           // 5830
      radii,                                                                                                           // 5831
      strength = 1,                                                                                                    // 5832
      iterations = 1;                                                                                                  // 5833
                                                                                                                       // 5834
  if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);                                 // 5835
                                                                                                                       // 5836
  function force() {                                                                                                   // 5837
    var i, n = nodes.length,                                                                                           // 5838
        tree,                                                                                                          // 5839
        node,                                                                                                          // 5840
        xi,                                                                                                            // 5841
        yi,                                                                                                            // 5842
        ri,                                                                                                            // 5843
        ri2;                                                                                                           // 5844
                                                                                                                       // 5845
    for (var k = 0; k < iterations; ++k) {                                                                             // 5846
      tree = quadtree(nodes, x, y).visitAfter(prepare);                                                                // 5847
      for (i = 0; i < n; ++i) {                                                                                        // 5848
        node = nodes[i];                                                                                               // 5849
        ri = radii[node.index], ri2 = ri * ri;                                                                         // 5850
        xi = node.x + node.vx;                                                                                         // 5851
        yi = node.y + node.vy;                                                                                         // 5852
        tree.visit(apply);                                                                                             // 5853
      }                                                                                                                // 5854
    }                                                                                                                  // 5855
                                                                                                                       // 5856
    function apply(quad, x0, y0, x1, y1) {                                                                             // 5857
      var data = quad.data, rj = quad.r, r = ri + rj;                                                                  // 5858
      if (data) {                                                                                                      // 5859
        if (data.index > node.index) {                                                                                 // 5860
          var x = xi - data.x - data.vx,                                                                               // 5861
              y = yi - data.y - data.vy,                                                                               // 5862
              l = x * x + y * y;                                                                                       // 5863
          if (l < r * r) {                                                                                             // 5864
            if (x === 0) x = jiggle(), l += x * x;                                                                     // 5865
            if (y === 0) y = jiggle(), l += y * y;                                                                     // 5866
            l = (r - (l = Math.sqrt(l))) / l * strength;                                                               // 5867
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));                                                       // 5868
            node.vy += (y *= l) * r;                                                                                   // 5869
            data.vx -= x * (r = 1 - r);                                                                                // 5870
            data.vy -= y * r;                                                                                          // 5871
          }                                                                                                            // 5872
        }                                                                                                              // 5873
        return;                                                                                                        // 5874
      }                                                                                                                // 5875
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;                                                 // 5876
    }                                                                                                                  // 5877
  }                                                                                                                    // 5878
                                                                                                                       // 5879
  function prepare(quad) {                                                                                             // 5880
    if (quad.data) return quad.r = radii[quad.data.index];                                                             // 5881
    for (var i = quad.r = 0; i < 4; ++i) {                                                                             // 5882
      if (quad[i] && quad[i].r > quad.r) {                                                                             // 5883
        quad.r = quad[i].r;                                                                                            // 5884
      }                                                                                                                // 5885
    }                                                                                                                  // 5886
  }                                                                                                                    // 5887
                                                                                                                       // 5888
  function initialize() {                                                                                              // 5889
    if (!nodes) return;                                                                                                // 5890
    var i, n = nodes.length, node;                                                                                     // 5891
    radii = new Array(n);                                                                                              // 5892
    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);                              // 5893
  }                                                                                                                    // 5894
                                                                                                                       // 5895
  force.initialize = function(_) {                                                                                     // 5896
    nodes = _;                                                                                                         // 5897
    initialize();                                                                                                      // 5898
  };                                                                                                                   // 5899
                                                                                                                       // 5900
  force.iterations = function(_) {                                                                                     // 5901
    return arguments.length ? (iterations = +_, force) : iterations;                                                   // 5902
  };                                                                                                                   // 5903
                                                                                                                       // 5904
  force.strength = function(_) {                                                                                       // 5905
    return arguments.length ? (strength = +_, force) : strength;                                                       // 5906
  };                                                                                                                   // 5907
                                                                                                                       // 5908
  force.radius = function(_) {                                                                                         // 5909
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : radius;   // 5910
  };                                                                                                                   // 5911
                                                                                                                       // 5912
  return force;                                                                                                        // 5913
};                                                                                                                     // 5914
                                                                                                                       // 5915
function index(d) {                                                                                                    // 5916
  return d.index;                                                                                                      // 5917
}                                                                                                                      // 5918
                                                                                                                       // 5919
function find(nodeById, nodeId) {                                                                                      // 5920
  var node = nodeById.get(nodeId);                                                                                     // 5921
  if (!node) throw new Error("missing: " + nodeId);                                                                    // 5922
  return node;                                                                                                         // 5923
}                                                                                                                      // 5924
                                                                                                                       // 5925
var link = function(links) {                                                                                           // 5926
  var id = index,                                                                                                      // 5927
      strength = defaultStrength,                                                                                      // 5928
      strengths,                                                                                                       // 5929
      distance = constant$6(30),                                                                                       // 5930
      distances,                                                                                                       // 5931
      nodes,                                                                                                           // 5932
      count,                                                                                                           // 5933
      bias,                                                                                                            // 5934
      iterations = 1;                                                                                                  // 5935
                                                                                                                       // 5936
  if (links == null) links = [];                                                                                       // 5937
                                                                                                                       // 5938
  function defaultStrength(link) {                                                                                     // 5939
    return 1 / Math.min(count[link.source.index], count[link.target.index]);                                           // 5940
  }                                                                                                                    // 5941
                                                                                                                       // 5942
  function force(alpha) {                                                                                              // 5943
    for (var k = 0, n = links.length; k < iterations; ++k) {                                                           // 5944
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {                                                  // 5945
        link = links[i], source = link.source, target = link.target;                                                   // 5946
        x = target.x + target.vx - source.x - source.vx || jiggle();                                                   // 5947
        y = target.y + target.vy - source.y - source.vy || jiggle();                                                   // 5948
        l = Math.sqrt(x * x + y * y);                                                                                  // 5949
        l = (l - distances[i]) / l * alpha * strengths[i];                                                             // 5950
        x *= l, y *= l;                                                                                                // 5951
        target.vx -= x * (b = bias[i]);                                                                                // 5952
        target.vy -= y * b;                                                                                            // 5953
        source.vx += x * (b = 1 - b);                                                                                  // 5954
        source.vy += y * b;                                                                                            // 5955
      }                                                                                                                // 5956
    }                                                                                                                  // 5957
  }                                                                                                                    // 5958
                                                                                                                       // 5959
  function initialize() {                                                                                              // 5960
    if (!nodes) return;                                                                                                // 5961
                                                                                                                       // 5962
    var i,                                                                                                             // 5963
        n = nodes.length,                                                                                              // 5964
        m = links.length,                                                                                              // 5965
        nodeById = map$1(nodes, id),                                                                                   // 5966
        link;                                                                                                          // 5967
                                                                                                                       // 5968
    for (i = 0, count = new Array(n); i < m; ++i) {                                                                    // 5969
      link = links[i], link.index = i;                                                                                 // 5970
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);                                  // 5971
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);                                  // 5972
      count[link.source.index] = (count[link.source.index] || 0) + 1;                                                  // 5973
      count[link.target.index] = (count[link.target.index] || 0) + 1;                                                  // 5974
    }                                                                                                                  // 5975
                                                                                                                       // 5976
    for (i = 0, bias = new Array(m); i < m; ++i) {                                                                     // 5977
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);     // 5978
    }                                                                                                                  // 5979
                                                                                                                       // 5980
    strengths = new Array(m), initializeStrength();                                                                    // 5981
    distances = new Array(m), initializeDistance();                                                                    // 5982
  }                                                                                                                    // 5983
                                                                                                                       // 5984
  function initializeStrength() {                                                                                      // 5985
    if (!nodes) return;                                                                                                // 5986
                                                                                                                       // 5987
    for (var i = 0, n = links.length; i < n; ++i) {                                                                    // 5988
      strengths[i] = +strength(links[i], i, links);                                                                    // 5989
    }                                                                                                                  // 5990
  }                                                                                                                    // 5991
                                                                                                                       // 5992
  function initializeDistance() {                                                                                      // 5993
    if (!nodes) return;                                                                                                // 5994
                                                                                                                       // 5995
    for (var i = 0, n = links.length; i < n; ++i) {                                                                    // 5996
      distances[i] = +distance(links[i], i, links);                                                                    // 5997
    }                                                                                                                  // 5998
  }                                                                                                                    // 5999
                                                                                                                       // 6000
  force.initialize = function(_) {                                                                                     // 6001
    nodes = _;                                                                                                         // 6002
    initialize();                                                                                                      // 6003
  };                                                                                                                   // 6004
                                                                                                                       // 6005
  force.links = function(_) {                                                                                          // 6006
    return arguments.length ? (links = _, initialize(), force) : links;                                                // 6007
  };                                                                                                                   // 6008
                                                                                                                       // 6009
  force.id = function(_) {                                                                                             // 6010
    return arguments.length ? (id = _, force) : id;                                                                    // 6011
  };                                                                                                                   // 6012
                                                                                                                       // 6013
  force.iterations = function(_) {                                                                                     // 6014
    return arguments.length ? (iterations = +_, force) : iterations;                                                   // 6015
  };                                                                                                                   // 6016
                                                                                                                       // 6017
  force.strength = function(_) {                                                                                       // 6018
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
  };                                                                                                                   // 6020
                                                                                                                       // 6021
  force.distance = function(_) {                                                                                       // 6022
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
  };                                                                                                                   // 6024
                                                                                                                       // 6025
  return force;                                                                                                        // 6026
};                                                                                                                     // 6027
                                                                                                                       // 6028
function x$1(d) {                                                                                                      // 6029
  return d.x;                                                                                                          // 6030
}                                                                                                                      // 6031
                                                                                                                       // 6032
function y$1(d) {                                                                                                      // 6033
  return d.y;                                                                                                          // 6034
}                                                                                                                      // 6035
                                                                                                                       // 6036
var initialRadius = 10;                                                                                                // 6037
var initialAngle = Math.PI * (3 - Math.sqrt(5));                                                                       // 6038
                                                                                                                       // 6039
var simulation = function(nodes) {                                                                                     // 6040
  var simulation,                                                                                                      // 6041
      alpha = 1,                                                                                                       // 6042
      alphaMin = 0.001,                                                                                                // 6043
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),                                                                    // 6044
      alphaTarget = 0,                                                                                                 // 6045
      velocityDecay = 0.6,                                                                                             // 6046
      forces = map$1(),                                                                                                // 6047
      stepper = timer(step),                                                                                           // 6048
      event = dispatch("tick", "end");                                                                                 // 6049
                                                                                                                       // 6050
  if (nodes == null) nodes = [];                                                                                       // 6051
                                                                                                                       // 6052
  function step() {                                                                                                    // 6053
    tick();                                                                                                            // 6054
    event.call("tick", simulation);                                                                                    // 6055
    if (alpha < alphaMin) {                                                                                            // 6056
      stepper.stop();                                                                                                  // 6057
      event.call("end", simulation);                                                                                   // 6058
    }                                                                                                                  // 6059
  }                                                                                                                    // 6060
                                                                                                                       // 6061
  function tick() {                                                                                                    // 6062
    var i, n = nodes.length, node;                                                                                     // 6063
                                                                                                                       // 6064
    alpha += (alphaTarget - alpha) * alphaDecay;                                                                       // 6065
                                                                                                                       // 6066
    forces.each(function(force) {                                                                                      // 6067
      force(alpha);                                                                                                    // 6068
    });                                                                                                                // 6069
                                                                                                                       // 6070
    for (i = 0; i < n; ++i) {                                                                                          // 6071
      node = nodes[i];                                                                                                 // 6072
      if (node.fx == null) node.x += node.vx *= velocityDecay;                                                         // 6073
      else node.x = node.fx, node.vx = 0;                                                                              // 6074
      if (node.fy == null) node.y += node.vy *= velocityDecay;                                                         // 6075
      else node.y = node.fy, node.vy = 0;                                                                              // 6076
    }                                                                                                                  // 6077
  }                                                                                                                    // 6078
                                                                                                                       // 6079
  function initializeNodes() {                                                                                         // 6080
    for (var i = 0, n = nodes.length, node; i < n; ++i) {                                                              // 6081
      node = nodes[i], node.index = i;                                                                                 // 6082
      if (isNaN(node.x) || isNaN(node.y)) {                                                                            // 6083
        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;                                           // 6084
        node.x = radius * Math.cos(angle);                                                                             // 6085
        node.y = radius * Math.sin(angle);                                                                             // 6086
      }                                                                                                                // 6087
      if (isNaN(node.vx) || isNaN(node.vy)) {                                                                          // 6088
        node.vx = node.vy = 0;                                                                                         // 6089
      }                                                                                                                // 6090
    }                                                                                                                  // 6091
  }                                                                                                                    // 6092
                                                                                                                       // 6093
  function initializeForce(force) {                                                                                    // 6094
    if (force.initialize) force.initialize(nodes);                                                                     // 6095
    return force;                                                                                                      // 6096
  }                                                                                                                    // 6097
                                                                                                                       // 6098
  initializeNodes();                                                                                                   // 6099
                                                                                                                       // 6100
  return simulation = {                                                                                                // 6101
    tick: tick,                                                                                                        // 6102
                                                                                                                       // 6103
    restart: function() {                                                                                              // 6104
      return stepper.restart(step), simulation;                                                                        // 6105
    },                                                                                                                 // 6106
                                                                                                                       // 6107
    stop: function() {                                                                                                 // 6108
      return stepper.stop(), simulation;                                                                               // 6109
    },                                                                                                                 // 6110
                                                                                                                       // 6111
    nodes: function(_) {                                                                                               // 6112
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;      // 6113
    },                                                                                                                 // 6114
                                                                                                                       // 6115
    alpha: function(_) {                                                                                               // 6116
      return arguments.length ? (alpha = +_, simulation) : alpha;                                                      // 6117
    },                                                                                                                 // 6118
                                                                                                                       // 6119
    alphaMin: function(_) {                                                                                            // 6120
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;                                                // 6121
    },                                                                                                                 // 6122
                                                                                                                       // 6123
    alphaDecay: function(_) {                                                                                          // 6124
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;                                           // 6125
    },                                                                                                                 // 6126
                                                                                                                       // 6127
    alphaTarget: function(_) {                                                                                         // 6128
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;                                          // 6129
    },                                                                                                                 // 6130
                                                                                                                       // 6131
    velocityDecay: function(_) {                                                                                       // 6132
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;                               // 6133
    },                                                                                                                 // 6134
                                                                                                                       // 6135
    force: function(name, _) {                                                                                         // 6136
      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
    },                                                                                                                 // 6138
                                                                                                                       // 6139
    find: function(x, y, radius) {                                                                                     // 6140
      var i = 0,                                                                                                       // 6141
          n = nodes.length,                                                                                            // 6142
          dx,                                                                                                          // 6143
          dy,                                                                                                          // 6144
          d2,                                                                                                          // 6145
          node,                                                                                                        // 6146
          closest;                                                                                                     // 6147
                                                                                                                       // 6148
      if (radius == null) radius = Infinity;                                                                           // 6149
      else radius *= radius;                                                                                           // 6150
                                                                                                                       // 6151
      for (i = 0; i < n; ++i) {                                                                                        // 6152
        node = nodes[i];                                                                                               // 6153
        dx = x - node.x;                                                                                               // 6154
        dy = y - node.y;                                                                                               // 6155
        d2 = dx * dx + dy * dy;                                                                                        // 6156
        if (d2 < radius) closest = node, radius = d2;                                                                  // 6157
      }                                                                                                                // 6158
                                                                                                                       // 6159
      return closest;                                                                                                  // 6160
    },                                                                                                                 // 6161
                                                                                                                       // 6162
    on: function(name, _) {                                                                                            // 6163
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);                                  // 6164
    }                                                                                                                  // 6165
  };                                                                                                                   // 6166
};                                                                                                                     // 6167
                                                                                                                       // 6168
var manyBody = function() {                                                                                            // 6169
  var nodes,                                                                                                           // 6170
      node,                                                                                                            // 6171
      alpha,                                                                                                           // 6172
      strength = constant$6(-30),                                                                                      // 6173
      strengths,                                                                                                       // 6174
      distanceMin2 = 1,                                                                                                // 6175
      distanceMax2 = Infinity,                                                                                         // 6176
      theta2 = 0.81;                                                                                                   // 6177
                                                                                                                       // 6178
  function force(_) {                                                                                                  // 6179
    var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);                                  // 6180
    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);                                             // 6181
  }                                                                                                                    // 6182
                                                                                                                       // 6183
  function initialize() {                                                                                              // 6184
    if (!nodes) return;                                                                                                // 6185
    var i, n = nodes.length, node;                                                                                     // 6186
    strengths = new Array(n);                                                                                          // 6187
    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);                        // 6188
  }                                                                                                                    // 6189
                                                                                                                       // 6190
  function accumulate(quad) {                                                                                          // 6191
    var strength = 0, q, c, x$$1, y$$1, i;                                                                             // 6192
                                                                                                                       // 6193
    // For internal nodes, accumulate forces from child quadrants.                                                     // 6194
    if (quad.length) {                                                                                                 // 6195
      for (x$$1 = y$$1 = i = 0; i < 4; ++i) {                                                                          // 6196
        if ((q = quad[i]) && (c = q.value)) {                                                                          // 6197
          strength += c, x$$1 += c * q.x, y$$1 += c * q.y;                                                             // 6198
        }                                                                                                              // 6199
      }                                                                                                                // 6200
      quad.x = x$$1 / strength;                                                                                        // 6201
      quad.y = y$$1 / strength;                                                                                        // 6202
    }                                                                                                                  // 6203
                                                                                                                       // 6204
    // For leaf nodes, accumulate forces from coincident quadrants.                                                    // 6205
    else {                                                                                                             // 6206
      q = quad;                                                                                                        // 6207
      q.x = q.data.x;                                                                                                  // 6208
      q.y = q.data.y;                                                                                                  // 6209
      do strength += strengths[q.data.index];                                                                          // 6210
      while (q = q.next);                                                                                              // 6211
    }                                                                                                                  // 6212
                                                                                                                       // 6213
    quad.value = strength;                                                                                             // 6214
  }                                                                                                                    // 6215
                                                                                                                       // 6216
  function apply(quad, x1, _, x2) {                                                                                    // 6217
    if (!quad.value) return true;                                                                                      // 6218
                                                                                                                       // 6219
    var x$$1 = quad.x - node.x,                                                                                        // 6220
        y$$1 = quad.y - node.y,                                                                                        // 6221
        w = x2 - x1,                                                                                                   // 6222
        l = x$$1 * x$$1 + y$$1 * y$$1;                                                                                 // 6223
                                                                                                                       // 6224
    // Apply the Barnes-Hut approximation if possible.                                                                 // 6225
    // Limit forces for very close nodes; randomize direction if coincident.                                           // 6226
    if (w * w / theta2 < l) {                                                                                          // 6227
      if (l < distanceMax2) {                                                                                          // 6228
        if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;                                                             // 6229
        if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;                                                             // 6230
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);                                                         // 6231
        node.vx += x$$1 * quad.value * alpha / l;                                                                      // 6232
        node.vy += y$$1 * quad.value * alpha / l;                                                                      // 6233
      }                                                                                                                // 6234
      return true;                                                                                                     // 6235
    }                                                                                                                  // 6236
                                                                                                                       // 6237
    // Otherwise, process points directly.                                                                             // 6238
    else if (quad.length || l >= distanceMax2) return;                                                                 // 6239
                                                                                                                       // 6240
    // Limit forces for very close nodes; randomize direction if coincident.                                           // 6241
    if (quad.data !== node || quad.next) {                                                                             // 6242
      if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;                                                               // 6243
      if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;                                                               // 6244
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);                                                           // 6245
    }                                                                                                                  // 6246
                                                                                                                       // 6247
    do if (quad.data !== node) {                                                                                       // 6248
      w = strengths[quad.data.index] * alpha / l;                                                                      // 6249
      node.vx += x$$1 * w;                                                                                             // 6250
      node.vy += y$$1 * w;                                                                                             // 6251
    } while (quad = quad.next);                                                                                        // 6252
  }                                                                                                                    // 6253
                                                                                                                       // 6254
  force.initialize = function(_) {                                                                                     // 6255
    nodes = _;                                                                                                         // 6256
    initialize();                                                                                                      // 6257
  };                                                                                                                   // 6258
                                                                                                                       // 6259
  force.strength = function(_) {                                                                                       // 6260
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
  };                                                                                                                   // 6262
                                                                                                                       // 6263
  force.distanceMin = function(_) {                                                                                    // 6264
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);                                 // 6265
  };                                                                                                                   // 6266
                                                                                                                       // 6267
  force.distanceMax = function(_) {                                                                                    // 6268
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);                                 // 6269
  };                                                                                                                   // 6270
                                                                                                                       // 6271
  force.theta = function(_) {                                                                                          // 6272
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);                                             // 6273
  };                                                                                                                   // 6274
                                                                                                                       // 6275
  return force;                                                                                                        // 6276
};                                                                                                                     // 6277
                                                                                                                       // 6278
var x$2 = function(x) {                                                                                                // 6279
  var strength = constant$6(0.1),                                                                                      // 6280
      nodes,                                                                                                           // 6281
      strengths,                                                                                                       // 6282
      xz;                                                                                                              // 6283
                                                                                                                       // 6284
  if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);                                                     // 6285
                                                                                                                       // 6286
  function force(alpha) {                                                                                              // 6287
    for (var i = 0, n = nodes.length, node; i < n; ++i) {                                                              // 6288
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;                                             // 6289
    }                                                                                                                  // 6290
  }                                                                                                                    // 6291
                                                                                                                       // 6292
  function initialize() {                                                                                              // 6293
    if (!nodes) return;                                                                                                // 6294
    var i, n = nodes.length;                                                                                           // 6295
    strengths = new Array(n);                                                                                          // 6296
    xz = new Array(n);                                                                                                 // 6297
    for (i = 0; i < n; ++i) {                                                                                          // 6298
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);                        // 6299
    }                                                                                                                  // 6300
  }                                                                                                                    // 6301
                                                                                                                       // 6302
  force.initialize = function(_) {                                                                                     // 6303
    nodes = _;                                                                                                         // 6304
    initialize();                                                                                                      // 6305
  };                                                                                                                   // 6306
                                                                                                                       // 6307
  force.strength = function(_) {                                                                                       // 6308
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
  };                                                                                                                   // 6310
                                                                                                                       // 6311
  force.x = function(_) {                                                                                              // 6312
    return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;             // 6313
  };                                                                                                                   // 6314
                                                                                                                       // 6315
  return force;                                                                                                        // 6316
};                                                                                                                     // 6317
                                                                                                                       // 6318
var y$2 = function(y) {                                                                                                // 6319
  var strength = constant$6(0.1),                                                                                      // 6320
      nodes,                                                                                                           // 6321
      strengths,                                                                                                       // 6322
      yz;                                                                                                              // 6323
                                                                                                                       // 6324
  if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);                                                     // 6325
                                                                                                                       // 6326
  function force(alpha) {                                                                                              // 6327
    for (var i = 0, n = nodes.length, node; i < n; ++i) {                                                              // 6328
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;                                             // 6329
    }                                                                                                                  // 6330
  }                                                                                                                    // 6331
                                                                                                                       // 6332
  function initialize() {                                                                                              // 6333
    if (!nodes) return;                                                                                                // 6334
    var i, n = nodes.length;                                                                                           // 6335
    strengths = new Array(n);                                                                                          // 6336
    yz = new Array(n);                                                                                                 // 6337
    for (i = 0; i < n; ++i) {                                                                                          // 6338
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);                        // 6339
    }                                                                                                                  // 6340
  }                                                                                                                    // 6341
                                                                                                                       // 6342
  force.initialize = function(_) {                                                                                     // 6343
    nodes = _;                                                                                                         // 6344
    initialize();                                                                                                      // 6345
  };                                                                                                                   // 6346
                                                                                                                       // 6347
  force.strength = function(_) {                                                                                       // 6348
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
  };                                                                                                                   // 6350
                                                                                                                       // 6351
  force.y = function(_) {                                                                                              // 6352
    return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;             // 6353
  };                                                                                                                   // 6354
                                                                                                                       // 6355
  return force;                                                                                                        // 6356
};                                                                                                                     // 6357
                                                                                                                       // 6358
// Computes the decimal coefficient and exponent of the specified number x with                                        // 6359
// significant digits p, where x is positive and p is in [1, 21] or undefined.                                         // 6360
// For example, formatDecimal(1.23) returns ["123", 0].                                                                // 6361
var formatDecimal = function(x, p) {                                                                                   // 6362
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity      // 6363
  var i, coefficient = x.slice(0, i);                                                                                  // 6364
                                                                                                                       // 6365
  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+                                          // 6366
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).                                                               // 6367
  return [                                                                                                             // 6368
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,                                      // 6369
    +x.slice(i + 1)                                                                                                    // 6370
  ];                                                                                                                   // 6371
};                                                                                                                     // 6372
                                                                                                                       // 6373
var exponent$1 = function(x) {                                                                                         // 6374
  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;                                                               // 6375
};                                                                                                                     // 6376
                                                                                                                       // 6377
var formatGroup = function(grouping, thousands) {                                                                      // 6378
  return function(value, width) {                                                                                      // 6379
    var i = value.length,                                                                                              // 6380
        t = [],                                                                                                        // 6381
        j = 0,                                                                                                         // 6382
        g = grouping[0],                                                                                               // 6383
        length = 0;                                                                                                    // 6384
                                                                                                                       // 6385
    while (i > 0 && g > 0) {                                                                                           // 6386
      if (length + g + 1 > width) g = Math.max(1, width - length);                                                     // 6387
      t.push(value.substring(i -= g, i + g));                                                                          // 6388
      if ((length += g + 1) > width) break;                                                                            // 6389
      g = grouping[j = (j + 1) % grouping.length];                                                                     // 6390
    }                                                                                                                  // 6391
                                                                                                                       // 6392
    return t.reverse().join(thousands);                                                                                // 6393
  };                                                                                                                   // 6394
};                                                                                                                     // 6395
                                                                                                                       // 6396
var formatNumerals = function(numerals) {                                                                              // 6397
  return function(value) {                                                                                             // 6398
    return value.replace(/[0-9]/g, function(i) {                                                                       // 6399
      return numerals[+i];                                                                                             // 6400
    });                                                                                                                // 6401
  };                                                                                                                   // 6402
};                                                                                                                     // 6403
                                                                                                                       // 6404
var formatDefault = function(x, p) {                                                                                   // 6405
  x = x.toPrecision(p);                                                                                                // 6406
                                                                                                                       // 6407
  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {                                                        // 6408
    switch (x[i]) {                                                                                                    // 6409
      case ".": i0 = i1 = i; break;                                                                                    // 6410
      case "0": if (i0 === 0) i0 = i; i1 = i; break;                                                                   // 6411
      case "e": break out;                                                                                             // 6412
      default: if (i0 > 0) i0 = 0; break;                                                                              // 6413
    }                                                                                                                  // 6414
  }                                                                                                                    // 6415
                                                                                                                       // 6416
  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;                                                                // 6417
};                                                                                                                     // 6418
                                                                                                                       // 6419
var prefixExponent;                                                                                                    // 6420
                                                                                                                       // 6421
var formatPrefixAuto = function(x, p) {                                                                                // 6422
  var d = formatDecimal(x, p);                                                                                         // 6423
  if (!d) return x + "";                                                                                               // 6424
  var coefficient = d[0],                                                                                              // 6425
      exponent = d[1],                                                                                                 // 6426
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,                   // 6427
      n = coefficient.length;                                                                                          // 6428
  return i === n ? coefficient                                                                                         // 6429
      : i > n ? coefficient + new Array(i - n + 1).join("0")                                                           // 6430
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)                                                   // 6431
      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!              // 6432
};                                                                                                                     // 6433
                                                                                                                       // 6434
var formatRounded = function(x, p) {                                                                                   // 6435
  var d = formatDecimal(x, p);                                                                                         // 6436
  if (!d) return x + "";                                                                                               // 6437
  var coefficient = d[0],                                                                                              // 6438
      exponent = d[1];                                                                                                 // 6439
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient                                            // 6440
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");                                          // 6442
};                                                                                                                     // 6443
                                                                                                                       // 6444
var formatTypes = {                                                                                                    // 6445
  "": formatDefault,                                                                                                   // 6446
  "%": function(x, p) { return (x * 100).toFixed(p); },                                                                // 6447
  "b": function(x) { return Math.round(x).toString(2); },                                                              // 6448
  "c": function(x) { return x + ""; },                                                                                 // 6449
  "d": function(x) { return Math.round(x).toString(10); },                                                             // 6450
  "e": function(x, p) { return x.toExponential(p); },                                                                  // 6451
  "f": function(x, p) { return x.toFixed(p); },                                                                        // 6452
  "g": function(x, p) { return x.toPrecision(p); },                                                                    // 6453
  "o": function(x) { return Math.round(x).toString(8); },                                                              // 6454
  "p": function(x, p) { return formatRounded(x * 100, p); },                                                           // 6455
  "r": formatRounded,                                                                                                  // 6456
  "s": formatPrefixAuto,                                                                                               // 6457
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },                                               // 6458
  "x": function(x) { return Math.round(x).toString(16); }                                                              // 6459
};                                                                                                                     // 6460
                                                                                                                       // 6461
// [[fill]align][sign][symbol][0][width][,][.precision][type]                                                          // 6462
var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;                                      // 6463
                                                                                                                       // 6464
function formatSpecifier(specifier) {                                                                                  // 6465
  return new FormatSpecifier(specifier);                                                                               // 6466
}                                                                                                                      // 6467
                                                                                                                       // 6468
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof                                                   // 6469
                                                                                                                       // 6470
function FormatSpecifier(specifier) {                                                                                  // 6471
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);                                  // 6472
                                                                                                                       // 6473
  var match,                                                                                                           // 6474
      fill = match[1] || " ",                                                                                          // 6475
      align = match[2] || ">",                                                                                         // 6476
      sign = match[3] || "-",                                                                                          // 6477
      symbol = match[4] || "",                                                                                         // 6478
      zero = !!match[5],                                                                                               // 6479
      width = match[6] && +match[6],                                                                                   // 6480
      comma = !!match[7],                                                                                              // 6481
      precision = match[8] && +match[8].slice(1),                                                                      // 6482
      type = match[9] || "";                                                                                           // 6483
                                                                                                                       // 6484
  // The "n" type is an alias for ",g".                                                                                // 6485
  if (type === "n") comma = true, type = "g";                                                                          // 6486
                                                                                                                       // 6487
  // Map invalid types to the default format.                                                                          // 6488
  else if (!formatTypes[type]) type = "";                                                                              // 6489
                                                                                                                       // 6490
  // If zero fill is specified, padding goes after sign and before digits.                                             // 6491
  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";                                   // 6492
                                                                                                                       // 6493
  this.fill = fill;                                                                                                    // 6494
  this.align = align;                                                                                                  // 6495
  this.sign = sign;                                                                                                    // 6496
  this.symbol = symbol;                                                                                                // 6497
  this.zero = zero;                                                                                                    // 6498
  this.width = width;                                                                                                  // 6499
  this.comma = comma;                                                                                                  // 6500
  this.precision = precision;                                                                                          // 6501
  this.type = type;                                                                                                    // 6502
}                                                                                                                      // 6503
                                                                                                                       // 6504
FormatSpecifier.prototype.toString = function() {                                                                      // 6505
  return this.fill                                                                                                     // 6506
      + this.align                                                                                                     // 6507
      + this.sign                                                                                                      // 6508
      + this.symbol                                                                                                    // 6509
      + (this.zero ? "0" : "")                                                                                         // 6510
      + (this.width == null ? "" : Math.max(1, this.width | 0))                                                        // 6511
      + (this.comma ? "," : "")                                                                                        // 6512
      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))                                          // 6513
      + this.type;                                                                                                     // 6514
};                                                                                                                     // 6515
                                                                                                                       // 6516
var identity$3 = function(x) {                                                                                         // 6517
  return x;                                                                                                            // 6518
};                                                                                                                     // 6519
                                                                                                                       // 6520
var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];                                // 6521
                                                                                                                       // 6522
var formatLocale = function(locale) {                                                                                  // 6523
  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,       // 6524
      currency = locale.currency,                                                                                      // 6525
      decimal = locale.decimal,                                                                                        // 6526
      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$3,                                       // 6527
      percent = locale.percent || "%";                                                                                 // 6528
                                                                                                                       // 6529
  function newFormat(specifier) {                                                                                      // 6530
    specifier = formatSpecifier(specifier);                                                                            // 6531
                                                                                                                       // 6532
    var fill = specifier.fill,                                                                                         // 6533
        align = specifier.align,                                                                                       // 6534
        sign = specifier.sign,                                                                                         // 6535
        symbol = specifier.symbol,                                                                                     // 6536
        zero = specifier.zero,                                                                                         // 6537
        width = specifier.width,                                                                                       // 6538
        comma = specifier.comma,                                                                                       // 6539
        precision = specifier.precision,                                                                               // 6540
        type = specifier.type;                                                                                         // 6541
                                                                                                                       // 6542
    // Compute the prefix and suffix.                                                                                  // 6543
    // For SI-prefix, the suffix is lazily computed.                                                                   // 6544
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";                                      // 6546
                                                                                                                       // 6547
    // What format function should we use?                                                                             // 6548
    // Is this an integer type?                                                                                        // 6549
    // Can this type generate exponential notation?                                                                    // 6550
    var formatType = formatTypes[type],                                                                                // 6551
        maybeSuffix = !type || /[defgprs%]/.test(type);                                                                // 6552
                                                                                                                       // 6553
    // Set the default precision if not specified,                                                                     // 6554
    // or clamp the specified precision to the supported range.                                                        // 6555
    // For significant precision, it must be in [1, 21].                                                               // 6556
    // For fixed precision, it must be in [0, 20].                                                                     // 6557
    precision = precision == null ? (type ? 6 : 12)                                                                    // 6558
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))                                                   // 6559
        : Math.max(0, Math.min(20, precision));                                                                        // 6560
                                                                                                                       // 6561
    function format(value) {                                                                                           // 6562
      var valuePrefix = prefix,                                                                                        // 6563
          valueSuffix = suffix,                                                                                        // 6564
          i, n, c;                                                                                                     // 6565
                                                                                                                       // 6566
      if (type === "c") {                                                                                              // 6567
        valueSuffix = formatType(value) + valueSuffix;                                                                 // 6568
        value = "";                                                                                                    // 6569
      } else {                                                                                                         // 6570
        value = +value;                                                                                                // 6571
                                                                                                                       // 6572
        // Perform the initial formatting.                                                                             // 6573
        var valueNegative = value < 0;                                                                                 // 6574
        value = formatType(Math.abs(value), precision);                                                                // 6575
                                                                                                                       // 6576
        // If a negative value rounds to zero during formatting, treat as positive.                                    // 6577
        if (valueNegative && +value === 0) valueNegative = false;                                                      // 6578
                                                                                                                       // 6579
        // Compute the prefix and suffix.                                                                              // 6580
        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");
                                                                                                                       // 6583
        // Break the formatted value into the integer “value” part that can be                                         // 6584
        // grouped, and fractional or exponential “suffix” part that is not.                                           // 6585
        if (maybeSuffix) {                                                                                             // 6586
          i = -1, n = value.length;                                                                                    // 6587
          while (++i < n) {                                                                                            // 6588
            if (c = value.charCodeAt(i), 48 > c || c > 57) {                                                           // 6589
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;                  // 6590
              value = value.slice(0, i);                                                                               // 6591
              break;                                                                                                   // 6592
            }                                                                                                          // 6593
          }                                                                                                            // 6594
        }                                                                                                              // 6595
      }                                                                                                                // 6596
                                                                                                                       // 6597
      // If the fill character is not "0", grouping is applied before padding.                                         // 6598
      if (comma && !zero) value = group(value, Infinity);                                                              // 6599
                                                                                                                       // 6600
      // Compute the padding.                                                                                          // 6601
      var length = valuePrefix.length + value.length + valueSuffix.length,                                             // 6602
          padding = length < width ? new Array(width - length + 1).join(fill) : "";                                    // 6603
                                                                                                                       // 6604
      // If the fill character is "0", grouping is applied after padding.                                              // 6605
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
                                                                                                                       // 6607
      // Reconstruct the final output based on the desired alignment.                                                  // 6608
      switch (align) {                                                                                                 // 6609
        case "<": value = valuePrefix + value + valueSuffix + padding; break;                                          // 6610
        case "=": value = valuePrefix + padding + value + valueSuffix; break;                                          // 6611
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;                                           // 6613
      }                                                                                                                // 6614
                                                                                                                       // 6615
      return numerals(value);                                                                                          // 6616
    }                                                                                                                  // 6617
                                                                                                                       // 6618
    format.toString = function() {                                                                                     // 6619
      return specifier + "";                                                                                           // 6620
    };                                                                                                                 // 6621
                                                                                                                       // 6622
    return format;                                                                                                     // 6623
  }                                                                                                                    // 6624
                                                                                                                       // 6625
  function formatPrefix(specifier, value) {                                                                            // 6626
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),                      // 6627
        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,                                          // 6628
        k = Math.pow(10, -e),                                                                                          // 6629
        prefix = prefixes[8 + e / 3];                                                                                  // 6630
    return function(value) {                                                                                           // 6631
      return f(k * value) + prefix;                                                                                    // 6632
    };                                                                                                                 // 6633
  }                                                                                                                    // 6634
                                                                                                                       // 6635
  return {                                                                                                             // 6636
    format: newFormat,                                                                                                 // 6637
    formatPrefix: formatPrefix                                                                                         // 6638
  };                                                                                                                   // 6639
};                                                                                                                     // 6640
                                                                                                                       // 6641
var locale$1;                                                                                                          // 6642
                                                                                                                       // 6643
                                                                                                                       // 6644
                                                                                                                       // 6645
defaultLocale({                                                                                                        // 6646
  decimal: ".",                                                                                                        // 6647
  thousands: ",",                                                                                                      // 6648
  grouping: [3],                                                                                                       // 6649
  currency: ["$", ""]                                                                                                  // 6650
});                                                                                                                    // 6651
                                                                                                                       // 6652
function defaultLocale(definition) {                                                                                   // 6653
  locale$1 = formatLocale(definition);                                                                                 // 6654
  exports.format = locale$1.format;                                                                                    // 6655
  exports.formatPrefix = locale$1.formatPrefix;                                                                        // 6656
  return locale$1;                                                                                                     // 6657
}                                                                                                                      // 6658
                                                                                                                       // 6659
var precisionFixed = function(step) {                                                                                  // 6660
  return Math.max(0, -exponent$1(Math.abs(step)));                                                                     // 6661
};                                                                                                                     // 6662
                                                                                                                       // 6663
var precisionPrefix = function(step, value) {                                                                          // 6664
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));   // 6665
};                                                                                                                     // 6666
                                                                                                                       // 6667
var precisionRound = function(step, max) {                                                                             // 6668
  step = Math.abs(step), max = Math.abs(max) - step;                                                                   // 6669
  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;                                                          // 6670
};                                                                                                                     // 6671
                                                                                                                       // 6672
// Adds floating point numbers with twice the normal precision.                                                        // 6673
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and                                         // 6674
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)                                           // 6675
// 305–363 (1997).                                                                                                     // 6676
// Code adapted from GeographicLib by Charles F. F. Karney,                                                            // 6677
// http://geographiclib.sourceforge.net/                                                                               // 6678
                                                                                                                       // 6679
var adder = function() {                                                                                               // 6680
  return new Adder;                                                                                                    // 6681
};                                                                                                                     // 6682
                                                                                                                       // 6683
function Adder() {                                                                                                     // 6684
  this.reset();                                                                                                        // 6685
}                                                                                                                      // 6686
                                                                                                                       // 6687
Adder.prototype = {                                                                                                    // 6688
  constructor: Adder,                                                                                                  // 6689
  reset: function() {                                                                                                  // 6690
    this.s = // rounded value                                                                                          // 6691
    this.t = 0; // exact error                                                                                         // 6692
  },                                                                                                                   // 6693
  add: function(y) {                                                                                                   // 6694
    add$1(temp, y, this.t);                                                                                            // 6695
    add$1(this, temp.s, this.s);                                                                                       // 6696
    if (this.s) this.t += temp.t;                                                                                      // 6697
    else this.s = temp.t;                                                                                              // 6698
  },                                                                                                                   // 6699
  valueOf: function() {                                                                                                // 6700
    return this.s;                                                                                                     // 6701
  }                                                                                                                    // 6702
};                                                                                                                     // 6703
                                                                                                                       // 6704
var temp = new Adder;                                                                                                  // 6705
                                                                                                                       // 6706
function add$1(adder, a, b) {                                                                                          // 6707
  var x = adder.s = a + b,                                                                                             // 6708
      bv = x - a,                                                                                                      // 6709
      av = x - bv;                                                                                                     // 6710
  adder.t = (a - av) + (b - bv);                                                                                       // 6711
}                                                                                                                      // 6712
                                                                                                                       // 6713
var epsilon$2 = 1e-6;                                                                                                  // 6714
var epsilon2$1 = 1e-12;                                                                                                // 6715
var pi$3 = Math.PI;                                                                                                    // 6716
var halfPi$2 = pi$3 / 2;                                                                                               // 6717
var quarterPi = pi$3 / 4;                                                                                              // 6718
var tau$3 = pi$3 * 2;                                                                                                  // 6719
                                                                                                                       // 6720
var degrees$1 = 180 / pi$3;                                                                                            // 6721
var radians = pi$3 / 180;                                                                                              // 6722
                                                                                                                       // 6723
var abs = Math.abs;                                                                                                    // 6724
var atan = Math.atan;                                                                                                  // 6725
var atan2 = Math.atan2;                                                                                                // 6726
var cos$1 = Math.cos;                                                                                                  // 6727
var ceil = Math.ceil;                                                                                                  // 6728
var exp = Math.exp;                                                                                                    // 6729
                                                                                                                       // 6730
var log = Math.log;                                                                                                    // 6731
var pow = Math.pow;                                                                                                    // 6732
var sin$1 = Math.sin;                                                                                                  // 6733
var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };                                            // 6734
var sqrt = Math.sqrt;                                                                                                  // 6735
var tan = Math.tan;                                                                                                    // 6736
                                                                                                                       // 6737
function acos(x) {                                                                                                     // 6738
  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);                                                                     // 6739
}                                                                                                                      // 6740
                                                                                                                       // 6741
function asin(x) {                                                                                                     // 6742
  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);                                                         // 6743
}                                                                                                                      // 6744
                                                                                                                       // 6745
function haversin(x) {                                                                                                 // 6746
  return (x = sin$1(x / 2)) * x;                                                                                       // 6747
}                                                                                                                      // 6748
                                                                                                                       // 6749
function noop$1() {}                                                                                                   // 6750
                                                                                                                       // 6751
function streamGeometry(geometry, stream) {                                                                            // 6752
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {                                                  // 6753
    streamGeometryType[geometry.type](geometry, stream);                                                               // 6754
  }                                                                                                                    // 6755
}                                                                                                                      // 6756
                                                                                                                       // 6757
var streamObjectType = {                                                                                               // 6758
  Feature: function(object, stream) {                                                                                  // 6759
    streamGeometry(object.geometry, stream);                                                                           // 6760
  },                                                                                                                   // 6761
  FeatureCollection: function(object, stream) {                                                                        // 6762
    var features = object.features, i = -1, n = features.length;                                                       // 6763
    while (++i < n) streamGeometry(features[i].geometry, stream);                                                      // 6764
  }                                                                                                                    // 6765
};                                                                                                                     // 6766
                                                                                                                       // 6767
var streamGeometryType = {                                                                                             // 6768
  Sphere: function(object, stream) {                                                                                   // 6769
    stream.sphere();                                                                                                   // 6770
  },                                                                                                                   // 6771
  Point: function(object, stream) {                                                                                    // 6772
    object = object.coordinates;                                                                                       // 6773
    stream.point(object[0], object[1], object[2]);                                                                     // 6774
  },                                                                                                                   // 6775
  MultiPoint: function(object, stream) {                                                                               // 6776
    var coordinates = object.coordinates, i = -1, n = coordinates.length;                                              // 6777
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);                            // 6778
  },                                                                                                                   // 6779
  LineString: function(object, stream) {                                                                               // 6780
    streamLine(object.coordinates, stream, 0);                                                                         // 6781
  },                                                                                                                   // 6782
  MultiLineString: function(object, stream) {                                                                          // 6783
    var coordinates = object.coordinates, i = -1, n = coordinates.length;                                              // 6784
    while (++i < n) streamLine(coordinates[i], stream, 0);                                                             // 6785
  },                                                                                                                   // 6786
  Polygon: function(object, stream) {                                                                                  // 6787
    streamPolygon(object.coordinates, stream);                                                                         // 6788
  },                                                                                                                   // 6789
  MultiPolygon: function(object, stream) {                                                                             // 6790
    var coordinates = object.coordinates, i = -1, n = coordinates.length;                                              // 6791
    while (++i < n) streamPolygon(coordinates[i], stream);                                                             // 6792
  },                                                                                                                   // 6793
  GeometryCollection: function(object, stream) {                                                                       // 6794
    var geometries = object.geometries, i = -1, n = geometries.length;                                                 // 6795
    while (++i < n) streamGeometry(geometries[i], stream);                                                             // 6796
  }                                                                                                                    // 6797
};                                                                                                                     // 6798
                                                                                                                       // 6799
function streamLine(coordinates, stream, closed) {                                                                     // 6800
  var i = -1, n = coordinates.length - closed, coordinate;                                                             // 6801
  stream.lineStart();                                                                                                  // 6802
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);              // 6803
  stream.lineEnd();                                                                                                    // 6804
}                                                                                                                      // 6805
                                                                                                                       // 6806
function streamPolygon(coordinates, stream) {                                                                          // 6807
  var i = -1, n = coordinates.length;                                                                                  // 6808
  stream.polygonStart();                                                                                               // 6809
  while (++i < n) streamLine(coordinates[i], stream, 1);                                                               // 6810
  stream.polygonEnd();                                                                                                 // 6811
}                                                                                                                      // 6812
                                                                                                                       // 6813
var geoStream = function(object, stream) {                                                                             // 6814
  if (object && streamObjectType.hasOwnProperty(object.type)) {                                                        // 6815
    streamObjectType[object.type](object, stream);                                                                     // 6816
  } else {                                                                                                             // 6817
    streamGeometry(object, stream);                                                                                    // 6818
  }                                                                                                                    // 6819
};                                                                                                                     // 6820
                                                                                                                       // 6821
var areaRingSum = adder();                                                                                             // 6822
                                                                                                                       // 6823
var areaSum = adder();                                                                                                 // 6824
var lambda00;                                                                                                          // 6825
var phi00;                                                                                                             // 6826
var lambda0;                                                                                                           // 6827
var cosPhi0;                                                                                                           // 6828
var sinPhi0;                                                                                                           // 6829
                                                                                                                       // 6830
var areaStream = {                                                                                                     // 6831
  point: noop$1,                                                                                                       // 6832
  lineStart: noop$1,                                                                                                   // 6833
  lineEnd: noop$1,                                                                                                     // 6834
  polygonStart: function() {                                                                                           // 6835
    areaRingSum.reset();                                                                                               // 6836
    areaStream.lineStart = areaRingStart;                                                                              // 6837
    areaStream.lineEnd = areaRingEnd;                                                                                  // 6838
  },                                                                                                                   // 6839
  polygonEnd: function() {                                                                                             // 6840
    var areaRing = +areaRingSum;                                                                                       // 6841
    areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);                                                           // 6842
    this.lineStart = this.lineEnd = this.point = noop$1;                                                               // 6843
  },                                                                                                                   // 6844
  sphere: function() {                                                                                                 // 6845
    areaSum.add(tau$3);                                                                                                // 6846
  }                                                                                                                    // 6847
};                                                                                                                     // 6848
                                                                                                                       // 6849
function areaRingStart() {                                                                                             // 6850
  areaStream.point = areaPointFirst;                                                                                   // 6851
}                                                                                                                      // 6852
                                                                                                                       // 6853
function areaRingEnd() {                                                                                               // 6854
  areaPoint(lambda00, phi00);                                                                                          // 6855
}                                                                                                                      // 6856
                                                                                                                       // 6857
function areaPointFirst(lambda, phi) {                                                                                 // 6858
  areaStream.point = areaPoint;                                                                                        // 6859
  lambda00 = lambda, phi00 = phi;                                                                                      // 6860
  lambda *= radians, phi *= radians;                                                                                   // 6861
  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);                                  // 6862
}                                                                                                                      // 6863
                                                                                                                       // 6864
function areaPoint(lambda, phi) {                                                                                      // 6865
  lambda *= radians, phi *= radians;                                                                                   // 6866
  phi = phi / 2 + quarterPi; // half the angular distance from south pole                                              // 6867
                                                                                                                       // 6868
  // Spherical excess E for a spherical triangle with vertices: south pole,                                            // 6869
  // previous point, current point.  Uses a formula derived from Cagnoli’s                                             // 6870
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).                                               // 6871
  var dLambda = lambda - lambda0,                                                                                      // 6872
      sdLambda = dLambda >= 0 ? 1 : -1,                                                                                // 6873
      adLambda = sdLambda * dLambda,                                                                                   // 6874
      cosPhi = cos$1(phi),                                                                                             // 6875
      sinPhi = sin$1(phi),                                                                                             // 6876
      k = sinPhi0 * sinPhi,                                                                                            // 6877
      u = cosPhi0 * cosPhi + k * cos$1(adLambda),                                                                      // 6878
      v = k * sdLambda * sin$1(adLambda);                                                                              // 6879
  areaRingSum.add(atan2(v, u));                                                                                        // 6880
                                                                                                                       // 6881
  // Advance the previous points.                                                                                      // 6882
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;                                                                // 6883
}                                                                                                                      // 6884
                                                                                                                       // 6885
var area = function(object) {                                                                                          // 6886
  areaSum.reset();                                                                                                     // 6887
  geoStream(object, areaStream);                                                                                       // 6888
  return areaSum * 2;                                                                                                  // 6889
};                                                                                                                     // 6890
                                                                                                                       // 6891
function spherical(cartesian) {                                                                                        // 6892
  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];                                                      // 6893
}                                                                                                                      // 6894
                                                                                                                       // 6895
function cartesian(spherical) {                                                                                        // 6896
  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);                                                  // 6897
  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];                                                 // 6898
}                                                                                                                      // 6899
                                                                                                                       // 6900
function cartesianDot(a, b) {                                                                                          // 6901
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];                                                                      // 6902
}                                                                                                                      // 6903
                                                                                                                       // 6904
function cartesianCross(a, b) {                                                                                        // 6905
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];                            // 6906
}                                                                                                                      // 6907
                                                                                                                       // 6908
// TODO return a                                                                                                       // 6909
function cartesianAddInPlace(a, b) {                                                                                   // 6910
  a[0] += b[0], a[1] += b[1], a[2] += b[2];                                                                            // 6911
}                                                                                                                      // 6912
                                                                                                                       // 6913
function cartesianScale(vector, k) {                                                                                   // 6914
  return [vector[0] * k, vector[1] * k, vector[2] * k];                                                                // 6915
}                                                                                                                      // 6916
                                                                                                                       // 6917
// TODO return d                                                                                                       // 6918
function cartesianNormalizeInPlace(d) {                                                                                // 6919
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);                                                               // 6920
  d[0] /= l, d[1] /= l, d[2] /= l;                                                                                     // 6921
}                                                                                                                      // 6922
                                                                                                                       // 6923
var lambda0$1;                                                                                                         // 6924
var phi0;                                                                                                              // 6925
var lambda1;                                                                                                           // 6926
var phi1;                                                                                                              // 6927
var lambda2;                                                                                                           // 6928
var lambda00$1;                                                                                                        // 6929
var phi00$1;                                                                                                           // 6930
var p0;                                                                                                                // 6931
var deltaSum = adder();                                                                                                // 6932
var ranges;                                                                                                            // 6933
var range;                                                                                                             // 6934
                                                                                                                       // 6935
var boundsStream = {                                                                                                   // 6936
  point: boundsPoint,                                                                                                  // 6937
  lineStart: boundsLineStart,                                                                                          // 6938
  lineEnd: boundsLineEnd,                                                                                              // 6939
  polygonStart: function() {                                                                                           // 6940
    boundsStream.point = boundsRingPoint;                                                                              // 6941
    boundsStream.lineStart = boundsRingStart;                                                                          // 6942
    boundsStream.lineEnd = boundsRingEnd;                                                                              // 6943
    deltaSum.reset();                                                                                                  // 6944
    areaStream.polygonStart();                                                                                         // 6945
  },                                                                                                                   // 6946
  polygonEnd: function() {                                                                                             // 6947
    areaStream.polygonEnd();                                                                                           // 6948
    boundsStream.point = boundsPoint;                                                                                  // 6949
    boundsStream.lineStart = boundsLineStart;                                                                          // 6950
    boundsStream.lineEnd = boundsLineEnd;                                                                              // 6951
    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);                                            // 6952
    else if (deltaSum > epsilon$2) phi1 = 90;                                                                          // 6953
    else if (deltaSum < -epsilon$2) phi0 = -90;                                                                        // 6954
    range[0] = lambda0$1, range[1] = lambda1;                                                                          // 6955
  }                                                                                                                    // 6956
};                                                                                                                     // 6957
                                                                                                                       // 6958
function boundsPoint(lambda, phi) {                                                                                    // 6959
  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);                                                         // 6960
  if (phi < phi0) phi0 = phi;                                                                                          // 6961
  if (phi > phi1) phi1 = phi;                                                                                          // 6962
}                                                                                                                      // 6963
                                                                                                                       // 6964
function linePoint(lambda, phi) {                                                                                      // 6965
  var p = cartesian([lambda * radians, phi * radians]);                                                                // 6966
  if (p0) {                                                                                                            // 6967
    var normal = cartesianCross(p0, p),                                                                                // 6968
        equatorial = [normal[1], -normal[0], 0],                                                                       // 6969
        inflection = cartesianCross(equatorial, normal);                                                               // 6970
    cartesianNormalizeInPlace(inflection);                                                                             // 6971
    inflection = spherical(inflection);                                                                                // 6972
    var delta = lambda - lambda2,                                                                                      // 6973
        sign$$1 = delta > 0 ? 1 : -1,                                                                                  // 6974
        lambdai = inflection[0] * degrees$1 * sign$$1,                                                                 // 6975
        phii,                                                                                                          // 6976
        antimeridian = abs(delta) > 180;                                                                               // 6977
    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {                                  // 6978
      phii = inflection[1] * degrees$1;                                                                                // 6979
      if (phii > phi1) phi1 = phii;                                                                                    // 6980
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
      phii = -inflection[1] * degrees$1;                                                                               // 6982
      if (phii < phi0) phi0 = phii;                                                                                    // 6983
    } else {                                                                                                           // 6984
      if (phi < phi0) phi0 = phi;                                                                                      // 6985
      if (phi > phi1) phi1 = phi;                                                                                      // 6986
    }                                                                                                                  // 6987
    if (antimeridian) {                                                                                                // 6988
      if (lambda < lambda2) {                                                                                          // 6989
        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;                                    // 6990
      } else {                                                                                                         // 6991
        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;                                    // 6992
      }                                                                                                                // 6993
    } else {                                                                                                           // 6994
      if (lambda1 >= lambda0$1) {                                                                                      // 6995
        if (lambda < lambda0$1) lambda0$1 = lambda;                                                                    // 6996
        if (lambda > lambda1) lambda1 = lambda;                                                                        // 6997
      } else {                                                                                                         // 6998
        if (lambda > lambda2) {                                                                                        // 6999
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;                                  // 7000
        } else {                                                                                                       // 7001
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;                                  // 7002
        }                                                                                                              // 7003
      }                                                                                                                // 7004
    }                                                                                                                  // 7005
  } else {                                                                                                             // 7006
    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);                                                       // 7007
  }                                                                                                                    // 7008
  if (phi < phi0) phi0 = phi;                                                                                          // 7009
  if (phi > phi1) phi1 = phi;                                                                                          // 7010
  p0 = p, lambda2 = lambda;                                                                                            // 7011
}                                                                                                                      // 7012
                                                                                                                       // 7013
function boundsLineStart() {                                                                                           // 7014
  boundsStream.point = linePoint;                                                                                      // 7015
}                                                                                                                      // 7016
                                                                                                                       // 7017
function boundsLineEnd() {                                                                                             // 7018
  range[0] = lambda0$1, range[1] = lambda1;                                                                            // 7019
  boundsStream.point = boundsPoint;                                                                                    // 7020
  p0 = null;                                                                                                           // 7021
}                                                                                                                      // 7022
                                                                                                                       // 7023
function boundsRingPoint(lambda, phi) {                                                                                // 7024
  if (p0) {                                                                                                            // 7025
    var delta = lambda - lambda2;                                                                                      // 7026
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);                                         // 7027
  } else {                                                                                                             // 7028
    lambda00$1 = lambda, phi00$1 = phi;                                                                                // 7029
  }                                                                                                                    // 7030
  areaStream.point(lambda, phi);                                                                                       // 7031
  linePoint(lambda, phi);                                                                                              // 7032
}                                                                                                                      // 7033
                                                                                                                       // 7034
function boundsRingStart() {                                                                                           // 7035
  areaStream.lineStart();                                                                                              // 7036
}                                                                                                                      // 7037
                                                                                                                       // 7038
function boundsRingEnd() {                                                                                             // 7039
  boundsRingPoint(lambda00$1, phi00$1);                                                                                // 7040
  areaStream.lineEnd();                                                                                                // 7041
  if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);                                                         // 7042
  range[0] = lambda0$1, range[1] = lambda1;                                                                            // 7043
  p0 = null;                                                                                                           // 7044
}                                                                                                                      // 7045
                                                                                                                       // 7046
// Finds the left-right distance between two longitudes.                                                               // 7047
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want                                   // 7048
// the distance between ±180° to be 360°.                                                                              // 7049
function angle(lambda0, lambda1) {                                                                                     // 7050
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;                                                           // 7051
}                                                                                                                      // 7052
                                                                                                                       // 7053
function rangeCompare(a, b) {                                                                                          // 7054
  return a[0] - b[0];                                                                                                  // 7055
}                                                                                                                      // 7056
                                                                                                                       // 7057
function rangeContains(range, x) {                                                                                     // 7058
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;                         // 7059
}                                                                                                                      // 7060
                                                                                                                       // 7061
var bounds = function(feature) {                                                                                       // 7062
  var i, n, a, b, merged, deltaMax, delta;                                                                             // 7063
                                                                                                                       // 7064
  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);                                                                     // 7065
  ranges = [];                                                                                                         // 7066
  geoStream(feature, boundsStream);                                                                                    // 7067
                                                                                                                       // 7068
  // First, sort ranges by their minimum longitudes.                                                                   // 7069
  if (n = ranges.length) {                                                                                             // 7070
    ranges.sort(rangeCompare);                                                                                         // 7071
                                                                                                                       // 7072
    // Then, merge any ranges that overlap.                                                                            // 7073
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {                                                             // 7074
      b = ranges[i];                                                                                                   // 7075
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {                                                          // 7076
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];                                                        // 7077
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];                                                        // 7078
      } else {                                                                                                         // 7079
        merged.push(a = b);                                                                                            // 7080
      }                                                                                                                // 7081
    }                                                                                                                  // 7082
                                                                                                                       // 7083
    // Finally, find the largest gap between the merged ranges.                                                        // 7084
    // The final bounding box will be the inverse of this gap.                                                         // 7085
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {                      // 7086
      b = merged[i];                                                                                                   // 7087
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];                  // 7088
    }                                                                                                                  // 7089
  }                                                                                                                    // 7090
                                                                                                                       // 7091
  ranges = range = null;                                                                                               // 7092
                                                                                                                       // 7093
  return lambda0$1 === Infinity || phi0 === Infinity                                                                   // 7094
      ? [[NaN, NaN], [NaN, NaN]]                                                                                       // 7095
      : [[lambda0$1, phi0], [lambda1, phi1]];                                                                          // 7096
};                                                                                                                     // 7097
                                                                                                                       // 7098
var W0;                                                                                                                // 7099
var W1;                                                                                                                // 7100
var X0;                                                                                                                // 7101
var Y0;                                                                                                                // 7102
var Z0;                                                                                                                // 7103
var X1;                                                                                                                // 7104
var Y1;                                                                                                                // 7105
var Z1;                                                                                                                // 7106
var X2;                                                                                                                // 7107
var Y2;                                                                                                                // 7108
var Z2;                                                                                                                // 7109
var lambda00$2;                                                                                                        // 7110
var phi00$2;                                                                                                           // 7111
var x0;                                                                                                                // 7112
var y0;                                                                                                                // 7113
var z0; // previous point                                                                                              // 7114
                                                                                                                       // 7115
var centroidStream = {                                                                                                 // 7116
  sphere: noop$1,                                                                                                      // 7117
  point: centroidPoint,                                                                                                // 7118
  lineStart: centroidLineStart,                                                                                        // 7119
  lineEnd: centroidLineEnd,                                                                                            // 7120
  polygonStart: function() {                                                                                           // 7121
    centroidStream.lineStart = centroidRingStart;                                                                      // 7122
    centroidStream.lineEnd = centroidRingEnd;                                                                          // 7123
  },                                                                                                                   // 7124
  polygonEnd: function() {                                                                                             // 7125
    centroidStream.lineStart = centroidLineStart;                                                                      // 7126
    centroidStream.lineEnd = centroidLineEnd;                                                                          // 7127
  }                                                                                                                    // 7128
};                                                                                                                     // 7129
                                                                                                                       // 7130
// Arithmetic mean of Cartesian vectors.                                                                               // 7131
function centroidPoint(lambda, phi) {                                                                                  // 7132
  lambda *= radians, phi *= radians;                                                                                   // 7133
  var cosPhi = cos$1(phi);                                                                                             // 7134
  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));                                  // 7135
}                                                                                                                      // 7136
                                                                                                                       // 7137
function centroidPointCartesian(x, y, z) {                                                                             // 7138
  ++W0;                                                                                                                // 7139
  X0 += (x - X0) / W0;                                                                                                 // 7140
  Y0 += (y - Y0) / W0;                                                                                                 // 7141
  Z0 += (z - Z0) / W0;                                                                                                 // 7142
}                                                                                                                      // 7143
                                                                                                                       // 7144
function centroidLineStart() {                                                                                         // 7145
  centroidStream.point = centroidLinePointFirst;                                                                       // 7146
}                                                                                                                      // 7147
                                                                                                                       // 7148
function centroidLinePointFirst(lambda, phi) {                                                                         // 7149
  lambda *= radians, phi *= radians;                                                                                   // 7150
  var cosPhi = cos$1(phi);                                                                                             // 7151
  x0 = cosPhi * cos$1(lambda);                                                                                         // 7152
  y0 = cosPhi * sin$1(lambda);                                                                                         // 7153
  z0 = sin$1(phi);                                                                                                     // 7154
  centroidStream.point = centroidLinePoint;                                                                            // 7155
  centroidPointCartesian(x0, y0, z0);                                                                                  // 7156
}                                                                                                                      // 7157
                                                                                                                       // 7158
function centroidLinePoint(lambda, phi) {                                                                              // 7159
  lambda *= radians, phi *= radians;                                                                                   // 7160
  var cosPhi = cos$1(phi),                                                                                             // 7161
      x = cosPhi * cos$1(lambda),                                                                                      // 7162
      y = cosPhi * sin$1(lambda),                                                                                      // 7163
      z = sin$1(phi),                                                                                                  // 7164
      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;                                                                                                             // 7166
  X1 += w * (x0 + (x0 = x));                                                                                           // 7167
  Y1 += w * (y0 + (y0 = y));                                                                                           // 7168
  Z1 += w * (z0 + (z0 = z));                                                                                           // 7169
  centroidPointCartesian(x0, y0, z0);                                                                                  // 7170
}                                                                                                                      // 7171
                                                                                                                       // 7172
function centroidLineEnd() {                                                                                           // 7173
  centroidStream.point = centroidPoint;                                                                                // 7174
}                                                                                                                      // 7175
                                                                                                                       // 7176
// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,                                                       // 7177
// J. Applied Mechanics 42, 239 (1975).                                                                                // 7178
function centroidRingStart() {                                                                                         // 7179
  centroidStream.point = centroidRingPointFirst;                                                                       // 7180
}                                                                                                                      // 7181
                                                                                                                       // 7182
function centroidRingEnd() {                                                                                           // 7183
  centroidRingPoint(lambda00$2, phi00$2);                                                                              // 7184
  centroidStream.point = centroidPoint;                                                                                // 7185
}                                                                                                                      // 7186
                                                                                                                       // 7187
function centroidRingPointFirst(lambda, phi) {                                                                         // 7188
  lambda00$2 = lambda, phi00$2 = phi;                                                                                  // 7189
  lambda *= radians, phi *= radians;                                                                                   // 7190
  centroidStream.point = centroidRingPoint;                                                                            // 7191
  var cosPhi = cos$1(phi);                                                                                             // 7192
  x0 = cosPhi * cos$1(lambda);                                                                                         // 7193
  y0 = cosPhi * sin$1(lambda);                                                                                         // 7194
  z0 = sin$1(phi);                                                                                                     // 7195
  centroidPointCartesian(x0, y0, z0);                                                                                  // 7196
}                                                                                                                      // 7197
                                                                                                                       // 7198
function centroidRingPoint(lambda, phi) {                                                                              // 7199
  lambda *= radians, phi *= radians;                                                                                   // 7200
  var cosPhi = cos$1(phi),                                                                                             // 7201
      x = cosPhi * cos$1(lambda),                                                                                      // 7202
      y = cosPhi * sin$1(lambda),                                                                                      // 7203
      z = sin$1(phi),                                                                                                  // 7204
      cx = y0 * z - z0 * y,                                                                                            // 7205
      cy = z0 * x - x0 * z,                                                                                            // 7206
      cz = x0 * y - y0 * x,                                                                                            // 7207
      m = sqrt(cx * cx + cy * cy + cz * cz),                                                                           // 7208
      w = asin(m), // line weight = angle                                                                              // 7209
      v = m && -w / m; // area weight multiplier                                                                       // 7210
  X2 += v * cx;                                                                                                        // 7211
  Y2 += v * cy;                                                                                                        // 7212
  Z2 += v * cz;                                                                                                        // 7213
  W1 += w;                                                                                                             // 7214
  X1 += w * (x0 + (x0 = x));                                                                                           // 7215
  Y1 += w * (y0 + (y0 = y));                                                                                           // 7216
  Z1 += w * (z0 + (z0 = z));                                                                                           // 7217
  centroidPointCartesian(x0, y0, z0);                                                                                  // 7218
}                                                                                                                      // 7219
                                                                                                                       // 7220
var centroid = function(object) {                                                                                      // 7221
  W0 = W1 =                                                                                                            // 7222
  X0 = Y0 = Z0 =                                                                                                       // 7223
  X1 = Y1 = Z1 =                                                                                                       // 7224
  X2 = Y2 = Z2 = 0;                                                                                                    // 7225
  geoStream(object, centroidStream);                                                                                   // 7226
                                                                                                                       // 7227
  var x = X2,                                                                                                          // 7228
      y = Y2,                                                                                                          // 7229
      z = Z2,                                                                                                          // 7230
      m = x * x + y * y + z * z;                                                                                       // 7231
                                                                                                                       // 7232
  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.                              // 7233
  if (m < epsilon2$1) {                                                                                                // 7234
    x = X1, y = Y1, z = Z1;                                                                                            // 7235
    // If the feature has zero length, fall back to arithmetic mean of point vectors.                                  // 7236
    if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;                                                                        // 7237
    m = x * x + y * y + z * z;                                                                                         // 7238
    // If the feature still has an undefined ccentroid, then return.                                                   // 7239
    if (m < epsilon2$1) return [NaN, NaN];                                                                             // 7240
  }                                                                                                                    // 7241
                                                                                                                       // 7242
  return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];                                                     // 7243
};                                                                                                                     // 7244
                                                                                                                       // 7245
var constant$7 = function(x) {                                                                                         // 7246
  return function() {                                                                                                  // 7247
    return x;                                                                                                          // 7248
  };                                                                                                                   // 7249
};                                                                                                                     // 7250
                                                                                                                       // 7251
var compose = function(a, b) {                                                                                         // 7252
                                                                                                                       // 7253
  function compose(x, y) {                                                                                             // 7254
    return x = a(x, y), b(x[0], x[1]);                                                                                 // 7255
  }                                                                                                                    // 7256
                                                                                                                       // 7257
  if (a.invert && b.invert) compose.invert = function(x, y) {                                                          // 7258
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);                                                              // 7259
  };                                                                                                                   // 7260
                                                                                                                       // 7261
  return compose;                                                                                                      // 7262
};                                                                                                                     // 7263
                                                                                                                       // 7264
function rotationIdentity(lambda, phi) {                                                                               // 7265
  return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];                             // 7266
}                                                                                                                      // 7267
                                                                                                                       // 7268
rotationIdentity.invert = rotationIdentity;                                                                            // 7269
                                                                                                                       // 7270
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {                                                            // 7271
  return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
    : rotationLambda(deltaLambda))                                                                                     // 7273
    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)                                                 // 7274
    : rotationIdentity);                                                                                               // 7275
}                                                                                                                      // 7276
                                                                                                                       // 7277
function forwardRotationLambda(deltaLambda) {                                                                          // 7278
  return function(lambda, phi) {                                                                                       // 7279
    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];    // 7280
  };                                                                                                                   // 7281
}                                                                                                                      // 7282
                                                                                                                       // 7283
function rotationLambda(deltaLambda) {                                                                                 // 7284
  var rotation = forwardRotationLambda(deltaLambda);                                                                   // 7285
  rotation.invert = forwardRotationLambda(-deltaLambda);                                                               // 7286
  return rotation;                                                                                                     // 7287
}                                                                                                                      // 7288
                                                                                                                       // 7289
function rotationPhiGamma(deltaPhi, deltaGamma) {                                                                      // 7290
  var cosDeltaPhi = cos$1(deltaPhi),                                                                                   // 7291
      sinDeltaPhi = sin$1(deltaPhi),                                                                                   // 7292
      cosDeltaGamma = cos$1(deltaGamma),                                                                               // 7293
      sinDeltaGamma = sin$1(deltaGamma);                                                                               // 7294
                                                                                                                       // 7295
  function rotation(lambda, phi) {                                                                                     // 7296
    var cosPhi = cos$1(phi),                                                                                           // 7297
        x = cos$1(lambda) * cosPhi,                                                                                    // 7298
        y = sin$1(lambda) * cosPhi,                                                                                    // 7299
        z = sin$1(phi),                                                                                                // 7300
        k = z * cosDeltaPhi + x * sinDeltaPhi;                                                                         // 7301
    return [                                                                                                           // 7302
      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),                                 // 7303
      asin(k * cosDeltaGamma + y * sinDeltaGamma)                                                                      // 7304
    ];                                                                                                                 // 7305
  }                                                                                                                    // 7306
                                                                                                                       // 7307
  rotation.invert = function(lambda, phi) {                                                                            // 7308
    var cosPhi = cos$1(phi),                                                                                           // 7309
        x = cos$1(lambda) * cosPhi,                                                                                    // 7310
        y = sin$1(lambda) * cosPhi,                                                                                    // 7311
        z = sin$1(phi),                                                                                                // 7312
        k = z * cosDeltaGamma - y * sinDeltaGamma;                                                                     // 7313
    return [                                                                                                           // 7314
      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),                                 // 7315
      asin(k * cosDeltaPhi - x * sinDeltaPhi)                                                                          // 7316
    ];                                                                                                                 // 7317
  };                                                                                                                   // 7318
                                                                                                                       // 7319
  return rotation;                                                                                                     // 7320
}                                                                                                                      // 7321
                                                                                                                       // 7322
var rotation = function(rotate) {                                                                                      // 7323
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);       // 7324
                                                                                                                       // 7325
  function forward(coordinates) {                                                                                      // 7326
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);                                          // 7327
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;                                      // 7328
  }                                                                                                                    // 7329
                                                                                                                       // 7330
  forward.invert = function(coordinates) {                                                                             // 7331
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);                                   // 7332
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;                                      // 7333
  };                                                                                                                   // 7334
                                                                                                                       // 7335
  return forward;                                                                                                      // 7336
};                                                                                                                     // 7337
                                                                                                                       // 7338
// Generates a circle centered at [0°, 0°], with a given radius and precision.                                         // 7339
function circleStream(stream, radius, delta, direction, t0, t1) {                                                      // 7340
  if (!delta) return;                                                                                                  // 7341
  var cosRadius = cos$1(radius),                                                                                       // 7342
      sinRadius = sin$1(radius),                                                                                       // 7343
      step = direction * delta;                                                                                        // 7344
  if (t0 == null) {                                                                                                    // 7345
    t0 = radius + direction * tau$3;                                                                                   // 7346
    t1 = radius - step / 2;                                                                                            // 7347
  } else {                                                                                                             // 7348
    t0 = circleRadius(cosRadius, t0);                                                                                  // 7349
    t1 = circleRadius(cosRadius, t1);                                                                                  // 7350
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;                                                    // 7351
  }                                                                                                                    // 7352
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {                                                // 7353
    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);                                      // 7354
    stream.point(point[0], point[1]);                                                                                  // 7355
  }                                                                                                                    // 7356
}                                                                                                                      // 7357
                                                                                                                       // 7358
// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].                                        // 7359
function circleRadius(cosRadius, point) {                                                                              // 7360
  point = cartesian(point), point[0] -= cosRadius;                                                                     // 7361
  cartesianNormalizeInPlace(point);                                                                                    // 7362
  var radius = acos(-point[1]);                                                                                        // 7363
  return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;                                             // 7364
}                                                                                                                      // 7365
                                                                                                                       // 7366
var circle = function() {                                                                                              // 7367
  var center = constant$7([0, 0]),                                                                                     // 7368
      radius = constant$7(90),                                                                                         // 7369
      precision = constant$7(6),                                                                                       // 7370
      ring,                                                                                                            // 7371
      rotate,                                                                                                          // 7372
      stream = {point: point};                                                                                         // 7373
                                                                                                                       // 7374
  function point(x, y) {                                                                                               // 7375
    ring.push(x = rotate(x, y));                                                                                       // 7376
    x[0] *= degrees$1, x[1] *= degrees$1;                                                                              // 7377
  }                                                                                                                    // 7378
                                                                                                                       // 7379
  function circle() {                                                                                                  // 7380
    var c = center.apply(this, arguments),                                                                             // 7381
        r = radius.apply(this, arguments) * radians,                                                                   // 7382
        p = precision.apply(this, arguments) * radians;                                                                // 7383
    ring = [];                                                                                                         // 7384
    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;                                                // 7385
    circleStream(stream, r, p, 1);                                                                                     // 7386
    c = {type: "Polygon", coordinates: [ring]};                                                                        // 7387
    ring = rotate = null;                                                                                              // 7388
    return c;                                                                                                          // 7389
  }                                                                                                                    // 7390
                                                                                                                       // 7391
  circle.center = function(_) {                                                                                        // 7392
    return arguments.length ? (center = typeof _ === "function" ? _ : constant$7([+_[0], +_[1]]), circle) : center;    // 7393
  };                                                                                                                   // 7394
                                                                                                                       // 7395
  circle.radius = function(_) {                                                                                        // 7396
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), circle) : radius;                // 7397
  };                                                                                                                   // 7398
                                                                                                                       // 7399
  circle.precision = function(_) {                                                                                     // 7400
    return arguments.length ? (precision = typeof _ === "function" ? _ : constant$7(+_), circle) : precision;          // 7401
  };                                                                                                                   // 7402
                                                                                                                       // 7403
  return circle;                                                                                                       // 7404
};                                                                                                                     // 7405
                                                                                                                       // 7406
var clipBuffer = function() {                                                                                          // 7407
  var lines = [],                                                                                                      // 7408
      line;                                                                                                            // 7409
  return {                                                                                                             // 7410
    point: function(x, y) {                                                                                            // 7411
      line.push([x, y]);                                                                                               // 7412
    },                                                                                                                 // 7413
    lineStart: function() {                                                                                            // 7414
      lines.push(line = []);                                                                                           // 7415
    },                                                                                                                 // 7416
    lineEnd: noop$1,                                                                                                   // 7417
    rejoin: function() {                                                                                               // 7418
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));                                             // 7419
    },                                                                                                                 // 7420
    result: function() {                                                                                               // 7421
      var result = lines;                                                                                              // 7422
      lines = [];                                                                                                      // 7423
      line = null;                                                                                                     // 7424
      return result;                                                                                                   // 7425
    }                                                                                                                  // 7426
  };                                                                                                                   // 7427
};                                                                                                                     // 7428
                                                                                                                       // 7429
var clipLine = function(a, b, x0, y0, x1, y1) {                                                                        // 7430
  var ax = a[0],                                                                                                       // 7431
      ay = a[1],                                                                                                       // 7432
      bx = b[0],                                                                                                       // 7433
      by = b[1],                                                                                                       // 7434
      t0 = 0,                                                                                                          // 7435
      t1 = 1,                                                                                                          // 7436
      dx = bx - ax,                                                                                                    // 7437
      dy = by - ay,                                                                                                    // 7438
      r;                                                                                                               // 7439
                                                                                                                       // 7440
  r = x0 - ax;                                                                                                         // 7441
  if (!dx && r > 0) return;                                                                                            // 7442
  r /= dx;                                                                                                             // 7443
  if (dx < 0) {                                                                                                        // 7444
    if (r < t0) return;                                                                                                // 7445
    if (r < t1) t1 = r;                                                                                                // 7446
  } else if (dx > 0) {                                                                                                 // 7447
    if (r > t1) return;                                                                                                // 7448
    if (r > t0) t0 = r;                                                                                                // 7449
  }                                                                                                                    // 7450
                                                                                                                       // 7451
  r = x1 - ax;                                                                                                         // 7452
  if (!dx && r < 0) return;                                                                                            // 7453
  r /= dx;                                                                                                             // 7454
  if (dx < 0) {                                                                                                        // 7455
    if (r > t1) return;                                                                                                // 7456
    if (r > t0) t0 = r;                                                                                                // 7457
  } else if (dx > 0) {                                                                                                 // 7458
    if (r < t0) return;                                                                                                // 7459
    if (r < t1) t1 = r;                                                                                                // 7460
  }                                                                                                                    // 7461
                                                                                                                       // 7462
  r = y0 - ay;                                                                                                         // 7463
  if (!dy && r > 0) return;                                                                                            // 7464
  r /= dy;                                                                                                             // 7465
  if (dy < 0) {                                                                                                        // 7466
    if (r < t0) return;                                                                                                // 7467
    if (r < t1) t1 = r;                                                                                                // 7468
  } else if (dy > 0) {                                                                                                 // 7469
    if (r > t1) return;                                                                                                // 7470
    if (r > t0) t0 = r;                                                                                                // 7471
  }                                                                                                                    // 7472
                                                                                                                       // 7473
  r = y1 - ay;                                                                                                         // 7474
  if (!dy && r < 0) return;                                                                                            // 7475
  r /= dy;                                                                                                             // 7476
  if (dy < 0) {                                                                                                        // 7477
    if (r > t1) return;                                                                                                // 7478
    if (r > t0) t0 = r;                                                                                                // 7479
  } else if (dy > 0) {                                                                                                 // 7480
    if (r < t0) return;                                                                                                // 7481
    if (r < t1) t1 = r;                                                                                                // 7482
  }                                                                                                                    // 7483
                                                                                                                       // 7484
  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;                                                                // 7485
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;                                                                // 7486
  return true;                                                                                                         // 7487
};                                                                                                                     // 7488
                                                                                                                       // 7489
var pointEqual = function(a, b) {                                                                                      // 7490
  return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;                                                 // 7491
};                                                                                                                     // 7492
                                                                                                                       // 7493
function Intersection(point, points, other, entry) {                                                                   // 7494
  this.x = point;                                                                                                      // 7495
  this.z = points;                                                                                                     // 7496
  this.o = other; // another intersection                                                                              // 7497
  this.e = entry; // is an entry?                                                                                      // 7498
  this.v = false; // visited                                                                                           // 7499
  this.n = this.p = null; // next & previous                                                                           // 7500
}                                                                                                                      // 7501
                                                                                                                       // 7502
// A generalized polygon clipping algorithm: given a polygon that has been cut                                         // 7503
// into its visible line segments, and rejoins the segments by interpolating                                           // 7504
// along the clip edge.                                                                                                // 7505
var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {                          // 7506
  var subject = [],                                                                                                    // 7507
      clip = [],                                                                                                       // 7508
      i,                                                                                                               // 7509
      n;                                                                                                               // 7510
                                                                                                                       // 7511
  segments.forEach(function(segment) {                                                                                 // 7512
    if ((n = segment.length - 1) <= 0) return;                                                                         // 7513
    var n, p0 = segment[0], p1 = segment[n], x;                                                                        // 7514
                                                                                                                       // 7515
    // If the first and last points of a segment are coincident, then treat as a                                       // 7516
    // closed ring. TODO if all rings are closed, then the winding order of the                                        // 7517
    // exterior ring should be checked.                                                                                // 7518
    if (pointEqual(p0, p1)) {                                                                                          // 7519
      stream.lineStart();                                                                                              // 7520
      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);                                               // 7521
      stream.lineEnd();                                                                                                // 7522
      return;                                                                                                          // 7523
    }                                                                                                                  // 7524
                                                                                                                       // 7525
    subject.push(x = new Intersection(p0, segment, null, true));                                                       // 7526
    clip.push(x.o = new Intersection(p0, null, x, false));                                                             // 7527
    subject.push(x = new Intersection(p1, segment, null, false));                                                      // 7528
    clip.push(x.o = new Intersection(p1, null, x, true));                                                              // 7529
  });                                                                                                                  // 7530
                                                                                                                       // 7531
  if (!subject.length) return;                                                                                         // 7532
                                                                                                                       // 7533
  clip.sort(compareIntersection);                                                                                      // 7534
  link$1(subject);                                                                                                     // 7535
  link$1(clip);                                                                                                        // 7536
                                                                                                                       // 7537
  for (i = 0, n = clip.length; i < n; ++i) {                                                                           // 7538
    clip[i].e = startInside = !startInside;                                                                            // 7539
  }                                                                                                                    // 7540
                                                                                                                       // 7541
  var start = subject[0],                                                                                              // 7542
      points,                                                                                                          // 7543
      point;                                                                                                           // 7544
                                                                                                                       // 7545
  while (1) {                                                                                                          // 7546
    // Find first unvisited intersection.                                                                              // 7547
    var current = start,                                                                                               // 7548
        isSubject = true;                                                                                              // 7549
    while (current.v) if ((current = current.n) === start) return;                                                     // 7550
    points = current.z;                                                                                                // 7551
    stream.lineStart();                                                                                                // 7552
    do {                                                                                                               // 7553
      current.v = current.o.v = true;                                                                                  // 7554
      if (current.e) {                                                                                                 // 7555
        if (isSubject) {                                                                                               // 7556
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);                   // 7557
        } else {                                                                                                       // 7558
          interpolate(current.x, current.n.x, 1, stream);                                                              // 7559
        }                                                                                                              // 7560
        current = current.n;                                                                                           // 7561
      } else {                                                                                                         // 7562
        if (isSubject) {                                                                                               // 7563
          points = current.p.z;                                                                                        // 7564
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);                     // 7565
        } else {                                                                                                       // 7566
          interpolate(current.x, current.p.x, -1, stream);                                                             // 7567
        }                                                                                                              // 7568
        current = current.p;                                                                                           // 7569
      }                                                                                                                // 7570
      current = current.o;                                                                                             // 7571
      points = current.z;                                                                                              // 7572
      isSubject = !isSubject;                                                                                          // 7573
    } while (!current.v);                                                                                              // 7574
    stream.lineEnd();                                                                                                  // 7575
  }                                                                                                                    // 7576
};                                                                                                                     // 7577
                                                                                                                       // 7578
function link$1(array) {                                                                                               // 7579
  if (!(n = array.length)) return;                                                                                     // 7580
  var n,                                                                                                               // 7581
      i = 0,                                                                                                           // 7582
      a = array[0],                                                                                                    // 7583
      b;                                                                                                               // 7584
  while (++i < n) {                                                                                                    // 7585
    a.n = b = array[i];                                                                                                // 7586
    b.p = a;                                                                                                           // 7587
    a = b;                                                                                                             // 7588
  }                                                                                                                    // 7589
  a.n = b = array[0];                                                                                                  // 7590
  b.p = a;                                                                                                             // 7591
}                                                                                                                      // 7592
                                                                                                                       // 7593
var clipMax = 1e9;                                                                                                     // 7594
var clipMin = -clipMax;                                                                                                // 7595
                                                                                                                       // 7596
// TODO Use d3-polygon’s polygonContains here for the ring check?                                                      // 7597
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?                                                  // 7598
                                                                                                                       // 7599
function clipExtent(x0, y0, x1, y1) {                                                                                  // 7600
                                                                                                                       // 7601
  function visible(x, y) {                                                                                             // 7602
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;                                                                   // 7603
  }                                                                                                                    // 7604
                                                                                                                       // 7605
  function interpolate(from, to, direction, stream) {                                                                  // 7606
    var a = 0, a1 = 0;                                                                                                 // 7607
    if (from == null                                                                                                   // 7608
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))                                              // 7609
        || comparePoint(from, to) < 0 ^ direction > 0) {                                                               // 7610
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);                                                  // 7611
      while ((a = (a + direction + 4) % 4) !== a1);                                                                    // 7612
    } else {                                                                                                           // 7613
      stream.point(to[0], to[1]);                                                                                      // 7614
    }                                                                                                                  // 7615
  }                                                                                                                    // 7616
                                                                                                                       // 7617
  function corner(p, direction) {                                                                                      // 7618
    return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3                                                          // 7619
        : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1                                                           // 7620
        : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0                                                           // 7621
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon                                                           // 7622
  }                                                                                                                    // 7623
                                                                                                                       // 7624
  function compareIntersection(a, b) {                                                                                 // 7625
    return comparePoint(a.x, b.x);                                                                                     // 7626
  }                                                                                                                    // 7627
                                                                                                                       // 7628
  function comparePoint(a, b) {                                                                                        // 7629
    var ca = corner(a, 1),                                                                                             // 7630
        cb = corner(b, 1);                                                                                             // 7631
    return ca !== cb ? ca - cb                                                                                         // 7632
        : ca === 0 ? b[1] - a[1]                                                                                       // 7633
        : ca === 1 ? a[0] - b[0]                                                                                       // 7634
        : ca === 2 ? a[1] - b[1]                                                                                       // 7635
        : b[0] - a[0];                                                                                                 // 7636
  }                                                                                                                    // 7637
                                                                                                                       // 7638
  return function(stream) {                                                                                            // 7639
    var activeStream = stream,                                                                                         // 7640
        bufferStream = clipBuffer(),                                                                                   // 7641
        segments,                                                                                                      // 7642
        polygon,                                                                                                       // 7643
        ring,                                                                                                          // 7644
        x__, y__, v__, // first point                                                                                  // 7645
        x_, y_, v_, // previous point                                                                                  // 7646
        first,                                                                                                         // 7647
        clean;                                                                                                         // 7648
                                                                                                                       // 7649
    var clipStream = {                                                                                                 // 7650
      point: point,                                                                                                    // 7651
      lineStart: lineStart,                                                                                            // 7652
      lineEnd: lineEnd,                                                                                                // 7653
      polygonStart: polygonStart,                                                                                      // 7654
      polygonEnd: polygonEnd                                                                                           // 7655
    };                                                                                                                 // 7656
                                                                                                                       // 7657
    function point(x, y) {                                                                                             // 7658
      if (visible(x, y)) activeStream.point(x, y);                                                                     // 7659
    }                                                                                                                  // 7660
                                                                                                                       // 7661
    function polygonInside() {                                                                                         // 7662
      var winding = 0;                                                                                                 // 7663
                                                                                                                       // 7664
      for (var i = 0, n = polygon.length; i < n; ++i) {                                                                // 7665
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];                                             // 7667
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }                   // 7668
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }                           // 7669
        }                                                                                                              // 7670
      }                                                                                                                // 7671
                                                                                                                       // 7672
      return winding;                                                                                                  // 7673
    }                                                                                                                  // 7674
                                                                                                                       // 7675
    // Buffer geometry within a polygon and then clip it en masse.                                                     // 7676
    function polygonStart() {                                                                                          // 7677
      activeStream = bufferStream, segments = [], polygon = [], clean = true;                                          // 7678
    }                                                                                                                  // 7679
                                                                                                                       // 7680
    function polygonEnd() {                                                                                            // 7681
      var startInside = polygonInside(),                                                                               // 7682
          cleanInside = clean && startInside,                                                                          // 7683
          visible = (segments = merge(segments)).length;                                                               // 7684
      if (cleanInside || visible) {                                                                                    // 7685
        stream.polygonStart();                                                                                         // 7686
        if (cleanInside) {                                                                                             // 7687
          stream.lineStart();                                                                                          // 7688
          interpolate(null, null, 1, stream);                                                                          // 7689
          stream.lineEnd();                                                                                            // 7690
        }                                                                                                              // 7691
        if (visible) {                                                                                                 // 7692
          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);                                // 7693
        }                                                                                                              // 7694
        stream.polygonEnd();                                                                                           // 7695
      }                                                                                                                // 7696
      activeStream = stream, segments = polygon = ring = null;                                                         // 7697
    }                                                                                                                  // 7698
                                                                                                                       // 7699
    function lineStart() {                                                                                             // 7700
      clipStream.point = linePoint;                                                                                    // 7701
      if (polygon) polygon.push(ring = []);                                                                            // 7702
      first = true;                                                                                                    // 7703
      v_ = false;                                                                                                      // 7704
      x_ = y_ = NaN;                                                                                                   // 7705
    }                                                                                                                  // 7706
                                                                                                                       // 7707
    // TODO rather than special-case polygons, simply handle them separately.                                          // 7708
    // Ideally, coincident intersection points should be jittered to avoid                                             // 7709
    // clipping issues.                                                                                                // 7710
    function lineEnd() {                                                                                               // 7711
      if (segments) {                                                                                                  // 7712
        linePoint(x__, y__);                                                                                           // 7713
        if (v__ && v_) bufferStream.rejoin();                                                                          // 7714
        segments.push(bufferStream.result());                                                                          // 7715
      }                                                                                                                // 7716
      clipStream.point = point;                                                                                        // 7717
      if (v_) activeStream.lineEnd();                                                                                  // 7718
    }                                                                                                                  // 7719
                                                                                                                       // 7720
    function linePoint(x, y) {                                                                                         // 7721
      var v = visible(x, y);                                                                                           // 7722
      if (polygon) ring.push([x, y]);                                                                                  // 7723
      if (first) {                                                                                                     // 7724
        x__ = x, y__ = y, v__ = v;                                                                                     // 7725
        first = false;                                                                                                 // 7726
        if (v) {                                                                                                       // 7727
          activeStream.lineStart();                                                                                    // 7728
          activeStream.point(x, y);                                                                                    // 7729
        }                                                                                                              // 7730
      } else {                                                                                                         // 7731
        if (v && v_) activeStream.point(x, y);                                                                         // 7732
        else {                                                                                                         // 7733
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],      // 7734
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];          // 7735
          if (clipLine(a, b, x0, y0, x1, y1)) {                                                                        // 7736
            if (!v_) {                                                                                                 // 7737
              activeStream.lineStart();                                                                                // 7738
              activeStream.point(a[0], a[1]);                                                                          // 7739
            }                                                                                                          // 7740
            activeStream.point(b[0], b[1]);                                                                            // 7741
            if (!v) activeStream.lineEnd();                                                                            // 7742
            clean = false;                                                                                             // 7743
          } else if (v) {                                                                                              // 7744
            activeStream.lineStart();                                                                                  // 7745
            activeStream.point(x, y);                                                                                  // 7746
            clean = false;                                                                                             // 7747
          }                                                                                                            // 7748
        }                                                                                                              // 7749
      }                                                                                                                // 7750
      x_ = x, y_ = y, v_ = v;                                                                                          // 7751
    }                                                                                                                  // 7752
                                                                                                                       // 7753
    return clipStream;                                                                                                 // 7754
  };                                                                                                                   // 7755
}                                                                                                                      // 7756
                                                                                                                       // 7757
var extent$1 = function() {                                                                                            // 7758
  var x0 = 0,                                                                                                          // 7759
      y0 = 0,                                                                                                          // 7760
      x1 = 960,                                                                                                        // 7761
      y1 = 500,                                                                                                        // 7762
      cache,                                                                                                           // 7763
      cacheStream,                                                                                                     // 7764
      clip;                                                                                                            // 7765
                                                                                                                       // 7766
  return clip = {                                                                                                      // 7767
    stream: function(stream) {                                                                                         // 7768
      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);       // 7769
    },                                                                                                                 // 7770
    extent: function(_) {                                                                                              // 7771
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }                                                                                                                  // 7773
  };                                                                                                                   // 7774
};                                                                                                                     // 7775
                                                                                                                       // 7776
var sum$1 = adder();                                                                                                   // 7777
                                                                                                                       // 7778
var polygonContains = function(polygon, point) {                                                                       // 7779
  var lambda = point[0],                                                                                               // 7780
      phi = point[1],                                                                                                  // 7781
      normal = [sin$1(lambda), -cos$1(lambda), 0],                                                                     // 7782
      angle = 0,                                                                                                       // 7783
      winding = 0;                                                                                                     // 7784
                                                                                                                       // 7785
  sum$1.reset();                                                                                                       // 7786
                                                                                                                       // 7787
  for (var i = 0, n = polygon.length; i < n; ++i) {                                                                    // 7788
    if (!(m = (ring = polygon[i]).length)) continue;                                                                   // 7789
    var ring,                                                                                                          // 7790
        m,                                                                                                             // 7791
        point0 = ring[m - 1],                                                                                          // 7792
        lambda0 = point0[0],                                                                                           // 7793
        phi0 = point0[1] / 2 + quarterPi,                                                                              // 7794
        sinPhi0 = sin$1(phi0),                                                                                         // 7795
        cosPhi0 = cos$1(phi0);                                                                                         // 7796
                                                                                                                       // 7797
    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {            // 7798
      var point1 = ring[j],                                                                                            // 7799
          lambda1 = point1[0],                                                                                         // 7800
          phi1 = point1[1] / 2 + quarterPi,                                                                            // 7801
          sinPhi1 = sin$1(phi1),                                                                                       // 7802
          cosPhi1 = cos$1(phi1),                                                                                       // 7803
          delta = lambda1 - lambda0,                                                                                   // 7804
          sign$$1 = delta >= 0 ? 1 : -1,                                                                               // 7805
          absDelta = sign$$1 * delta,                                                                                  // 7806
          antimeridian = absDelta > pi$3,                                                                              // 7807
          k = sinPhi0 * sinPhi1;                                                                                       // 7808
                                                                                                                       // 7809
      sum$1.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));                        // 7810
      angle += antimeridian ? delta + sign$$1 * tau$3 : delta;                                                         // 7811
                                                                                                                       // 7812
      // Are the longitudes either side of the point’s meridian (lambda),                                              // 7813
      // and are the latitudes smaller than the parallel (phi)?                                                        // 7814
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {                                                      // 7815
        var arc = cartesianCross(cartesian(point0), cartesian(point1));                                                // 7816
        cartesianNormalizeInPlace(arc);                                                                                // 7817
        var intersection = cartesianCross(normal, arc);                                                                // 7818
        cartesianNormalizeInPlace(intersection);                                                                       // 7819
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);                                     // 7820
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {                                                    // 7821
          winding += antimeridian ^ delta >= 0 ? 1 : -1;                                                               // 7822
        }                                                                                                              // 7823
      }                                                                                                                // 7824
    }                                                                                                                  // 7825
  }                                                                                                                    // 7826
                                                                                                                       // 7827
  // First, determine whether the South pole is inside or outside:                                                     // 7828
  //                                                                                                                   // 7829
  // It is inside if:                                                                                                  // 7830
  // * the polygon winds around it in a clockwise direction.                                                           // 7831
  // * the polygon does not (cumulatively) wind around it, but has a negative                                          // 7832
  //   (counter-clockwise) area.                                                                                       // 7833
  //                                                                                                                   // 7834
  // Second, count the (signed) number of times a segment crosses a lambda                                             // 7835
  // from the point to the South pole.  If it is zero, then the point is the                                           // 7836
  // same side as the South pole.                                                                                      // 7837
                                                                                                                       // 7838
  return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);                              // 7839
};                                                                                                                     // 7840
                                                                                                                       // 7841
var lengthSum = adder();                                                                                               // 7842
var lambda0$2;                                                                                                         // 7843
var sinPhi0$1;                                                                                                         // 7844
var cosPhi0$1;                                                                                                         // 7845
                                                                                                                       // 7846
var lengthStream = {                                                                                                   // 7847
  sphere: noop$1,                                                                                                      // 7848
  point: noop$1,                                                                                                       // 7849
  lineStart: lengthLineStart,                                                                                          // 7850
  lineEnd: noop$1,                                                                                                     // 7851
  polygonStart: noop$1,                                                                                                // 7852
  polygonEnd: noop$1                                                                                                   // 7853
};                                                                                                                     // 7854
                                                                                                                       // 7855
function lengthLineStart() {                                                                                           // 7856
  lengthStream.point = lengthPointFirst;                                                                               // 7857
  lengthStream.lineEnd = lengthLineEnd;                                                                                // 7858
}                                                                                                                      // 7859
                                                                                                                       // 7860
function lengthLineEnd() {                                                                                             // 7861
  lengthStream.point = lengthStream.lineEnd = noop$1;                                                                  // 7862
}                                                                                                                      // 7863
                                                                                                                       // 7864
function lengthPointFirst(lambda, phi) {                                                                               // 7865
  lambda *= radians, phi *= radians;                                                                                   // 7866
  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);                                                  // 7867
  lengthStream.point = lengthPoint;                                                                                    // 7868
}                                                                                                                      // 7869
                                                                                                                       // 7870
function lengthPoint(lambda, phi) {                                                                                    // 7871
  lambda *= radians, phi *= radians;                                                                                   // 7872
  var sinPhi = sin$1(phi),                                                                                             // 7873
      cosPhi = cos$1(phi),                                                                                             // 7874
      delta = abs(lambda - lambda0$2),                                                                                 // 7875
      cosDelta = cos$1(delta),                                                                                         // 7876
      sinDelta = sin$1(delta),                                                                                         // 7877
      x = cosPhi * sinDelta,                                                                                           // 7878
      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,                                                          // 7879
      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;                                                          // 7880
  lengthSum.add(atan2(sqrt(x * x + y * y), z));                                                                        // 7881
  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;                                                          // 7882
}                                                                                                                      // 7883
                                                                                                                       // 7884
var length$1 = function(object) {                                                                                      // 7885
  lengthSum.reset();                                                                                                   // 7886
  geoStream(object, lengthStream);                                                                                     // 7887
  return +lengthSum;                                                                                                   // 7888
};                                                                                                                     // 7889
                                                                                                                       // 7890
var coordinates = [null, null];                                                                                        // 7891
var object$1 = {type: "LineString", coordinates: coordinates};                                                         // 7892
                                                                                                                       // 7893
var distance = function(a, b) {                                                                                        // 7894
  coordinates[0] = a;                                                                                                  // 7895
  coordinates[1] = b;                                                                                                  // 7896
  return length$1(object$1);                                                                                           // 7897
};                                                                                                                     // 7898
                                                                                                                       // 7899
var containsObjectType = {                                                                                             // 7900
  Feature: function(object, point) {                                                                                   // 7901
    return containsGeometry(object.geometry, point);                                                                   // 7902
  },                                                                                                                   // 7903
  FeatureCollection: function(object, point) {                                                                         // 7904
    var features = object.features, i = -1, n = features.length;                                                       // 7905
    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;                                    // 7906
    return false;                                                                                                      // 7907
  }                                                                                                                    // 7908
};                                                                                                                     // 7909
                                                                                                                       // 7910
var containsGeometryType = {                                                                                           // 7911
  Sphere: function() {                                                                                                 // 7912
    return true;                                                                                                       // 7913
  },                                                                                                                   // 7914
  Point: function(object, point) {                                                                                     // 7915
    return containsPoint(object.coordinates, point);                                                                   // 7916
  },                                                                                                                   // 7917
  MultiPoint: function(object, point) {                                                                                // 7918
    var coordinates = object.coordinates, i = -1, n = coordinates.length;                                              // 7919
    while (++i < n) if (containsPoint(coordinates[i], point)) return true;                                             // 7920
    return false;                                                                                                      // 7921
  },                                                                                                                   // 7922
  LineString: function(object, point) {                                                                                // 7923
    return containsLine(object.coordinates, point);                                                                    // 7924
  },                                                                                                                   // 7925
  MultiLineString: function(object, point) {                                                                           // 7926
    var coordinates = object.coordinates, i = -1, n = coordinates.length;                                              // 7927
    while (++i < n) if (containsLine(coordinates[i], point)) return true;                                              // 7928
    return false;                                                                                                      // 7929
  },                                                                                                                   // 7930
  Polygon: function(object, point) {                                                                                   // 7931
    return containsPolygon(object.coordinates, point);                                                                 // 7932
  },                                                                                                                   // 7933
  MultiPolygon: function(object, point) {                                                                              // 7934
    var coordinates = object.coordinates, i = -1, n = coordinates.length;                                              // 7935
    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;                                           // 7936
    return false;                                                                                                      // 7937
  },                                                                                                                   // 7938
  GeometryCollection: function(object, point) {                                                                        // 7939
    var geometries = object.geometries, i = -1, n = geometries.length;                                                 // 7940
    while (++i < n) if (containsGeometry(geometries[i], point)) return true;                                           // 7941
    return false;                                                                                                      // 7942
  }                                                                                                                    // 7943
};                                                                                                                     // 7944
                                                                                                                       // 7945
function containsGeometry(geometry, point) {                                                                           // 7946
  return geometry && containsGeometryType.hasOwnProperty(geometry.type)                                                // 7947
      ? containsGeometryType[geometry.type](geometry, point)                                                           // 7948
      : false;                                                                                                         // 7949
}                                                                                                                      // 7950
                                                                                                                       // 7951
function containsPoint(coordinates, point) {                                                                           // 7952
  return distance(coordinates, point) === 0;                                                                           // 7953
}                                                                                                                      // 7954
                                                                                                                       // 7955
function containsLine(coordinates, point) {                                                                            // 7956
  var ab = distance(coordinates[0], coordinates[1]),                                                                   // 7957
      ao = distance(coordinates[0], point),                                                                            // 7958
      ob = distance(point, coordinates[1]);                                                                            // 7959
  return ao + ob <= ab + epsilon$2;                                                                                    // 7960
}                                                                                                                      // 7961
                                                                                                                       // 7962
function containsPolygon(coordinates, point) {                                                                         // 7963
  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));                                         // 7964
}                                                                                                                      // 7965
                                                                                                                       // 7966
function ringRadians(ring) {                                                                                           // 7967
  return ring = ring.map(pointRadians), ring.pop(), ring;                                                              // 7968
}                                                                                                                      // 7969
                                                                                                                       // 7970
function pointRadians(point) {                                                                                         // 7971
  return [point[0] * radians, point[1] * radians];                                                                     // 7972
}                                                                                                                      // 7973
                                                                                                                       // 7974
var contains = function(object, point) {                                                                               // 7975
  return (object && containsObjectType.hasOwnProperty(object.type)                                                     // 7976
      ? containsObjectType[object.type]                                                                                // 7977
      : containsGeometry)(object, point);                                                                              // 7978
};                                                                                                                     // 7979
                                                                                                                       // 7980
function graticuleX(y0, y1, dy) {                                                                                      // 7981
  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);                                                                 // 7982
  return function(x) { return y.map(function(y) { return [x, y]; }); };                                                // 7983
}                                                                                                                      // 7984
                                                                                                                       // 7985
function graticuleY(x0, x1, dx) {                                                                                      // 7986
  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);                                                                 // 7987
  return function(y) { return x.map(function(x) { return [x, y]; }); };                                                // 7988
}                                                                                                                      // 7989
                                                                                                                       // 7990
function graticule() {                                                                                                 // 7991
  var x1, x0, X1, X0,                                                                                                  // 7992
      y1, y0, Y1, Y0,                                                                                                  // 7993
      dx = 10, dy = dx, DX = 90, DY = 360,                                                                             // 7994
      x, y, X, Y,                                                                                                      // 7995
      precision = 2.5;                                                                                                 // 7996
                                                                                                                       // 7997
  function graticule() {                                                                                               // 7998
    return {type: "MultiLineString", coordinates: lines()};                                                            // 7999
  }                                                                                                                    // 8000
                                                                                                                       // 8001
  function lines() {                                                                                                   // 8002
    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)                                                                 // 8003
        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))                                                           // 8004
        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))   // 8005
        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));  // 8006
  }                                                                                                                    // 8007
                                                                                                                       // 8008
  graticule.lines = function() {                                                                                       // 8009
    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });              // 8010
  };                                                                                                                   // 8011
                                                                                                                       // 8012
  graticule.outline = function() {                                                                                     // 8013
    return {                                                                                                           // 8014
      type: "Polygon",                                                                                                 // 8015
      coordinates: [                                                                                                   // 8016
        X(X0).concat(                                                                                                  // 8017
        Y(Y1).slice(1),                                                                                                // 8018
        X(X1).reverse().slice(1),                                                                                      // 8019
        Y(Y0).reverse().slice(1))                                                                                      // 8020
      ]                                                                                                                // 8021
    };                                                                                                                 // 8022
  };                                                                                                                   // 8023
                                                                                                                       // 8024
  graticule.extent = function(_) {                                                                                     // 8025
    if (!arguments.length) return graticule.extentMinor();                                                             // 8026
    return graticule.extentMajor(_).extentMinor(_);                                                                    // 8027
  };                                                                                                                   // 8028
                                                                                                                       // 8029
  graticule.extentMajor = function(_) {                                                                                // 8030
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];                                                                // 8031
    X0 = +_[0][0], X1 = +_[1][0];                                                                                      // 8032
    Y0 = +_[0][1], Y1 = +_[1][1];                                                                                      // 8033
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;                                                                              // 8034
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;                                                                              // 8035
    return graticule.precision(precision);                                                                             // 8036
  };                                                                                                                   // 8037
                                                                                                                       // 8038
  graticule.extentMinor = function(_) {                                                                                // 8039
    if (!arguments.length) return [[x0, y0], [x1, y1]];                                                                // 8040
    x0 = +_[0][0], x1 = +_[1][0];                                                                                      // 8041
    y0 = +_[0][1], y1 = +_[1][1];                                                                                      // 8042
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;                                                                              // 8043
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;                                                                              // 8044
    return graticule.precision(precision);                                                                             // 8045
  };                                                                                                                   // 8046
                                                                                                                       // 8047
  graticule.step = function(_) {                                                                                       // 8048
    if (!arguments.length) return graticule.stepMinor();                                                               // 8049
    return graticule.stepMajor(_).stepMinor(_);                                                                        // 8050
  };                                                                                                                   // 8051
                                                                                                                       // 8052
  graticule.stepMajor = function(_) {                                                                                  // 8053
    if (!arguments.length) return [DX, DY];                                                                            // 8054
    DX = +_[0], DY = +_[1];                                                                                            // 8055
    return graticule;                                                                                                  // 8056
  };                                                                                                                   // 8057
                                                                                                                       // 8058
  graticule.stepMinor = function(_) {                                                                                  // 8059
    if (!arguments.length) return [dx, dy];                                                                            // 8060
    dx = +_[0], dy = +_[1];                                                                                            // 8061
    return graticule;                                                                                                  // 8062
  };                                                                                                                   // 8063
                                                                                                                       // 8064
  graticule.precision = function(_) {                                                                                  // 8065
    if (!arguments.length) return precision;                                                                           // 8066
    precision = +_;                                                                                                    // 8067
    x = graticuleX(y0, y1, 90);                                                                                        // 8068
    y = graticuleY(x0, x1, precision);                                                                                 // 8069
    X = graticuleX(Y0, Y1, 90);                                                                                        // 8070
    Y = graticuleY(X0, X1, precision);                                                                                 // 8071
    return graticule;                                                                                                  // 8072
  };                                                                                                                   // 8073
                                                                                                                       // 8074
  return graticule                                                                                                     // 8075
      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])                                                   // 8076
      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);                                                  // 8077
}                                                                                                                      // 8078
                                                                                                                       // 8079
function graticule10() {                                                                                               // 8080
  return graticule()();                                                                                                // 8081
}                                                                                                                      // 8082
                                                                                                                       // 8083
var interpolate$1 = function(a, b) {                                                                                   // 8084
  var x0 = a[0] * radians,                                                                                             // 8085
      y0 = a[1] * radians,                                                                                             // 8086
      x1 = b[0] * radians,                                                                                             // 8087
      y1 = b[1] * radians,                                                                                             // 8088
      cy0 = cos$1(y0),                                                                                                 // 8089
      sy0 = sin$1(y0),                                                                                                 // 8090
      cy1 = cos$1(y1),                                                                                                 // 8091
      sy1 = sin$1(y1),                                                                                                 // 8092
      kx0 = cy0 * cos$1(x0),                                                                                           // 8093
      ky0 = cy0 * sin$1(x0),                                                                                           // 8094
      kx1 = cy1 * cos$1(x1),                                                                                           // 8095
      ky1 = cy1 * sin$1(x1),                                                                                           // 8096
      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),                                           // 8097
      k = sin$1(d);                                                                                                    // 8098
                                                                                                                       // 8099
  var interpolate = d ? function(t) {                                                                                  // 8100
    var B = sin$1(t *= d) / k,                                                                                         // 8101
        A = sin$1(d - t) / k,                                                                                          // 8102
        x = A * kx0 + B * kx1,                                                                                         // 8103
        y = A * ky0 + B * ky1,                                                                                         // 8104
        z = A * sy0 + B * sy1;                                                                                         // 8105
    return [                                                                                                           // 8106
      atan2(y, x) * degrees$1,                                                                                         // 8107
      atan2(z, sqrt(x * x + y * y)) * degrees$1                                                                        // 8108
    ];                                                                                                                 // 8109
  } : function() {                                                                                                     // 8110
    return [x0 * degrees$1, y0 * degrees$1];                                                                           // 8111
  };                                                                                                                   // 8112
                                                                                                                       // 8113
  interpolate.distance = d;                                                                                            // 8114
                                                                                                                       // 8115
  return interpolate;                                                                                                  // 8116
};                                                                                                                     // 8117
                                                                                                                       // 8118
var identity$4 = function(x) {                                                                                         // 8119
  return x;                                                                                                            // 8120
};                                                                                                                     // 8121
                                                                                                                       // 8122
var areaSum$1 = adder();                                                                                               // 8123
var areaRingSum$1 = adder();                                                                                           // 8124
var x00;                                                                                                               // 8125
var y00;                                                                                                               // 8126
var x0$1;                                                                                                              // 8127
var y0$1;                                                                                                              // 8128
                                                                                                                       // 8129
var areaStream$1 = {                                                                                                   // 8130
  point: noop$1,                                                                                                       // 8131
  lineStart: noop$1,                                                                                                   // 8132
  lineEnd: noop$1,                                                                                                     // 8133
  polygonStart: function() {                                                                                           // 8134
    areaStream$1.lineStart = areaRingStart$1;                                                                          // 8135
    areaStream$1.lineEnd = areaRingEnd$1;                                                                              // 8136
  },                                                                                                                   // 8137
  polygonEnd: function() {                                                                                             // 8138
    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$1;                                       // 8139
    areaSum$1.add(abs(areaRingSum$1));                                                                                 // 8140
    areaRingSum$1.reset();                                                                                             // 8141
  },                                                                                                                   // 8142
  result: function() {                                                                                                 // 8143
    var area = areaSum$1 / 2;                                                                                          // 8144
    areaSum$1.reset();                                                                                                 // 8145
    return area;                                                                                                       // 8146
  }                                                                                                                    // 8147
};                                                                                                                     // 8148
                                                                                                                       // 8149
function areaRingStart$1() {                                                                                           // 8150
  areaStream$1.point = areaPointFirst$1;                                                                               // 8151
}                                                                                                                      // 8152
                                                                                                                       // 8153
function areaPointFirst$1(x, y) {                                                                                      // 8154
  areaStream$1.point = areaPoint$1;                                                                                    // 8155
  x00 = x0$1 = x, y00 = y0$1 = y;                                                                                      // 8156
}                                                                                                                      // 8157
                                                                                                                       // 8158
function areaPoint$1(x, y) {                                                                                           // 8159
  areaRingSum$1.add(y0$1 * x - x0$1 * y);                                                                              // 8160
  x0$1 = x, y0$1 = y;                                                                                                  // 8161
}                                                                                                                      // 8162
                                                                                                                       // 8163
function areaRingEnd$1() {                                                                                             // 8164
  areaPoint$1(x00, y00);                                                                                               // 8165
}                                                                                                                      // 8166
                                                                                                                       // 8167
var x0$2 = Infinity;                                                                                                   // 8168
var y0$2 = x0$2;                                                                                                       // 8169
var x1 = -x0$2;                                                                                                        // 8170
var y1 = x1;                                                                                                           // 8171
                                                                                                                       // 8172
var boundsStream$1 = {                                                                                                 // 8173
  point: boundsPoint$1,                                                                                                // 8174
  lineStart: noop$1,                                                                                                   // 8175
  lineEnd: noop$1,                                                                                                     // 8176
  polygonStart: noop$1,                                                                                                // 8177
  polygonEnd: noop$1,                                                                                                  // 8178
  result: function() {                                                                                                 // 8179
    var bounds = [[x0$2, y0$2], [x1, y1]];                                                                             // 8180
    x1 = y1 = -(y0$2 = x0$2 = Infinity);                                                                               // 8181
    return bounds;                                                                                                     // 8182
  }                                                                                                                    // 8183
};                                                                                                                     // 8184
                                                                                                                       // 8185
function boundsPoint$1(x, y) {                                                                                         // 8186
  if (x < x0$2) x0$2 = x;                                                                                              // 8187
  if (x > x1) x1 = x;                                                                                                  // 8188
  if (y < y0$2) y0$2 = y;                                                                                              // 8189
  if (y > y1) y1 = y;                                                                                                  // 8190
}                                                                                                                      // 8191
                                                                                                                       // 8192
// TODO Enforce positive area for exterior, negative area for interior?                                                // 8193
                                                                                                                       // 8194
var X0$1 = 0;                                                                                                          // 8195
var Y0$1 = 0;                                                                                                          // 8196
var Z0$1 = 0;                                                                                                          // 8197
var X1$1 = 0;                                                                                                          // 8198
var Y1$1 = 0;                                                                                                          // 8199
var Z1$1 = 0;                                                                                                          // 8200
var X2$1 = 0;                                                                                                          // 8201
var Y2$1 = 0;                                                                                                          // 8202
var Z2$1 = 0;                                                                                                          // 8203
var x00$1;                                                                                                             // 8204
var y00$1;                                                                                                             // 8205
var x0$3;                                                                                                              // 8206
var y0$3;                                                                                                              // 8207
                                                                                                                       // 8208
var centroidStream$1 = {                                                                                               // 8209
  point: centroidPoint$1,                                                                                              // 8210
  lineStart: centroidLineStart$1,                                                                                      // 8211
  lineEnd: centroidLineEnd$1,                                                                                          // 8212
  polygonStart: function() {                                                                                           // 8213
    centroidStream$1.lineStart = centroidRingStart$1;                                                                  // 8214
    centroidStream$1.lineEnd = centroidRingEnd$1;                                                                      // 8215
  },                                                                                                                   // 8216
  polygonEnd: function() {                                                                                             // 8217
    centroidStream$1.point = centroidPoint$1;                                                                          // 8218
    centroidStream$1.lineStart = centroidLineStart$1;                                                                  // 8219
    centroidStream$1.lineEnd = centroidLineEnd$1;                                                                      // 8220
  },                                                                                                                   // 8221
  result: function() {                                                                                                 // 8222
    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]                                                                   // 8223
        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]                                                                            // 8224
        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]                                                                            // 8225
        : [NaN, NaN];                                                                                                  // 8226
    X0$1 = Y0$1 = Z0$1 =                                                                                               // 8227
    X1$1 = Y1$1 = Z1$1 =                                                                                               // 8228
    X2$1 = Y2$1 = Z2$1 = 0;                                                                                            // 8229
    return centroid;                                                                                                   // 8230
  }                                                                                                                    // 8231
};                                                                                                                     // 8232
                                                                                                                       // 8233
function centroidPoint$1(x, y) {                                                                                       // 8234
  X0$1 += x;                                                                                                           // 8235
  Y0$1 += y;                                                                                                           // 8236
  ++Z0$1;                                                                                                              // 8237
}                                                                                                                      // 8238
                                                                                                                       // 8239
function centroidLineStart$1() {                                                                                       // 8240
  centroidStream$1.point = centroidPointFirstLine;                                                                     // 8241
}                                                                                                                      // 8242
                                                                                                                       // 8243
function centroidPointFirstLine(x, y) {                                                                                // 8244
  centroidStream$1.point = centroidPointLine;                                                                          // 8245
  centroidPoint$1(x0$3 = x, y0$3 = y);                                                                                 // 8246
}                                                                                                                      // 8247
                                                                                                                       // 8248
function centroidPointLine(x, y) {                                                                                     // 8249
  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);                                                       // 8250
  X1$1 += z * (x0$3 + x) / 2;                                                                                          // 8251
  Y1$1 += z * (y0$3 + y) / 2;                                                                                          // 8252
  Z1$1 += z;                                                                                                           // 8253
  centroidPoint$1(x0$3 = x, y0$3 = y);                                                                                 // 8254
}                                                                                                                      // 8255
                                                                                                                       // 8256
function centroidLineEnd$1() {                                                                                         // 8257
  centroidStream$1.point = centroidPoint$1;                                                                            // 8258
}                                                                                                                      // 8259
                                                                                                                       // 8260
function centroidRingStart$1() {                                                                                       // 8261
  centroidStream$1.point = centroidPointFirstRing;                                                                     // 8262
}                                                                                                                      // 8263
                                                                                                                       // 8264
function centroidRingEnd$1() {                                                                                         // 8265
  centroidPointRing(x00$1, y00$1);                                                                                     // 8266
}                                                                                                                      // 8267
                                                                                                                       // 8268
function centroidPointFirstRing(x, y) {                                                                                // 8269
  centroidStream$1.point = centroidPointRing;                                                                          // 8270
  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);                                                                 // 8271
}                                                                                                                      // 8272
                                                                                                                       // 8273
function centroidPointRing(x, y) {                                                                                     // 8274
  var dx = x - x0$3,                                                                                                   // 8275
      dy = y - y0$3,                                                                                                   // 8276
      z = sqrt(dx * dx + dy * dy);                                                                                     // 8277
                                                                                                                       // 8278
  X1$1 += z * (x0$3 + x) / 2;                                                                                          // 8279
  Y1$1 += z * (y0$3 + y) / 2;                                                                                          // 8280
  Z1$1 += z;                                                                                                           // 8281
                                                                                                                       // 8282
  z = y0$3 * x - x0$3 * y;                                                                                             // 8283
  X2$1 += z * (x0$3 + x);                                                                                              // 8284
  Y2$1 += z * (y0$3 + y);                                                                                              // 8285
  Z2$1 += z * 3;                                                                                                       // 8286
  centroidPoint$1(x0$3 = x, y0$3 = y);                                                                                 // 8287
}                                                                                                                      // 8288
                                                                                                                       // 8289
function PathContext(context) {                                                                                        // 8290
  this._context = context;                                                                                             // 8291
}                                                                                                                      // 8292
                                                                                                                       // 8293
PathContext.prototype = {                                                                                              // 8294
  _radius: 4.5,                                                                                                        // 8295
  pointRadius: function(_) {                                                                                           // 8296
    return this._radius = _, this;                                                                                     // 8297
  },                                                                                                                   // 8298
  polygonStart: function() {                                                                                           // 8299
    this._line = 0;                                                                                                    // 8300
  },                                                                                                                   // 8301
  polygonEnd: function() {                                                                                             // 8302
    this._line = NaN;                                                                                                  // 8303
  },                                                                                                                   // 8304
  lineStart: function() {                                                                                              // 8305
    this._point = 0;                                                                                                   // 8306
  },                                                                                                                   // 8307
  lineEnd: function() {                                                                                                // 8308
    if (this._line === 0) this._context.closePath();                                                                   // 8309
    this._point = NaN;                                                                                                 // 8310
  },                                                                                                                   // 8311
  point: function(x, y) {                                                                                              // 8312
    switch (this._point) {                                                                                             // 8313
      case 0: {                                                                                                        // 8314
        this._context.moveTo(x, y);                                                                                    // 8315
        this._point = 1;                                                                                               // 8316
        break;                                                                                                         // 8317
      }                                                                                                                // 8318
      case 1: {                                                                                                        // 8319
        this._context.lineTo(x, y);                                                                                    // 8320
        break;                                                                                                         // 8321
      }                                                                                                                // 8322
      default: {                                                                                                       // 8323
        this._context.moveTo(x + this._radius, y);                                                                     // 8324
        this._context.arc(x, y, this._radius, 0, tau$3);                                                               // 8325
        break;                                                                                                         // 8326
      }                                                                                                                // 8327
    }                                                                                                                  // 8328
  },                                                                                                                   // 8329
  result: noop$1                                                                                                       // 8330
};                                                                                                                     // 8331
                                                                                                                       // 8332
var lengthSum$1 = adder();                                                                                             // 8333
var lengthRing;                                                                                                        // 8334
var x00$2;                                                                                                             // 8335
var y00$2;                                                                                                             // 8336
var x0$4;                                                                                                              // 8337
var y0$4;                                                                                                              // 8338
                                                                                                                       // 8339
var lengthStream$1 = {                                                                                                 // 8340
  point: noop$1,                                                                                                       // 8341
  lineStart: function() {                                                                                              // 8342
    lengthStream$1.point = lengthPointFirst$1;                                                                         // 8343
  },                                                                                                                   // 8344
  lineEnd: function() {                                                                                                // 8345
    if (lengthRing) lengthPoint$1(x00$2, y00$2);                                                                       // 8346
    lengthStream$1.point = noop$1;                                                                                     // 8347
  },                                                                                                                   // 8348
  polygonStart: function() {                                                                                           // 8349
    lengthRing = true;                                                                                                 // 8350
  },                                                                                                                   // 8351
  polygonEnd: function() {                                                                                             // 8352
    lengthRing = null;                                                                                                 // 8353
  },                                                                                                                   // 8354
  result: function() {                                                                                                 // 8355
    var length = +lengthSum$1;                                                                                         // 8356
    lengthSum$1.reset();                                                                                               // 8357
    return length;                                                                                                     // 8358
  }                                                                                                                    // 8359
};                                                                                                                     // 8360
                                                                                                                       // 8361
function lengthPointFirst$1(x, y) {                                                                                    // 8362
  lengthStream$1.point = lengthPoint$1;                                                                                // 8363
  x00$2 = x0$4 = x, y00$2 = y0$4 = y;                                                                                  // 8364
}                                                                                                                      // 8365
                                                                                                                       // 8366
function lengthPoint$1(x, y) {                                                                                         // 8367
  x0$4 -= x, y0$4 -= y;                                                                                                // 8368
  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));                                                                    // 8369
  x0$4 = x, y0$4 = y;                                                                                                  // 8370
}                                                                                                                      // 8371
                                                                                                                       // 8372
function PathString() {                                                                                                // 8373
  this._string = [];                                                                                                   // 8374
}                                                                                                                      // 8375
                                                                                                                       // 8376
PathString.prototype = {                                                                                               // 8377
  _radius: 4.5,                                                                                                        // 8378
  _circle: circle$1(4.5),                                                                                              // 8379
  pointRadius: function(_) {                                                                                           // 8380
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;                                              // 8381
    return this;                                                                                                       // 8382
  },                                                                                                                   // 8383
  polygonStart: function() {                                                                                           // 8384
    this._line = 0;                                                                                                    // 8385
  },                                                                                                                   // 8386
  polygonEnd: function() {                                                                                             // 8387
    this._line = NaN;                                                                                                  // 8388
  },                                                                                                                   // 8389
  lineStart: function() {                                                                                              // 8390
    this._point = 0;                                                                                                   // 8391
  },                                                                                                                   // 8392
  lineEnd: function() {                                                                                                // 8393
    if (this._line === 0) this._string.push("Z");                                                                      // 8394
    this._point = NaN;                                                                                                 // 8395
  },                                                                                                                   // 8396
  point: function(x, y) {                                                                                              // 8397
    switch (this._point) {                                                                                             // 8398
      case 0: {                                                                                                        // 8399
        this._string.push("M", x, ",", y);                                                                             // 8400
        this._point = 1;                                                                                               // 8401
        break;                                                                                                         // 8402
      }                                                                                                                // 8403
      case 1: {                                                                                                        // 8404
        this._string.push("L", x, ",", y);                                                                             // 8405
        break;                                                                                                         // 8406
      }                                                                                                                // 8407
      default: {                                                                                                       // 8408
        if (this._circle == null) this._circle = circle$1(this._radius);                                               // 8409
        this._string.push("M", x, ",", y, this._circle);                                                               // 8410
        break;                                                                                                         // 8411
      }                                                                                                                // 8412
    }                                                                                                                  // 8413
  },                                                                                                                   // 8414
  result: function() {                                                                                                 // 8415
    if (this._string.length) {                                                                                         // 8416
      var result = this._string.join("");                                                                              // 8417
      this._string = [];                                                                                               // 8418
      return result;                                                                                                   // 8419
    } else {                                                                                                           // 8420
      return null;                                                                                                     // 8421
    }                                                                                                                  // 8422
  }                                                                                                                    // 8423
};                                                                                                                     // 8424
                                                                                                                       // 8425
function circle$1(radius) {                                                                                            // 8426
  return "m0," + radius                                                                                                // 8427
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius                                                        // 8428
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius                                                         // 8429
      + "z";                                                                                                           // 8430
}                                                                                                                      // 8431
                                                                                                                       // 8432
var index$1 = function(projection, context) {                                                                          // 8433
  var pointRadius = 4.5,                                                                                               // 8434
      projectionStream,                                                                                                // 8435
      contextStream;                                                                                                   // 8436
                                                                                                                       // 8437
  function path(object) {                                                                                              // 8438
    if (object) {                                                                                                      // 8439
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));           // 8440
      geoStream(object, projectionStream(contextStream));                                                              // 8441
    }                                                                                                                  // 8442
    return contextStream.result();                                                                                     // 8443
  }                                                                                                                    // 8444
                                                                                                                       // 8445
  path.area = function(object) {                                                                                       // 8446
    geoStream(object, projectionStream(areaStream$1));                                                                 // 8447
    return areaStream$1.result();                                                                                      // 8448
  };                                                                                                                   // 8449
                                                                                                                       // 8450
  path.measure = function(object) {                                                                                    // 8451
    geoStream(object, projectionStream(lengthStream$1));                                                               // 8452
    return lengthStream$1.result();                                                                                    // 8453
  };                                                                                                                   // 8454
                                                                                                                       // 8455
  path.bounds = function(object) {                                                                                     // 8456
    geoStream(object, projectionStream(boundsStream$1));                                                               // 8457
    return boundsStream$1.result();                                                                                    // 8458
  };                                                                                                                   // 8459
                                                                                                                       // 8460
  path.centroid = function(object) {                                                                                   // 8461
    geoStream(object, projectionStream(centroidStream$1));                                                             // 8462
    return centroidStream$1.result();                                                                                  // 8463
  };                                                                                                                   // 8464
                                                                                                                       // 8465
  path.projection = function(_) {                                                                                      // 8466
    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
  };                                                                                                                   // 8468
                                                                                                                       // 8469
  path.context = function(_) {                                                                                         // 8470
    if (!arguments.length) return context;                                                                             // 8471
    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);                       // 8472
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);                                     // 8473
    return path;                                                                                                       // 8474
  };                                                                                                                   // 8475
                                                                                                                       // 8476
  path.pointRadius = function(_) {                                                                                     // 8477
    if (!arguments.length) return pointRadius;                                                                         // 8478
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);                                   // 8479
    return path;                                                                                                       // 8480
  };                                                                                                                   // 8481
                                                                                                                       // 8482
  return path.projection(projection).context(context);                                                                 // 8483
};                                                                                                                     // 8484
                                                                                                                       // 8485
var clip = function(pointVisible, clipLine, interpolate, start) {                                                      // 8486
  return function(rotate, sink) {                                                                                      // 8487
    var line = clipLine(sink),                                                                                         // 8488
        rotatedStart = rotate.invert(start[0], start[1]),                                                              // 8489
        ringBuffer = clipBuffer(),                                                                                     // 8490
        ringSink = clipLine(ringBuffer),                                                                               // 8491
        polygonStarted = false,                                                                                        // 8492
        polygon,                                                                                                       // 8493
        segments,                                                                                                      // 8494
        ring;                                                                                                          // 8495
                                                                                                                       // 8496
    var clip = {                                                                                                       // 8497
      point: point,                                                                                                    // 8498
      lineStart: lineStart,                                                                                            // 8499
      lineEnd: lineEnd,                                                                                                // 8500
      polygonStart: function() {                                                                                       // 8501
        clip.point = pointRing;                                                                                        // 8502
        clip.lineStart = ringStart;                                                                                    // 8503
        clip.lineEnd = ringEnd;                                                                                        // 8504
        segments = [];                                                                                                 // 8505
        polygon = [];                                                                                                  // 8506
      },                                                                                                               // 8507
      polygonEnd: function() {                                                                                         // 8508
        clip.point = point;                                                                                            // 8509
        clip.lineStart = lineStart;                                                                                    // 8510
        clip.lineEnd = lineEnd;                                                                                        // 8511
        segments = merge(segments);                                                                                    // 8512
        var startInside = polygonContains(polygon, rotatedStart);                                                      // 8513
        if (segments.length) {                                                                                         // 8514
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;                                             // 8515
          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);                                  // 8516
        } else if (startInside) {                                                                                      // 8517
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;                                             // 8518
          sink.lineStart();                                                                                            // 8519
          interpolate(null, null, 1, sink);                                                                            // 8520
          sink.lineEnd();                                                                                              // 8521
        }                                                                                                              // 8522
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;                                                 // 8523
        segments = polygon = null;                                                                                     // 8524
      },                                                                                                               // 8525
      sphere: function() {                                                                                             // 8526
        sink.polygonStart();                                                                                           // 8527
        sink.lineStart();                                                                                              // 8528
        interpolate(null, null, 1, sink);                                                                              // 8529
        sink.lineEnd();                                                                                                // 8530
        sink.polygonEnd();                                                                                             // 8531
      }                                                                                                                // 8532
    };                                                                                                                 // 8533
                                                                                                                       // 8534
    function point(lambda, phi) {                                                                                      // 8535
      var point = rotate(lambda, phi);                                                                                 // 8536
      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);                                    // 8537
    }                                                                                                                  // 8538
                                                                                                                       // 8539
    function pointLine(lambda, phi) {                                                                                  // 8540
      var point = rotate(lambda, phi);                                                                                 // 8541
      line.point(point[0], point[1]);                                                                                  // 8542
    }                                                                                                                  // 8543
                                                                                                                       // 8544
    function lineStart() {                                                                                             // 8545
      clip.point = pointLine;                                                                                          // 8546
      line.lineStart();                                                                                                // 8547
    }                                                                                                                  // 8548
                                                                                                                       // 8549
    function lineEnd() {                                                                                               // 8550
      clip.point = point;                                                                                              // 8551
      line.lineEnd();                                                                                                  // 8552
    }                                                                                                                  // 8553
                                                                                                                       // 8554
    function pointRing(lambda, phi) {                                                                                  // 8555
      ring.push([lambda, phi]);                                                                                        // 8556
      var point = rotate(lambda, phi);                                                                                 // 8557
      ringSink.point(point[0], point[1]);                                                                              // 8558
    }                                                                                                                  // 8559
                                                                                                                       // 8560
    function ringStart() {                                                                                             // 8561
      ringSink.lineStart();                                                                                            // 8562
      ring = [];                                                                                                       // 8563
    }                                                                                                                  // 8564
                                                                                                                       // 8565
    function ringEnd() {                                                                                               // 8566
      pointRing(ring[0][0], ring[0][1]);                                                                               // 8567
      ringSink.lineEnd();                                                                                              // 8568
                                                                                                                       // 8569
      var clean = ringSink.clean(),                                                                                    // 8570
          ringSegments = ringBuffer.result(),                                                                          // 8571
          i, n = ringSegments.length, m,                                                                               // 8572
          segment,                                                                                                     // 8573
          point;                                                                                                       // 8574
                                                                                                                       // 8575
      ring.pop();                                                                                                      // 8576
      polygon.push(ring);                                                                                              // 8577
      ring = null;                                                                                                     // 8578
                                                                                                                       // 8579
      if (!n) return;                                                                                                  // 8580
                                                                                                                       // 8581
      // No intersections.                                                                                             // 8582
      if (clean & 1) {                                                                                                 // 8583
        segment = ringSegments[0];                                                                                     // 8584
        if ((m = segment.length - 1) > 0) {                                                                            // 8585
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;                                             // 8586
          sink.lineStart();                                                                                            // 8587
          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);                                       // 8588
          sink.lineEnd();                                                                                              // 8589
        }                                                                                                              // 8590
        return;                                                                                                        // 8591
      }                                                                                                                // 8592
                                                                                                                       // 8593
      // Rejoin connected segments.                                                                                    // 8594
      // TODO reuse ringBuffer.rejoin()?                                                                               // 8595
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));                      // 8596
                                                                                                                       // 8597
      segments.push(ringSegments.filter(validSegment));                                                                // 8598
    }                                                                                                                  // 8599
                                                                                                                       // 8600
    return clip;                                                                                                       // 8601
  };                                                                                                                   // 8602
};                                                                                                                     // 8603
                                                                                                                       // 8604
function validSegment(segment) {                                                                                       // 8605
  return segment.length > 1;                                                                                           // 8606
}                                                                                                                      // 8607
                                                                                                                       // 8608
// Intersections are sorted along the clip edge. For both antimeridian cutting                                         // 8609
// and circle clipping, the same comparison is used.                                                                   // 8610
function compareIntersection(a, b) {                                                                                   // 8611
  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])                                            // 8612
       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);                                           // 8613
}                                                                                                                      // 8614
                                                                                                                       // 8615
var clipAntimeridian = clip(                                                                                           // 8616
  function() { return true; },                                                                                         // 8617
  clipAntimeridianLine,                                                                                                // 8618
  clipAntimeridianInterpolate,                                                                                         // 8619
  [-pi$3, -halfPi$2]                                                                                                   // 8620
);                                                                                                                     // 8621
                                                                                                                       // 8622
// Takes a line and cuts into visible segments. Return values: 0 - there were                                          // 8623
// intersections or the line was empty; 1 - no intersections; 2 - there were                                           // 8624
// intersections, and the first and last segments should be rejoined.                                                  // 8625
function clipAntimeridianLine(stream) {                                                                                // 8626
  var lambda0 = NaN,                                                                                                   // 8627
      phi0 = NaN,                                                                                                      // 8628
      sign0 = NaN,                                                                                                     // 8629
      clean; // no intersections                                                                                       // 8630
                                                                                                                       // 8631
  return {                                                                                                             // 8632
    lineStart: function() {                                                                                            // 8633
      stream.lineStart();                                                                                              // 8634
      clean = 1;                                                                                                       // 8635
    },                                                                                                                 // 8636
    point: function(lambda1, phi1) {                                                                                   // 8637
      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,                                                                          // 8638
          delta = abs(lambda1 - lambda0);                                                                              // 8639
      if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole                                                      // 8640
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);                                    // 8641
        stream.point(sign0, phi0);                                                                                     // 8642
        stream.lineEnd();                                                                                              // 8643
        stream.lineStart();                                                                                            // 8644
        stream.point(sign1, phi0);                                                                                     // 8645
        stream.point(lambda1, phi0);                                                                                   // 8646
        clean = 0;                                                                                                     // 8647
      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian                                      // 8648
        if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies                     // 8649
        if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;                                            // 8650
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);                                                // 8651
        stream.point(sign0, phi0);                                                                                     // 8652
        stream.lineEnd();                                                                                              // 8653
        stream.lineStart();                                                                                            // 8654
        stream.point(sign1, phi0);                                                                                     // 8655
        clean = 0;                                                                                                     // 8656
      }                                                                                                                // 8657
      stream.point(lambda0 = lambda1, phi0 = phi1);                                                                    // 8658
      sign0 = sign1;                                                                                                   // 8659
    },                                                                                                                 // 8660
    lineEnd: function() {                                                                                              // 8661
      stream.lineEnd();                                                                                                // 8662
      lambda0 = phi0 = NaN;                                                                                            // 8663
    },                                                                                                                 // 8664
    clean: function() {                                                                                                // 8665
      return 2 - clean; // if intersections, rejoin first and last segments                                            // 8666
    }                                                                                                                  // 8667
  };                                                                                                                   // 8668
}                                                                                                                      // 8669
                                                                                                                       // 8670
function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {                                                     // 8671
  var cosPhi0,                                                                                                         // 8672
      cosPhi1,                                                                                                         // 8673
      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);                                                                    // 8674
  return abs(sinLambda0Lambda1) > epsilon$2                                                                            // 8675
      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)                                                   // 8676
          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))                                                    // 8677
          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))                                                                   // 8678
      : (phi0 + phi1) / 2;                                                                                             // 8679
}                                                                                                                      // 8680
                                                                                                                       // 8681
function clipAntimeridianInterpolate(from, to, direction, stream) {                                                    // 8682
  var phi;                                                                                                             // 8683
  if (from == null) {                                                                                                  // 8684
    phi = direction * halfPi$2;                                                                                        // 8685
    stream.point(-pi$3, phi);                                                                                          // 8686
    stream.point(0, phi);                                                                                              // 8687
    stream.point(pi$3, phi);                                                                                           // 8688
    stream.point(pi$3, 0);                                                                                             // 8689
    stream.point(pi$3, -phi);                                                                                          // 8690
    stream.point(0, -phi);                                                                                             // 8691
    stream.point(-pi$3, -phi);                                                                                         // 8692
    stream.point(-pi$3, 0);                                                                                            // 8693
    stream.point(-pi$3, phi);                                                                                          // 8694
  } else if (abs(from[0] - to[0]) > epsilon$2) {                                                                       // 8695
    var lambda = from[0] < to[0] ? pi$3 : -pi$3;                                                                       // 8696
    phi = direction * lambda / 2;                                                                                      // 8697
    stream.point(-lambda, phi);                                                                                        // 8698
    stream.point(0, phi);                                                                                              // 8699
    stream.point(lambda, phi);                                                                                         // 8700
  } else {                                                                                                             // 8701
    stream.point(to[0], to[1]);                                                                                        // 8702
  }                                                                                                                    // 8703
}                                                                                                                      // 8704
                                                                                                                       // 8705
var clipCircle = function(radius, delta) {                                                                             // 8706
  var cr = cos$1(radius),                                                                                              // 8707
      smallRadius = cr > 0,                                                                                            // 8708
      notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case                                       // 8709
                                                                                                                       // 8710
  function interpolate(from, to, direction, stream) {                                                                  // 8711
    circleStream(stream, radius, delta, direction, from, to);                                                          // 8712
  }                                                                                                                    // 8713
                                                                                                                       // 8714
  function visible(lambda, phi) {                                                                                      // 8715
    return cos$1(lambda) * cos$1(phi) > cr;                                                                            // 8716
  }                                                                                                                    // 8717
                                                                                                                       // 8718
  // Takes a line and cuts into visible segments. Return values used for polygon                                       // 8719
  // clipping: 0 - there were intersections or the line was empty; 1 - no                                              // 8720
  // intersections 2 - there were intersections, and the first and last segments                                       // 8721
  // should be rejoined.                                                                                               // 8722
  function clipLine(stream) {                                                                                          // 8723
    var point0, // previous point                                                                                      // 8724
        c0, // code for previous point                                                                                 // 8725
        v0, // visibility of previous point                                                                            // 8726
        v00, // visibility of first point                                                                              // 8727
        clean; // no intersections                                                                                     // 8728
    return {                                                                                                           // 8729
      lineStart: function() {                                                                                          // 8730
        v00 = v0 = false;                                                                                              // 8731
        clean = 1;                                                                                                     // 8732
      },                                                                                                               // 8733
      point: function(lambda, phi) {                                                                                   // 8734
        var point1 = [lambda, phi],                                                                                    // 8735
            point2,                                                                                                    // 8736
            v = visible(lambda, phi),                                                                                  // 8737
            c = smallRadius                                                                                            // 8738
              ? v ? 0 : code(lambda, phi)                                                                              // 8739
              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;                                               // 8740
        if (!point0 && (v00 = v0 = v)) stream.lineStart();                                                             // 8741
        // Handle degeneracies.                                                                                        // 8742
        // TODO ignore if not clipping polygons.                                                                       // 8743
        if (v !== v0) {                                                                                                // 8744
          point2 = intersect(point0, point1);                                                                          // 8745
          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {                                   // 8746
            point1[0] += epsilon$2;                                                                                    // 8747
            point1[1] += epsilon$2;                                                                                    // 8748
            v = visible(point1[0], point1[1]);                                                                         // 8749
          }                                                                                                            // 8750
        }                                                                                                              // 8751
        if (v !== v0) {                                                                                                // 8752
          clean = 0;                                                                                                   // 8753
          if (v) {                                                                                                     // 8754
            // outside going in                                                                                        // 8755
            stream.lineStart();                                                                                        // 8756
            point2 = intersect(point1, point0);                                                                        // 8757
            stream.point(point2[0], point2[1]);                                                                        // 8758
          } else {                                                                                                     // 8759
            // inside going out                                                                                        // 8760
            point2 = intersect(point0, point1);                                                                        // 8761
            stream.point(point2[0], point2[1]);                                                                        // 8762
            stream.lineEnd();                                                                                          // 8763
          }                                                                                                            // 8764
          point0 = point2;                                                                                             // 8765
        } else if (notHemisphere && point0 && smallRadius ^ v) {                                                       // 8766
          var t;                                                                                                       // 8767
          // If the codes for two points are different, or are both zero,                                              // 8768
          // and there this segment intersects with the small circle.                                                  // 8769
          if (!(c & c0) && (t = intersect(point1, point0, true))) {                                                    // 8770
            clean = 0;                                                                                                 // 8771
            if (smallRadius) {                                                                                         // 8772
              stream.lineStart();                                                                                      // 8773
              stream.point(t[0][0], t[0][1]);                                                                          // 8774
              stream.point(t[1][0], t[1][1]);                                                                          // 8775
              stream.lineEnd();                                                                                        // 8776
            } else {                                                                                                   // 8777
              stream.point(t[1][0], t[1][1]);                                                                          // 8778
              stream.lineEnd();                                                                                        // 8779
              stream.lineStart();                                                                                      // 8780
              stream.point(t[0][0], t[0][1]);                                                                          // 8781
            }                                                                                                          // 8782
          }                                                                                                            // 8783
        }                                                                                                              // 8784
        if (v && (!point0 || !pointEqual(point0, point1))) {                                                           // 8785
          stream.point(point1[0], point1[1]);                                                                          // 8786
        }                                                                                                              // 8787
        point0 = point1, v0 = v, c0 = c;                                                                               // 8788
      },                                                                                                               // 8789
      lineEnd: function() {                                                                                            // 8790
        if (v0) stream.lineEnd();                                                                                      // 8791
        point0 = null;                                                                                                 // 8792
      },                                                                                                               // 8793
      // Rejoin first and last segments if there were intersections and the first                                      // 8794
      // and last points were visible.                                                                                 // 8795
      clean: function() {                                                                                              // 8796
        return clean | ((v00 && v0) << 1);                                                                             // 8797
      }                                                                                                                // 8798
    };                                                                                                                 // 8799
  }                                                                                                                    // 8800
                                                                                                                       // 8801
  // Intersects the great circle between a and b with the clip circle.                                                 // 8802
  function intersect(a, b, two) {                                                                                      // 8803
    var pa = cartesian(a),                                                                                             // 8804
        pb = cartesian(b);                                                                                             // 8805
                                                                                                                       // 8806
    // We have two planes, n1.p = d1 and n2.p = d2.                                                                    // 8807
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).                                                      // 8808
    var n1 = [1, 0, 0], // normal                                                                                      // 8809
        n2 = cartesianCross(pa, pb),                                                                                   // 8810
        n2n2 = cartesianDot(n2, n2),                                                                                   // 8811
        n1n2 = n2[0], // cartesianDot(n1, n2),                                                                         // 8812
        determinant = n2n2 - n1n2 * n1n2;                                                                              // 8813
                                                                                                                       // 8814
    // Two polar points.                                                                                               // 8815
    if (!determinant) return !two && a;                                                                                // 8816
                                                                                                                       // 8817
    var c1 =  cr * n2n2 / determinant,                                                                                 // 8818
        c2 = -cr * n1n2 / determinant,                                                                                 // 8819
        n1xn2 = cartesianCross(n1, n2),                                                                                // 8820
        A = cartesianScale(n1, c1),                                                                                    // 8821
        B = cartesianScale(n2, c2);                                                                                    // 8822
    cartesianAddInPlace(A, B);                                                                                         // 8823
                                                                                                                       // 8824
    // Solve |p(t)|^2 = 1.                                                                                             // 8825
    var u = n1xn2,                                                                                                     // 8826
        w = cartesianDot(A, u),                                                                                        // 8827
        uu = cartesianDot(u, u),                                                                                       // 8828
        t2 = w * w - uu * (cartesianDot(A, A) - 1);                                                                    // 8829
                                                                                                                       // 8830
    if (t2 < 0) return;                                                                                                // 8831
                                                                                                                       // 8832
    var t = sqrt(t2),                                                                                                  // 8833
        q = cartesianScale(u, (-w - t) / uu);                                                                          // 8834
    cartesianAddInPlace(q, A);                                                                                         // 8835
    q = spherical(q);                                                                                                  // 8836
                                                                                                                       // 8837
    if (!two) return q;                                                                                                // 8838
                                                                                                                       // 8839
    // Two intersection points.                                                                                        // 8840
    var lambda0 = a[0],                                                                                                // 8841
        lambda1 = b[0],                                                                                                // 8842
        phi0 = a[1],                                                                                                   // 8843
        phi1 = b[1],                                                                                                   // 8844
        z;                                                                                                             // 8845
                                                                                                                       // 8846
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;                                                // 8847
                                                                                                                       // 8848
    var delta = lambda1 - lambda0,                                                                                     // 8849
        polar = abs(delta - pi$3) < epsilon$2,                                                                         // 8850
        meridian = polar || delta < epsilon$2;                                                                         // 8851
                                                                                                                       // 8852
    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;                                                        // 8853
                                                                                                                       // 8854
    // Check that the first point is between a and b.                                                                  // 8855
    if (meridian                                                                                                       // 8856
        ? polar                                                                                                        // 8857
          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)                                   // 8858
          : phi0 <= q[1] && q[1] <= phi1                                                                               // 8859
        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {                                                       // 8860
      var q1 = cartesianScale(u, (-w + t) / uu);                                                                       // 8861
      cartesianAddInPlace(q1, A);                                                                                      // 8862
      return [q, spherical(q1)];                                                                                       // 8863
    }                                                                                                                  // 8864
  }                                                                                                                    // 8865
                                                                                                                       // 8866
  // Generates a 4-bit vector representing the location of a point relative to                                         // 8867
  // the small circle's bounding box.                                                                                  // 8868
  function code(lambda, phi) {                                                                                         // 8869
    var r = smallRadius ? radius : pi$3 - radius,                                                                      // 8870
        code = 0;                                                                                                      // 8871
    if (lambda < -r) code |= 1; // left                                                                                // 8872
    else if (lambda > r) code |= 2; // right                                                                           // 8873
    if (phi < -r) code |= 4; // below                                                                                  // 8874
    else if (phi > r) code |= 8; // above                                                                              // 8875
    return code;                                                                                                       // 8876
  }                                                                                                                    // 8877
                                                                                                                       // 8878
  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);                    // 8879
};                                                                                                                     // 8880
                                                                                                                       // 8881
var transform = function(methods) {                                                                                    // 8882
  return {                                                                                                             // 8883
    stream: transformer(methods)                                                                                       // 8884
  };                                                                                                                   // 8885
};                                                                                                                     // 8886
                                                                                                                       // 8887
function transformer(methods) {                                                                                        // 8888
  return function(stream) {                                                                                            // 8889
    var s = new TransformStream;                                                                                       // 8890
    for (var key in methods) s[key] = methods[key];                                                                    // 8891
    s.stream = stream;                                                                                                 // 8892
    return s;                                                                                                          // 8893
  };                                                                                                                   // 8894
}                                                                                                                      // 8895
                                                                                                                       // 8896
function TransformStream() {}                                                                                          // 8897
                                                                                                                       // 8898
TransformStream.prototype = {                                                                                          // 8899
  constructor: TransformStream,                                                                                        // 8900
  point: function(x, y) { this.stream.point(x, y); },                                                                  // 8901
  sphere: function() { this.stream.sphere(); },                                                                        // 8902
  lineStart: function() { this.stream.lineStart(); },                                                                  // 8903
  lineEnd: function() { this.stream.lineEnd(); },                                                                      // 8904
  polygonStart: function() { this.stream.polygonStart(); },                                                            // 8905
  polygonEnd: function() { this.stream.polygonEnd(); }                                                                 // 8906
};                                                                                                                     // 8907
                                                                                                                       // 8908
function fitExtent(projection, extent, object) {                                                                       // 8909
  var w = extent[1][0] - extent[0][0],                                                                                 // 8910
      h = extent[1][1] - extent[0][1],                                                                                 // 8911
      clip = projection.clipExtent && projection.clipExtent();                                                         // 8912
                                                                                                                       // 8913
  projection                                                                                                           // 8914
      .scale(150)                                                                                                      // 8915
      .translate([0, 0]);                                                                                              // 8916
                                                                                                                       // 8917
  if (clip != null) projection.clipExtent(null);                                                                       // 8918
                                                                                                                       // 8919
  geoStream(object, projection.stream(boundsStream$1));                                                                // 8920
                                                                                                                       // 8921
  var b = boundsStream$1.result(),                                                                                     // 8922
      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),                                                  // 8923
      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,                                                           // 8924
      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;                                                           // 8925
                                                                                                                       // 8926
  if (clip != null) projection.clipExtent(clip);                                                                       // 8927
                                                                                                                       // 8928
  return projection                                                                                                    // 8929
      .scale(k * 150)                                                                                                  // 8930
      .translate([x, y]);                                                                                              // 8931
}                                                                                                                      // 8932
                                                                                                                       // 8933
function fitSize(projection, size, object) {                                                                           // 8934
  return fitExtent(projection, [[0, 0], size], object);                                                                // 8935
}                                                                                                                      // 8936
                                                                                                                       // 8937
var maxDepth = 16;                                                                                                     // 8938
var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)                                             // 8939
                                                                                                                       // 8940
var resample = function(project, delta2) {                                                                             // 8941
  return +delta2 ? resample$1(project, delta2) : resampleNone(project);                                                // 8942
};                                                                                                                     // 8943
                                                                                                                       // 8944
function resampleNone(project) {                                                                                       // 8945
  return transformer({                                                                                                 // 8946
    point: function(x, y) {                                                                                            // 8947
      x = project(x, y);                                                                                               // 8948
      this.stream.point(x[0], x[1]);                                                                                   // 8949
    }                                                                                                                  // 8950
  });                                                                                                                  // 8951
}                                                                                                                      // 8952
                                                                                                                       // 8953
function resample$1(project, delta2) {                                                                                 // 8954
                                                                                                                       // 8955
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {                   // 8956
    var dx = x1 - x0,                                                                                                  // 8957
        dy = y1 - y0,                                                                                                  // 8958
        d2 = dx * dx + dy * dy;                                                                                        // 8959
    if (d2 > 4 * delta2 && depth--) {                                                                                  // 8960
      var a = a0 + a1,                                                                                                 // 8961
          b = b0 + b1,                                                                                                 // 8962
          c = c0 + c1,                                                                                                 // 8963
          m = sqrt(a * a + b * b + c * c),                                                                             // 8964
          phi2 = asin(c /= m),                                                                                         // 8965
          lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),
          p = project(lambda2, phi2),                                                                                  // 8967
          x2 = p[0],                                                                                                   // 8968
          y2 = p[1],                                                                                                   // 8969
          dx2 = x2 - x0,                                                                                               // 8970
          dy2 = y2 - y0,                                                                                               // 8971
          dz = dy * dx2 - dx * dy2;                                                                                    // 8972
      if (dz * dz / d2 > delta2 // perpendicular projected distance                                                    // 8973
          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end                                   // 8974
          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance                                       // 8975
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);                // 8976
        stream.point(x2, y2);                                                                                          // 8977
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);                          // 8978
      }                                                                                                                // 8979
    }                                                                                                                  // 8980
  }                                                                                                                    // 8981
  return function(stream) {                                                                                            // 8982
    var lambda00, x00, y00, a00, b00, c00, // first point                                                              // 8983
        lambda0, x0, y0, a0, b0, c0; // previous point                                                                 // 8984
                                                                                                                       // 8985
    var resampleStream = {                                                                                             // 8986
      point: point,                                                                                                    // 8987
      lineStart: lineStart,                                                                                            // 8988
      lineEnd: lineEnd,                                                                                                // 8989
      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },                       // 8990
      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }                            // 8991
    };                                                                                                                 // 8992
                                                                                                                       // 8993
    function point(x, y) {                                                                                             // 8994
      x = project(x, y);                                                                                               // 8995
      stream.point(x[0], x[1]);                                                                                        // 8996
    }                                                                                                                  // 8997
                                                                                                                       // 8998
    function lineStart() {                                                                                             // 8999
      x0 = NaN;                                                                                                        // 9000
      resampleStream.point = linePoint;                                                                                // 9001
      stream.lineStart();                                                                                              // 9002
    }                                                                                                                  // 9003
                                                                                                                       // 9004
    function linePoint(lambda, phi) {                                                                                  // 9005
      var c = cartesian([lambda, phi]), p = project(lambda, phi);                                                      // 9006
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);                                                                                            // 9008
    }                                                                                                                  // 9009
                                                                                                                       // 9010
    function lineEnd() {                                                                                               // 9011
      resampleStream.point = point;                                                                                    // 9012
      stream.lineEnd();                                                                                                // 9013
    }                                                                                                                  // 9014
                                                                                                                       // 9015
    function ringStart() {                                                                                             // 9016
      lineStart();                                                                                                     // 9017
      resampleStream.point = ringPoint;                                                                                // 9018
      resampleStream.lineEnd = ringEnd;                                                                                // 9019
    }                                                                                                                  // 9020
                                                                                                                       // 9021
    function ringPoint(lambda, phi) {                                                                                  // 9022
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;                             // 9023
      resampleStream.point = linePoint;                                                                                // 9024
    }                                                                                                                  // 9025
                                                                                                                       // 9026
    function ringEnd() {                                                                                               // 9027
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);                // 9028
      resampleStream.lineEnd = lineEnd;                                                                                // 9029
      lineEnd();                                                                                                       // 9030
    }                                                                                                                  // 9031
                                                                                                                       // 9032
    return resampleStream;                                                                                             // 9033
  };                                                                                                                   // 9034
}                                                                                                                      // 9035
                                                                                                                       // 9036
var transformRadians = transformer({                                                                                   // 9037
  point: function(x, y) {                                                                                              // 9038
    this.stream.point(x * radians, y * radians);                                                                       // 9039
  }                                                                                                                    // 9040
});                                                                                                                    // 9041
                                                                                                                       // 9042
function projection(project) {                                                                                         // 9043
  return projectionMutator(function() { return project; })();                                                          // 9044
}                                                                                                                      // 9045
                                                                                                                       // 9046
function projectionMutator(projectAt) {                                                                                // 9047
  var project,                                                                                                         // 9048
      k = 150, // scale                                                                                                // 9049
      x = 480, y = 250, // translate                                                                                   // 9050
      dx, dy, lambda = 0, phi = 0, // center                                                                           // 9051
      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate                                  // 9052
      theta = null, preclip = clipAntimeridian, // clip angle                                                          // 9053
      x0 = null, y0, x1, y1, postclip = identity$4, // clip extent                                                     // 9054
      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision                                 // 9055
      cache,                                                                                                           // 9056
      cacheStream;                                                                                                     // 9057
                                                                                                                       // 9058
  function projection(point) {                                                                                         // 9059
    point = projectRotate(point[0] * radians, point[1] * radians);                                                     // 9060
    return [point[0] * k + dx, dy - point[1] * k];                                                                     // 9061
  }                                                                                                                    // 9062
                                                                                                                       // 9063
  function invert(point) {                                                                                             // 9064
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);                                            // 9065
    return point && [point[0] * degrees$1, point[1] * degrees$1];                                                      // 9066
  }                                                                                                                    // 9067
                                                                                                                       // 9068
  function projectTransform(x, y) {                                                                                    // 9069
    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];                                                          // 9070
  }                                                                                                                    // 9071
                                                                                                                       // 9072
  projection.stream = function(stream) {                                                                               // 9073
    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
  };                                                                                                                   // 9075
                                                                                                                       // 9076
  projection.clipAngle = function(_) {                                                                                 // 9077
    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
  };                                                                                                                   // 9079
                                                                                                                       // 9080
  projection.clipExtent = function(_) {                                                                                // 9081
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };                                                                                                                   // 9083
                                                                                                                       // 9084
  projection.scale = function(_) {                                                                                     // 9085
    return arguments.length ? (k = +_, recenter()) : k;                                                                // 9086
  };                                                                                                                   // 9087
                                                                                                                       // 9088
  projection.translate = function(_) {                                                                                 // 9089
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];                                             // 9090
  };                                                                                                                   // 9091
                                                                                                                       // 9092
  projection.center = function(_) {                                                                                    // 9093
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
  };                                                                                                                   // 9095
                                                                                                                       // 9096
  projection.rotate = function(_) {                                                                                    // 9097
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
  };                                                                                                                   // 9099
                                                                                                                       // 9100
  projection.precision = function(_) {                                                                                 // 9101
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);  // 9102
  };                                                                                                                   // 9103
                                                                                                                       // 9104
  projection.fitExtent = function(extent, object) {                                                                    // 9105
    return fitExtent(projection, extent, object);                                                                      // 9106
  };                                                                                                                   // 9107
                                                                                                                       // 9108
  projection.fitSize = function(size, object) {                                                                        // 9109
    return fitSize(projection, size, object);                                                                          // 9110
  };                                                                                                                   // 9111
                                                                                                                       // 9112
  function recenter() {                                                                                                // 9113
    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);                       // 9114
    var center = project(lambda, phi);                                                                                 // 9115
    dx = x - center[0] * k;                                                                                            // 9116
    dy = y + center[1] * k;                                                                                            // 9117
    return reset();                                                                                                    // 9118
  }                                                                                                                    // 9119
                                                                                                                       // 9120
  function reset() {                                                                                                   // 9121
    cache = cacheStream = null;                                                                                        // 9122
    return projection;                                                                                                 // 9123
  }                                                                                                                    // 9124
                                                                                                                       // 9125
  return function() {                                                                                                  // 9126
    project = projectAt.apply(this, arguments);                                                                        // 9127
    projection.invert = project.invert && invert;                                                                      // 9128
    return recenter();                                                                                                 // 9129
  };                                                                                                                   // 9130
}                                                                                                                      // 9131
                                                                                                                       // 9132
function conicProjection(projectAt) {                                                                                  // 9133
  var phi0 = 0,                                                                                                        // 9134
      phi1 = pi$3 / 3,                                                                                                 // 9135
      m = projectionMutator(projectAt),                                                                                // 9136
      p = m(phi0, phi1);                                                                                               // 9137
                                                                                                                       // 9138
  p.parallels = function(_) {                                                                                          // 9139
    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];  // 9140
  };                                                                                                                   // 9141
                                                                                                                       // 9142
  return p;                                                                                                            // 9143
}                                                                                                                      // 9144
                                                                                                                       // 9145
function cylindricalEqualAreaRaw(phi0) {                                                                               // 9146
  var cosPhi0 = cos$1(phi0);                                                                                           // 9147
                                                                                                                       // 9148
  function forward(lambda, phi) {                                                                                      // 9149
    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];                                                                   // 9150
  }                                                                                                                    // 9151
                                                                                                                       // 9152
  forward.invert = function(x, y) {                                                                                    // 9153
    return [x / cosPhi0, asin(y * cosPhi0)];                                                                           // 9154
  };                                                                                                                   // 9155
                                                                                                                       // 9156
  return forward;                                                                                                      // 9157
}                                                                                                                      // 9158
                                                                                                                       // 9159
function conicEqualAreaRaw(y0, y1) {                                                                                   // 9160
  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;                                                                      // 9161
                                                                                                                       // 9162
  // Are the parallels symmetrical around the Equator?                                                                 // 9163
  if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);                                                          // 9164
                                                                                                                       // 9165
  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;                                                                   // 9166
                                                                                                                       // 9167
  function project(x, y) {                                                                                             // 9168
    var r = sqrt(c - 2 * n * sin$1(y)) / n;                                                                            // 9169
    return [r * sin$1(x *= n), r0 - r * cos$1(x)];                                                                     // 9170
  }                                                                                                                    // 9171
                                                                                                                       // 9172
  project.invert = function(x, y) {                                                                                    // 9173
    var r0y = r0 - y;                                                                                                  // 9174
    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];                    // 9175
  };                                                                                                                   // 9176
                                                                                                                       // 9177
  return project;                                                                                                      // 9178
}                                                                                                                      // 9179
                                                                                                                       // 9180
var conicEqualArea = function() {                                                                                      // 9181
  return conicProjection(conicEqualAreaRaw)                                                                            // 9182
      .scale(155.424)                                                                                                  // 9183
      .center([0, 33.6442]);                                                                                           // 9184
};                                                                                                                     // 9185
                                                                                                                       // 9186
var albers = function() {                                                                                              // 9187
  return conicEqualArea()                                                                                              // 9188
      .parallels([29.5, 45.5])                                                                                         // 9189
      .scale(1070)                                                                                                     // 9190
      .translate([480, 250])                                                                                           // 9191
      .rotate([96, 0])                                                                                                 // 9192
      .center([-0.6, 38.7]);                                                                                           // 9193
};                                                                                                                     // 9194
                                                                                                                       // 9195
// The projections must have mutually exclusive clip regions on the sphere,                                            // 9196
// as this will avoid emitting interleaving lines and polygons.                                                        // 9197
function multiplex(streams) {                                                                                          // 9198
  var n = streams.length;                                                                                              // 9199
  return {                                                                                                             // 9200
    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },                                     // 9201
    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },                                           // 9202
    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },                                     // 9203
    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },                                         // 9204
    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },                               // 9205
    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }                                    // 9206
  };                                                                                                                   // 9207
}                                                                                                                      // 9208
                                                                                                                       // 9209
// A composite projection for the United States, configured by default for                                             // 9210
// 960×500. The projection also works quite well at 960×600 if you change the                                          // 9211
// scale to 1285 and adjust the translate accordingly. The set of standard                                             // 9212
// parallels for each region comes from USGS, which is published here:                                                 // 9213
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers                                                // 9214
var albersUsa = function() {                                                                                           // 9215
  var cache,                                                                                                           // 9216
      cacheStream,                                                                                                     // 9217
      lower48 = albers(), lower48Point,                                                                                // 9218
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338     // 9219
      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007    // 9220
      point, pointStream = {point: function(x, y) { point = [x, y]; }};                                                // 9221
                                                                                                                       // 9222
  function albersUsa(coordinates) {                                                                                    // 9223
    var x = coordinates[0], y = coordinates[1];                                                                        // 9224
    return point = null,                                                                                               // 9225
        (lower48Point.point(x, y), point)                                                                              // 9226
        || (alaskaPoint.point(x, y), point)                                                                            // 9227
        || (hawaiiPoint.point(x, y), point);                                                                           // 9228
  }                                                                                                                    // 9229
                                                                                                                       // 9230
  albersUsa.invert = function(coordinates) {                                                                           // 9231
    var k = lower48.scale(),                                                                                           // 9232
        t = lower48.translate(),                                                                                       // 9233
        x = (coordinates[0] - t[0]) / k,                                                                               // 9234
        y = (coordinates[1] - t[1]) / k;                                                                               // 9235
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska                                              // 9236
        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii                                                // 9237
        : lower48).invert(coordinates);                                                                                // 9238
  };                                                                                                                   // 9239
                                                                                                                       // 9240
  albersUsa.stream = function(stream) {                                                                                // 9241
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };                                                                                                                   // 9243
                                                                                                                       // 9244
  albersUsa.precision = function(_) {                                                                                  // 9245
    if (!arguments.length) return lower48.precision();                                                                 // 9246
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);                                                    // 9247
    return reset();                                                                                                    // 9248
  };                                                                                                                   // 9249
                                                                                                                       // 9250
  albersUsa.scale = function(_) {                                                                                      // 9251
    if (!arguments.length) return lower48.scale();                                                                     // 9252
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);                                                         // 9253
    return albersUsa.translate(lower48.translate());                                                                   // 9254
  };                                                                                                                   // 9255
                                                                                                                       // 9256
  albersUsa.translate = function(_) {                                                                                  // 9257
    if (!arguments.length) return lower48.translate();                                                                 // 9258
    var k = lower48.scale(), x = +_[0], y = +_[1];                                                                     // 9259
                                                                                                                       // 9260
    lower48Point = lower48                                                                                             // 9261
        .translate(_)                                                                                                  // 9262
        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])                                  // 9263
        .stream(pointStream);                                                                                          // 9264
                                                                                                                       // 9265
    alaskaPoint = alaska                                                                                               // 9266
        .translate([x - 0.307 * k, y + 0.201 * k])                                                                     // 9267
        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
        .stream(pointStream);                                                                                          // 9269
                                                                                                                       // 9270
    hawaiiPoint = hawaii                                                                                               // 9271
        .translate([x - 0.205 * k, y + 0.212 * k])                                                                     // 9272
        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
        .stream(pointStream);                                                                                          // 9274
                                                                                                                       // 9275
    return reset();                                                                                                    // 9276
  };                                                                                                                   // 9277
                                                                                                                       // 9278
  albersUsa.fitExtent = function(extent, object) {                                                                     // 9279
    return fitExtent(albersUsa, extent, object);                                                                       // 9280
  };                                                                                                                   // 9281
                                                                                                                       // 9282
  albersUsa.fitSize = function(size, object) {                                                                         // 9283
    return fitSize(albersUsa, size, object);                                                                           // 9284
  };                                                                                                                   // 9285
                                                                                                                       // 9286
  function reset() {                                                                                                   // 9287
    cache = cacheStream = null;                                                                                        // 9288
    return albersUsa;                                                                                                  // 9289
  }                                                                                                                    // 9290
                                                                                                                       // 9291
  return albersUsa.scale(1070);                                                                                        // 9292
};                                                                                                                     // 9293
                                                                                                                       // 9294
function azimuthalRaw(scale) {                                                                                         // 9295
  return function(x, y) {                                                                                              // 9296
    var cx = cos$1(x),                                                                                                 // 9297
        cy = cos$1(y),                                                                                                 // 9298
        k = scale(cx * cy);                                                                                            // 9299
    return [                                                                                                           // 9300
      k * cy * sin$1(x),                                                                                               // 9301
      k * sin$1(y)                                                                                                     // 9302
    ];                                                                                                                 // 9303
  }                                                                                                                    // 9304
}                                                                                                                      // 9305
                                                                                                                       // 9306
function azimuthalInvert(angle) {                                                                                      // 9307
  return function(x, y) {                                                                                              // 9308
    var z = sqrt(x * x + y * y),                                                                                       // 9309
        c = angle(z),                                                                                                  // 9310
        sc = sin$1(c),                                                                                                 // 9311
        cc = cos$1(c);                                                                                                 // 9312
    return [                                                                                                           // 9313
      atan2(x * sc, z * cc),                                                                                           // 9314
      asin(z && y * sc / z)                                                                                            // 9315
    ];                                                                                                                 // 9316
  }                                                                                                                    // 9317
}                                                                                                                      // 9318
                                                                                                                       // 9319
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {                                                              // 9320
  return sqrt(2 / (1 + cxcy));                                                                                         // 9321
});                                                                                                                    // 9322
                                                                                                                       // 9323
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {                                                           // 9324
  return 2 * asin(z / 2);                                                                                              // 9325
});                                                                                                                    // 9326
                                                                                                                       // 9327
var azimuthalEqualArea = function() {                                                                                  // 9328
  return projection(azimuthalEqualAreaRaw)                                                                             // 9329
      .scale(124.75)                                                                                                   // 9330
      .clipAngle(180 - 1e-3);                                                                                          // 9331
};                                                                                                                     // 9332
                                                                                                                       // 9333
var azimuthalEquidistantRaw = azimuthalRaw(function(c) {                                                               // 9334
  return (c = acos(c)) && c / sin$1(c);                                                                                // 9335
});                                                                                                                    // 9336
                                                                                                                       // 9337
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {                                                         // 9338
  return z;                                                                                                            // 9339
});                                                                                                                    // 9340
                                                                                                                       // 9341
var azimuthalEquidistant = function() {                                                                                // 9342
  return projection(azimuthalEquidistantRaw)                                                                           // 9343
      .scale(79.4188)                                                                                                  // 9344
      .clipAngle(180 - 1e-3);                                                                                          // 9345
};                                                                                                                     // 9346
                                                                                                                       // 9347
function mercatorRaw(lambda, phi) {                                                                                    // 9348
  return [lambda, log(tan((halfPi$2 + phi) / 2))];                                                                     // 9349
}                                                                                                                      // 9350
                                                                                                                       // 9351
mercatorRaw.invert = function(x, y) {                                                                                  // 9352
  return [x, 2 * atan(exp(y)) - halfPi$2];                                                                             // 9353
};                                                                                                                     // 9354
                                                                                                                       // 9355
var mercator = function() {                                                                                            // 9356
  return mercatorProjection(mercatorRaw)                                                                               // 9357
      .scale(961 / tau$3);                                                                                             // 9358
};                                                                                                                     // 9359
                                                                                                                       // 9360
function mercatorProjection(project) {                                                                                 // 9361
  var m = projection(project),                                                                                         // 9362
      center = m.center,                                                                                               // 9363
      scale = m.scale,                                                                                                 // 9364
      translate = m.translate,                                                                                         // 9365
      clipExtent = m.clipExtent,                                                                                       // 9366
      x0 = null, y0, x1, y1; // clip extent                                                                            // 9367
                                                                                                                       // 9368
  m.scale = function(_) {                                                                                              // 9369
    return arguments.length ? (scale(_), reclip()) : scale();                                                          // 9370
  };                                                                                                                   // 9371
                                                                                                                       // 9372
  m.translate = function(_) {                                                                                          // 9373
    return arguments.length ? (translate(_), reclip()) : translate();                                                  // 9374
  };                                                                                                                   // 9375
                                                                                                                       // 9376
  m.center = function(_) {                                                                                             // 9377
    return arguments.length ? (center(_), reclip()) : center();                                                        // 9378
  };                                                                                                                   // 9379
                                                                                                                       // 9380
  m.clipExtent = function(_) {                                                                                         // 9381
    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };                                                                                                                   // 9383
                                                                                                                       // 9384
  function reclip() {                                                                                                  // 9385
    var k = pi$3 * scale(),                                                                                            // 9386
        t = m(rotation(m.rotate()).invert([0, 0]));                                                                    // 9387
    return clipExtent(x0 == null                                                                                       // 9388
        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw                                       // 9389
        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]                                                 // 9390
        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);                                               // 9391
  }                                                                                                                    // 9392
                                                                                                                       // 9393
  return reclip();                                                                                                     // 9394
}                                                                                                                      // 9395
                                                                                                                       // 9396
function tany(y) {                                                                                                     // 9397
  return tan((halfPi$2 + y) / 2);                                                                                      // 9398
}                                                                                                                      // 9399
                                                                                                                       // 9400
function conicConformalRaw(y0, y1) {                                                                                   // 9401
  var cy0 = cos$1(y0),                                                                                                 // 9402
      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),                                     // 9403
      f = cy0 * pow(tany(y0), n) / n;                                                                                  // 9404
                                                                                                                       // 9405
  if (!n) return mercatorRaw;                                                                                          // 9406
                                                                                                                       // 9407
  function project(x, y) {                                                                                             // 9408
    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }                                           // 9409
    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }                                                   // 9410
    var r = f / pow(tany(y), n);                                                                                       // 9411
    return [r * sin$1(n * x), f - r * cos$1(n * x)];                                                                   // 9412
  }                                                                                                                    // 9413
                                                                                                                       // 9414
  project.invert = function(x, y) {                                                                                    // 9415
    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);                                                               // 9416
    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi$2];                                 // 9417
  };                                                                                                                   // 9418
                                                                                                                       // 9419
  return project;                                                                                                      // 9420
}                                                                                                                      // 9421
                                                                                                                       // 9422
var conicConformal = function() {                                                                                      // 9423
  return conicProjection(conicConformalRaw)                                                                            // 9424
      .scale(109.5)                                                                                                    // 9425
      .parallels([30, 30]);                                                                                            // 9426
};                                                                                                                     // 9427
                                                                                                                       // 9428
function equirectangularRaw(lambda, phi) {                                                                             // 9429
  return [lambda, phi];                                                                                                // 9430
}                                                                                                                      // 9431
                                                                                                                       // 9432
equirectangularRaw.invert = equirectangularRaw;                                                                        // 9433
                                                                                                                       // 9434
var equirectangular = function() {                                                                                     // 9435
  return projection(equirectangularRaw)                                                                                // 9436
      .scale(152.63);                                                                                                  // 9437
};                                                                                                                     // 9438
                                                                                                                       // 9439
function conicEquidistantRaw(y0, y1) {                                                                                 // 9440
  var cy0 = cos$1(y0),                                                                                                 // 9441
      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),                                                       // 9442
      g = cy0 / n + y0;                                                                                                // 9443
                                                                                                                       // 9444
  if (abs(n) < epsilon$2) return equirectangularRaw;                                                                   // 9445
                                                                                                                       // 9446
  function project(x, y) {                                                                                             // 9447
    var gy = g - y, nx = n * x;                                                                                        // 9448
    return [gy * sin$1(nx), g - gy * cos$1(nx)];                                                                       // 9449
  }                                                                                                                    // 9450
                                                                                                                       // 9451
  project.invert = function(x, y) {                                                                                    // 9452
    var gy = g - y;                                                                                                    // 9453
    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];                                    // 9454
  };                                                                                                                   // 9455
                                                                                                                       // 9456
  return project;                                                                                                      // 9457
}                                                                                                                      // 9458
                                                                                                                       // 9459
var conicEquidistant = function() {                                                                                    // 9460
  return conicProjection(conicEquidistantRaw)                                                                          // 9461
      .scale(131.154)                                                                                                  // 9462
      .center([0, 13.9389]);                                                                                           // 9463
};                                                                                                                     // 9464
                                                                                                                       // 9465
function gnomonicRaw(x, y) {                                                                                           // 9466
  var cy = cos$1(y), k = cos$1(x) * cy;                                                                                // 9467
  return [cy * sin$1(x) / k, sin$1(y) / k];                                                                            // 9468
}                                                                                                                      // 9469
                                                                                                                       // 9470
gnomonicRaw.invert = azimuthalInvert(atan);                                                                            // 9471
                                                                                                                       // 9472
var gnomonic = function() {                                                                                            // 9473
  return projection(gnomonicRaw)                                                                                       // 9474
      .scale(144.049)                                                                                                  // 9475
      .clipAngle(60);                                                                                                  // 9476
};                                                                                                                     // 9477
                                                                                                                       // 9478
function scaleTranslate(kx, ky, tx, ty) {                                                                              // 9479
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({                                     // 9480
    point: function(x, y) {                                                                                            // 9481
      this.stream.point(x * kx + tx, y * ky + ty);                                                                     // 9482
    }                                                                                                                  // 9483
  });                                                                                                                  // 9484
}                                                                                                                      // 9485
                                                                                                                       // 9486
var identity$5 = function() {                                                                                          // 9487
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$4, // scale, translate and reflect                   // 9488
      x0 = null, y0, x1, y1, clip = identity$4, // clip extent                                                         // 9489
      cache,                                                                                                           // 9490
      cacheStream,                                                                                                     // 9491
      projection;                                                                                                      // 9492
                                                                                                                       // 9493
  function reset() {                                                                                                   // 9494
    cache = cacheStream = null;                                                                                        // 9495
    return projection;                                                                                                 // 9496
  }                                                                                                                    // 9497
                                                                                                                       // 9498
  return projection = {                                                                                                // 9499
    stream: function(stream) {                                                                                         // 9500
      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));                  // 9501
    },                                                                                                                 // 9502
    clipExtent: function(_) {                                                                                          // 9503
      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },                                                                                                                 // 9505
    scale: function(_) {                                                                                               // 9506
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;              // 9507
    },                                                                                                                 // 9508
    translate: function(_) {                                                                                           // 9509
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },                                                                                                                 // 9511
    reflectX: function(_) {                                                                                            // 9512
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },                                                                                                                 // 9514
    reflectY: function(_) {                                                                                            // 9515
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },                                                                                                                 // 9517
    fitExtent: function(extent, object) {                                                                              // 9518
      return fitExtent(projection, extent, object);                                                                    // 9519
    },                                                                                                                 // 9520
    fitSize: function(size, object) {                                                                                  // 9521
      return fitSize(projection, size, object);                                                                        // 9522
    }                                                                                                                  // 9523
  };                                                                                                                   // 9524
};                                                                                                                     // 9525
                                                                                                                       // 9526
function orthographicRaw(x, y) {                                                                                       // 9527
  return [cos$1(y) * sin$1(x), sin$1(y)];                                                                              // 9528
}                                                                                                                      // 9529
                                                                                                                       // 9530
orthographicRaw.invert = azimuthalInvert(asin);                                                                        // 9531
                                                                                                                       // 9532
var orthographic = function() {                                                                                        // 9533
  return projection(orthographicRaw)                                                                                   // 9534
      .scale(249.5)                                                                                                    // 9535
      .clipAngle(90 + epsilon$2);                                                                                      // 9536
};                                                                                                                     // 9537
                                                                                                                       // 9538
function stereographicRaw(x, y) {                                                                                      // 9539
  var cy = cos$1(y), k = 1 + cos$1(x) * cy;                                                                            // 9540
  return [cy * sin$1(x) / k, sin$1(y) / k];                                                                            // 9541
}                                                                                                                      // 9542
                                                                                                                       // 9543
stereographicRaw.invert = azimuthalInvert(function(z) {                                                                // 9544
  return 2 * atan(z);                                                                                                  // 9545
});                                                                                                                    // 9546
                                                                                                                       // 9547
var stereographic = function() {                                                                                       // 9548
  return projection(stereographicRaw)                                                                                  // 9549
      .scale(250)                                                                                                      // 9550
      .clipAngle(142);                                                                                                 // 9551
};                                                                                                                     // 9552
                                                                                                                       // 9553
function transverseMercatorRaw(lambda, phi) {                                                                          // 9554
  return [log(tan((halfPi$2 + phi) / 2)), -lambda];                                                                    // 9555
}                                                                                                                      // 9556
                                                                                                                       // 9557
transverseMercatorRaw.invert = function(x, y) {                                                                        // 9558
  return [-y, 2 * atan(exp(x)) - halfPi$2];                                                                            // 9559
};                                                                                                                     // 9560
                                                                                                                       // 9561
var transverseMercator = function() {                                                                                  // 9562
  var m = mercatorProjection(transverseMercatorRaw),                                                                   // 9563
      center = m.center,                                                                                               // 9564
      rotate = m.rotate;                                                                                               // 9565
                                                                                                                       // 9566
  m.center = function(_) {                                                                                             // 9567
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);                                   // 9568
  };                                                                                                                   // 9569
                                                                                                                       // 9570
  m.rotate = function(_) {                                                                                             // 9571
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };                                                                                                                   // 9573
                                                                                                                       // 9574
  return rotate([0, 0, 90])                                                                                            // 9575
      .scale(159.155);                                                                                                 // 9576
};                                                                                                                     // 9577
                                                                                                                       // 9578
function defaultSeparation(a, b) {                                                                                     // 9579
  return a.parent === b.parent ? 1 : 2;                                                                                // 9580
}                                                                                                                      // 9581
                                                                                                                       // 9582
function meanX(children) {                                                                                             // 9583
  return children.reduce(meanXReduce, 0) / children.length;                                                            // 9584
}                                                                                                                      // 9585
                                                                                                                       // 9586
function meanXReduce(x, c) {                                                                                           // 9587
  return x + c.x;                                                                                                      // 9588
}                                                                                                                      // 9589
                                                                                                                       // 9590
function maxY(children) {                                                                                              // 9591
  return 1 + children.reduce(maxYReduce, 0);                                                                           // 9592
}                                                                                                                      // 9593
                                                                                                                       // 9594
function maxYReduce(y, c) {                                                                                            // 9595
  return Math.max(y, c.y);                                                                                             // 9596
}                                                                                                                      // 9597
                                                                                                                       // 9598
function leafLeft(node) {                                                                                              // 9599
  var children;                                                                                                        // 9600
  while (children = node.children) node = children[0];                                                                 // 9601
  return node;                                                                                                         // 9602
}                                                                                                                      // 9603
                                                                                                                       // 9604
function leafRight(node) {                                                                                             // 9605
  var children;                                                                                                        // 9606
  while (children = node.children) node = children[children.length - 1];                                               // 9607
  return node;                                                                                                         // 9608
}                                                                                                                      // 9609
                                                                                                                       // 9610
var cluster = function() {                                                                                             // 9611
  var separation = defaultSeparation,                                                                                  // 9612
      dx = 1,                                                                                                          // 9613
      dy = 1,                                                                                                          // 9614
      nodeSize = false;                                                                                                // 9615
                                                                                                                       // 9616
  function cluster(root) {                                                                                             // 9617
    var previousNode,                                                                                                  // 9618
        x = 0;                                                                                                         // 9619
                                                                                                                       // 9620
    // First walk, computing the initial x & y values.                                                                 // 9621
    root.eachAfter(function(node) {                                                                                    // 9622
      var children = node.children;                                                                                    // 9623
      if (children) {                                                                                                  // 9624
        node.x = meanX(children);                                                                                      // 9625
        node.y = maxY(children);                                                                                       // 9626
      } else {                                                                                                         // 9627
        node.x = previousNode ? x += separation(node, previousNode) : 0;                                               // 9628
        node.y = 0;                                                                                                    // 9629
        previousNode = node;                                                                                           // 9630
      }                                                                                                                // 9631
    });                                                                                                                // 9632
                                                                                                                       // 9633
    var left = leafLeft(root),                                                                                         // 9634
        right = leafRight(root),                                                                                       // 9635
        x0 = left.x - separation(left, right) / 2,                                                                     // 9636
        x1 = right.x + separation(right, left) / 2;                                                                    // 9637
                                                                                                                       // 9638
    // Second walk, normalizing x & y to the desired size.                                                             // 9639
    return root.eachAfter(nodeSize ? function(node) {                                                                  // 9640
      node.x = (node.x - root.x) * dx;                                                                                 // 9641
      node.y = (root.y - node.y) * dy;                                                                                 // 9642
    } : function(node) {                                                                                               // 9643
      node.x = (node.x - x0) / (x1 - x0) * dx;                                                                         // 9644
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;                                                              // 9645
    });                                                                                                                // 9646
  }                                                                                                                    // 9647
                                                                                                                       // 9648
  cluster.separation = function(x) {                                                                                   // 9649
    return arguments.length ? (separation = x, cluster) : separation;                                                  // 9650
  };                                                                                                                   // 9651
                                                                                                                       // 9652
  cluster.size = function(x) {                                                                                         // 9653
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);      // 9654
  };                                                                                                                   // 9655
                                                                                                                       // 9656
  cluster.nodeSize = function(x) {                                                                                     // 9657
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);       // 9658
  };                                                                                                                   // 9659
                                                                                                                       // 9660
  return cluster;                                                                                                      // 9661
};                                                                                                                     // 9662
                                                                                                                       // 9663
function count(node) {                                                                                                 // 9664
  var sum = 0,                                                                                                         // 9665
      children = node.children,                                                                                        // 9666
      i = children && children.length;                                                                                 // 9667
  if (!i) sum = 1;                                                                                                     // 9668
  else while (--i >= 0) sum += children[i].value;                                                                      // 9669
  node.value = sum;                                                                                                    // 9670
}                                                                                                                      // 9671
                                                                                                                       // 9672
var node_count = function() {                                                                                          // 9673
  return this.eachAfter(count);                                                                                        // 9674
};                                                                                                                     // 9675
                                                                                                                       // 9676
var node_each = function(callback) {                                                                                   // 9677
  var node = this, current, next = [node], children, i, n;                                                             // 9678
  do {                                                                                                                 // 9679
    current = next.reverse(), next = [];                                                                               // 9680
    while (node = current.pop()) {                                                                                     // 9681
      callback(node), children = node.children;                                                                        // 9682
      if (children) for (i = 0, n = children.length; i < n; ++i) {                                                     // 9683
        next.push(children[i]);                                                                                        // 9684
      }                                                                                                                // 9685
    }                                                                                                                  // 9686
  } while (next.length);                                                                                               // 9687
  return this;                                                                                                         // 9688
};                                                                                                                     // 9689
                                                                                                                       // 9690
var node_eachBefore = function(callback) {                                                                             // 9691
  var node = this, nodes = [node], children, i;                                                                        // 9692
  while (node = nodes.pop()) {                                                                                         // 9693
    callback(node), children = node.children;                                                                          // 9694
    if (children) for (i = children.length - 1; i >= 0; --i) {                                                         // 9695
      nodes.push(children[i]);                                                                                         // 9696
    }                                                                                                                  // 9697
  }                                                                                                                    // 9698
  return this;                                                                                                         // 9699
};                                                                                                                     // 9700
                                                                                                                       // 9701
var node_eachAfter = function(callback) {                                                                              // 9702
  var node = this, nodes = [node], next = [], children, i, n;                                                          // 9703
  while (node = nodes.pop()) {                                                                                         // 9704
    next.push(node), children = node.children;                                                                         // 9705
    if (children) for (i = 0, n = children.length; i < n; ++i) {                                                       // 9706
      nodes.push(children[i]);                                                                                         // 9707
    }                                                                                                                  // 9708
  }                                                                                                                    // 9709
  while (node = next.pop()) {                                                                                          // 9710
    callback(node);                                                                                                    // 9711
  }                                                                                                                    // 9712
  return this;                                                                                                         // 9713
};                                                                                                                     // 9714
                                                                                                                       // 9715
var node_sum = function(value) {                                                                                       // 9716
  return this.eachAfter(function(node) {                                                                               // 9717
    var sum = +value(node.data) || 0,                                                                                  // 9718
        children = node.children,                                                                                      // 9719
        i = children && children.length;                                                                               // 9720
    while (--i >= 0) sum += children[i].value;                                                                         // 9721
    node.value = sum;                                                                                                  // 9722
  });                                                                                                                  // 9723
};                                                                                                                     // 9724
                                                                                                                       // 9725
var node_sort = function(compare) {                                                                                    // 9726
  return this.eachBefore(function(node) {                                                                              // 9727
    if (node.children) {                                                                                               // 9728
      node.children.sort(compare);                                                                                     // 9729
    }                                                                                                                  // 9730
  });                                                                                                                  // 9731
};                                                                                                                     // 9732
                                                                                                                       // 9733
var node_path = function(end) {                                                                                        // 9734
  var start = this,                                                                                                    // 9735
      ancestor = leastCommonAncestor(start, end),                                                                      // 9736
      nodes = [start];                                                                                                 // 9737
  while (start !== ancestor) {                                                                                         // 9738
    start = start.parent;                                                                                              // 9739
    nodes.push(start);                                                                                                 // 9740
  }                                                                                                                    // 9741
  var k = nodes.length;                                                                                                // 9742
  while (end !== ancestor) {                                                                                           // 9743
    nodes.splice(k, 0, end);                                                                                           // 9744
    end = end.parent;                                                                                                  // 9745
  }                                                                                                                    // 9746
  return nodes;                                                                                                        // 9747
};                                                                                                                     // 9748
                                                                                                                       // 9749
function leastCommonAncestor(a, b) {                                                                                   // 9750
  if (a === b) return a;                                                                                               // 9751
  var aNodes = a.ancestors(),                                                                                          // 9752
      bNodes = b.ancestors(),                                                                                          // 9753
      c = null;                                                                                                        // 9754
  a = aNodes.pop();                                                                                                    // 9755
  b = bNodes.pop();                                                                                                    // 9756
  while (a === b) {                                                                                                    // 9757
    c = a;                                                                                                             // 9758
    a = aNodes.pop();                                                                                                  // 9759
    b = bNodes.pop();                                                                                                  // 9760
  }                                                                                                                    // 9761
  return c;                                                                                                            // 9762
}                                                                                                                      // 9763
                                                                                                                       // 9764
var node_ancestors = function() {                                                                                      // 9765
  var node = this, nodes = [node];                                                                                     // 9766
  while (node = node.parent) {                                                                                         // 9767
    nodes.push(node);                                                                                                  // 9768
  }                                                                                                                    // 9769
  return nodes;                                                                                                        // 9770
};                                                                                                                     // 9771
                                                                                                                       // 9772
var node_descendants = function() {                                                                                    // 9773
  var nodes = [];                                                                                                      // 9774
  this.each(function(node) {                                                                                           // 9775
    nodes.push(node);                                                                                                  // 9776
  });                                                                                                                  // 9777
  return nodes;                                                                                                        // 9778
};                                                                                                                     // 9779
                                                                                                                       // 9780
var node_leaves = function() {                                                                                         // 9781
  var leaves = [];                                                                                                     // 9782
  this.eachBefore(function(node) {                                                                                     // 9783
    if (!node.children) {                                                                                              // 9784
      leaves.push(node);                                                                                               // 9785
    }                                                                                                                  // 9786
  });                                                                                                                  // 9787
  return leaves;                                                                                                       // 9788
};                                                                                                                     // 9789
                                                                                                                       // 9790
var node_links = function() {                                                                                          // 9791
  var root = this, links = [];                                                                                         // 9792
  root.each(function(node) {                                                                                           // 9793
    if (node !== root) { // Don’t include the root’s parent, if any.                                                   // 9794
      links.push({source: node.parent, target: node});                                                                 // 9795
    }                                                                                                                  // 9796
  });                                                                                                                  // 9797
  return links;                                                                                                        // 9798
};                                                                                                                     // 9799
                                                                                                                       // 9800
function hierarchy(data, children) {                                                                                   // 9801
  var root = new Node(data),                                                                                           // 9802
      valued = +data.value && (root.value = data.value),                                                               // 9803
      node,                                                                                                            // 9804
      nodes = [root],                                                                                                  // 9805
      child,                                                                                                           // 9806
      childs,                                                                                                          // 9807
      i,                                                                                                               // 9808
      n;                                                                                                               // 9809
                                                                                                                       // 9810
  if (children == null) children = defaultChildren;                                                                    // 9811
                                                                                                                       // 9812
  while (node = nodes.pop()) {                                                                                         // 9813
    if (valued) node.value = +node.data.value;                                                                         // 9814
    if ((childs = children(node.data)) && (n = childs.length)) {                                                       // 9815
      node.children = new Array(n);                                                                                    // 9816
      for (i = n - 1; i >= 0; --i) {                                                                                   // 9817
        nodes.push(child = node.children[i] = new Node(childs[i]));                                                    // 9818
        child.parent = node;                                                                                           // 9819
        child.depth = node.depth + 1;                                                                                  // 9820
      }                                                                                                                // 9821
    }                                                                                                                  // 9822
  }                                                                                                                    // 9823
                                                                                                                       // 9824
  return root.eachBefore(computeHeight);                                                                               // 9825
}                                                                                                                      // 9826
                                                                                                                       // 9827
function node_copy() {                                                                                                 // 9828
  return hierarchy(this).eachBefore(copyData);                                                                         // 9829
}                                                                                                                      // 9830
                                                                                                                       // 9831
function defaultChildren(d) {                                                                                          // 9832
  return d.children;                                                                                                   // 9833
}                                                                                                                      // 9834
                                                                                                                       // 9835
function copyData(node) {                                                                                              // 9836
  node.data = node.data.data;                                                                                          // 9837
}                                                                                                                      // 9838
                                                                                                                       // 9839
function computeHeight(node) {                                                                                         // 9840
  var height = 0;                                                                                                      // 9841
  do node.height = height;                                                                                             // 9842
  while ((node = node.parent) && (node.height < ++height));                                                            // 9843
}                                                                                                                      // 9844
                                                                                                                       // 9845
function Node(data) {                                                                                                  // 9846
  this.data = data;                                                                                                    // 9847
  this.depth =                                                                                                         // 9848
  this.height = 0;                                                                                                     // 9849
  this.parent = null;                                                                                                  // 9850
}                                                                                                                      // 9851
                                                                                                                       // 9852
Node.prototype = hierarchy.prototype = {                                                                               // 9853
  constructor: Node,                                                                                                   // 9854
  count: node_count,                                                                                                   // 9855
  each: node_each,                                                                                                     // 9856
  eachAfter: node_eachAfter,                                                                                           // 9857
  eachBefore: node_eachBefore,                                                                                         // 9858
  sum: node_sum,                                                                                                       // 9859
  sort: node_sort,                                                                                                     // 9860
  path: node_path,                                                                                                     // 9861
  ancestors: node_ancestors,                                                                                           // 9862
  descendants: node_descendants,                                                                                       // 9863
  leaves: node_leaves,                                                                                                 // 9864
  links: node_links,                                                                                                   // 9865
  copy: node_copy                                                                                                      // 9866
};                                                                                                                     // 9867
                                                                                                                       // 9868
function Node$2(value) {                                                                                               // 9869
  this._ = value;                                                                                                      // 9870
  this.next = null;                                                                                                    // 9871
}                                                                                                                      // 9872
                                                                                                                       // 9873
var shuffle$1 = function(array) {                                                                                      // 9874
  var i,                                                                                                               // 9875
      n = (array = array.slice()).length,                                                                              // 9876
      head = null,                                                                                                     // 9877
      node = head;                                                                                                     // 9878
                                                                                                                       // 9879
  while (n) {                                                                                                          // 9880
    var next = new Node$2(array[n - 1]);                                                                               // 9881
    if (node) node = node.next = next;                                                                                 // 9882
    else node = head = next;                                                                                           // 9883
    array[i] = array[--n];                                                                                             // 9884
  }                                                                                                                    // 9885
                                                                                                                       // 9886
  return {                                                                                                             // 9887
    head: head,                                                                                                        // 9888
    tail: node                                                                                                         // 9889
  };                                                                                                                   // 9890
};                                                                                                                     // 9891
                                                                                                                       // 9892
var enclose = function(circles) {                                                                                      // 9893
  return encloseN(shuffle$1(circles), []);                                                                             // 9894
};                                                                                                                     // 9895
                                                                                                                       // 9896
function encloses(a, b) {                                                                                              // 9897
  var dx = b.x - a.x,                                                                                                  // 9898
      dy = b.y - a.y,                                                                                                  // 9899
      dr = a.r - b.r;                                                                                                  // 9900
  return dr * dr + 1e-6 > dx * dx + dy * dy;                                                                           // 9901
}                                                                                                                      // 9902
                                                                                                                       // 9903
// Returns the smallest circle that contains circles L and intersects circles B.                                       // 9904
function encloseN(L, B) {                                                                                              // 9905
  var circle,                                                                                                          // 9906
      l0 = null,                                                                                                       // 9907
      l1 = L.head,                                                                                                     // 9908
      l2,                                                                                                              // 9909
      p1;                                                                                                              // 9910
                                                                                                                       // 9911
  switch (B.length) {                                                                                                  // 9912
    case 1: circle = enclose1(B[0]); break;                                                                            // 9913
    case 2: circle = enclose2(B[0], B[1]); break;                                                                      // 9914
    case 3: circle = enclose3(B[0], B[1], B[2]); break;                                                                // 9915
  }                                                                                                                    // 9916
                                                                                                                       // 9917
  while (l1) {                                                                                                         // 9918
    p1 = l1._, l2 = l1.next;                                                                                           // 9919
    if (!circle || !encloses(circle, p1)) {                                                                            // 9920
                                                                                                                       // 9921
      // Temporarily truncate L before l1.                                                                             // 9922
      if (l0) L.tail = l0, l0.next = null;                                                                             // 9923
      else L.head = L.tail = null;                                                                                     // 9924
                                                                                                                       // 9925
      B.push(p1);                                                                                                      // 9926
      circle = encloseN(L, B); // Note: reorders L!                                                                    // 9927
      B.pop();                                                                                                         // 9928
                                                                                                                       // 9929
      // Move l1 to the front of L and reconnect the truncated list L.                                                 // 9930
      if (L.head) l1.next = L.head, L.head = l1;                                                                       // 9931
      else l1.next = null, L.head = L.tail = l1;                                                                       // 9932
      l0 = L.tail, l0.next = l2;                                                                                       // 9933
                                                                                                                       // 9934
    } else {                                                                                                           // 9935
      l0 = l1;                                                                                                         // 9936
    }                                                                                                                  // 9937
    l1 = l2;                                                                                                           // 9938
  }                                                                                                                    // 9939
                                                                                                                       // 9940
  L.tail = l0;                                                                                                         // 9941
  return circle;                                                                                                       // 9942
}                                                                                                                      // 9943
                                                                                                                       // 9944
function enclose1(a) {                                                                                                 // 9945
  return {                                                                                                             // 9946
    x: a.x,                                                                                                            // 9947
    y: a.y,                                                                                                            // 9948
    r: a.r                                                                                                             // 9949
  };                                                                                                                   // 9950
}                                                                                                                      // 9951
                                                                                                                       // 9952
function enclose2(a, b) {                                                                                              // 9953
  var x1 = a.x, y1 = a.y, r1 = a.r,                                                                                    // 9954
      x2 = b.x, y2 = b.y, r2 = b.r,                                                                                    // 9955
      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,                                                                     // 9956
      l = Math.sqrt(x21 * x21 + y21 * y21);                                                                            // 9957
  return {                                                                                                             // 9958
    x: (x1 + x2 + x21 / l * r21) / 2,                                                                                  // 9959
    y: (y1 + y2 + y21 / l * r21) / 2,                                                                                  // 9960
    r: (l + r1 + r2) / 2                                                                                               // 9961
  };                                                                                                                   // 9962
}                                                                                                                      // 9963
                                                                                                                       // 9964
function enclose3(a, b, c) {                                                                                           // 9965
  var x1 = a.x, y1 = a.y, r1 = a.r,                                                                                    // 9966
      x2 = b.x, y2 = b.y, r2 = b.r,                                                                                    // 9967
      x3 = c.x, y3 = c.y, r3 = c.r,                                                                                    // 9968
      a2 = 2 * (x1 - x2),                                                                                              // 9969
      b2 = 2 * (y1 - y2),                                                                                              // 9970
      c2 = 2 * (r2 - r1),                                                                                              // 9971
      d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,                                                  // 9972
      a3 = 2 * (x1 - x3),                                                                                              // 9973
      b3 = 2 * (y1 - y3),                                                                                              // 9974
      c3 = 2 * (r3 - r1),                                                                                              // 9975
      d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,                                                  // 9976
      ab = a3 * b2 - a2 * b3,                                                                                          // 9977
      xa = (b2 * d3 - b3 * d2) / ab - x1,                                                                              // 9978
      xb = (b3 * c2 - b2 * c3) / ab,                                                                                   // 9979
      ya = (a3 * d2 - a2 * d3) / ab - y1,                                                                              // 9980
      yb = (a2 * c3 - a3 * c2) / ab,                                                                                   // 9981
      A = xb * xb + yb * yb - 1,                                                                                       // 9982
      B = 2 * (xa * xb + ya * yb + r1),                                                                                // 9983
      C = xa * xa + ya * ya - r1 * r1,                                                                                 // 9984
      r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);                                                               // 9985
  return {                                                                                                             // 9986
    x: xa + xb * r + x1,                                                                                               // 9987
    y: ya + yb * r + y1,                                                                                               // 9988
    r: r                                                                                                               // 9989
  };                                                                                                                   // 9990
}                                                                                                                      // 9991
                                                                                                                       // 9992
function place(a, b, c) {                                                                                              // 9993
  var ax = a.x,                                                                                                        // 9994
      ay = a.y,                                                                                                        // 9995
      da = b.r + c.r,                                                                                                  // 9996
      db = a.r + c.r,                                                                                                  // 9997
      dx = b.x - ax,                                                                                                   // 9998
      dy = b.y - ay,                                                                                                   // 9999
      dc = dx * dx + dy * dy;                                                                                          // 10000
  if (dc) {                                                                                                            // 10001
    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),                                                                // 10002
        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);                         // 10003
    c.x = ax + x * dx + y * dy;                                                                                        // 10004
    c.y = ay + x * dy - y * dx;                                                                                        // 10005
  } else {                                                                                                             // 10006
    c.x = ax + db;                                                                                                     // 10007
    c.y = ay;                                                                                                          // 10008
  }                                                                                                                    // 10009
}                                                                                                                      // 10010
                                                                                                                       // 10011
function intersects(a, b) {                                                                                            // 10012
  var dx = b.x - a.x,                                                                                                  // 10013
      dy = b.y - a.y,                                                                                                  // 10014
      dr = a.r + b.r;                                                                                                  // 10015
  return dr * dr - 1e-6 > dx * dx + dy * dy;                                                                           // 10016
}                                                                                                                      // 10017
                                                                                                                       // 10018
function distance2(node, x, y) {                                                                                       // 10019
  var a = node._,                                                                                                      // 10020
      b = node.next._,                                                                                                 // 10021
      ab = a.r + b.r,                                                                                                  // 10022
      dx = (a.x * b.r + b.x * a.r) / ab - x,                                                                           // 10023
      dy = (a.y * b.r + b.y * a.r) / ab - y;                                                                           // 10024
  return dx * dx + dy * dy;                                                                                            // 10025
}                                                                                                                      // 10026
                                                                                                                       // 10027
function Node$1(circle) {                                                                                              // 10028
  this._ = circle;                                                                                                     // 10029
  this.next = null;                                                                                                    // 10030
  this.previous = null;                                                                                                // 10031
}                                                                                                                      // 10032
                                                                                                                       // 10033
function packEnclose(circles) {                                                                                        // 10034
  if (!(n = circles.length)) return 0;                                                                                 // 10035
                                                                                                                       // 10036
  var a, b, c, n;                                                                                                      // 10037
                                                                                                                       // 10038
  // Place the first circle.                                                                                           // 10039
  a = circles[0], a.x = 0, a.y = 0;                                                                                    // 10040
  if (!(n > 1)) return a.r;                                                                                            // 10041
                                                                                                                       // 10042
  // Place the second circle.                                                                                          // 10043
  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;                                                                      // 10044
  if (!(n > 2)) return a.r + b.r;                                                                                      // 10045
                                                                                                                       // 10046
  // Place the third circle.                                                                                           // 10047
  place(b, a, c = circles[2]);                                                                                         // 10048
                                                                                                                       // 10049
  // Initialize the weighted centroid.                                                                                 // 10050
  var aa = a.r * a.r,                                                                                                  // 10051
      ba = b.r * b.r,                                                                                                  // 10052
      ca = c.r * c.r,                                                                                                  // 10053
      oa = aa + ba + ca,                                                                                               // 10054
      ox = aa * a.x + ba * b.x + ca * c.x,                                                                             // 10055
      oy = aa * a.y + ba * b.y + ca * c.y,                                                                             // 10056
      cx, cy, i, j, k, sj, sk;                                                                                         // 10057
                                                                                                                       // 10058
  // Initialize the front-chain using the first three circles a, b and c.                                              // 10059
  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);                                                             // 10060
  a.next = c.previous = b;                                                                                             // 10061
  b.next = a.previous = c;                                                                                             // 10062
  c.next = b.previous = a;                                                                                             // 10063
                                                                                                                       // 10064
  // Attempt to place each remaining circle…                                                                           // 10065
  pack: for (i = 3; i < n; ++i) {                                                                                      // 10066
    place(a._, b._, c = circles[i]), c = new Node$1(c);                                                                // 10067
                                                                                                                       // 10068
    // Find the closest intersecting circle on the front-chain, if any.                                                // 10069
    // “Closeness” is determined by linear distance along the front-chain.                                             // 10070
    // “Ahead” or “behind” is likewise determined by linear distance.                                                  // 10071
    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;                                                                // 10072
    do {                                                                                                               // 10073
      if (sj <= sk) {                                                                                                  // 10074
        if (intersects(j._, c._)) {                                                                                    // 10075
          b = j, a.next = b, b.previous = a, --i;                                                                      // 10076
          continue pack;                                                                                               // 10077
        }                                                                                                              // 10078
        sj += j._.r, j = j.next;                                                                                       // 10079
      } else {                                                                                                         // 10080
        if (intersects(k._, c._)) {                                                                                    // 10081
          a = k, a.next = b, b.previous = a, --i;                                                                      // 10082
          continue pack;                                                                                               // 10083
        }                                                                                                              // 10084
        sk += k._.r, k = k.previous;                                                                                   // 10085
      }                                                                                                                // 10086
    } while (j !== k.next);                                                                                            // 10087
                                                                                                                       // 10088
    // Success! Insert the new circle c between a and b.                                                               // 10089
    c.previous = a, c.next = b, a.next = b.previous = b = c;                                                           // 10090
                                                                                                                       // 10091
    // Update the weighted centroid.                                                                                   // 10092
    oa += ca = c._.r * c._.r;                                                                                          // 10093
    ox += ca * c._.x;                                                                                                  // 10094
    oy += ca * c._.y;                                                                                                  // 10095
                                                                                                                       // 10096
    // Compute the new closest circle pair to the centroid.                                                            // 10097
    aa = distance2(a, cx = ox / oa, cy = oy / oa);                                                                     // 10098
    while ((c = c.next) !== b) {                                                                                       // 10099
      if ((ca = distance2(c, cx, cy)) < aa) {                                                                          // 10100
        a = c, aa = ca;                                                                                                // 10101
      }                                                                                                                // 10102
    }                                                                                                                  // 10103
    b = a.next;                                                                                                        // 10104
  }                                                                                                                    // 10105
                                                                                                                       // 10106
  // Compute the enclosing circle of the front chain.                                                                  // 10107
  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);                                            // 10108
                                                                                                                       // 10109
  // Translate the circles to put the enclosing circle around the origin.                                              // 10110
  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;                                                      // 10111
                                                                                                                       // 10112
  return c.r;                                                                                                          // 10113
}                                                                                                                      // 10114
                                                                                                                       // 10115
var siblings = function(circles) {                                                                                     // 10116
  packEnclose(circles);                                                                                                // 10117
  return circles;                                                                                                      // 10118
};                                                                                                                     // 10119
                                                                                                                       // 10120
function optional(f) {                                                                                                 // 10121
  return f == null ? null : required(f);                                                                               // 10122
}                                                                                                                      // 10123
                                                                                                                       // 10124
function required(f) {                                                                                                 // 10125
  if (typeof f !== "function") throw new Error;                                                                        // 10126
  return f;                                                                                                            // 10127
}                                                                                                                      // 10128
                                                                                                                       // 10129
function constantZero() {                                                                                              // 10130
  return 0;                                                                                                            // 10131
}                                                                                                                      // 10132
                                                                                                                       // 10133
var constant$8 = function(x) {                                                                                         // 10134
  return function() {                                                                                                  // 10135
    return x;                                                                                                          // 10136
  };                                                                                                                   // 10137
};                                                                                                                     // 10138
                                                                                                                       // 10139
function defaultRadius$1(d) {                                                                                          // 10140
  return Math.sqrt(d.value);                                                                                           // 10141
}                                                                                                                      // 10142
                                                                                                                       // 10143
var index$2 = function() {                                                                                             // 10144
  var radius = null,                                                                                                   // 10145
      dx = 1,                                                                                                          // 10146
      dy = 1,                                                                                                          // 10147
      padding = constantZero;                                                                                          // 10148
                                                                                                                       // 10149
  function pack(root) {                                                                                                // 10150
    root.x = dx / 2, root.y = dy / 2;                                                                                  // 10151
    if (radius) {                                                                                                      // 10152
      root.eachBefore(radiusLeaf(radius))                                                                              // 10153
          .eachAfter(packChildren(padding, 0.5))                                                                       // 10154
          .eachBefore(translateChild(1));                                                                              // 10155
    } else {                                                                                                           // 10156
      root.eachBefore(radiusLeaf(defaultRadius$1))                                                                     // 10157
          .eachAfter(packChildren(constantZero, 1))                                                                    // 10158
          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))                                                 // 10159
          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));                                                // 10160
    }                                                                                                                  // 10161
    return root;                                                                                                       // 10162
  }                                                                                                                    // 10163
                                                                                                                       // 10164
  pack.radius = function(x) {                                                                                          // 10165
    return arguments.length ? (radius = optional(x), pack) : radius;                                                   // 10166
  };                                                                                                                   // 10167
                                                                                                                       // 10168
  pack.size = function(x) {                                                                                            // 10169
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];                                               // 10170
  };                                                                                                                   // 10171
                                                                                                                       // 10172
  pack.padding = function(x) {                                                                                         // 10173
    return arguments.length ? (padding = typeof x === "function" ? x : constant$8(+x), pack) : padding;                // 10174
  };                                                                                                                   // 10175
                                                                                                                       // 10176
  return pack;                                                                                                         // 10177
};                                                                                                                     // 10178
                                                                                                                       // 10179
function radiusLeaf(radius) {                                                                                          // 10180
  return function(node) {                                                                                              // 10181
    if (!node.children) {                                                                                              // 10182
      node.r = Math.max(0, +radius(node) || 0);                                                                        // 10183
    }                                                                                                                  // 10184
  };                                                                                                                   // 10185
}                                                                                                                      // 10186
                                                                                                                       // 10187
function packChildren(padding, k) {                                                                                    // 10188
  return function(node) {                                                                                              // 10189
    if (children = node.children) {                                                                                    // 10190
      var children,                                                                                                    // 10191
          i,                                                                                                           // 10192
          n = children.length,                                                                                         // 10193
          r = padding(node) * k || 0,                                                                                  // 10194
          e;                                                                                                           // 10195
                                                                                                                       // 10196
      if (r) for (i = 0; i < n; ++i) children[i].r += r;                                                               // 10197
      e = packEnclose(children);                                                                                       // 10198
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;                                                               // 10199
      node.r = e + r;                                                                                                  // 10200
    }                                                                                                                  // 10201
  };                                                                                                                   // 10202
}                                                                                                                      // 10203
                                                                                                                       // 10204
function translateChild(k) {                                                                                           // 10205
  return function(node) {                                                                                              // 10206
    var parent = node.parent;                                                                                          // 10207
    node.r *= k;                                                                                                       // 10208
    if (parent) {                                                                                                      // 10209
      node.x = parent.x + k * node.x;                                                                                  // 10210
      node.y = parent.y + k * node.y;                                                                                  // 10211
    }                                                                                                                  // 10212
  };                                                                                                                   // 10213
}                                                                                                                      // 10214
                                                                                                                       // 10215
var roundNode = function(node) {                                                                                       // 10216
  node.x0 = Math.round(node.x0);                                                                                       // 10217
  node.y0 = Math.round(node.y0);                                                                                       // 10218
  node.x1 = Math.round(node.x1);                                                                                       // 10219
  node.y1 = Math.round(node.y1);                                                                                       // 10220
};                                                                                                                     // 10221
                                                                                                                       // 10222
var treemapDice = function(parent, x0, y0, x1, y1) {                                                                   // 10223
  var nodes = parent.children,                                                                                         // 10224
      node,                                                                                                            // 10225
      i = -1,                                                                                                          // 10226
      n = nodes.length,                                                                                                // 10227
      k = parent.value && (x1 - x0) / parent.value;                                                                    // 10228
                                                                                                                       // 10229
  while (++i < n) {                                                                                                    // 10230
    node = nodes[i], node.y0 = y0, node.y1 = y1;                                                                       // 10231
    node.x0 = x0, node.x1 = x0 += node.value * k;                                                                      // 10232
  }                                                                                                                    // 10233
};                                                                                                                     // 10234
                                                                                                                       // 10235
var partition = function() {                                                                                           // 10236
  var dx = 1,                                                                                                          // 10237
      dy = 1,                                                                                                          // 10238
      padding = 0,                                                                                                     // 10239
      round = false;                                                                                                   // 10240
                                                                                                                       // 10241
  function partition(root) {                                                                                           // 10242
    var n = root.height + 1;                                                                                           // 10243
    root.x0 =                                                                                                          // 10244
    root.y0 = padding;                                                                                                 // 10245
    root.x1 = dx;                                                                                                      // 10246
    root.y1 = dy / n;                                                                                                  // 10247
    root.eachBefore(positionNode(dy, n));                                                                              // 10248
    if (round) root.eachBefore(roundNode);                                                                             // 10249
    return root;                                                                                                       // 10250
  }                                                                                                                    // 10251
                                                                                                                       // 10252
  function positionNode(dy, n) {                                                                                       // 10253
    return function(node) {                                                                                            // 10254
      if (node.children) {                                                                                             // 10255
        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);                     // 10256
      }                                                                                                                // 10257
      var x0 = node.x0,                                                                                                // 10258
          y0 = node.y0,                                                                                                // 10259
          x1 = node.x1 - padding,                                                                                      // 10260
          y1 = node.y1 - padding;                                                                                      // 10261
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;                                                                            // 10262
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;                                                                            // 10263
      node.x0 = x0;                                                                                                    // 10264
      node.y0 = y0;                                                                                                    // 10265
      node.x1 = x1;                                                                                                    // 10266
      node.y1 = y1;                                                                                                    // 10267
    };                                                                                                                 // 10268
  }                                                                                                                    // 10269
                                                                                                                       // 10270
  partition.round = function(x) {                                                                                      // 10271
    return arguments.length ? (round = !!x, partition) : round;                                                        // 10272
  };                                                                                                                   // 10273
                                                                                                                       // 10274
  partition.size = function(x) {                                                                                       // 10275
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];                                          // 10276
  };                                                                                                                   // 10277
                                                                                                                       // 10278
  partition.padding = function(x) {                                                                                    // 10279
    return arguments.length ? (padding = +x, partition) : padding;                                                     // 10280
  };                                                                                                                   // 10281
                                                                                                                       // 10282
  return partition;                                                                                                    // 10283
};                                                                                                                     // 10284
                                                                                                                       // 10285
var keyPrefix$1 = "$";                                                                                                 // 10286
var preroot = {depth: -1};                                                                                             // 10287
var ambiguous = {};                                                                                                    // 10288
                                                                                                                       // 10289
function defaultId(d) {                                                                                                // 10290
  return d.id;                                                                                                         // 10291
}                                                                                                                      // 10292
                                                                                                                       // 10293
function defaultParentId(d) {                                                                                          // 10294
  return d.parentId;                                                                                                   // 10295
}                                                                                                                      // 10296
                                                                                                                       // 10297
var stratify = function() {                                                                                            // 10298
  var id = defaultId,                                                                                                  // 10299
      parentId = defaultParentId;                                                                                      // 10300
                                                                                                                       // 10301
  function stratify(data) {                                                                                            // 10302
    var d,                                                                                                             // 10303
        i,                                                                                                             // 10304
        n = data.length,                                                                                               // 10305
        root,                                                                                                          // 10306
        parent,                                                                                                        // 10307
        node,                                                                                                          // 10308
        nodes = new Array(n),                                                                                          // 10309
        nodeId,                                                                                                        // 10310
        nodeKey,                                                                                                       // 10311
        nodeByKey = {};                                                                                                // 10312
                                                                                                                       // 10313
    for (i = 0; i < n; ++i) {                                                                                          // 10314
      d = data[i], node = nodes[i] = new Node(d);                                                                      // 10315
      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {                                                       // 10316
        nodeKey = keyPrefix$1 + (node.id = nodeId);                                                                    // 10317
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;                                                  // 10318
      }                                                                                                                // 10319
    }                                                                                                                  // 10320
                                                                                                                       // 10321
    for (i = 0; i < n; ++i) {                                                                                          // 10322
      node = nodes[i], nodeId = parentId(data[i], i, data);                                                            // 10323
      if (nodeId == null || !(nodeId += "")) {                                                                         // 10324
        if (root) throw new Error("multiple roots");                                                                   // 10325
        root = node;                                                                                                   // 10326
      } else {                                                                                                         // 10327
        parent = nodeByKey[keyPrefix$1 + nodeId];                                                                      // 10328
        if (!parent) throw new Error("missing: " + nodeId);                                                            // 10329
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);                                             // 10330
        if (parent.children) parent.children.push(node);                                                               // 10331
        else parent.children = [node];                                                                                 // 10332
        node.parent = parent;                                                                                          // 10333
      }                                                                                                                // 10334
    }                                                                                                                  // 10335
                                                                                                                       // 10336
    if (!root) throw new Error("no root");                                                                             // 10337
    root.parent = preroot;                                                                                             // 10338
    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);            // 10339
    root.parent = null;                                                                                                // 10340
    if (n > 0) throw new Error("cycle");                                                                               // 10341
                                                                                                                       // 10342
    return root;                                                                                                       // 10343
  }                                                                                                                    // 10344
                                                                                                                       // 10345
  stratify.id = function(x) {                                                                                          // 10346
    return arguments.length ? (id = required(x), stratify) : id;                                                       // 10347
  };                                                                                                                   // 10348
                                                                                                                       // 10349
  stratify.parentId = function(x) {                                                                                    // 10350
    return arguments.length ? (parentId = required(x), stratify) : parentId;                                           // 10351
  };                                                                                                                   // 10352
                                                                                                                       // 10353
  return stratify;                                                                                                     // 10354
};                                                                                                                     // 10355
                                                                                                                       // 10356
function defaultSeparation$1(a, b) {                                                                                   // 10357
  return a.parent === b.parent ? 1 : 2;                                                                                // 10358
}                                                                                                                      // 10359
                                                                                                                       // 10360
// function radialSeparation(a, b) {                                                                                   // 10361
//   return (a.parent === b.parent ? 1 : 2) / a.depth;                                                                 // 10362
// }                                                                                                                   // 10363
                                                                                                                       // 10364
// This function is used to traverse the left contour of a subtree (or                                                 // 10365
// subforest). It returns the successor of v on this contour. This successor is                                        // 10366
// either given by the leftmost child of v or by the thread of v. The function                                         // 10367
// returns null if and only if v is on the highest level of its subtree.                                               // 10368
function nextLeft(v) {                                                                                                 // 10369
  var children = v.children;                                                                                           // 10370
  return children ? children[0] : v.t;                                                                                 // 10371
}                                                                                                                      // 10372
                                                                                                                       // 10373
// This function works analogously to nextLeft.                                                                        // 10374
function nextRight(v) {                                                                                                // 10375
  var children = v.children;                                                                                           // 10376
  return children ? children[children.length - 1] : v.t;                                                               // 10377
}                                                                                                                      // 10378
                                                                                                                       // 10379
// Shifts the current subtree rooted at w+. This is done by increasing                                                 // 10380
// prelim(w+) and mod(w+) by shift.                                                                                    // 10381
function moveSubtree(wm, wp, shift) {                                                                                  // 10382
  var change = shift / (wp.i - wm.i);                                                                                  // 10383
  wp.c -= change;                                                                                                      // 10384
  wp.s += shift;                                                                                                       // 10385
  wm.c += change;                                                                                                      // 10386
  wp.z += shift;                                                                                                       // 10387
  wp.m += shift;                                                                                                       // 10388
}                                                                                                                      // 10389
                                                                                                                       // 10390
// All other shifts, applied to the smaller subtrees between w- and w+, are                                            // 10391
// performed by this function. To prepare the shifts, we have to adjust                                                // 10392
// change(w+), shift(w+), and change(w-).                                                                              // 10393
function executeShifts(v) {                                                                                            // 10394
  var shift = 0,                                                                                                       // 10395
      change = 0,                                                                                                      // 10396
      children = v.children,                                                                                           // 10397
      i = children.length,                                                                                             // 10398
      w;                                                                                                               // 10399
  while (--i >= 0) {                                                                                                   // 10400
    w = children[i];                                                                                                   // 10401
    w.z += shift;                                                                                                      // 10402
    w.m += shift;                                                                                                      // 10403
    shift += w.s + (change += w.c);                                                                                    // 10404
  }                                                                                                                    // 10405
}                                                                                                                      // 10406
                                                                                                                       // 10407
// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,                                             // 10408
// returns the specified (default) ancestor.                                                                           // 10409
function nextAncestor(vim, v, ancestor) {                                                                              // 10410
  return vim.a.parent === v.parent ? vim.a : ancestor;                                                                 // 10411
}                                                                                                                      // 10412
                                                                                                                       // 10413
function TreeNode(node, i) {                                                                                           // 10414
  this._ = node;                                                                                                       // 10415
  this.parent = null;                                                                                                  // 10416
  this.children = null;                                                                                                // 10417
  this.A = null; // default ancestor                                                                                   // 10418
  this.a = this; // ancestor                                                                                           // 10419
  this.z = 0; // prelim                                                                                                // 10420
  this.m = 0; // mod                                                                                                   // 10421
  this.c = 0; // change                                                                                                // 10422
  this.s = 0; // shift                                                                                                 // 10423
  this.t = null; // thread                                                                                             // 10424
  this.i = i; // number                                                                                                // 10425
}                                                                                                                      // 10426
                                                                                                                       // 10427
TreeNode.prototype = Object.create(Node.prototype);                                                                    // 10428
                                                                                                                       // 10429
function treeRoot(root) {                                                                                              // 10430
  var tree = new TreeNode(root, 0),                                                                                    // 10431
      node,                                                                                                            // 10432
      nodes = [tree],                                                                                                  // 10433
      child,                                                                                                           // 10434
      children,                                                                                                        // 10435
      i,                                                                                                               // 10436
      n;                                                                                                               // 10437
                                                                                                                       // 10438
  while (node = nodes.pop()) {                                                                                         // 10439
    if (children = node._.children) {                                                                                  // 10440
      node.children = new Array(n = children.length);                                                                  // 10441
      for (i = n - 1; i >= 0; --i) {                                                                                   // 10442
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));                                           // 10443
        child.parent = node;                                                                                           // 10444
      }                                                                                                                // 10445
    }                                                                                                                  // 10446
  }                                                                                                                    // 10447
                                                                                                                       // 10448
  (tree.parent = new TreeNode(null, 0)).children = [tree];                                                             // 10449
  return tree;                                                                                                         // 10450
}                                                                                                                      // 10451
                                                                                                                       // 10452
// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm                                                  // 10453
var tree = function() {                                                                                                // 10454
  var separation = defaultSeparation$1,                                                                                // 10455
      dx = 1,                                                                                                          // 10456
      dy = 1,                                                                                                          // 10457
      nodeSize = null;                                                                                                 // 10458
                                                                                                                       // 10459
  function tree(root) {                                                                                                // 10460
    var t = treeRoot(root);                                                                                            // 10461
                                                                                                                       // 10462
    // Compute the layout using Buchheim et al.’s algorithm.                                                           // 10463
    t.eachAfter(firstWalk), t.parent.m = -t.z;                                                                         // 10464
    t.eachBefore(secondWalk);                                                                                          // 10465
                                                                                                                       // 10466
    // If a fixed node size is specified, scale x and y.                                                               // 10467
    if (nodeSize) root.eachBefore(sizeNode);                                                                           // 10468
                                                                                                                       // 10469
    // If a fixed tree size is specified, scale x and y based on the extent.                                           // 10470
    // Compute the left-most, right-most, and depth-most nodes for extents.                                            // 10471
    else {                                                                                                             // 10472
      var left = root,                                                                                                 // 10473
          right = root,                                                                                                // 10474
          bottom = root;                                                                                               // 10475
      root.eachBefore(function(node) {                                                                                 // 10476
        if (node.x < left.x) left = node;                                                                              // 10477
        if (node.x > right.x) right = node;                                                                            // 10478
        if (node.depth > bottom.depth) bottom = node;                                                                  // 10479
      });                                                                                                              // 10480
      var s = left === right ? 1 : separation(left, right) / 2,                                                        // 10481
          tx = s - left.x,                                                                                             // 10482
          kx = dx / (right.x + s + tx),                                                                                // 10483
          ky = dy / (bottom.depth || 1);                                                                               // 10484
      root.eachBefore(function(node) {                                                                                 // 10485
        node.x = (node.x + tx) * kx;                                                                                   // 10486
        node.y = node.depth * ky;                                                                                      // 10487
      });                                                                                                              // 10488
    }                                                                                                                  // 10489
                                                                                                                       // 10490
    return root;                                                                                                       // 10491
  }                                                                                                                    // 10492
                                                                                                                       // 10493
  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is                                             // 10494
  // applied recursively to the children of v, as well as the function                                                 // 10495
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the                                          // 10496
  // node v is placed to the midpoint of its outermost children.                                                       // 10497
  function firstWalk(v) {                                                                                              // 10498
    var children = v.children,                                                                                         // 10499
        siblings = v.parent.children,                                                                                  // 10500
        w = v.i ? siblings[v.i - 1] : null;                                                                            // 10501
    if (children) {                                                                                                    // 10502
      executeShifts(v);                                                                                                // 10503
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;                                            // 10504
      if (w) {                                                                                                         // 10505
        v.z = w.z + separation(v._, w._);                                                                              // 10506
        v.m = v.z - midpoint;                                                                                          // 10507
      } else {                                                                                                         // 10508
        v.z = midpoint;                                                                                                // 10509
      }                                                                                                                // 10510
    } else if (w) {                                                                                                    // 10511
      v.z = w.z + separation(v._, w._);                                                                                // 10512
    }                                                                                                                  // 10513
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);                                                           // 10514
  }                                                                                                                    // 10515
                                                                                                                       // 10516
  // Computes all real x-coordinates by summing up the modifiers recursively.                                          // 10517
  function secondWalk(v) {                                                                                             // 10518
    v._.x = v.z + v.parent.m;                                                                                          // 10519
    v.m += v.parent.m;                                                                                                 // 10520
  }                                                                                                                    // 10521
                                                                                                                       // 10522
  // The core of the algorithm. Here, a new subtree is combined with the                                               // 10523
  // previous subtrees. Threads are used to traverse the inside and outside                                            // 10524
  // contours of the left and right subtree up to the highest common level. The                                        // 10525
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the                                            // 10526
  // superscript o means outside and i means inside, the subscript - means left                                        // 10527
  // subtree and + means right subtree. For summing up the modifiers along the                                         // 10528
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two                                         // 10529
  // nodes of the inside contours conflict, we compute the left one of the                                             // 10530
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE                                             // 10531
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.                                          // 10532
  // Finally, we add a new thread (if necessary).                                                                      // 10533
  function apportion(v, w, ancestor) {                                                                                 // 10534
    if (w) {                                                                                                           // 10535
      var vip = v,                                                                                                     // 10536
          vop = v,                                                                                                     // 10537
          vim = w,                                                                                                     // 10538
          vom = vip.parent.children[0],                                                                                // 10539
          sip = vip.m,                                                                                                 // 10540
          sop = vop.m,                                                                                                 // 10541
          sim = vim.m,                                                                                                 // 10542
          som = vom.m,                                                                                                 // 10543
          shift;                                                                                                       // 10544
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {                                                  // 10545
        vom = nextLeft(vom);                                                                                           // 10546
        vop = nextRight(vop);                                                                                          // 10547
        vop.a = v;                                                                                                     // 10548
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);                                                  // 10549
        if (shift > 0) {                                                                                               // 10550
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);                                                       // 10551
          sip += shift;                                                                                                // 10552
          sop += shift;                                                                                                // 10553
        }                                                                                                              // 10554
        sim += vim.m;                                                                                                  // 10555
        sip += vip.m;                                                                                                  // 10556
        som += vom.m;                                                                                                  // 10557
        sop += vop.m;                                                                                                  // 10558
      }                                                                                                                // 10559
      if (vim && !nextRight(vop)) {                                                                                    // 10560
        vop.t = vim;                                                                                                   // 10561
        vop.m += sim - sop;                                                                                            // 10562
      }                                                                                                                // 10563
      if (vip && !nextLeft(vom)) {                                                                                     // 10564
        vom.t = vip;                                                                                                   // 10565
        vom.m += sip - som;                                                                                            // 10566
        ancestor = v;                                                                                                  // 10567
      }                                                                                                                // 10568
    }                                                                                                                  // 10569
    return ancestor;                                                                                                   // 10570
  }                                                                                                                    // 10571
                                                                                                                       // 10572
  function sizeNode(node) {                                                                                            // 10573
    node.x *= dx;                                                                                                      // 10574
    node.y = node.depth * dy;                                                                                          // 10575
  }                                                                                                                    // 10576
                                                                                                                       // 10577
  tree.separation = function(x) {                                                                                      // 10578
    return arguments.length ? (separation = x, tree) : separation;                                                     // 10579
  };                                                                                                                   // 10580
                                                                                                                       // 10581
  tree.size = function(x) {                                                                                            // 10582
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);         // 10583
  };                                                                                                                   // 10584
                                                                                                                       // 10585
  tree.nodeSize = function(x) {                                                                                        // 10586
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);          // 10587
  };                                                                                                                   // 10588
                                                                                                                       // 10589
  return tree;                                                                                                         // 10590
};                                                                                                                     // 10591
                                                                                                                       // 10592
var treemapSlice = function(parent, x0, y0, x1, y1) {                                                                  // 10593
  var nodes = parent.children,                                                                                         // 10594
      node,                                                                                                            // 10595
      i = -1,                                                                                                          // 10596
      n = nodes.length,                                                                                                // 10597
      k = parent.value && (y1 - y0) / parent.value;                                                                    // 10598
                                                                                                                       // 10599
  while (++i < n) {                                                                                                    // 10600
    node = nodes[i], node.x0 = x0, node.x1 = x1;                                                                       // 10601
    node.y0 = y0, node.y1 = y0 += node.value * k;                                                                      // 10602
  }                                                                                                                    // 10603
};                                                                                                                     // 10604
                                                                                                                       // 10605
var phi = (1 + Math.sqrt(5)) / 2;                                                                                      // 10606
                                                                                                                       // 10607
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {                                                                // 10608
  var rows = [],                                                                                                       // 10609
      nodes = parent.children,                                                                                         // 10610
      row,                                                                                                             // 10611
      nodeValue,                                                                                                       // 10612
      i0 = 0,                                                                                                          // 10613
      i1 = 0,                                                                                                          // 10614
      n = nodes.length,                                                                                                // 10615
      dx, dy,                                                                                                          // 10616
      value = parent.value,                                                                                            // 10617
      sumValue,                                                                                                        // 10618
      minValue,                                                                                                        // 10619
      maxValue,                                                                                                        // 10620
      newRatio,                                                                                                        // 10621
      minRatio,                                                                                                        // 10622
      alpha,                                                                                                           // 10623
      beta;                                                                                                            // 10624
                                                                                                                       // 10625
  while (i0 < n) {                                                                                                     // 10626
    dx = x1 - x0, dy = y1 - y0;                                                                                        // 10627
                                                                                                                       // 10628
    // Find the next non-empty node.                                                                                   // 10629
    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);                                                      // 10630
    minValue = maxValue = sumValue;                                                                                    // 10631
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);                                                              // 10632
    beta = sumValue * sumValue * alpha;                                                                                // 10633
    minRatio = Math.max(maxValue / beta, beta / minValue);                                                             // 10634
                                                                                                                       // 10635
    // Keep adding nodes while the aspect ratio maintains or improves.                                                 // 10636
    for (; i1 < n; ++i1) {                                                                                             // 10637
      sumValue += nodeValue = nodes[i1].value;                                                                         // 10638
      if (nodeValue < minValue) minValue = nodeValue;                                                                  // 10639
      if (nodeValue > maxValue) maxValue = nodeValue;                                                                  // 10640
      beta = sumValue * sumValue * alpha;                                                                              // 10641
      newRatio = Math.max(maxValue / beta, beta / minValue);                                                           // 10642
      if (newRatio > minRatio) { sumValue -= nodeValue; break; }                                                       // 10643
      minRatio = newRatio;                                                                                             // 10644
    }                                                                                                                  // 10645
                                                                                                                       // 10646
    // Position and record the row orientation.                                                                        // 10647
    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});                                  // 10648
    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);                              // 10649
    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);                                      // 10650
    value -= sumValue, i0 = i1;                                                                                        // 10651
  }                                                                                                                    // 10652
                                                                                                                       // 10653
  return rows;                                                                                                         // 10654
}                                                                                                                      // 10655
                                                                                                                       // 10656
var squarify = ((function custom(ratio) {                                                                              // 10657
                                                                                                                       // 10658
  function squarify(parent, x0, y0, x1, y1) {                                                                          // 10659
    squarifyRatio(ratio, parent, x0, y0, x1, y1);                                                                      // 10660
  }                                                                                                                    // 10661
                                                                                                                       // 10662
  squarify.ratio = function(x) {                                                                                       // 10663
    return custom((x = +x) > 1 ? x : 1);                                                                               // 10664
  };                                                                                                                   // 10665
                                                                                                                       // 10666
  return squarify;                                                                                                     // 10667
}))(phi);                                                                                                              // 10668
                                                                                                                       // 10669
var index$3 = function() {                                                                                             // 10670
  var tile = squarify,                                                                                                 // 10671
      round = false,                                                                                                   // 10672
      dx = 1,                                                                                                          // 10673
      dy = 1,                                                                                                          // 10674
      paddingStack = [0],                                                                                              // 10675
      paddingInner = constantZero,                                                                                     // 10676
      paddingTop = constantZero,                                                                                       // 10677
      paddingRight = constantZero,                                                                                     // 10678
      paddingBottom = constantZero,                                                                                    // 10679
      paddingLeft = constantZero;                                                                                      // 10680
                                                                                                                       // 10681
  function treemap(root) {                                                                                             // 10682
    root.x0 =                                                                                                          // 10683
    root.y0 = 0;                                                                                                       // 10684
    root.x1 = dx;                                                                                                      // 10685
    root.y1 = dy;                                                                                                      // 10686
    root.eachBefore(positionNode);                                                                                     // 10687
    paddingStack = [0];                                                                                                // 10688
    if (round) root.eachBefore(roundNode);                                                                             // 10689
    return root;                                                                                                       // 10690
  }                                                                                                                    // 10691
                                                                                                                       // 10692
  function positionNode(node) {                                                                                        // 10693
    var p = paddingStack[node.depth],                                                                                  // 10694
        x0 = node.x0 + p,                                                                                              // 10695
        y0 = node.y0 + p,                                                                                              // 10696
        x1 = node.x1 - p,                                                                                              // 10697
        y1 = node.y1 - p;                                                                                              // 10698
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;                                                                              // 10699
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;                                                                              // 10700
    node.x0 = x0;                                                                                                      // 10701
    node.y0 = y0;                                                                                                      // 10702
    node.x1 = x1;                                                                                                      // 10703
    node.y1 = y1;                                                                                                      // 10704
    if (node.children) {                                                                                               // 10705
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;                                                       // 10706
      x0 += paddingLeft(node) - p;                                                                                     // 10707
      y0 += paddingTop(node) - p;                                                                                      // 10708
      x1 -= paddingRight(node) - p;                                                                                    // 10709
      y1 -= paddingBottom(node) - p;                                                                                   // 10710
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;                                                                            // 10711
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;                                                                            // 10712
      tile(node, x0, y0, x1, y1);                                                                                      // 10713
    }                                                                                                                  // 10714
  }                                                                                                                    // 10715
                                                                                                                       // 10716
  treemap.round = function(x) {                                                                                        // 10717
    return arguments.length ? (round = !!x, treemap) : round;                                                          // 10718
  };                                                                                                                   // 10719
                                                                                                                       // 10720
  treemap.size = function(x) {                                                                                         // 10721
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];                                            // 10722
  };                                                                                                                   // 10723
                                                                                                                       // 10724
  treemap.tile = function(x) {                                                                                         // 10725
    return arguments.length ? (tile = required(x), treemap) : tile;                                                    // 10726
  };                                                                                                                   // 10727
                                                                                                                       // 10728
  treemap.padding = function(x) {                                                                                      // 10729
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();                        // 10730
  };                                                                                                                   // 10731
                                                                                                                       // 10732
  treemap.paddingInner = function(x) {                                                                                 // 10733
    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$8(+x), treemap) : paddingInner;   // 10734
  };                                                                                                                   // 10735
                                                                                                                       // 10736
  treemap.paddingOuter = function(x) {                                                                                 // 10737
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };                                                                                                                   // 10739
                                                                                                                       // 10740
  treemap.paddingTop = function(x) {                                                                                   // 10741
    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$8(+x), treemap) : paddingTop;       // 10742
  };                                                                                                                   // 10743
                                                                                                                       // 10744
  treemap.paddingRight = function(x) {                                                                                 // 10745
    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$8(+x), treemap) : paddingRight;   // 10746
  };                                                                                                                   // 10747
                                                                                                                       // 10748
  treemap.paddingBottom = function(x) {                                                                                // 10749
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$8(+x), treemap) : paddingBottom;
  };                                                                                                                   // 10751
                                                                                                                       // 10752
  treemap.paddingLeft = function(x) {                                                                                  // 10753
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$8(+x), treemap) : paddingLeft;     // 10754
  };                                                                                                                   // 10755
                                                                                                                       // 10756
  return treemap;                                                                                                      // 10757
};                                                                                                                     // 10758
                                                                                                                       // 10759
var binary = function(parent, x0, y0, x1, y1) {                                                                        // 10760
  var nodes = parent.children,                                                                                         // 10761
      i, n = nodes.length,                                                                                             // 10762
      sum, sums = new Array(n + 1);                                                                                    // 10763
                                                                                                                       // 10764
  for (sums[0] = sum = i = 0; i < n; ++i) {                                                                            // 10765
    sums[i + 1] = sum += nodes[i].value;                                                                               // 10766
  }                                                                                                                    // 10767
                                                                                                                       // 10768
  partition(0, n, parent.value, x0, y0, x1, y1);                                                                       // 10769
                                                                                                                       // 10770
  function partition(i, j, value, x0, y0, x1, y1) {                                                                    // 10771
    if (i >= j - 1) {                                                                                                  // 10772
      var node = nodes[i];                                                                                             // 10773
      node.x0 = x0, node.y0 = y0;                                                                                      // 10774
      node.x1 = x1, node.y1 = y1;                                                                                      // 10775
      return;                                                                                                          // 10776
    }                                                                                                                  // 10777
                                                                                                                       // 10778
    var valueOffset = sums[i],                                                                                         // 10779
        valueTarget = (value / 2) + valueOffset,                                                                       // 10780
        k = i + 1,                                                                                                     // 10781
        hi = j - 1;                                                                                                    // 10782
                                                                                                                       // 10783
    while (k < hi) {                                                                                                   // 10784
      var mid = k + hi >>> 1;                                                                                          // 10785
      if (sums[mid] < valueTarget) k = mid + 1;                                                                        // 10786
      else hi = mid;                                                                                                   // 10787
    }                                                                                                                  // 10788
                                                                                                                       // 10789
    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;                                       // 10790
                                                                                                                       // 10791
    var valueLeft = sums[k] - valueOffset,                                                                             // 10792
        valueRight = value - valueLeft;                                                                                // 10793
                                                                                                                       // 10794
    if ((x1 - x0) > (y1 - y0)) {                                                                                       // 10795
      var xk = (x0 * valueRight + x1 * valueLeft) / value;                                                             // 10796
      partition(i, k, valueLeft, x0, y0, xk, y1);                                                                      // 10797
      partition(k, j, valueRight, xk, y0, x1, y1);                                                                     // 10798
    } else {                                                                                                           // 10799
      var yk = (y0 * valueRight + y1 * valueLeft) / value;                                                             // 10800
      partition(i, k, valueLeft, x0, y0, x1, yk);                                                                      // 10801
      partition(k, j, valueRight, x0, yk, x1, y1);                                                                     // 10802
    }                                                                                                                  // 10803
  }                                                                                                                    // 10804
};                                                                                                                     // 10805
                                                                                                                       // 10806
var sliceDice = function(parent, x0, y0, x1, y1) {                                                                     // 10807
  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);                                             // 10808
};                                                                                                                     // 10809
                                                                                                                       // 10810
var resquarify = ((function custom(ratio) {                                                                            // 10811
                                                                                                                       // 10812
  function resquarify(parent, x0, y0, x1, y1) {                                                                        // 10813
    if ((rows = parent._squarify) && (rows.ratio === ratio)) {                                                         // 10814
      var rows,                                                                                                        // 10815
          row,                                                                                                         // 10816
          nodes,                                                                                                       // 10817
          i,                                                                                                           // 10818
          j = -1,                                                                                                      // 10819
          n,                                                                                                           // 10820
          m = rows.length,                                                                                             // 10821
          value = parent.value;                                                                                        // 10822
                                                                                                                       // 10823
      while (++j < m) {                                                                                                // 10824
        row = rows[j], nodes = row.children;                                                                           // 10825
        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;                             // 10826
        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);                               // 10827
        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);                                       // 10828
        value -= row.value;                                                                                            // 10829
      }                                                                                                                // 10830
    } else {                                                                                                           // 10831
      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);                                          // 10832
      rows.ratio = ratio;                                                                                              // 10833
    }                                                                                                                  // 10834
  }                                                                                                                    // 10835
                                                                                                                       // 10836
  resquarify.ratio = function(x) {                                                                                     // 10837
    return custom((x = +x) > 1 ? x : 1);                                                                               // 10838
  };                                                                                                                   // 10839
                                                                                                                       // 10840
  return resquarify;                                                                                                   // 10841
}))(phi);                                                                                                              // 10842
                                                                                                                       // 10843
var area$1 = function(polygon) {                                                                                       // 10844
  var i = -1,                                                                                                          // 10845
      n = polygon.length,                                                                                              // 10846
      a,                                                                                                               // 10847
      b = polygon[n - 1],                                                                                              // 10848
      area = 0;                                                                                                        // 10849
                                                                                                                       // 10850
  while (++i < n) {                                                                                                    // 10851
    a = b;                                                                                                             // 10852
    b = polygon[i];                                                                                                    // 10853
    area += a[1] * b[0] - a[0] * b[1];                                                                                 // 10854
  }                                                                                                                    // 10855
                                                                                                                       // 10856
  return area / 2;                                                                                                     // 10857
};                                                                                                                     // 10858
                                                                                                                       // 10859
var centroid$1 = function(polygon) {                                                                                   // 10860
  var i = -1,                                                                                                          // 10861
      n = polygon.length,                                                                                              // 10862
      x = 0,                                                                                                           // 10863
      y = 0,                                                                                                           // 10864
      a,                                                                                                               // 10865
      b = polygon[n - 1],                                                                                              // 10866
      c,                                                                                                               // 10867
      k = 0;                                                                                                           // 10868
                                                                                                                       // 10869
  while (++i < n) {                                                                                                    // 10870
    a = b;                                                                                                             // 10871
    b = polygon[i];                                                                                                    // 10872
    k += c = a[0] * b[1] - b[0] * a[1];                                                                                // 10873
    x += (a[0] + b[0]) * c;                                                                                            // 10874
    y += (a[1] + b[1]) * c;                                                                                            // 10875
  }                                                                                                                    // 10876
                                                                                                                       // 10877
  return k *= 3, [x / k, y / k];                                                                                       // 10878
};                                                                                                                     // 10879
                                                                                                                       // 10880
// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of                                         // 10881
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is                                             // 10882
// right, +y is up). Returns a positive value if ABC is counter-clockwise,                                             // 10883
// negative if clockwise, and zero if the points are collinear.                                                        // 10884
var cross$1 = function(a, b, c) {                                                                                      // 10885
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);                                                // 10886
};                                                                                                                     // 10887
                                                                                                                       // 10888
function lexicographicOrder(a, b) {                                                                                    // 10889
  return a[0] - b[0] || a[1] - b[1];                                                                                   // 10890
}                                                                                                                      // 10891
                                                                                                                       // 10892
// Computes the upper convex hull per the monotone chain algorithm.                                                    // 10893
// Assumes points.length >= 3, is sorted by x, unique in y.                                                            // 10894
// Returns an array of indices into points in left-to-right order.                                                     // 10895
function computeUpperHullIndexes(points) {                                                                             // 10896
  var n = points.length,                                                                                               // 10897
      indexes = [0, 1],                                                                                                // 10898
      size = 2;                                                                                                        // 10899
                                                                                                                       // 10900
  for (var i = 2; i < n; ++i) {                                                                                        // 10901
    while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;          // 10902
    indexes[size++] = i;                                                                                               // 10903
  }                                                                                                                    // 10904
                                                                                                                       // 10905
  return indexes.slice(0, size); // remove popped points                                                               // 10906
}                                                                                                                      // 10907
                                                                                                                       // 10908
var hull = function(points) {                                                                                          // 10909
  if ((n = points.length) < 3) return null;                                                                            // 10910
                                                                                                                       // 10911
  var i,                                                                                                               // 10912
      n,                                                                                                               // 10913
      sortedPoints = new Array(n),                                                                                     // 10914
      flippedPoints = new Array(n);                                                                                    // 10915
                                                                                                                       // 10916
  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];                                         // 10917
  sortedPoints.sort(lexicographicOrder);                                                                               // 10918
  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];                                // 10919
                                                                                                                       // 10920
  var upperIndexes = computeUpperHullIndexes(sortedPoints),                                                            // 10921
      lowerIndexes = computeUpperHullIndexes(flippedPoints);                                                           // 10922
                                                                                                                       // 10923
  // Construct the hull polygon, removing possible duplicate endpoints.                                                // 10924
  var skipLeft = lowerIndexes[0] === upperIndexes[0],                                                                  // 10925
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],                     // 10926
      hull = [];                                                                                                       // 10927
                                                                                                                       // 10928
  // Add upper hull in right-to-l order.                                                                               // 10929
  // Then add lower hull in left-to-right order.                                                                       // 10930
  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);                  // 10931
  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);   // 10932
                                                                                                                       // 10933
  return hull;                                                                                                         // 10934
};                                                                                                                     // 10935
                                                                                                                       // 10936
var contains$1 = function(polygon, point) {                                                                            // 10937
  var n = polygon.length,                                                                                              // 10938
      p = polygon[n - 1],                                                                                              // 10939
      x = point[0], y = point[1],                                                                                      // 10940
      x0 = p[0], y0 = p[1],                                                                                            // 10941
      x1, y1,                                                                                                          // 10942
      inside = false;                                                                                                  // 10943
                                                                                                                       // 10944
  for (var i = 0; i < n; ++i) {                                                                                        // 10945
    p = polygon[i], x1 = p[0], y1 = p[1];                                                                              // 10946
    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;                      // 10947
    x0 = x1, y0 = y1;                                                                                                  // 10948
  }                                                                                                                    // 10949
                                                                                                                       // 10950
  return inside;                                                                                                       // 10951
};                                                                                                                     // 10952
                                                                                                                       // 10953
var length$2 = function(polygon) {                                                                                     // 10954
  var i = -1,                                                                                                          // 10955
      n = polygon.length,                                                                                              // 10956
      b = polygon[n - 1],                                                                                              // 10957
      xa,                                                                                                              // 10958
      ya,                                                                                                              // 10959
      xb = b[0],                                                                                                       // 10960
      yb = b[1],                                                                                                       // 10961
      perimeter = 0;                                                                                                   // 10962
                                                                                                                       // 10963
  while (++i < n) {                                                                                                    // 10964
    xa = xb;                                                                                                           // 10965
    ya = yb;                                                                                                           // 10966
    b = polygon[i];                                                                                                    // 10967
    xb = b[0];                                                                                                         // 10968
    yb = b[1];                                                                                                         // 10969
    xa -= xb;                                                                                                          // 10970
    ya -= yb;                                                                                                          // 10971
    perimeter += Math.sqrt(xa * xa + ya * ya);                                                                         // 10972
  }                                                                                                                    // 10973
                                                                                                                       // 10974
  return perimeter;                                                                                                    // 10975
};                                                                                                                     // 10976
                                                                                                                       // 10977
var slice$3 = [].slice;                                                                                                // 10978
                                                                                                                       // 10979
var noabort = {};                                                                                                      // 10980
                                                                                                                       // 10981
function Queue(size) {                                                                                                 // 10982
  this._size = size;                                                                                                   // 10983
  this._call =                                                                                                         // 10984
  this._error = null;                                                                                                  // 10985
  this._tasks = [];                                                                                                    // 10986
  this._data = [];                                                                                                     // 10987
  this._waiting =                                                                                                      // 10988
  this._active =                                                                                                       // 10989
  this._ended =                                                                                                        // 10990
  this._start = 0; // inside a synchronous task callback?                                                              // 10991
}                                                                                                                      // 10992
                                                                                                                       // 10993
Queue.prototype = queue.prototype = {                                                                                  // 10994
  constructor: Queue,                                                                                                  // 10995
  defer: function(callback) {                                                                                          // 10996
    if (typeof callback !== "function") throw new Error("invalid callback");                                           // 10997
    if (this._call) throw new Error("defer after await");                                                              // 10998
    if (this._error != null) return this;                                                                              // 10999
    var t = slice$3.call(arguments, 1);                                                                                // 11000
    t.push(callback);                                                                                                  // 11001
    ++this._waiting, this._tasks.push(t);                                                                              // 11002
    poke$1(this);                                                                                                      // 11003
    return this;                                                                                                       // 11004
  },                                                                                                                   // 11005
  abort: function() {                                                                                                  // 11006
    if (this._error == null) abort(this, new Error("abort"));                                                          // 11007
    return this;                                                                                                       // 11008
  },                                                                                                                   // 11009
  await: function(callback) {                                                                                          // 11010
    if (typeof callback !== "function") throw new Error("invalid callback");                                           // 11011
    if (this._call) throw new Error("multiple await");                                                                 // 11012
    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };                          // 11013
    maybeNotify(this);                                                                                                 // 11014
    return this;                                                                                                       // 11015
  },                                                                                                                   // 11016
  awaitAll: function(callback) {                                                                                       // 11017
    if (typeof callback !== "function") throw new Error("invalid callback");                                           // 11018
    if (this._call) throw new Error("multiple await");                                                                 // 11019
    this._call = callback;                                                                                             // 11020
    maybeNotify(this);                                                                                                 // 11021
    return this;                                                                                                       // 11022
  }                                                                                                                    // 11023
};                                                                                                                     // 11024
                                                                                                                       // 11025
function poke$1(q) {                                                                                                   // 11026
  if (!q._start) {                                                                                                     // 11027
    try { start$1(q); } // let the current task complete                                                               // 11028
    catch (e) {                                                                                                        // 11029
      if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously                               // 11030
      else if (!q._data) throw e; // await callback errored synchronously                                              // 11031
    }                                                                                                                  // 11032
  }                                                                                                                    // 11033
}                                                                                                                      // 11034
                                                                                                                       // 11035
function start$1(q) {                                                                                                  // 11036
  while (q._start = q._waiting && q._active < q._size) {                                                               // 11037
    var i = q._ended + q._active,                                                                                      // 11038
        t = q._tasks[i],                                                                                               // 11039
        j = t.length - 1,                                                                                              // 11040
        c = t[j];                                                                                                      // 11041
    t[j] = end(q, i);                                                                                                  // 11042
    --q._waiting, ++q._active;                                                                                         // 11043
    t = c.apply(null, t);                                                                                              // 11044
    if (!q._tasks[i]) continue; // task finished synchronously                                                         // 11045
    q._tasks[i] = t || noabort;                                                                                        // 11046
  }                                                                                                                    // 11047
}                                                                                                                      // 11048
                                                                                                                       // 11049
function end(q, i) {                                                                                                   // 11050
  return function(e, r) {                                                                                              // 11051
    if (!q._tasks[i]) return; // ignore multiple callbacks                                                             // 11052
    --q._active, ++q._ended;                                                                                           // 11053
    q._tasks[i] = null;                                                                                                // 11054
    if (q._error != null) return; // ignore secondary errors                                                           // 11055
    if (e != null) {                                                                                                   // 11056
      abort(q, e);                                                                                                     // 11057
    } else {                                                                                                           // 11058
      q._data[i] = r;                                                                                                  // 11059
      if (q._waiting) poke$1(q);                                                                                       // 11060
      else maybeNotify(q);                                                                                             // 11061
    }                                                                                                                  // 11062
  };                                                                                                                   // 11063
}                                                                                                                      // 11064
                                                                                                                       // 11065
function abort(q, e) {                                                                                                 // 11066
  var i = q._tasks.length, t;                                                                                          // 11067
  q._error = e; // ignore active callbacks                                                                             // 11068
  q._data = undefined; // allow gc                                                                                     // 11069
  q._waiting = NaN; // prevent starting                                                                                // 11070
                                                                                                                       // 11071
  while (--i >= 0) {                                                                                                   // 11072
    if (t = q._tasks[i]) {                                                                                             // 11073
      q._tasks[i] = null;                                                                                              // 11074
      if (t.abort) {                                                                                                   // 11075
        try { t.abort(); }                                                                                             // 11076
        catch (e) { /* ignore */ }                                                                                     // 11077
      }                                                                                                                // 11078
    }                                                                                                                  // 11079
  }                                                                                                                    // 11080
                                                                                                                       // 11081
  q._active = NaN; // allow notification                                                                               // 11082
  maybeNotify(q);                                                                                                      // 11083
}                                                                                                                      // 11084
                                                                                                                       // 11085
function maybeNotify(q) {                                                                                              // 11086
  if (!q._active && q._call) {                                                                                         // 11087
    var d = q._data;                                                                                                   // 11088
    q._data = undefined; // allow gc                                                                                   // 11089
    q._call(q._error, d);                                                                                              // 11090
  }                                                                                                                    // 11091
}                                                                                                                      // 11092
                                                                                                                       // 11093
function queue(concurrency) {                                                                                          // 11094
  if (concurrency == null) concurrency = Infinity;                                                                     // 11095
  else if (!((concurrency = +concurrency) >= 1)) throw new Error("invalid concurrency");                               // 11096
  return new Queue(concurrency);                                                                                       // 11097
}                                                                                                                      // 11098
                                                                                                                       // 11099
var defaultSource$1 = function() {                                                                                     // 11100
  return Math.random();                                                                                                // 11101
};                                                                                                                     // 11102
                                                                                                                       // 11103
var uniform = ((function sourceRandomUniform(source) {                                                                 // 11104
  function randomUniform(min, max) {                                                                                   // 11105
    min = min == null ? 0 : +min;                                                                                      // 11106
    max = max == null ? 1 : +max;                                                                                      // 11107
    if (arguments.length === 1) max = min, min = 0;                                                                    // 11108
    else max -= min;                                                                                                   // 11109
    return function() {                                                                                                // 11110
      return source() * max + min;                                                                                     // 11111
    };                                                                                                                 // 11112
  }                                                                                                                    // 11113
                                                                                                                       // 11114
  randomUniform.source = sourceRandomUniform;                                                                          // 11115
                                                                                                                       // 11116
  return randomUniform;                                                                                                // 11117
}))(defaultSource$1);                                                                                                  // 11118
                                                                                                                       // 11119
var normal = ((function sourceRandomNormal(source) {                                                                   // 11120
  function randomNormal(mu, sigma) {                                                                                   // 11121
    var x, r;                                                                                                          // 11122
    mu = mu == null ? 0 : +mu;                                                                                         // 11123
    sigma = sigma == null ? 1 : +sigma;                                                                                // 11124
    return function() {                                                                                                // 11125
      var y;                                                                                                           // 11126
                                                                                                                       // 11127
      // If available, use the second previously-generated uniform random.                                             // 11128
      if (x != null) y = x, x = null;                                                                                  // 11129
                                                                                                                       // 11130
      // Otherwise, generate a new x and y.                                                                            // 11131
      else do {                                                                                                        // 11132
        x = source() * 2 - 1;                                                                                          // 11133
        y = source() * 2 - 1;                                                                                          // 11134
        r = x * x + y * y;                                                                                             // 11135
      } while (!r || r > 1);                                                                                           // 11136
                                                                                                                       // 11137
      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);                                                         // 11138
    };                                                                                                                 // 11139
  }                                                                                                                    // 11140
                                                                                                                       // 11141
  randomNormal.source = sourceRandomNormal;                                                                            // 11142
                                                                                                                       // 11143
  return randomNormal;                                                                                                 // 11144
}))(defaultSource$1);                                                                                                  // 11145
                                                                                                                       // 11146
var logNormal = ((function sourceRandomLogNormal(source) {                                                             // 11147
  function randomLogNormal() {                                                                                         // 11148
    var randomNormal = normal.source(source).apply(this, arguments);                                                   // 11149
    return function() {                                                                                                // 11150
      return Math.exp(randomNormal());                                                                                 // 11151
    };                                                                                                                 // 11152
  }                                                                                                                    // 11153
                                                                                                                       // 11154
  randomLogNormal.source = sourceRandomLogNormal;                                                                      // 11155
                                                                                                                       // 11156
  return randomLogNormal;                                                                                              // 11157
}))(defaultSource$1);                                                                                                  // 11158
                                                                                                                       // 11159
var irwinHall = ((function sourceRandomIrwinHall(source) {                                                             // 11160
  function randomIrwinHall(n) {                                                                                        // 11161
    return function() {                                                                                                // 11162
      for (var sum = 0, i = 0; i < n; ++i) sum += source();                                                            // 11163
      return sum;                                                                                                      // 11164
    };                                                                                                                 // 11165
  }                                                                                                                    // 11166
                                                                                                                       // 11167
  randomIrwinHall.source = sourceRandomIrwinHall;                                                                      // 11168
                                                                                                                       // 11169
  return randomIrwinHall;                                                                                              // 11170
}))(defaultSource$1);                                                                                                  // 11171
                                                                                                                       // 11172
var bates = ((function sourceRandomBates(source) {                                                                     // 11173
  function randomBates(n) {                                                                                            // 11174
    var randomIrwinHall = irwinHall.source(source)(n);                                                                 // 11175
    return function() {                                                                                                // 11176
      return randomIrwinHall() / n;                                                                                    // 11177
    };                                                                                                                 // 11178
  }                                                                                                                    // 11179
                                                                                                                       // 11180
  randomBates.source = sourceRandomBates;                                                                              // 11181
                                                                                                                       // 11182
  return randomBates;                                                                                                  // 11183
}))(defaultSource$1);                                                                                                  // 11184
                                                                                                                       // 11185
var exponential$1 = ((function sourceRandomExponential(source) {                                                       // 11186
  function randomExponential(lambda) {                                                                                 // 11187
    return function() {                                                                                                // 11188
      return -Math.log(1 - source()) / lambda;                                                                         // 11189
    };                                                                                                                 // 11190
  }                                                                                                                    // 11191
                                                                                                                       // 11192
  randomExponential.source = sourceRandomExponential;                                                                  // 11193
                                                                                                                       // 11194
  return randomExponential;                                                                                            // 11195
}))(defaultSource$1);                                                                                                  // 11196
                                                                                                                       // 11197
var request = function(url, callback) {                                                                                // 11198
  var request,                                                                                                         // 11199
      event = dispatch("beforesend", "progress", "load", "error"),                                                     // 11200
      mimeType,                                                                                                        // 11201
      headers = map$1(),                                                                                               // 11202
      xhr = new XMLHttpRequest,                                                                                        // 11203
      user = null,                                                                                                     // 11204
      password = null,                                                                                                 // 11205
      response,                                                                                                        // 11206
      responseType,                                                                                                    // 11207
      timeout = 0;                                                                                                     // 11208
                                                                                                                       // 11209
  // If IE does not support CORS, use XDomainRequest.                                                                  // 11210
  if (typeof XDomainRequest !== "undefined"                                                                            // 11211
      && !("withCredentials" in xhr)                                                                                   // 11212
      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;                                                      // 11213
                                                                                                                       // 11214
  "onload" in xhr                                                                                                      // 11215
      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond                                                             // 11216
      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };                                    // 11217
                                                                                                                       // 11218
  function respond(o) {                                                                                                // 11219
    var status = xhr.status, result;                                                                                   // 11220
    if (!status && hasResponse(xhr)                                                                                    // 11221
        || status >= 200 && status < 300                                                                               // 11222
        || status === 304) {                                                                                           // 11223
      if (response) {                                                                                                  // 11224
        try {                                                                                                          // 11225
          result = response.call(request, xhr);                                                                        // 11226
        } catch (e) {                                                                                                  // 11227
          event.call("error", request, e);                                                                             // 11228
          return;                                                                                                      // 11229
        }                                                                                                              // 11230
      } else {                                                                                                         // 11231
        result = xhr;                                                                                                  // 11232
      }                                                                                                                // 11233
      event.call("load", request, result);                                                                             // 11234
    } else {                                                                                                           // 11235
      event.call("error", request, o);                                                                                 // 11236
    }                                                                                                                  // 11237
  }                                                                                                                    // 11238
                                                                                                                       // 11239
  xhr.onprogress = function(e) {                                                                                       // 11240
    event.call("progress", request, e);                                                                                // 11241
  };                                                                                                                   // 11242
                                                                                                                       // 11243
  request = {                                                                                                          // 11244
    header: function(name, value) {                                                                                    // 11245
      name = (name + "").toLowerCase();                                                                                // 11246
      if (arguments.length < 2) return headers.get(name);                                                              // 11247
      if (value == null) headers.remove(name);                                                                         // 11248
      else headers.set(name, value + "");                                                                              // 11249
      return request;                                                                                                  // 11250
    },                                                                                                                 // 11251
                                                                                                                       // 11252
    // If mimeType is non-null and no Accept header is set, a default is used.                                         // 11253
    mimeType: function(value) {                                                                                        // 11254
      if (!arguments.length) return mimeType;                                                                          // 11255
      mimeType = value == null ? null : value + "";                                                                    // 11256
      return request;                                                                                                  // 11257
    },                                                                                                                 // 11258
                                                                                                                       // 11259
    // Specifies what type the response value should take;                                                             // 11260
    // for instance, arraybuffer, blob, document, or text.                                                             // 11261
    responseType: function(value) {                                                                                    // 11262
      if (!arguments.length) return responseType;                                                                      // 11263
      responseType = value;                                                                                            // 11264
      return request;                                                                                                  // 11265
    },                                                                                                                 // 11266
                                                                                                                       // 11267
    timeout: function(value) {                                                                                         // 11268
      if (!arguments.length) return timeout;                                                                           // 11269
      timeout = +value;                                                                                                // 11270
      return request;                                                                                                  // 11271
    },                                                                                                                 // 11272
                                                                                                                       // 11273
    user: function(value) {                                                                                            // 11274
      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);                        // 11275
    },                                                                                                                 // 11276
                                                                                                                       // 11277
    password: function(value) {                                                                                        // 11278
      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);                // 11279
    },                                                                                                                 // 11280
                                                                                                                       // 11281
    // Specify how to convert the response content to a specific type;                                                 // 11282
    // changes the callback value on "load" events.                                                                    // 11283
    response: function(value) {                                                                                        // 11284
      response = value;                                                                                                // 11285
      return request;                                                                                                  // 11286
    },                                                                                                                 // 11287
                                                                                                                       // 11288
    // Alias for send("GET", …).                                                                                       // 11289
    get: function(data, callback) {                                                                                    // 11290
      return request.send("GET", data, callback);                                                                      // 11291
    },                                                                                                                 // 11292
                                                                                                                       // 11293
    // Alias for send("POST", …).                                                                                      // 11294
    post: function(data, callback) {                                                                                   // 11295
      return request.send("POST", data, callback);                                                                     // 11296
    },                                                                                                                 // 11297
                                                                                                                       // 11298
    // If callback is non-null, it will be used for error and load events.                                             // 11299
    send: function(method, data, callback) {                                                                           // 11300
      xhr.open(method, url, true, user, password);                                                                     // 11301
      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");                        // 11302
      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });            // 11303
      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);                                    // 11304
      if (responseType != null) xhr.responseType = responseType;                                                       // 11305
      if (timeout > 0) xhr.timeout = timeout;                                                                          // 11306
      if (callback == null && typeof data === "function") callback = data, data = null;                                // 11307
      if (callback != null && callback.length === 1) callback = fixCallback(callback);                                 // 11308
      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });          // 11309
      event.call("beforesend", request, xhr);                                                                          // 11310
      xhr.send(data == null ? null : data);                                                                            // 11311
      return request;                                                                                                  // 11312
    },                                                                                                                 // 11313
                                                                                                                       // 11314
    abort: function() {                                                                                                // 11315
      xhr.abort();                                                                                                     // 11316
      return request;                                                                                                  // 11317
    },                                                                                                                 // 11318
                                                                                                                       // 11319
    on: function() {                                                                                                   // 11320
      var value = event.on.apply(event, arguments);                                                                    // 11321
      return value === event ? request : value;                                                                        // 11322
    }                                                                                                                  // 11323
  };                                                                                                                   // 11324
                                                                                                                       // 11325
  if (callback != null) {                                                                                              // 11326
    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);                              // 11327
    return request.get(callback);                                                                                      // 11328
  }                                                                                                                    // 11329
                                                                                                                       // 11330
  return request;                                                                                                      // 11331
};                                                                                                                     // 11332
                                                                                                                       // 11333
function fixCallback(callback) {                                                                                       // 11334
  return function(error, xhr) {                                                                                        // 11335
    callback(error == null ? xhr : null);                                                                              // 11336
  };                                                                                                                   // 11337
}                                                                                                                      // 11338
                                                                                                                       // 11339
function hasResponse(xhr) {                                                                                            // 11340
  var type = xhr.responseType;                                                                                         // 11341
  return type && type !== "text"                                                                                       // 11342
      ? xhr.response // null on error                                                                                  // 11343
      : xhr.responseText; // "" on error                                                                               // 11344
}                                                                                                                      // 11345
                                                                                                                       // 11346
var type$1 = function(defaultMimeType, response) {                                                                     // 11347
  return function(url, callback) {                                                                                     // 11348
    var r = request(url).mimeType(defaultMimeType).response(response);                                                 // 11349
    if (callback != null) {                                                                                            // 11350
      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);                            // 11351
      return r.get(callback);                                                                                          // 11352
    }                                                                                                                  // 11353
    return r;                                                                                                          // 11354
  };                                                                                                                   // 11355
};                                                                                                                     // 11356
                                                                                                                       // 11357
var html = type$1("text/html", function(xhr) {                                                                         // 11358
  return document.createRange().createContextualFragment(xhr.responseText);                                            // 11359
});                                                                                                                    // 11360
                                                                                                                       // 11361
var json = type$1("application/json", function(xhr) {                                                                  // 11362
  return JSON.parse(xhr.responseText);                                                                                 // 11363
});                                                                                                                    // 11364
                                                                                                                       // 11365
var text = type$1("text/plain", function(xhr) {                                                                        // 11366
  return xhr.responseText;                                                                                             // 11367
});                                                                                                                    // 11368
                                                                                                                       // 11369
var xml = type$1("application/xml", function(xhr) {                                                                    // 11370
  var xml = xhr.responseXML;                                                                                           // 11371
  if (!xml) throw new Error("parse error");                                                                            // 11372
  return xml;                                                                                                          // 11373
});                                                                                                                    // 11374
                                                                                                                       // 11375
var dsv$1 = function(defaultMimeType, parse) {                                                                         // 11376
  return function(url, row, callback) {                                                                                // 11377
    if (arguments.length < 3) callback = row, row = null;                                                              // 11378
    var r = request(url).mimeType(defaultMimeType);                                                                    // 11379
    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };                   // 11380
    r.row(row);                                                                                                        // 11381
    return callback ? r.get(callback) : r;                                                                             // 11382
  };                                                                                                                   // 11383
};                                                                                                                     // 11384
                                                                                                                       // 11385
function responseOf(parse, row) {                                                                                      // 11386
  return function(request$$1) {                                                                                        // 11387
    return parse(request$$1.responseText, row);                                                                        // 11388
  };                                                                                                                   // 11389
}                                                                                                                      // 11390
                                                                                                                       // 11391
var csv$1 = dsv$1("text/csv", csvParse);                                                                               // 11392
                                                                                                                       // 11393
var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);                                                              // 11394
                                                                                                                       // 11395
var array$2 = Array.prototype;                                                                                         // 11396
                                                                                                                       // 11397
var map$3 = array$2.map;                                                                                               // 11398
var slice$4 = array$2.slice;                                                                                           // 11399
                                                                                                                       // 11400
var implicit = {name: "implicit"};                                                                                     // 11401
                                                                                                                       // 11402
function ordinal(range) {                                                                                              // 11403
  var index = map$1(),                                                                                                 // 11404
      domain = [],                                                                                                     // 11405
      unknown = implicit;                                                                                              // 11406
                                                                                                                       // 11407
  range = range == null ? [] : slice$4.call(range);                                                                    // 11408
                                                                                                                       // 11409
  function scale(d) {                                                                                                  // 11410
    var key = d + "", i = index.get(key);                                                                              // 11411
    if (!i) {                                                                                                          // 11412
      if (unknown !== implicit) return unknown;                                                                        // 11413
      index.set(key, i = domain.push(d));                                                                              // 11414
    }                                                                                                                  // 11415
    return range[(i - 1) % range.length];                                                                              // 11416
  }                                                                                                                    // 11417
                                                                                                                       // 11418
  scale.domain = function(_) {                                                                                         // 11419
    if (!arguments.length) return domain.slice();                                                                      // 11420
    domain = [], index = map$1();                                                                                      // 11421
    var i = -1, n = _.length, d, key;                                                                                  // 11422
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));                             // 11423
    return scale;                                                                                                      // 11424
  };                                                                                                                   // 11425
                                                                                                                       // 11426
  scale.range = function(_) {                                                                                          // 11427
    return arguments.length ? (range = slice$4.call(_), scale) : range.slice();                                        // 11428
  };                                                                                                                   // 11429
                                                                                                                       // 11430
  scale.unknown = function(_) {                                                                                        // 11431
    return arguments.length ? (unknown = _, scale) : unknown;                                                          // 11432
  };                                                                                                                   // 11433
                                                                                                                       // 11434
  scale.copy = function() {                                                                                            // 11435
    return ordinal()                                                                                                   // 11436
        .domain(domain)                                                                                                // 11437
        .range(range)                                                                                                  // 11438
        .unknown(unknown);                                                                                             // 11439
  };                                                                                                                   // 11440
                                                                                                                       // 11441
  return scale;                                                                                                        // 11442
}                                                                                                                      // 11443
                                                                                                                       // 11444
function band() {                                                                                                      // 11445
  var scale = ordinal().unknown(undefined),                                                                            // 11446
      domain = scale.domain,                                                                                           // 11447
      ordinalRange = scale.range,                                                                                      // 11448
      range$$1 = [0, 1],                                                                                               // 11449
      step,                                                                                                            // 11450
      bandwidth,                                                                                                       // 11451
      round = false,                                                                                                   // 11452
      paddingInner = 0,                                                                                                // 11453
      paddingOuter = 0,                                                                                                // 11454
      align = 0.5;                                                                                                     // 11455
                                                                                                                       // 11456
  delete scale.unknown;                                                                                                // 11457
                                                                                                                       // 11458
  function rescale() {                                                                                                 // 11459
    var n = domain().length,                                                                                           // 11460
        reverse = range$$1[1] < range$$1[0],                                                                           // 11461
        start = range$$1[reverse - 0],                                                                                 // 11462
        stop = range$$1[1 - reverse];                                                                                  // 11463
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);                                          // 11464
    if (round) step = Math.floor(step);                                                                                // 11465
    start += (stop - start - step * (n - paddingInner)) * align;                                                       // 11466
    bandwidth = step * (1 - paddingInner);                                                                             // 11467
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);                                           // 11468
    var values = sequence(n).map(function(i) { return start + step * i; });                                            // 11469
    return ordinalRange(reverse ? values.reverse() : values);                                                          // 11470
  }                                                                                                                    // 11471
                                                                                                                       // 11472
  scale.domain = function(_) {                                                                                         // 11473
    return arguments.length ? (domain(_), rescale()) : domain();                                                       // 11474
  };                                                                                                                   // 11475
                                                                                                                       // 11476
  scale.range = function(_) {                                                                                          // 11477
    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();                               // 11478
  };                                                                                                                   // 11479
                                                                                                                       // 11480
  scale.rangeRound = function(_) {                                                                                     // 11481
    return range$$1 = [+_[0], +_[1]], round = true, rescale();                                                         // 11482
  };                                                                                                                   // 11483
                                                                                                                       // 11484
  scale.bandwidth = function() {                                                                                       // 11485
    return bandwidth;                                                                                                  // 11486
  };                                                                                                                   // 11487
                                                                                                                       // 11488
  scale.step = function() {                                                                                            // 11489
    return step;                                                                                                       // 11490
  };                                                                                                                   // 11491
                                                                                                                       // 11492
  scale.round = function(_) {                                                                                          // 11493
    return arguments.length ? (round = !!_, rescale()) : round;                                                        // 11494
  };                                                                                                                   // 11495
                                                                                                                       // 11496
  scale.padding = function(_) {                                                                                        // 11497
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;   // 11498
  };                                                                                                                   // 11499
                                                                                                                       // 11500
  scale.paddingInner = function(_) {                                                                                   // 11501
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;                  // 11502
  };                                                                                                                   // 11503
                                                                                                                       // 11504
  scale.paddingOuter = function(_) {                                                                                   // 11505
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;                  // 11506
  };                                                                                                                   // 11507
                                                                                                                       // 11508
  scale.align = function(_) {                                                                                          // 11509
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;                                // 11510
  };                                                                                                                   // 11511
                                                                                                                       // 11512
  scale.copy = function() {                                                                                            // 11513
    return band()                                                                                                      // 11514
        .domain(domain())                                                                                              // 11515
        .range(range$$1)                                                                                               // 11516
        .round(round)                                                                                                  // 11517
        .paddingInner(paddingInner)                                                                                    // 11518
        .paddingOuter(paddingOuter)                                                                                    // 11519
        .align(align);                                                                                                 // 11520
  };                                                                                                                   // 11521
                                                                                                                       // 11522
  return rescale();                                                                                                    // 11523
}                                                                                                                      // 11524
                                                                                                                       // 11525
function pointish(scale) {                                                                                             // 11526
  var copy = scale.copy;                                                                                               // 11527
                                                                                                                       // 11528
  scale.padding = scale.paddingOuter;                                                                                  // 11529
  delete scale.paddingInner;                                                                                           // 11530
  delete scale.paddingOuter;                                                                                           // 11531
                                                                                                                       // 11532
  scale.copy = function() {                                                                                            // 11533
    return pointish(copy());                                                                                           // 11534
  };                                                                                                                   // 11535
                                                                                                                       // 11536
  return scale;                                                                                                        // 11537
}                                                                                                                      // 11538
                                                                                                                       // 11539
function point$1() {                                                                                                   // 11540
  return pointish(band().paddingInner(1));                                                                             // 11541
}                                                                                                                      // 11542
                                                                                                                       // 11543
var constant$9 = function(x) {                                                                                         // 11544
  return function() {                                                                                                  // 11545
    return x;                                                                                                          // 11546
  };                                                                                                                   // 11547
};                                                                                                                     // 11548
                                                                                                                       // 11549
var number$1 = function(x) {                                                                                           // 11550
  return +x;                                                                                                           // 11551
};                                                                                                                     // 11552
                                                                                                                       // 11553
var unit = [0, 1];                                                                                                     // 11554
                                                                                                                       // 11555
function deinterpolateLinear(a, b) {                                                                                   // 11556
  return (b -= (a = +a))                                                                                               // 11557
      ? function(x) { return (x - a) / b; }                                                                            // 11558
      : constant$9(b);                                                                                                 // 11559
}                                                                                                                      // 11560
                                                                                                                       // 11561
function deinterpolateClamp(deinterpolate) {                                                                           // 11562
  return function(a, b) {                                                                                              // 11563
    var d = deinterpolate(a = +a, b = +b);                                                                             // 11564
    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };                                                     // 11565
  };                                                                                                                   // 11566
}                                                                                                                      // 11567
                                                                                                                       // 11568
function reinterpolateClamp(reinterpolate) {                                                                           // 11569
  return function(a, b) {                                                                                              // 11570
    var r = reinterpolate(a = +a, b = +b);                                                                             // 11571
    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };                                                     // 11572
  };                                                                                                                   // 11573
}                                                                                                                      // 11574
                                                                                                                       // 11575
function bimap(domain, range$$1, deinterpolate, reinterpolate) {                                                       // 11576
  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];                                              // 11577
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);                                                 // 11578
  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);                                                         // 11579
  return function(x) { return r0(d0(x)); };                                                                            // 11580
}                                                                                                                      // 11581
                                                                                                                       // 11582
function polymap(domain, range$$1, deinterpolate, reinterpolate) {                                                     // 11583
  var j = Math.min(domain.length, range$$1.length) - 1,                                                                // 11584
      d = new Array(j),                                                                                                // 11585
      r = new Array(j),                                                                                                // 11586
      i = -1;                                                                                                          // 11587
                                                                                                                       // 11588
  // Reverse descending domains.                                                                                       // 11589
  if (domain[j] < domain[0]) {                                                                                         // 11590
    domain = domain.slice().reverse();                                                                                 // 11591
    range$$1 = range$$1.slice().reverse();                                                                             // 11592
  }                                                                                                                    // 11593
                                                                                                                       // 11594
  while (++i < j) {                                                                                                    // 11595
    d[i] = deinterpolate(domain[i], domain[i + 1]);                                                                    // 11596
    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);                                                                // 11597
  }                                                                                                                    // 11598
                                                                                                                       // 11599
  return function(x) {                                                                                                 // 11600
    var i = bisectRight(domain, x, 1, j) - 1;                                                                          // 11601
    return r[i](d[i](x));                                                                                              // 11602
  };                                                                                                                   // 11603
}                                                                                                                      // 11604
                                                                                                                       // 11605
function copy(source, target) {                                                                                        // 11606
  return target                                                                                                        // 11607
      .domain(source.domain())                                                                                         // 11608
      .range(source.range())                                                                                           // 11609
      .interpolate(source.interpolate())                                                                               // 11610
      .clamp(source.clamp());                                                                                          // 11611
}                                                                                                                      // 11612
                                                                                                                       // 11613
// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].          // 11614
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].          // 11615
function continuous(deinterpolate, reinterpolate) {                                                                    // 11616
  var domain = unit,                                                                                                   // 11617
      range$$1 = unit,                                                                                                 // 11618
      interpolate$$1 = interpolateValue,                                                                               // 11619
      clamp = false,                                                                                                   // 11620
      piecewise,                                                                                                       // 11621
      output,                                                                                                          // 11622
      input;                                                                                                           // 11623
                                                                                                                       // 11624
  function rescale() {                                                                                                 // 11625
    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;                                        // 11626
    output = input = null;                                                                                             // 11627
    return scale;                                                                                                      // 11628
  }                                                                                                                    // 11629
                                                                                                                       // 11630
  function scale(x) {                                                                                                  // 11631
    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
  }                                                                                                                    // 11633
                                                                                                                       // 11634
  scale.invert = function(y) {                                                                                         // 11635
    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };                                                                                                                   // 11637
                                                                                                                       // 11638
  scale.domain = function(_) {                                                                                         // 11639
    return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice();                          // 11640
  };                                                                                                                   // 11641
                                                                                                                       // 11642
  scale.range = function(_) {                                                                                          // 11643
    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();                              // 11644
  };                                                                                                                   // 11645
                                                                                                                       // 11646
  scale.rangeRound = function(_) {                                                                                     // 11647
    return range$$1 = slice$4.call(_), interpolate$$1 = interpolateRound, rescale();                                   // 11648
  };                                                                                                                   // 11649
                                                                                                                       // 11650
  scale.clamp = function(_) {                                                                                          // 11651
    return arguments.length ? (clamp = !!_, rescale()) : clamp;                                                        // 11652
  };                                                                                                                   // 11653
                                                                                                                       // 11654
  scale.interpolate = function(_) {                                                                                    // 11655
    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;                                        // 11656
  };                                                                                                                   // 11657
                                                                                                                       // 11658
  return rescale();                                                                                                    // 11659
}                                                                                                                      // 11660
                                                                                                                       // 11661
var tickFormat = function(domain, count, specifier) {                                                                  // 11662
  var start = domain[0],                                                                                               // 11663
      stop = domain[domain.length - 1],                                                                                // 11664
      step = tickStep(start, stop, count == null ? 10 : count),                                                        // 11665
      precision;                                                                                                       // 11666
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);                                                   // 11667
  switch (specifier.type) {                                                                                            // 11668
    case "s": {                                                                                                        // 11669
      var value = Math.max(Math.abs(start), Math.abs(stop));                                                           // 11670
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
      return exports.formatPrefix(specifier, value);                                                                   // 11672
    }                                                                                                                  // 11673
    case "":                                                                                                           // 11674
    case "e":                                                                                                          // 11675
    case "g":                                                                                                          // 11676
    case "p":                                                                                                          // 11677
    case "r": {                                                                                                        // 11678
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;                                                                                                           // 11680
    }                                                                                                                  // 11681
    case "f":                                                                                                          // 11682
    case "%": {                                                                                                        // 11683
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;                                                                                                           // 11685
    }                                                                                                                  // 11686
  }                                                                                                                    // 11687
  return exports.format(specifier);                                                                                    // 11688
};                                                                                                                     // 11689
                                                                                                                       // 11690
function linearish(scale) {                                                                                            // 11691
  var domain = scale.domain;                                                                                           // 11692
                                                                                                                       // 11693
  scale.ticks = function(count) {                                                                                      // 11694
    var d = domain();                                                                                                  // 11695
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);                                                   // 11696
  };                                                                                                                   // 11697
                                                                                                                       // 11698
  scale.tickFormat = function(count, specifier) {                                                                      // 11699
    return tickFormat(domain(), count, specifier);                                                                     // 11700
  };                                                                                                                   // 11701
                                                                                                                       // 11702
  scale.nice = function(count) {                                                                                       // 11703
    if (count == null) count = 10;                                                                                     // 11704
                                                                                                                       // 11705
    var d = domain(),                                                                                                  // 11706
        i0 = 0,                                                                                                        // 11707
        i1 = d.length - 1,                                                                                             // 11708
        start = d[i0],                                                                                                 // 11709
        stop = d[i1],                                                                                                  // 11710
        step;                                                                                                          // 11711
                                                                                                                       // 11712
    if (stop < start) {                                                                                                // 11713
      step = start, start = stop, stop = step;                                                                         // 11714
      step = i0, i0 = i1, i1 = step;                                                                                   // 11715
    }                                                                                                                  // 11716
                                                                                                                       // 11717
    step = tickIncrement(start, stop, count);                                                                          // 11718
                                                                                                                       // 11719
    if (step > 0) {                                                                                                    // 11720
      start = Math.floor(start / step) * step;                                                                         // 11721
      stop = Math.ceil(stop / step) * step;                                                                            // 11722
      step = tickIncrement(start, stop, count);                                                                        // 11723
    } else if (step < 0) {                                                                                             // 11724
      start = Math.ceil(start * step) / step;                                                                          // 11725
      stop = Math.floor(stop * step) / step;                                                                           // 11726
      step = tickIncrement(start, stop, count);                                                                        // 11727
    }                                                                                                                  // 11728
                                                                                                                       // 11729
    if (step > 0) {                                                                                                    // 11730
      d[i0] = Math.floor(start / step) * step;                                                                         // 11731
      d[i1] = Math.ceil(stop / step) * step;                                                                           // 11732
      domain(d);                                                                                                       // 11733
    } else if (step < 0) {                                                                                             // 11734
      d[i0] = Math.ceil(start * step) / step;                                                                          // 11735
      d[i1] = Math.floor(stop * step) / step;                                                                          // 11736
      domain(d);                                                                                                       // 11737
    }                                                                                                                  // 11738
                                                                                                                       // 11739
    return scale;                                                                                                      // 11740
  };                                                                                                                   // 11741
                                                                                                                       // 11742
  return scale;                                                                                                        // 11743
}                                                                                                                      // 11744
                                                                                                                       // 11745
function linear$2() {                                                                                                  // 11746
  var scale = continuous(deinterpolateLinear, reinterpolate);                                                          // 11747
                                                                                                                       // 11748
  scale.copy = function() {                                                                                            // 11749
    return copy(scale, linear$2());                                                                                    // 11750
  };                                                                                                                   // 11751
                                                                                                                       // 11752
  return linearish(scale);                                                                                             // 11753
}                                                                                                                      // 11754
                                                                                                                       // 11755
function identity$6() {                                                                                                // 11756
  var domain = [0, 1];                                                                                                 // 11757
                                                                                                                       // 11758
  function scale(x) {                                                                                                  // 11759
    return +x;                                                                                                         // 11760
  }                                                                                                                    // 11761
                                                                                                                       // 11762
  scale.invert = scale;                                                                                                // 11763
                                                                                                                       // 11764
  scale.domain = scale.range = function(_) {                                                                           // 11765
    return arguments.length ? (domain = map$3.call(_, number$1), scale) : domain.slice();                              // 11766
  };                                                                                                                   // 11767
                                                                                                                       // 11768
  scale.copy = function() {                                                                                            // 11769
    return identity$6().domain(domain);                                                                                // 11770
  };                                                                                                                   // 11771
                                                                                                                       // 11772
  return linearish(scale);                                                                                             // 11773
}                                                                                                                      // 11774
                                                                                                                       // 11775
var nice = function(domain, interval) {                                                                                // 11776
  domain = domain.slice();                                                                                             // 11777
                                                                                                                       // 11778
  var i0 = 0,                                                                                                          // 11779
      i1 = domain.length - 1,                                                                                          // 11780
      x0 = domain[i0],                                                                                                 // 11781
      x1 = domain[i1],                                                                                                 // 11782
      t;                                                                                                               // 11783
                                                                                                                       // 11784
  if (x1 < x0) {                                                                                                       // 11785
    t = i0, i0 = i1, i1 = t;                                                                                           // 11786
    t = x0, x0 = x1, x1 = t;                                                                                           // 11787
  }                                                                                                                    // 11788
                                                                                                                       // 11789
  domain[i0] = interval.floor(x0);                                                                                     // 11790
  domain[i1] = interval.ceil(x1);                                                                                      // 11791
  return domain;                                                                                                       // 11792
};                                                                                                                     // 11793
                                                                                                                       // 11794
function deinterpolate(a, b) {                                                                                         // 11795
  return (b = Math.log(b / a))                                                                                         // 11796
      ? function(x) { return Math.log(x / a) / b; }                                                                    // 11797
      : constant$9(b);                                                                                                 // 11798
}                                                                                                                      // 11799
                                                                                                                       // 11800
function reinterpolate$1(a, b) {                                                                                       // 11801
  return a < 0                                                                                                         // 11802
      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }                                                 // 11803
      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };                                                   // 11804
}                                                                                                                      // 11805
                                                                                                                       // 11806
function pow10(x) {                                                                                                    // 11807
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;                                                                    // 11808
}                                                                                                                      // 11809
                                                                                                                       // 11810
function powp(base) {                                                                                                  // 11811
  return base === 10 ? pow10                                                                                           // 11812
      : base === Math.E ? Math.exp                                                                                     // 11813
      : function(x) { return Math.pow(base, x); };                                                                     // 11814
}                                                                                                                      // 11815
                                                                                                                       // 11816
function logp(base) {                                                                                                  // 11817
  return base === Math.E ? Math.log                                                                                    // 11818
      : base === 10 && Math.log10                                                                                      // 11819
      || base === 2 && Math.log2                                                                                       // 11820
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });                                          // 11821
}                                                                                                                      // 11822
                                                                                                                       // 11823
function reflect(f) {                                                                                                  // 11824
  return function(x) {                                                                                                 // 11825
    return -f(-x);                                                                                                     // 11826
  };                                                                                                                   // 11827
}                                                                                                                      // 11828
                                                                                                                       // 11829
function log$1() {                                                                                                     // 11830
  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),                                              // 11831
      domain = scale.domain,                                                                                           // 11832
      base = 10,                                                                                                       // 11833
      logs = logp(10),                                                                                                 // 11834
      pows = powp(10);                                                                                                 // 11835
                                                                                                                       // 11836
  function rescale() {                                                                                                 // 11837
    logs = logp(base), pows = powp(base);                                                                              // 11838
    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);                                                   // 11839
    return scale;                                                                                                      // 11840
  }                                                                                                                    // 11841
                                                                                                                       // 11842
  scale.base = function(_) {                                                                                           // 11843
    return arguments.length ? (base = +_, rescale()) : base;                                                           // 11844
  };                                                                                                                   // 11845
                                                                                                                       // 11846
  scale.domain = function(_) {                                                                                         // 11847
    return arguments.length ? (domain(_), rescale()) : domain();                                                       // 11848
  };                                                                                                                   // 11849
                                                                                                                       // 11850
  scale.ticks = function(count) {                                                                                      // 11851
    var d = domain(),                                                                                                  // 11852
        u = d[0],                                                                                                      // 11853
        v = d[d.length - 1],                                                                                           // 11854
        r;                                                                                                             // 11855
                                                                                                                       // 11856
    if (r = v < u) i = u, u = v, v = i;                                                                                // 11857
                                                                                                                       // 11858
    var i = logs(u),                                                                                                   // 11859
        j = logs(v),                                                                                                   // 11860
        p,                                                                                                             // 11861
        k,                                                                                                             // 11862
        t,                                                                                                             // 11863
        n = count == null ? 10 : +count,                                                                               // 11864
        z = [];                                                                                                        // 11865
                                                                                                                       // 11866
    if (!(base % 1) && j - i < n) {                                                                                    // 11867
      i = Math.round(i) - 1, j = Math.round(j) + 1;                                                                    // 11868
      if (u > 0) for (; i < j; ++i) {                                                                                  // 11869
        for (k = 1, p = pows(i); k < base; ++k) {                                                                      // 11870
          t = p * k;                                                                                                   // 11871
          if (t < u) continue;                                                                                         // 11872
          if (t > v) break;                                                                                            // 11873
          z.push(t);                                                                                                   // 11874
        }                                                                                                              // 11875
      } else for (; i < j; ++i) {                                                                                      // 11876
        for (k = base - 1, p = pows(i); k >= 1; --k) {                                                                 // 11877
          t = p * k;                                                                                                   // 11878
          if (t < u) continue;                                                                                         // 11879
          if (t > v) break;                                                                                            // 11880
          z.push(t);                                                                                                   // 11881
        }                                                                                                              // 11882
      }                                                                                                                // 11883
    } else {                                                                                                           // 11884
      z = ticks(i, j, Math.min(j - i, n)).map(pows);                                                                   // 11885
    }                                                                                                                  // 11886
                                                                                                                       // 11887
    return r ? z.reverse() : z;                                                                                        // 11888
  };                                                                                                                   // 11889
                                                                                                                       // 11890
  scale.tickFormat = function(count, specifier) {                                                                      // 11891
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";                                                      // 11892
    if (typeof specifier !== "function") specifier = exports.format(specifier);                                        // 11893
    if (count === Infinity) return specifier;                                                                          // 11894
    if (count == null) count = 10;                                                                                     // 11895
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?                                   // 11896
    return function(d) {                                                                                               // 11897
      var i = d / pows(Math.round(logs(d)));                                                                           // 11898
      if (i * base < base - 0.5) i *= base;                                                                            // 11899
      return i <= k ? specifier(d) : "";                                                                               // 11900
    };                                                                                                                 // 11901
  };                                                                                                                   // 11902
                                                                                                                       // 11903
  scale.nice = function() {                                                                                            // 11904
    return domain(nice(domain(), {                                                                                     // 11905
      floor: function(x) { return pows(Math.floor(logs(x))); },                                                        // 11906
      ceil: function(x) { return pows(Math.ceil(logs(x))); }                                                           // 11907
    }));                                                                                                               // 11908
  };                                                                                                                   // 11909
                                                                                                                       // 11910
  scale.copy = function() {                                                                                            // 11911
    return copy(scale, log$1().base(base));                                                                            // 11912
  };                                                                                                                   // 11913
                                                                                                                       // 11914
  return scale;                                                                                                        // 11915
}                                                                                                                      // 11916
                                                                                                                       // 11917
function raise$1(x, exponent) {                                                                                        // 11918
  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);                                                      // 11919
}                                                                                                                      // 11920
                                                                                                                       // 11921
function pow$1() {                                                                                                     // 11922
  var exponent = 1,                                                                                                    // 11923
      scale = continuous(deinterpolate, reinterpolate),                                                                // 11924
      domain = scale.domain;                                                                                           // 11925
                                                                                                                       // 11926
  function deinterpolate(a, b) {                                                                                       // 11927
    return (b = raise$1(b, exponent) - (a = raise$1(a, exponent)))                                                     // 11928
        ? function(x) { return (raise$1(x, exponent) - a) / b; }                                                       // 11929
        : constant$9(b);                                                                                               // 11930
  }                                                                                                                    // 11931
                                                                                                                       // 11932
  function reinterpolate(a, b) {                                                                                       // 11933
    b = raise$1(b, exponent) - (a = raise$1(a, exponent));                                                             // 11934
    return function(t) { return raise$1(a + b * t, 1 / exponent); };                                                   // 11935
  }                                                                                                                    // 11936
                                                                                                                       // 11937
  scale.exponent = function(_) {                                                                                       // 11938
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;                                            // 11939
  };                                                                                                                   // 11940
                                                                                                                       // 11941
  scale.copy = function() {                                                                                            // 11942
    return copy(scale, pow$1().exponent(exponent));                                                                    // 11943
  };                                                                                                                   // 11944
                                                                                                                       // 11945
  return linearish(scale);                                                                                             // 11946
}                                                                                                                      // 11947
                                                                                                                       // 11948
function sqrt$1() {                                                                                                    // 11949
  return pow$1().exponent(0.5);                                                                                        // 11950
}                                                                                                                      // 11951
                                                                                                                       // 11952
function quantile$$1() {                                                                                               // 11953
  var domain = [],                                                                                                     // 11954
      range$$1 = [],                                                                                                   // 11955
      thresholds = [];                                                                                                 // 11956
                                                                                                                       // 11957
  function rescale() {                                                                                                 // 11958
    var i = 0, n = Math.max(1, range$$1.length);                                                                       // 11959
    thresholds = new Array(n - 1);                                                                                     // 11960
    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);                                                      // 11961
    return scale;                                                                                                      // 11962
  }                                                                                                                    // 11963
                                                                                                                       // 11964
  function scale(x) {                                                                                                  // 11965
    if (!isNaN(x = +x)) return range$$1[bisectRight(thresholds, x)];                                                   // 11966
  }                                                                                                                    // 11967
                                                                                                                       // 11968
  scale.invertExtent = function(y) {                                                                                   // 11969
    var i = range$$1.indexOf(y);                                                                                       // 11970
    return i < 0 ? [NaN, NaN] : [                                                                                      // 11971
      i > 0 ? thresholds[i - 1] : domain[0],                                                                           // 11972
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]                                                // 11973
    ];                                                                                                                 // 11974
  };                                                                                                                   // 11975
                                                                                                                       // 11976
  scale.domain = function(_) {                                                                                         // 11977
    if (!arguments.length) return domain.slice();                                                                      // 11978
    domain = [];                                                                                                       // 11979
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);            // 11980
    domain.sort(ascending);                                                                                            // 11981
    return rescale();                                                                                                  // 11982
  };                                                                                                                   // 11983
                                                                                                                       // 11984
  scale.range = function(_) {                                                                                          // 11985
    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();                              // 11986
  };                                                                                                                   // 11987
                                                                                                                       // 11988
  scale.quantiles = function() {                                                                                       // 11989
    return thresholds.slice();                                                                                         // 11990
  };                                                                                                                   // 11991
                                                                                                                       // 11992
  scale.copy = function() {                                                                                            // 11993
    return quantile$$1()                                                                                               // 11994
        .domain(domain)                                                                                                // 11995
        .range(range$$1);                                                                                              // 11996
  };                                                                                                                   // 11997
                                                                                                                       // 11998
  return scale;                                                                                                        // 11999
}                                                                                                                      // 12000
                                                                                                                       // 12001
function quantize$1() {                                                                                                // 12002
  var x0 = 0,                                                                                                          // 12003
      x1 = 1,                                                                                                          // 12004
      n = 1,                                                                                                           // 12005
      domain = [0.5],                                                                                                  // 12006
      range$$1 = [0, 1];                                                                                               // 12007
                                                                                                                       // 12008
  function scale(x) {                                                                                                  // 12009
    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];                                                         // 12010
  }                                                                                                                    // 12011
                                                                                                                       // 12012
  function rescale() {                                                                                                 // 12013
    var i = -1;                                                                                                        // 12014
    domain = new Array(n);                                                                                             // 12015
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);                                               // 12016
    return scale;                                                                                                      // 12017
  }                                                                                                                    // 12018
                                                                                                                       // 12019
  scale.domain = function(_) {                                                                                         // 12020
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];                                          // 12021
  };                                                                                                                   // 12022
                                                                                                                       // 12023
  scale.range = function(_) {                                                                                          // 12024
    return arguments.length ? (n = (range$$1 = slice$4.call(_)).length - 1, rescale()) : range$$1.slice();             // 12025
  };                                                                                                                   // 12026
                                                                                                                       // 12027
  scale.invertExtent = function(y) {                                                                                   // 12028
    var i = range$$1.indexOf(y);                                                                                       // 12029
    return i < 0 ? [NaN, NaN]                                                                                          // 12030
        : i < 1 ? [x0, domain[0]]                                                                                      // 12031
        : i >= n ? [domain[n - 1], x1]                                                                                 // 12032
        : [domain[i - 1], domain[i]];                                                                                  // 12033
  };                                                                                                                   // 12034
                                                                                                                       // 12035
  scale.copy = function() {                                                                                            // 12036
    return quantize$1()                                                                                                // 12037
        .domain([x0, x1])                                                                                              // 12038
        .range(range$$1);                                                                                              // 12039
  };                                                                                                                   // 12040
                                                                                                                       // 12041
  return linearish(scale);                                                                                             // 12042
}                                                                                                                      // 12043
                                                                                                                       // 12044
function threshold$1() {                                                                                               // 12045
  var domain = [0.5],                                                                                                  // 12046
      range$$1 = [0, 1],                                                                                               // 12047
      n = 1;                                                                                                           // 12048
                                                                                                                       // 12049
  function scale(x) {                                                                                                  // 12050
    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];                                                         // 12051
  }                                                                                                                    // 12052
                                                                                                                       // 12053
  scale.domain = function(_) {                                                                                         // 12054
    return arguments.length ? (domain = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
  };                                                                                                                   // 12056
                                                                                                                       // 12057
  scale.range = function(_) {                                                                                          // 12058
    return arguments.length ? (range$$1 = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
  };                                                                                                                   // 12060
                                                                                                                       // 12061
  scale.invertExtent = function(y) {                                                                                   // 12062
    var i = range$$1.indexOf(y);                                                                                       // 12063
    return [domain[i - 1], domain[i]];                                                                                 // 12064
  };                                                                                                                   // 12065
                                                                                                                       // 12066
  scale.copy = function() {                                                                                            // 12067
    return threshold$1()                                                                                               // 12068
        .domain(domain)                                                                                                // 12069
        .range(range$$1);                                                                                              // 12070
  };                                                                                                                   // 12071
                                                                                                                       // 12072
  return scale;                                                                                                        // 12073
}                                                                                                                      // 12074
                                                                                                                       // 12075
var t0$1 = new Date;                                                                                                   // 12076
var t1$1 = new Date;                                                                                                   // 12077
                                                                                                                       // 12078
function newInterval(floori, offseti, count, field) {                                                                  // 12079
                                                                                                                       // 12080
  function interval(date) {                                                                                            // 12081
    return floori(date = new Date(+date)), date;                                                                       // 12082
  }                                                                                                                    // 12083
                                                                                                                       // 12084
  interval.floor = interval;                                                                                           // 12085
                                                                                                                       // 12086
  interval.ceil = function(date) {                                                                                     // 12087
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;                                    // 12088
  };                                                                                                                   // 12089
                                                                                                                       // 12090
  interval.round = function(date) {                                                                                    // 12091
    var d0 = interval(date),                                                                                           // 12092
        d1 = interval.ceil(date);                                                                                      // 12093
    return date - d0 < d1 - date ? d0 : d1;                                                                            // 12094
  };                                                                                                                   // 12095
                                                                                                                       // 12096
  interval.offset = function(date, step) {                                                                             // 12097
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;                                 // 12098
  };                                                                                                                   // 12099
                                                                                                                       // 12100
  interval.range = function(start, stop, step) {                                                                       // 12101
    var range = [];                                                                                                    // 12102
    start = interval.ceil(start);                                                                                      // 12103
    step = step == null ? 1 : Math.floor(step);                                                                        // 12104
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date                                     // 12105
    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)                         // 12106
    return range;                                                                                                      // 12107
  };                                                                                                                   // 12108
                                                                                                                       // 12109
  interval.filter = function(test) {                                                                                   // 12110
    return newInterval(function(date) {                                                                                // 12111
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);                                      // 12112
    }, function(date, step) {                                                                                          // 12113
      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty   // 12114
    });                                                                                                                // 12115
  };                                                                                                                   // 12116
                                                                                                                       // 12117
  if (count) {                                                                                                         // 12118
    interval.count = function(start, end) {                                                                            // 12119
      t0$1.setTime(+start), t1$1.setTime(+end);                                                                        // 12120
      floori(t0$1), floori(t1$1);                                                                                      // 12121
      return Math.floor(count(t0$1, t1$1));                                                                            // 12122
    };                                                                                                                 // 12123
                                                                                                                       // 12124
    interval.every = function(step) {                                                                                  // 12125
      step = Math.floor(step);                                                                                         // 12126
      return !isFinite(step) || !(step > 0) ? null                                                                     // 12127
          : !(step > 1) ? interval                                                                                     // 12128
          : interval.filter(field                                                                                      // 12129
              ? function(d) { return field(d) % step === 0; }                                                          // 12130
              : function(d) { return interval.count(0, d) % step === 0; });                                            // 12131
    };                                                                                                                 // 12132
  }                                                                                                                    // 12133
                                                                                                                       // 12134
  return interval;                                                                                                     // 12135
}                                                                                                                      // 12136
                                                                                                                       // 12137
var millisecond = newInterval(function() {                                                                             // 12138
  // noop                                                                                                              // 12139
}, function(date, step) {                                                                                              // 12140
  date.setTime(+date + step);                                                                                          // 12141
}, function(start, end) {                                                                                              // 12142
  return end - start;                                                                                                  // 12143
});                                                                                                                    // 12144
                                                                                                                       // 12145
// An optimized implementation for this simple case.                                                                   // 12146
millisecond.every = function(k) {                                                                                      // 12147
  k = Math.floor(k);                                                                                                   // 12148
  if (!isFinite(k) || !(k > 0)) return null;                                                                           // 12149
  if (!(k > 1)) return millisecond;                                                                                    // 12150
  return newInterval(function(date) {                                                                                  // 12151
    date.setTime(Math.floor(date / k) * k);                                                                            // 12152
  }, function(date, step) {                                                                                            // 12153
    date.setTime(+date + step * k);                                                                                    // 12154
  }, function(start, end) {                                                                                            // 12155
    return (end - start) / k;                                                                                          // 12156
  });                                                                                                                  // 12157
};                                                                                                                     // 12158
                                                                                                                       // 12159
var milliseconds = millisecond.range;                                                                                  // 12160
                                                                                                                       // 12161
var durationSecond$1 = 1e3;                                                                                            // 12162
var durationMinute$1 = 6e4;                                                                                            // 12163
var durationHour$1 = 36e5;                                                                                             // 12164
var durationDay$1 = 864e5;                                                                                             // 12165
var durationWeek$1 = 6048e5;                                                                                           // 12166
                                                                                                                       // 12167
var second = newInterval(function(date) {                                                                              // 12168
  date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1);                                                // 12169
}, function(date, step) {                                                                                              // 12170
  date.setTime(+date + step * durationSecond$1);                                                                       // 12171
}, function(start, end) {                                                                                              // 12172
  return (end - start) / durationSecond$1;                                                                             // 12173
}, function(date) {                                                                                                    // 12174
  return date.getUTCSeconds();                                                                                         // 12175
});                                                                                                                    // 12176
                                                                                                                       // 12177
var seconds = second.range;                                                                                            // 12178
                                                                                                                       // 12179
var minute = newInterval(function(date) {                                                                              // 12180
  date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1);                                                // 12181
}, function(date, step) {                                                                                              // 12182
  date.setTime(+date + step * durationMinute$1);                                                                       // 12183
}, function(start, end) {                                                                                              // 12184
  return (end - start) / durationMinute$1;                                                                             // 12185
}, function(date) {                                                                                                    // 12186
  return date.getMinutes();                                                                                            // 12187
});                                                                                                                    // 12188
                                                                                                                       // 12189
var minutes = minute.range;                                                                                            // 12190
                                                                                                                       // 12191
var hour = newInterval(function(date) {                                                                                // 12192
  var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;                                           // 12193
  if (offset < 0) offset += durationHour$1;                                                                            // 12194
  date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset);                               // 12195
}, function(date, step) {                                                                                              // 12196
  date.setTime(+date + step * durationHour$1);                                                                         // 12197
}, function(start, end) {                                                                                              // 12198
  return (end - start) / durationHour$1;                                                                               // 12199
}, function(date) {                                                                                                    // 12200
  return date.getHours();                                                                                              // 12201
});                                                                                                                    // 12202
                                                                                                                       // 12203
var hours = hour.range;                                                                                                // 12204
                                                                                                                       // 12205
var day = newInterval(function(date) {                                                                                 // 12206
  date.setHours(0, 0, 0, 0);                                                                                           // 12207
}, function(date, step) {                                                                                              // 12208
  date.setDate(date.getDate() + step);                                                                                 // 12209
}, function(start, end) {                                                                                              // 12210
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1;     // 12211
}, function(date) {                                                                                                    // 12212
  return date.getDate() - 1;                                                                                           // 12213
});                                                                                                                    // 12214
                                                                                                                       // 12215
var days = day.range;                                                                                                  // 12216
                                                                                                                       // 12217
function weekday(i) {                                                                                                  // 12218
  return newInterval(function(date) {                                                                                  // 12219
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);                                                        // 12220
    date.setHours(0, 0, 0, 0);                                                                                         // 12221
  }, function(date, step) {                                                                                            // 12222
    date.setDate(date.getDate() + step * 7);                                                                           // 12223
  }, function(start, end) {                                                                                            // 12224
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;  // 12225
  });                                                                                                                  // 12226
}                                                                                                                      // 12227
                                                                                                                       // 12228
var sunday = weekday(0);                                                                                               // 12229
var monday = weekday(1);                                                                                               // 12230
var tuesday = weekday(2);                                                                                              // 12231
var wednesday = weekday(3);                                                                                            // 12232
var thursday = weekday(4);                                                                                             // 12233
var friday = weekday(5);                                                                                               // 12234
var saturday = weekday(6);                                                                                             // 12235
                                                                                                                       // 12236
var sundays = sunday.range;                                                                                            // 12237
var mondays = monday.range;                                                                                            // 12238
var tuesdays = tuesday.range;                                                                                          // 12239
var wednesdays = wednesday.range;                                                                                      // 12240
var thursdays = thursday.range;                                                                                        // 12241
var fridays = friday.range;                                                                                            // 12242
var saturdays = saturday.range;                                                                                        // 12243
                                                                                                                       // 12244
var month = newInterval(function(date) {                                                                               // 12245
  date.setDate(1);                                                                                                     // 12246
  date.setHours(0, 0, 0, 0);                                                                                           // 12247
}, function(date, step) {                                                                                              // 12248
  date.setMonth(date.getMonth() + step);                                                                               // 12249
}, function(start, end) {                                                                                              // 12250
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;                           // 12251
}, function(date) {                                                                                                    // 12252
  return date.getMonth();                                                                                              // 12253
});                                                                                                                    // 12254
                                                                                                                       // 12255
var months = month.range;                                                                                              // 12256
                                                                                                                       // 12257
var year = newInterval(function(date) {                                                                                // 12258
  date.setMonth(0, 1);                                                                                                 // 12259
  date.setHours(0, 0, 0, 0);                                                                                           // 12260
}, function(date, step) {                                                                                              // 12261
  date.setFullYear(date.getFullYear() + step);                                                                         // 12262
}, function(start, end) {                                                                                              // 12263
  return end.getFullYear() - start.getFullYear();                                                                      // 12264
}, function(date) {                                                                                                    // 12265
  return date.getFullYear();                                                                                           // 12266
});                                                                                                                    // 12267
                                                                                                                       // 12268
// An optimized implementation for this simple case.                                                                   // 12269
year.every = function(k) {                                                                                             // 12270
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {                                // 12271
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);                                                          // 12272
    date.setMonth(0, 1);                                                                                               // 12273
    date.setHours(0, 0, 0, 0);                                                                                         // 12274
  }, function(date, step) {                                                                                            // 12275
    date.setFullYear(date.getFullYear() + step * k);                                                                   // 12276
  });                                                                                                                  // 12277
};                                                                                                                     // 12278
                                                                                                                       // 12279
var years = year.range;                                                                                                // 12280
                                                                                                                       // 12281
var utcMinute = newInterval(function(date) {                                                                           // 12282
  date.setUTCSeconds(0, 0);                                                                                            // 12283
}, function(date, step) {                                                                                              // 12284
  date.setTime(+date + step * durationMinute$1);                                                                       // 12285
}, function(start, end) {                                                                                              // 12286
  return (end - start) / durationMinute$1;                                                                             // 12287
}, function(date) {                                                                                                    // 12288
  return date.getUTCMinutes();                                                                                         // 12289
});                                                                                                                    // 12290
                                                                                                                       // 12291
var utcMinutes = utcMinute.range;                                                                                      // 12292
                                                                                                                       // 12293
var utcHour = newInterval(function(date) {                                                                             // 12294
  date.setUTCMinutes(0, 0, 0);                                                                                         // 12295
}, function(date, step) {                                                                                              // 12296
  date.setTime(+date + step * durationHour$1);                                                                         // 12297
}, function(start, end) {                                                                                              // 12298
  return (end - start) / durationHour$1;                                                                               // 12299
}, function(date) {                                                                                                    // 12300
  return date.getUTCHours();                                                                                           // 12301
});                                                                                                                    // 12302
                                                                                                                       // 12303
var utcHours = utcHour.range;                                                                                          // 12304
                                                                                                                       // 12305
var utcDay = newInterval(function(date) {                                                                              // 12306
  date.setUTCHours(0, 0, 0, 0);                                                                                        // 12307
}, function(date, step) {                                                                                              // 12308
  date.setUTCDate(date.getUTCDate() + step);                                                                           // 12309
}, function(start, end) {                                                                                              // 12310
  return (end - start) / durationDay$1;                                                                                // 12311
}, function(date) {                                                                                                    // 12312
  return date.getUTCDate() - 1;                                                                                        // 12313
});                                                                                                                    // 12314
                                                                                                                       // 12315
var utcDays = utcDay.range;                                                                                            // 12316
                                                                                                                       // 12317
function utcWeekday(i) {                                                                                               // 12318
  return newInterval(function(date) {                                                                                  // 12319
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);                                               // 12320
    date.setUTCHours(0, 0, 0, 0);                                                                                      // 12321
  }, function(date, step) {                                                                                            // 12322
    date.setUTCDate(date.getUTCDate() + step * 7);                                                                     // 12323
  }, function(start, end) {                                                                                            // 12324
    return (end - start) / durationWeek$1;                                                                             // 12325
  });                                                                                                                  // 12326
}                                                                                                                      // 12327
                                                                                                                       // 12328
var utcSunday = utcWeekday(0);                                                                                         // 12329
var utcMonday = utcWeekday(1);                                                                                         // 12330
var utcTuesday = utcWeekday(2);                                                                                        // 12331
var utcWednesday = utcWeekday(3);                                                                                      // 12332
var utcThursday = utcWeekday(4);                                                                                       // 12333
var utcFriday = utcWeekday(5);                                                                                         // 12334
var utcSaturday = utcWeekday(6);                                                                                       // 12335
                                                                                                                       // 12336
var utcSundays = utcSunday.range;                                                                                      // 12337
var utcMondays = utcMonday.range;                                                                                      // 12338
var utcTuesdays = utcTuesday.range;                                                                                    // 12339
var utcWednesdays = utcWednesday.range;                                                                                // 12340
var utcThursdays = utcThursday.range;                                                                                  // 12341
var utcFridays = utcFriday.range;                                                                                      // 12342
var utcSaturdays = utcSaturday.range;                                                                                  // 12343
                                                                                                                       // 12344
var utcMonth = newInterval(function(date) {                                                                            // 12345
  date.setUTCDate(1);                                                                                                  // 12346
  date.setUTCHours(0, 0, 0, 0);                                                                                        // 12347
}, function(date, step) {                                                                                              // 12348
  date.setUTCMonth(date.getUTCMonth() + step);                                                                         // 12349
}, function(start, end) {                                                                                              // 12350
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;               // 12351
}, function(date) {                                                                                                    // 12352
  return date.getUTCMonth();                                                                                           // 12353
});                                                                                                                    // 12354
                                                                                                                       // 12355
var utcMonths = utcMonth.range;                                                                                        // 12356
                                                                                                                       // 12357
var utcYear = newInterval(function(date) {                                                                             // 12358
  date.setUTCMonth(0, 1);                                                                                              // 12359
  date.setUTCHours(0, 0, 0, 0);                                                                                        // 12360
}, function(date, step) {                                                                                              // 12361
  date.setUTCFullYear(date.getUTCFullYear() + step);                                                                   // 12362
}, function(start, end) {                                                                                              // 12363
  return end.getUTCFullYear() - start.getUTCFullYear();                                                                // 12364
}, function(date) {                                                                                                    // 12365
  return date.getUTCFullYear();                                                                                        // 12366
});                                                                                                                    // 12367
                                                                                                                       // 12368
// An optimized implementation for this simple case.                                                                   // 12369
utcYear.every = function(k) {                                                                                          // 12370
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {                                // 12371
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);                                                    // 12372
    date.setUTCMonth(0, 1);                                                                                            // 12373
    date.setUTCHours(0, 0, 0, 0);                                                                                      // 12374
  }, function(date, step) {                                                                                            // 12375
    date.setUTCFullYear(date.getUTCFullYear() + step * k);                                                             // 12376
  });                                                                                                                  // 12377
};                                                                                                                     // 12378
                                                                                                                       // 12379
var utcYears = utcYear.range;                                                                                          // 12380
                                                                                                                       // 12381
function localDate(d) {                                                                                                // 12382
  if (0 <= d.y && d.y < 100) {                                                                                         // 12383
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);                                                             // 12384
    date.setFullYear(d.y);                                                                                             // 12385
    return date;                                                                                                       // 12386
  }                                                                                                                    // 12387
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);                                                                  // 12388
}                                                                                                                      // 12389
                                                                                                                       // 12390
function utcDate(d) {                                                                                                  // 12391
  if (0 <= d.y && d.y < 100) {                                                                                         // 12392
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));                                                   // 12393
    date.setUTCFullYear(d.y);                                                                                          // 12394
    return date;                                                                                                       // 12395
  }                                                                                                                    // 12396
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));                                                        // 12397
}                                                                                                                      // 12398
                                                                                                                       // 12399
function newYear(y) {                                                                                                  // 12400
  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};                                                                   // 12401
}                                                                                                                      // 12402
                                                                                                                       // 12403
function formatLocale$1(locale) {                                                                                      // 12404
  var locale_dateTime = locale.dateTime,                                                                               // 12405
      locale_date = locale.date,                                                                                       // 12406
      locale_time = locale.time,                                                                                       // 12407
      locale_periods = locale.periods,                                                                                 // 12408
      locale_weekdays = locale.days,                                                                                   // 12409
      locale_shortWeekdays = locale.shortDays,                                                                         // 12410
      locale_months = locale.months,                                                                                   // 12411
      locale_shortMonths = locale.shortMonths;                                                                         // 12412
                                                                                                                       // 12413
  var periodRe = formatRe(locale_periods),                                                                             // 12414
      periodLookup = formatLookup(locale_periods),                                                                     // 12415
      weekdayRe = formatRe(locale_weekdays),                                                                           // 12416
      weekdayLookup = formatLookup(locale_weekdays),                                                                   // 12417
      shortWeekdayRe = formatRe(locale_shortWeekdays),                                                                 // 12418
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),                                                         // 12419
      monthRe = formatRe(locale_months),                                                                               // 12420
      monthLookup = formatLookup(locale_months),                                                                       // 12421
      shortMonthRe = formatRe(locale_shortMonths),                                                                     // 12422
      shortMonthLookup = formatLookup(locale_shortMonths);                                                             // 12423
                                                                                                                       // 12424
  var formats = {                                                                                                      // 12425
    "a": formatShortWeekday,                                                                                           // 12426
    "A": formatWeekday,                                                                                                // 12427
    "b": formatShortMonth,                                                                                             // 12428
    "B": formatMonth,                                                                                                  // 12429
    "c": null,                                                                                                         // 12430
    "d": formatDayOfMonth,                                                                                             // 12431
    "e": formatDayOfMonth,                                                                                             // 12432
    "H": formatHour24,                                                                                                 // 12433
    "I": formatHour12,                                                                                                 // 12434
    "j": formatDayOfYear,                                                                                              // 12435
    "L": formatMilliseconds,                                                                                           // 12436
    "m": formatMonthNumber,                                                                                            // 12437
    "M": formatMinutes,                                                                                                // 12438
    "p": formatPeriod,                                                                                                 // 12439
    "S": formatSeconds,                                                                                                // 12440
    "U": formatWeekNumberSunday,                                                                                       // 12441
    "w": formatWeekdayNumber,                                                                                          // 12442
    "W": formatWeekNumberMonday,                                                                                       // 12443
    "x": null,                                                                                                         // 12444
    "X": null,                                                                                                         // 12445
    "y": formatYear,                                                                                                   // 12446
    "Y": formatFullYear,                                                                                               // 12447
    "Z": formatZone,                                                                                                   // 12448
    "%": formatLiteralPercent                                                                                          // 12449
  };                                                                                                                   // 12450
                                                                                                                       // 12451
  var utcFormats = {                                                                                                   // 12452
    "a": formatUTCShortWeekday,                                                                                        // 12453
    "A": formatUTCWeekday,                                                                                             // 12454
    "b": formatUTCShortMonth,                                                                                          // 12455
    "B": formatUTCMonth,                                                                                               // 12456
    "c": null,                                                                                                         // 12457
    "d": formatUTCDayOfMonth,                                                                                          // 12458
    "e": formatUTCDayOfMonth,                                                                                          // 12459
    "H": formatUTCHour24,                                                                                              // 12460
    "I": formatUTCHour12,                                                                                              // 12461
    "j": formatUTCDayOfYear,                                                                                           // 12462
    "L": formatUTCMilliseconds,                                                                                        // 12463
    "m": formatUTCMonthNumber,                                                                                         // 12464
    "M": formatUTCMinutes,                                                                                             // 12465
    "p": formatUTCPeriod,                                                                                              // 12466
    "S": formatUTCSeconds,                                                                                             // 12467
    "U": formatUTCWeekNumberSunday,                                                                                    // 12468
    "w": formatUTCWeekdayNumber,                                                                                       // 12469
    "W": formatUTCWeekNumberMonday,                                                                                    // 12470
    "x": null,                                                                                                         // 12471
    "X": null,                                                                                                         // 12472
    "y": formatUTCYear,                                                                                                // 12473
    "Y": formatUTCFullYear,                                                                                            // 12474
    "Z": formatUTCZone,                                                                                                // 12475
    "%": formatLiteralPercent                                                                                          // 12476
  };                                                                                                                   // 12477
                                                                                                                       // 12478
  var parses = {                                                                                                       // 12479
    "a": parseShortWeekday,                                                                                            // 12480
    "A": parseWeekday,                                                                                                 // 12481
    "b": parseShortMonth,                                                                                              // 12482
    "B": parseMonth,                                                                                                   // 12483
    "c": parseLocaleDateTime,                                                                                          // 12484
    "d": parseDayOfMonth,                                                                                              // 12485
    "e": parseDayOfMonth,                                                                                              // 12486
    "H": parseHour24,                                                                                                  // 12487
    "I": parseHour24,                                                                                                  // 12488
    "j": parseDayOfYear,                                                                                               // 12489
    "L": parseMilliseconds,                                                                                            // 12490
    "m": parseMonthNumber,                                                                                             // 12491
    "M": parseMinutes,                                                                                                 // 12492
    "p": parsePeriod,                                                                                                  // 12493
    "S": parseSeconds,                                                                                                 // 12494
    "U": parseWeekNumberSunday,                                                                                        // 12495
    "w": parseWeekdayNumber,                                                                                           // 12496
    "W": parseWeekNumberMonday,                                                                                        // 12497
    "x": parseLocaleDate,                                                                                              // 12498
    "X": parseLocaleTime,                                                                                              // 12499
    "y": parseYear,                                                                                                    // 12500
    "Y": parseFullYear,                                                                                                // 12501
    "Z": parseZone,                                                                                                    // 12502
    "%": parseLiteralPercent                                                                                           // 12503
  };                                                                                                                   // 12504
                                                                                                                       // 12505
  // These recursive directive definitions must be deferred.                                                           // 12506
  formats.x = newFormat(locale_date, formats);                                                                         // 12507
  formats.X = newFormat(locale_time, formats);                                                                         // 12508
  formats.c = newFormat(locale_dateTime, formats);                                                                     // 12509
  utcFormats.x = newFormat(locale_date, utcFormats);                                                                   // 12510
  utcFormats.X = newFormat(locale_time, utcFormats);                                                                   // 12511
  utcFormats.c = newFormat(locale_dateTime, utcFormats);                                                               // 12512
                                                                                                                       // 12513
  function newFormat(specifier, formats) {                                                                             // 12514
    return function(date) {                                                                                            // 12515
      var string = [],                                                                                                 // 12516
          i = -1,                                                                                                      // 12517
          j = 0,                                                                                                       // 12518
          n = specifier.length,                                                                                        // 12519
          c,                                                                                                           // 12520
          pad,                                                                                                         // 12521
          format;                                                                                                      // 12522
                                                                                                                       // 12523
      if (!(date instanceof Date)) date = new Date(+date);                                                             // 12524
                                                                                                                       // 12525
      while (++i < n) {                                                                                                // 12526
        if (specifier.charCodeAt(i) === 37) {                                                                          // 12527
          string.push(specifier.slice(j, i));                                                                          // 12528
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);                              // 12529
          else pad = c === "e" ? " " : "0";                                                                            // 12530
          if (format = formats[c]) c = format(date, pad);                                                              // 12531
          string.push(c);                                                                                              // 12532
          j = i + 1;                                                                                                   // 12533
        }                                                                                                              // 12534
      }                                                                                                                // 12535
                                                                                                                       // 12536
      string.push(specifier.slice(j, i));                                                                              // 12537
      return string.join("");                                                                                          // 12538
    };                                                                                                                 // 12539
  }                                                                                                                    // 12540
                                                                                                                       // 12541
  function newParse(specifier, newDate) {                                                                              // 12542
    return function(string) {                                                                                          // 12543
      var d = newYear(1900),                                                                                           // 12544
          i = parseSpecifier(d, specifier, string += "", 0);                                                           // 12545
      if (i != string.length) return null;                                                                             // 12546
                                                                                                                       // 12547
      // The am-pm flag is 0 for AM, and 1 for PM.                                                                     // 12548
      if ("p" in d) d.H = d.H % 12 + d.p * 12;                                                                         // 12549
                                                                                                                       // 12550
      // Convert day-of-week and week-of-year to day-of-year.                                                          // 12551
      if ("W" in d || "U" in d) {                                                                                      // 12552
        if (!("w" in d)) d.w = "W" in d ? 1 : 0;                                                                       // 12553
        var day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();                    // 12554
        d.m = 0;                                                                                                       // 12555
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;                // 12556
      }                                                                                                                // 12557
                                                                                                                       // 12558
      // If a time zone is specified, all fields are interpreted as UTC and then                                       // 12559
      // offset according to the specified time zone.                                                                  // 12560
      if ("Z" in d) {                                                                                                  // 12561
        d.H += d.Z / 100 | 0;                                                                                          // 12562
        d.M += d.Z % 100;                                                                                              // 12563
        return utcDate(d);                                                                                             // 12564
      }                                                                                                                // 12565
                                                                                                                       // 12566
      // Otherwise, all fields are in local time.                                                                      // 12567
      return newDate(d);                                                                                               // 12568
    };                                                                                                                 // 12569
  }                                                                                                                    // 12570
                                                                                                                       // 12571
  function parseSpecifier(d, specifier, string, j) {                                                                   // 12572
    var i = 0,                                                                                                         // 12573
        n = specifier.length,                                                                                          // 12574
        m = string.length,                                                                                             // 12575
        c,                                                                                                             // 12576
        parse;                                                                                                         // 12577
                                                                                                                       // 12578
    while (i < n) {                                                                                                    // 12579
      if (j >= m) return -1;                                                                                           // 12580
      c = specifier.charCodeAt(i++);                                                                                   // 12581
      if (c === 37) {                                                                                                  // 12582
        c = specifier.charAt(i++);                                                                                     // 12583
        parse = parses[c in pads ? specifier.charAt(i++) : c];                                                         // 12584
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;                                                      // 12585
      } else if (c != string.charCodeAt(j++)) {                                                                        // 12586
        return -1;                                                                                                     // 12587
      }                                                                                                                // 12588
    }                                                                                                                  // 12589
                                                                                                                       // 12590
    return j;                                                                                                          // 12591
  }                                                                                                                    // 12592
                                                                                                                       // 12593
  function parsePeriod(d, string, i) {                                                                                 // 12594
    var n = periodRe.exec(string.slice(i));                                                                            // 12595
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;                                         // 12596
  }                                                                                                                    // 12597
                                                                                                                       // 12598
  function parseShortWeekday(d, string, i) {                                                                           // 12599
    var n = shortWeekdayRe.exec(string.slice(i));                                                                      // 12600
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;                                   // 12601
  }                                                                                                                    // 12602
                                                                                                                       // 12603
  function parseWeekday(d, string, i) {                                                                                // 12604
    var n = weekdayRe.exec(string.slice(i));                                                                           // 12605
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;                                        // 12606
  }                                                                                                                    // 12607
                                                                                                                       // 12608
  function parseShortMonth(d, string, i) {                                                                             // 12609
    var n = shortMonthRe.exec(string.slice(i));                                                                        // 12610
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;                                     // 12611
  }                                                                                                                    // 12612
                                                                                                                       // 12613
  function parseMonth(d, string, i) {                                                                                  // 12614
    var n = monthRe.exec(string.slice(i));                                                                             // 12615
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;                                          // 12616
  }                                                                                                                    // 12617
                                                                                                                       // 12618
  function parseLocaleDateTime(d, string, i) {                                                                         // 12619
    return parseSpecifier(d, locale_dateTime, string, i);                                                              // 12620
  }                                                                                                                    // 12621
                                                                                                                       // 12622
  function parseLocaleDate(d, string, i) {                                                                             // 12623
    return parseSpecifier(d, locale_date, string, i);                                                                  // 12624
  }                                                                                                                    // 12625
                                                                                                                       // 12626
  function parseLocaleTime(d, string, i) {                                                                             // 12627
    return parseSpecifier(d, locale_time, string, i);                                                                  // 12628
  }                                                                                                                    // 12629
                                                                                                                       // 12630
  function formatShortWeekday(d) {                                                                                     // 12631
    return locale_shortWeekdays[d.getDay()];                                                                           // 12632
  }                                                                                                                    // 12633
                                                                                                                       // 12634
  function formatWeekday(d) {                                                                                          // 12635
    return locale_weekdays[d.getDay()];                                                                                // 12636
  }                                                                                                                    // 12637
                                                                                                                       // 12638
  function formatShortMonth(d) {                                                                                       // 12639
    return locale_shortMonths[d.getMonth()];                                                                           // 12640
  }                                                                                                                    // 12641
                                                                                                                       // 12642
  function formatMonth(d) {                                                                                            // 12643
    return locale_months[d.getMonth()];                                                                                // 12644
  }                                                                                                                    // 12645
                                                                                                                       // 12646
  function formatPeriod(d) {                                                                                           // 12647
    return locale_periods[+(d.getHours() >= 12)];                                                                      // 12648
  }                                                                                                                    // 12649
                                                                                                                       // 12650
  function formatUTCShortWeekday(d) {                                                                                  // 12651
    return locale_shortWeekdays[d.getUTCDay()];                                                                        // 12652
  }                                                                                                                    // 12653
                                                                                                                       // 12654
  function formatUTCWeekday(d) {                                                                                       // 12655
    return locale_weekdays[d.getUTCDay()];                                                                             // 12656
  }                                                                                                                    // 12657
                                                                                                                       // 12658
  function formatUTCShortMonth(d) {                                                                                    // 12659
    return locale_shortMonths[d.getUTCMonth()];                                                                        // 12660
  }                                                                                                                    // 12661
                                                                                                                       // 12662
  function formatUTCMonth(d) {                                                                                         // 12663
    return locale_months[d.getUTCMonth()];                                                                             // 12664
  }                                                                                                                    // 12665
                                                                                                                       // 12666
  function formatUTCPeriod(d) {                                                                                        // 12667
    return locale_periods[+(d.getUTCHours() >= 12)];                                                                   // 12668
  }                                                                                                                    // 12669
                                                                                                                       // 12670
  return {                                                                                                             // 12671
    format: function(specifier) {                                                                                      // 12672
      var f = newFormat(specifier += "", formats);                                                                     // 12673
      f.toString = function() { return specifier; };                                                                   // 12674
      return f;                                                                                                        // 12675
    },                                                                                                                 // 12676
    parse: function(specifier) {                                                                                       // 12677
      var p = newParse(specifier += "", localDate);                                                                    // 12678
      p.toString = function() { return specifier; };                                                                   // 12679
      return p;                                                                                                        // 12680
    },                                                                                                                 // 12681
    utcFormat: function(specifier) {                                                                                   // 12682
      var f = newFormat(specifier += "", utcFormats);                                                                  // 12683
      f.toString = function() { return specifier; };                                                                   // 12684
      return f;                                                                                                        // 12685
    },                                                                                                                 // 12686
    utcParse: function(specifier) {                                                                                    // 12687
      var p = newParse(specifier, utcDate);                                                                            // 12688
      p.toString = function() { return specifier; };                                                                   // 12689
      return p;                                                                                                        // 12690
    }                                                                                                                  // 12691
  };                                                                                                                   // 12692
}                                                                                                                      // 12693
                                                                                                                       // 12694
var pads = {"-": "", "_": " ", "0": "0"};                                                                              // 12695
var numberRe = /^\s*\d+/;                                                                                              // 12696
var percentRe = /^%/;                                                                                                  // 12697
var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;                                                                     // 12698
                                                                                                                       // 12699
function pad(value, fill, width) {                                                                                     // 12700
  var sign = value < 0 ? "-" : "",                                                                                     // 12701
      string = (sign ? -value : value) + "",                                                                           // 12702
      length = string.length;                                                                                          // 12703
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);                         // 12704
}                                                                                                                      // 12705
                                                                                                                       // 12706
function requote(s) {                                                                                                  // 12707
  return s.replace(requoteRe, "\\$&");                                                                                 // 12708
}                                                                                                                      // 12709
                                                                                                                       // 12710
function formatRe(names) {                                                                                             // 12711
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");                                                 // 12712
}                                                                                                                      // 12713
                                                                                                                       // 12714
function formatLookup(names) {                                                                                         // 12715
  var map = {}, i = -1, n = names.length;                                                                              // 12716
  while (++i < n) map[names[i].toLowerCase()] = i;                                                                     // 12717
  return map;                                                                                                          // 12718
}                                                                                                                      // 12719
                                                                                                                       // 12720
function parseWeekdayNumber(d, string, i) {                                                                            // 12721
  var n = numberRe.exec(string.slice(i, i + 1));                                                                       // 12722
  return n ? (d.w = +n[0], i + n[0].length) : -1;                                                                      // 12723
}                                                                                                                      // 12724
                                                                                                                       // 12725
function parseWeekNumberSunday(d, string, i) {                                                                         // 12726
  var n = numberRe.exec(string.slice(i));                                                                              // 12727
  return n ? (d.U = +n[0], i + n[0].length) : -1;                                                                      // 12728
}                                                                                                                      // 12729
                                                                                                                       // 12730
function parseWeekNumberMonday(d, string, i) {                                                                         // 12731
  var n = numberRe.exec(string.slice(i));                                                                              // 12732
  return n ? (d.W = +n[0], i + n[0].length) : -1;                                                                      // 12733
}                                                                                                                      // 12734
                                                                                                                       // 12735
function parseFullYear(d, string, i) {                                                                                 // 12736
  var n = numberRe.exec(string.slice(i, i + 4));                                                                       // 12737
  return n ? (d.y = +n[0], i + n[0].length) : -1;                                                                      // 12738
}                                                                                                                      // 12739
                                                                                                                       // 12740
function parseYear(d, string, i) {                                                                                     // 12741
  var n = numberRe.exec(string.slice(i, i + 2));                                                                       // 12742
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;                                         // 12743
}                                                                                                                      // 12744
                                                                                                                       // 12745
function parseZone(d, string, i) {                                                                                     // 12746
  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));                                                // 12747
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;                                        // 12748
}                                                                                                                      // 12749
                                                                                                                       // 12750
function parseMonthNumber(d, string, i) {                                                                              // 12751
  var n = numberRe.exec(string.slice(i, i + 2));                                                                       // 12752
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;                                                                   // 12753
}                                                                                                                      // 12754
                                                                                                                       // 12755
function parseDayOfMonth(d, string, i) {                                                                               // 12756
  var n = numberRe.exec(string.slice(i, i + 2));                                                                       // 12757
  return n ? (d.d = +n[0], i + n[0].length) : -1;                                                                      // 12758
}                                                                                                                      // 12759
                                                                                                                       // 12760
function parseDayOfYear(d, string, i) {                                                                                // 12761
  var n = numberRe.exec(string.slice(i, i + 3));                                                                       // 12762
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;                                                             // 12763
}                                                                                                                      // 12764
                                                                                                                       // 12765
function parseHour24(d, string, i) {                                                                                   // 12766
  var n = numberRe.exec(string.slice(i, i + 2));                                                                       // 12767
  return n ? (d.H = +n[0], i + n[0].length) : -1;                                                                      // 12768
}                                                                                                                      // 12769
                                                                                                                       // 12770
function parseMinutes(d, string, i) {                                                                                  // 12771
  var n = numberRe.exec(string.slice(i, i + 2));                                                                       // 12772
  return n ? (d.M = +n[0], i + n[0].length) : -1;                                                                      // 12773
}                                                                                                                      // 12774
                                                                                                                       // 12775
function parseSeconds(d, string, i) {                                                                                  // 12776
  var n = numberRe.exec(string.slice(i, i + 2));                                                                       // 12777
  return n ? (d.S = +n[0], i + n[0].length) : -1;                                                                      // 12778
}                                                                                                                      // 12779
                                                                                                                       // 12780
function parseMilliseconds(d, string, i) {                                                                             // 12781
  var n = numberRe.exec(string.slice(i, i + 3));                                                                       // 12782
  return n ? (d.L = +n[0], i + n[0].length) : -1;                                                                      // 12783
}                                                                                                                      // 12784
                                                                                                                       // 12785
function parseLiteralPercent(d, string, i) {                                                                           // 12786
  var n = percentRe.exec(string.slice(i, i + 1));                                                                      // 12787
  return n ? i + n[0].length : -1;                                                                                     // 12788
}                                                                                                                      // 12789
                                                                                                                       // 12790
function formatDayOfMonth(d, p) {                                                                                      // 12791
  return pad(d.getDate(), p, 2);                                                                                       // 12792
}                                                                                                                      // 12793
                                                                                                                       // 12794
function formatHour24(d, p) {                                                                                          // 12795
  return pad(d.getHours(), p, 2);                                                                                      // 12796
}                                                                                                                      // 12797
                                                                                                                       // 12798
function formatHour12(d, p) {                                                                                          // 12799
  return pad(d.getHours() % 12 || 12, p, 2);                                                                           // 12800
}                                                                                                                      // 12801
                                                                                                                       // 12802
function formatDayOfYear(d, p) {                                                                                       // 12803
  return pad(1 + day.count(year(d), d), p, 3);                                                                         // 12804
}                                                                                                                      // 12805
                                                                                                                       // 12806
function formatMilliseconds(d, p) {                                                                                    // 12807
  return pad(d.getMilliseconds(), p, 3);                                                                               // 12808
}                                                                                                                      // 12809
                                                                                                                       // 12810
function formatMonthNumber(d, p) {                                                                                     // 12811
  return pad(d.getMonth() + 1, p, 2);                                                                                  // 12812
}                                                                                                                      // 12813
                                                                                                                       // 12814
function formatMinutes(d, p) {                                                                                         // 12815
  return pad(d.getMinutes(), p, 2);                                                                                    // 12816
}                                                                                                                      // 12817
                                                                                                                       // 12818
function formatSeconds(d, p) {                                                                                         // 12819
  return pad(d.getSeconds(), p, 2);                                                                                    // 12820
}                                                                                                                      // 12821
                                                                                                                       // 12822
function formatWeekNumberSunday(d, p) {                                                                                // 12823
  return pad(sunday.count(year(d), d), p, 2);                                                                          // 12824
}                                                                                                                      // 12825
                                                                                                                       // 12826
function formatWeekdayNumber(d) {                                                                                      // 12827
  return d.getDay();                                                                                                   // 12828
}                                                                                                                      // 12829
                                                                                                                       // 12830
function formatWeekNumberMonday(d, p) {                                                                                // 12831
  return pad(monday.count(year(d), d), p, 2);                                                                          // 12832
}                                                                                                                      // 12833
                                                                                                                       // 12834
function formatYear(d, p) {                                                                                            // 12835
  return pad(d.getFullYear() % 100, p, 2);                                                                             // 12836
}                                                                                                                      // 12837
                                                                                                                       // 12838
function formatFullYear(d, p) {                                                                                        // 12839
  return pad(d.getFullYear() % 10000, p, 4);                                                                           // 12840
}                                                                                                                      // 12841
                                                                                                                       // 12842
function formatZone(d) {                                                                                               // 12843
  var z = d.getTimezoneOffset();                                                                                       // 12844
  return (z > 0 ? "-" : (z *= -1, "+"))                                                                                // 12845
      + pad(z / 60 | 0, "0", 2)                                                                                        // 12846
      + pad(z % 60, "0", 2);                                                                                           // 12847
}                                                                                                                      // 12848
                                                                                                                       // 12849
function formatUTCDayOfMonth(d, p) {                                                                                   // 12850
  return pad(d.getUTCDate(), p, 2);                                                                                    // 12851
}                                                                                                                      // 12852
                                                                                                                       // 12853
function formatUTCHour24(d, p) {                                                                                       // 12854
  return pad(d.getUTCHours(), p, 2);                                                                                   // 12855
}                                                                                                                      // 12856
                                                                                                                       // 12857
function formatUTCHour12(d, p) {                                                                                       // 12858
  return pad(d.getUTCHours() % 12 || 12, p, 2);                                                                        // 12859
}                                                                                                                      // 12860
                                                                                                                       // 12861
function formatUTCDayOfYear(d, p) {                                                                                    // 12862
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);                                                                   // 12863
}                                                                                                                      // 12864
                                                                                                                       // 12865
function formatUTCMilliseconds(d, p) {                                                                                 // 12866
  return pad(d.getUTCMilliseconds(), p, 3);                                                                            // 12867
}                                                                                                                      // 12868
                                                                                                                       // 12869
function formatUTCMonthNumber(d, p) {                                                                                  // 12870
  return pad(d.getUTCMonth() + 1, p, 2);                                                                               // 12871
}                                                                                                                      // 12872
                                                                                                                       // 12873
function formatUTCMinutes(d, p) {                                                                                      // 12874
  return pad(d.getUTCMinutes(), p, 2);                                                                                 // 12875
}                                                                                                                      // 12876
                                                                                                                       // 12877
function formatUTCSeconds(d, p) {                                                                                      // 12878
  return pad(d.getUTCSeconds(), p, 2);                                                                                 // 12879
}                                                                                                                      // 12880
                                                                                                                       // 12881
function formatUTCWeekNumberSunday(d, p) {                                                                             // 12882
  return pad(utcSunday.count(utcYear(d), d), p, 2);                                                                    // 12883
}                                                                                                                      // 12884
                                                                                                                       // 12885
function formatUTCWeekdayNumber(d) {                                                                                   // 12886
  return d.getUTCDay();                                                                                                // 12887
}                                                                                                                      // 12888
                                                                                                                       // 12889
function formatUTCWeekNumberMonday(d, p) {                                                                             // 12890
  return pad(utcMonday.count(utcYear(d), d), p, 2);                                                                    // 12891
}                                                                                                                      // 12892
                                                                                                                       // 12893
function formatUTCYear(d, p) {                                                                                         // 12894
  return pad(d.getUTCFullYear() % 100, p, 2);                                                                          // 12895
}                                                                                                                      // 12896
                                                                                                                       // 12897
function formatUTCFullYear(d, p) {                                                                                     // 12898
  return pad(d.getUTCFullYear() % 10000, p, 4);                                                                        // 12899
}                                                                                                                      // 12900
                                                                                                                       // 12901
function formatUTCZone() {                                                                                             // 12902
  return "+0000";                                                                                                      // 12903
}                                                                                                                      // 12904
                                                                                                                       // 12905
function formatLiteralPercent() {                                                                                      // 12906
  return "%";                                                                                                          // 12907
}                                                                                                                      // 12908
                                                                                                                       // 12909
var locale$2;                                                                                                          // 12910
                                                                                                                       // 12911
                                                                                                                       // 12912
                                                                                                                       // 12913
                                                                                                                       // 12914
                                                                                                                       // 12915
defaultLocale$1({                                                                                                      // 12916
  dateTime: "%x, %X",                                                                                                  // 12917
  date: "%-m/%-d/%Y",                                                                                                  // 12918
  time: "%-I:%M:%S %p",                                                                                                // 12919
  periods: ["AM", "PM"],                                                                                               // 12920
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],                                // 12921
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],                                                        // 12922
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]                    // 12924
});                                                                                                                    // 12925
                                                                                                                       // 12926
function defaultLocale$1(definition) {                                                                                 // 12927
  locale$2 = formatLocale$1(definition);                                                                               // 12928
  exports.timeFormat = locale$2.format;                                                                                // 12929
  exports.timeParse = locale$2.parse;                                                                                  // 12930
  exports.utcFormat = locale$2.utcFormat;                                                                              // 12931
  exports.utcParse = locale$2.utcParse;                                                                                // 12932
  return locale$2;                                                                                                     // 12933
}                                                                                                                      // 12934
                                                                                                                       // 12935
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";                                                                            // 12936
                                                                                                                       // 12937
function formatIsoNative(date) {                                                                                       // 12938
  return date.toISOString();                                                                                           // 12939
}                                                                                                                      // 12940
                                                                                                                       // 12941
var formatIso = Date.prototype.toISOString                                                                             // 12942
    ? formatIsoNative                                                                                                  // 12943
    : exports.utcFormat(isoSpecifier);                                                                                 // 12944
                                                                                                                       // 12945
function parseIsoNative(string) {                                                                                      // 12946
  var date = new Date(string);                                                                                         // 12947
  return isNaN(date) ? null : date;                                                                                    // 12948
}                                                                                                                      // 12949
                                                                                                                       // 12950
var parseIso = +new Date("2000-01-01T00:00:00.000Z")                                                                   // 12951
    ? parseIsoNative                                                                                                   // 12952
    : exports.utcParse(isoSpecifier);                                                                                  // 12953
                                                                                                                       // 12954
var durationSecond = 1000;                                                                                             // 12955
var durationMinute = durationSecond * 60;                                                                              // 12956
var durationHour = durationMinute * 60;                                                                                // 12957
var durationDay = durationHour * 24;                                                                                   // 12958
var durationWeek = durationDay * 7;                                                                                    // 12959
var durationMonth = durationDay * 30;                                                                                  // 12960
var durationYear = durationDay * 365;                                                                                  // 12961
                                                                                                                       // 12962
function date$1(t) {                                                                                                   // 12963
  return new Date(t);                                                                                                  // 12964
}                                                                                                                      // 12965
                                                                                                                       // 12966
function number$2(t) {                                                                                                 // 12967
  return t instanceof Date ? +t : +new Date(+t);                                                                       // 12968
}                                                                                                                      // 12969
                                                                                                                       // 12970
function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {            // 12971
  var scale = continuous(deinterpolateLinear, reinterpolate),                                                          // 12972
      invert = scale.invert,                                                                                           // 12973
      domain = scale.domain;                                                                                           // 12974
                                                                                                                       // 12975
  var formatMillisecond = format(".%L"),                                                                               // 12976
      formatSecond = format(":%S"),                                                                                    // 12977
      formatMinute = format("%I:%M"),                                                                                  // 12978
      formatHour = format("%I %p"),                                                                                    // 12979
      formatDay = format("%a %d"),                                                                                     // 12980
      formatWeek = format("%b %d"),                                                                                    // 12981
      formatMonth = format("%B"),                                                                                      // 12982
      formatYear = format("%Y");                                                                                       // 12983
                                                                                                                       // 12984
  var tickIntervals = [                                                                                                // 12985
    [second$$1,  1,      durationSecond],                                                                              // 12986
    [second$$1,  5,  5 * durationSecond],                                                                              // 12987
    [second$$1, 15, 15 * durationSecond],                                                                              // 12988
    [second$$1, 30, 30 * durationSecond],                                                                              // 12989
    [minute$$1,  1,      durationMinute],                                                                              // 12990
    [minute$$1,  5,  5 * durationMinute],                                                                              // 12991
    [minute$$1, 15, 15 * durationMinute],                                                                              // 12992
    [minute$$1, 30, 30 * durationMinute],                                                                              // 12993
    [  hour$$1,  1,      durationHour  ],                                                                              // 12994
    [  hour$$1,  3,  3 * durationHour  ],                                                                              // 12995
    [  hour$$1,  6,  6 * durationHour  ],                                                                              // 12996
    [  hour$$1, 12, 12 * durationHour  ],                                                                              // 12997
    [   day$$1,  1,      durationDay   ],                                                                              // 12998
    [   day$$1,  2,  2 * durationDay   ],                                                                              // 12999
    [  week,  1,      durationWeek  ],                                                                                 // 13000
    [ month$$1,  1,      durationMonth ],                                                                              // 13001
    [ month$$1,  3,  3 * durationMonth ],                                                                              // 13002
    [  year$$1,  1,      durationYear  ]                                                                               // 13003
  ];                                                                                                                   // 13004
                                                                                                                       // 13005
  function tickFormat(date) {                                                                                          // 13006
    return (second$$1(date) < date ? formatMillisecond                                                                 // 13007
        : minute$$1(date) < date ? formatSecond                                                                        // 13008
        : hour$$1(date) < date ? formatMinute                                                                          // 13009
        : day$$1(date) < date ? formatHour                                                                             // 13010
        : month$$1(date) < date ? (week(date) < date ? formatDay : formatWeek)                                         // 13011
        : year$$1(date) < date ? formatMonth                                                                           // 13012
        : formatYear)(date);                                                                                           // 13013
  }                                                                                                                    // 13014
                                                                                                                       // 13015
  function tickInterval(interval, start, stop, step) {                                                                 // 13016
    if (interval == null) interval = 10;                                                                               // 13017
                                                                                                                       // 13018
    // If a desired tick count is specified, pick a reasonable tick interval                                           // 13019
    // based on the extent of the domain and a rough estimate of tick size.                                            // 13020
    // Otherwise, assume interval is already a time interval and use it.                                               // 13021
    if (typeof interval === "number") {                                                                                // 13022
      var target = Math.abs(stop - start) / interval,                                                                  // 13023
          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);                                     // 13024
      if (i === tickIntervals.length) {                                                                                // 13025
        step = tickStep(start / durationYear, stop / durationYear, interval);                                          // 13026
        interval = year$$1;                                                                                            // 13027
      } else if (i) {                                                                                                  // 13028
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];                // 13029
        step = i[1];                                                                                                   // 13030
        interval = i[0];                                                                                               // 13031
      } else {                                                                                                         // 13032
        step = tickStep(start, stop, interval);                                                                        // 13033
        interval = millisecond$$1;                                                                                     // 13034
      }                                                                                                                // 13035
    }                                                                                                                  // 13036
                                                                                                                       // 13037
    return step == null ? interval : interval.every(step);                                                             // 13038
  }                                                                                                                    // 13039
                                                                                                                       // 13040
  scale.invert = function(y) {                                                                                         // 13041
    return new Date(invert(y));                                                                                        // 13042
  };                                                                                                                   // 13043
                                                                                                                       // 13044
  scale.domain = function(_) {                                                                                         // 13045
    return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1);                                  // 13046
  };                                                                                                                   // 13047
                                                                                                                       // 13048
  scale.ticks = function(interval, step) {                                                                             // 13049
    var d = domain(),                                                                                                  // 13050
        t0 = d[0],                                                                                                     // 13051
        t1 = d[d.length - 1],                                                                                          // 13052
        r = t1 < t0,                                                                                                   // 13053
        t;                                                                                                             // 13054
    if (r) t = t0, t0 = t1, t1 = t;                                                                                    // 13055
    t = tickInterval(interval, t0, t1, step);                                                                          // 13056
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop                                                                // 13057
    return r ? t.reverse() : t;                                                                                        // 13058
  };                                                                                                                   // 13059
                                                                                                                       // 13060
  scale.tickFormat = function(count, specifier) {                                                                      // 13061
    return specifier == null ? tickFormat : format(specifier);                                                         // 13062
  };                                                                                                                   // 13063
                                                                                                                       // 13064
  scale.nice = function(interval, step) {                                                                              // 13065
    var d = domain();                                                                                                  // 13066
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))                                            // 13067
        ? domain(nice(d, interval))                                                                                    // 13068
        : scale;                                                                                                       // 13069
  };                                                                                                                   // 13070
                                                                                                                       // 13071
  scale.copy = function() {                                                                                            // 13072
    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
  };                                                                                                                   // 13074
                                                                                                                       // 13075
  return scale;                                                                                                        // 13076
}                                                                                                                      // 13077
                                                                                                                       // 13078
var time = function() {                                                                                                // 13079
  return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
};                                                                                                                     // 13081
                                                                                                                       // 13082
var utcTime = function() {                                                                                             // 13083
  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
};                                                                                                                     // 13085
                                                                                                                       // 13086
var colors = function(s) {                                                                                             // 13087
  return s.match(/.{6}/g).map(function(x) {                                                                            // 13088
    return "#" + x;                                                                                                    // 13089
  });                                                                                                                  // 13090
};                                                                                                                     // 13091
                                                                                                                       // 13092
var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");                               // 13093
                                                                                                                       // 13094
var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");
                                                                                                                       // 13096
var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");
                                                                                                                       // 13098
var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");
                                                                                                                       // 13100
var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));                                  // 13101
                                                                                                                       // 13102
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));                                       // 13103
                                                                                                                       // 13104
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));                                        // 13105
                                                                                                                       // 13106
var rainbow = cubehelix();                                                                                             // 13107
                                                                                                                       // 13108
var rainbow$1 = function(t) {                                                                                          // 13109
  if (t < 0 || t > 1) t -= Math.floor(t);                                                                              // 13110
  var ts = Math.abs(t - 0.5);                                                                                          // 13111
  rainbow.h = 360 * t - 100;                                                                                           // 13112
  rainbow.s = 1.5 - 1.5 * ts;                                                                                          // 13113
  rainbow.l = 0.8 - 0.9 * ts;                                                                                          // 13114
  return rainbow + "";                                                                                                 // 13115
};                                                                                                                     // 13116
                                                                                                                       // 13117
function ramp(range) {                                                                                                 // 13118
  var n = range.length;                                                                                                // 13119
  return function(t) {                                                                                                 // 13120
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];                                                     // 13121
  };                                                                                                                   // 13122
}                                                                                                                      // 13123
                                                                                                                       // 13124
var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
                                                                                                                       // 13126
var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
                                                                                                                       // 13128
var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
                                                                                                                       // 13130
var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
                                                                                                                       // 13132
function sequential(interpolator) {                                                                                    // 13133
  var x0 = 0,                                                                                                          // 13134
      x1 = 1,                                                                                                          // 13135
      clamp = false;                                                                                                   // 13136
                                                                                                                       // 13137
  function scale(x) {                                                                                                  // 13138
    var t = (x - x0) / (x1 - x0);                                                                                      // 13139
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);                                                      // 13140
  }                                                                                                                    // 13141
                                                                                                                       // 13142
  scale.domain = function(_) {                                                                                         // 13143
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];                                              // 13144
  };                                                                                                                   // 13145
                                                                                                                       // 13146
  scale.clamp = function(_) {                                                                                          // 13147
    return arguments.length ? (clamp = !!_, scale) : clamp;                                                            // 13148
  };                                                                                                                   // 13149
                                                                                                                       // 13150
  scale.interpolator = function(_) {                                                                                   // 13151
    return arguments.length ? (interpolator = _, scale) : interpolator;                                                // 13152
  };                                                                                                                   // 13153
                                                                                                                       // 13154
  scale.copy = function() {                                                                                            // 13155
    return sequential(interpolator).domain([x0, x1]).clamp(clamp);                                                     // 13156
  };                                                                                                                   // 13157
                                                                                                                       // 13158
  return linearish(scale);                                                                                             // 13159
}                                                                                                                      // 13160
                                                                                                                       // 13161
var constant$10 = function(x) {                                                                                        // 13162
  return function constant() {                                                                                         // 13163
    return x;                                                                                                          // 13164
  };                                                                                                                   // 13165
};                                                                                                                     // 13166
                                                                                                                       // 13167
var abs$1 = Math.abs;                                                                                                  // 13168
var atan2$1 = Math.atan2;                                                                                              // 13169
var cos$2 = Math.cos;                                                                                                  // 13170
var max$2 = Math.max;                                                                                                  // 13171
var min$1 = Math.min;                                                                                                  // 13172
var sin$2 = Math.sin;                                                                                                  // 13173
var sqrt$2 = Math.sqrt;                                                                                                // 13174
                                                                                                                       // 13175
var epsilon$3 = 1e-12;                                                                                                 // 13176
var pi$4 = Math.PI;                                                                                                    // 13177
var halfPi$3 = pi$4 / 2;                                                                                               // 13178
var tau$4 = 2 * pi$4;                                                                                                  // 13179
                                                                                                                       // 13180
function acos$1(x) {                                                                                                   // 13181
  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);                                                                     // 13182
}                                                                                                                      // 13183
                                                                                                                       // 13184
function asin$1(x) {                                                                                                   // 13185
  return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);                                                       // 13186
}                                                                                                                      // 13187
                                                                                                                       // 13188
function arcInnerRadius(d) {                                                                                           // 13189
  return d.innerRadius;                                                                                                // 13190
}                                                                                                                      // 13191
                                                                                                                       // 13192
function arcOuterRadius(d) {                                                                                           // 13193
  return d.outerRadius;                                                                                                // 13194
}                                                                                                                      // 13195
                                                                                                                       // 13196
function arcStartAngle(d) {                                                                                            // 13197
  return d.startAngle;                                                                                                 // 13198
}                                                                                                                      // 13199
                                                                                                                       // 13200
function arcEndAngle(d) {                                                                                              // 13201
  return d.endAngle;                                                                                                   // 13202
}                                                                                                                      // 13203
                                                                                                                       // 13204
function arcPadAngle(d) {                                                                                              // 13205
  return d && d.padAngle; // Note: optional!                                                                           // 13206
}                                                                                                                      // 13207
                                                                                                                       // 13208
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {                                                                   // 13209
  var x10 = x1 - x0, y10 = y1 - y0,                                                                                    // 13210
      x32 = x3 - x2, y32 = y3 - y2,                                                                                    // 13211
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);                                               // 13212
  return [x0 + t * x10, y0 + t * y10];                                                                                 // 13213
}                                                                                                                      // 13214
                                                                                                                       // 13215
// Compute perpendicular offset line of length rc.                                                                     // 13216
// http://mathworld.wolfram.com/Circle-LineIntersection.html                                                           // 13217
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {                                                                  // 13218
  var x01 = x0 - x1,                                                                                                   // 13219
      y01 = y0 - y1,                                                                                                   // 13220
      lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),                                                            // 13221
      ox = lo * y01,                                                                                                   // 13222
      oy = -lo * x01,                                                                                                  // 13223
      x11 = x0 + ox,                                                                                                   // 13224
      y11 = y0 + oy,                                                                                                   // 13225
      x10 = x1 + ox,                                                                                                   // 13226
      y10 = y1 + oy,                                                                                                   // 13227
      x00 = (x11 + x10) / 2,                                                                                           // 13228
      y00 = (y11 + y10) / 2,                                                                                           // 13229
      dx = x10 - x11,                                                                                                  // 13230
      dy = y10 - y11,                                                                                                  // 13231
      d2 = dx * dx + dy * dy,                                                                                          // 13232
      r = r1 - rc,                                                                                                     // 13233
      D = x11 * y10 - x10 * y11,                                                                                       // 13234
      d = (dy < 0 ? -1 : 1) * sqrt$2(max$2(0, r * r * d2 - D * D)),                                                    // 13235
      cx0 = (D * dy - dx * d) / d2,                                                                                    // 13236
      cy0 = (-D * dx - dy * d) / d2,                                                                                   // 13237
      cx1 = (D * dy + dx * d) / d2,                                                                                    // 13238
      cy1 = (-D * dx + dy * d) / d2,                                                                                   // 13239
      dx0 = cx0 - x00,                                                                                                 // 13240
      dy0 = cy0 - y00,                                                                                                 // 13241
      dx1 = cx1 - x00,                                                                                                 // 13242
      dy1 = cy1 - y00;                                                                                                 // 13243
                                                                                                                       // 13244
  // Pick the closer of the two intersection points.                                                                   // 13245
  // TODO Is there a faster way to determine which intersection to use?                                                // 13246
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;                                             // 13247
                                                                                                                       // 13248
  return {                                                                                                             // 13249
    cx: cx0,                                                                                                           // 13250
    cy: cy0,                                                                                                           // 13251
    x01: -ox,                                                                                                          // 13252
    y01: -oy,                                                                                                          // 13253
    x11: cx0 * (r1 / r - 1),                                                                                           // 13254
    y11: cy0 * (r1 / r - 1)                                                                                            // 13255
  };                                                                                                                   // 13256
}                                                                                                                      // 13257
                                                                                                                       // 13258
var arc = function() {                                                                                                 // 13259
  var innerRadius = arcInnerRadius,                                                                                    // 13260
      outerRadius = arcOuterRadius,                                                                                    // 13261
      cornerRadius = constant$10(0),                                                                                   // 13262
      padRadius = null,                                                                                                // 13263
      startAngle = arcStartAngle,                                                                                      // 13264
      endAngle = arcEndAngle,                                                                                          // 13265
      padAngle = arcPadAngle,                                                                                          // 13266
      context = null;                                                                                                  // 13267
                                                                                                                       // 13268
  function arc() {                                                                                                     // 13269
    var buffer,                                                                                                        // 13270
        r,                                                                                                             // 13271
        r0 = +innerRadius.apply(this, arguments),                                                                      // 13272
        r1 = +outerRadius.apply(this, arguments),                                                                      // 13273
        a0 = startAngle.apply(this, arguments) - halfPi$3,                                                             // 13274
        a1 = endAngle.apply(this, arguments) - halfPi$3,                                                               // 13275
        da = abs$1(a1 - a0),                                                                                           // 13276
        cw = a1 > a0;                                                                                                  // 13277
                                                                                                                       // 13278
    if (!context) context = buffer = path();                                                                           // 13279
                                                                                                                       // 13280
    // Ensure that the outer radius is always larger than the inner radius.                                            // 13281
    if (r1 < r0) r = r1, r1 = r0, r0 = r;                                                                              // 13282
                                                                                                                       // 13283
    // Is it a point?                                                                                                  // 13284
    if (!(r1 > epsilon$3)) context.moveTo(0, 0);                                                                       // 13285
                                                                                                                       // 13286
    // Or is it a circle or annulus?                                                                                   // 13287
    else if (da > tau$4 - epsilon$3) {                                                                                 // 13288
      context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));                                                                  // 13289
      context.arc(0, 0, r1, a0, a1, !cw);                                                                              // 13290
      if (r0 > epsilon$3) {                                                                                            // 13291
        context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));                                                                // 13292
        context.arc(0, 0, r0, a1, a0, cw);                                                                             // 13293
      }                                                                                                                // 13294
    }                                                                                                                  // 13295
                                                                                                                       // 13296
    // Or is it a circular or annular sector?                                                                          // 13297
    else {                                                                                                             // 13298
      var a01 = a0,                                                                                                    // 13299
          a11 = a1,                                                                                                    // 13300
          a00 = a0,                                                                                                    // 13301
          a10 = a1,                                                                                                    // 13302
          da0 = da,                                                                                                    // 13303
          da1 = da,                                                                                                    // 13304
          ap = padAngle.apply(this, arguments) / 2,                                                                    // 13305
          rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),        // 13306
          rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),                                        // 13307
          rc0 = rc,                                                                                                    // 13308
          rc1 = rc,                                                                                                    // 13309
          t0,                                                                                                          // 13310
          t1;                                                                                                          // 13311
                                                                                                                       // 13312
      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.                                                            // 13313
      if (rp > epsilon$3) {                                                                                            // 13314
        var p0 = asin$1(rp / r0 * sin$2(ap)),                                                                          // 13315
            p1 = asin$1(rp / r1 * sin$2(ap));                                                                          // 13316
        if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;                                    // 13317
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;                                                                       // 13318
        if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;                                    // 13319
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;                                                                       // 13320
      }                                                                                                                // 13321
                                                                                                                       // 13322
      var x01 = r1 * cos$2(a01),                                                                                       // 13323
          y01 = r1 * sin$2(a01),                                                                                       // 13324
          x10 = r0 * cos$2(a10),                                                                                       // 13325
          y10 = r0 * sin$2(a10);                                                                                       // 13326
                                                                                                                       // 13327
      // Apply rounded corners?                                                                                        // 13328
      if (rc > epsilon$3) {                                                                                            // 13329
        var x11 = r1 * cos$2(a11),                                                                                     // 13330
            y11 = r1 * sin$2(a11),                                                                                     // 13331
            x00 = r0 * cos$2(a00),                                                                                     // 13332
            y00 = r0 * sin$2(a00);                                                                                     // 13333
                                                                                                                       // 13334
        // Restrict the corner radius according to the sector angle.                                                   // 13335
        if (da < pi$4) {                                                                                               // 13336
          var oc = da0 > epsilon$3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],                   // 13337
              ax = x01 - oc[0],                                                                                        // 13338
              ay = y01 - oc[1],                                                                                        // 13339
              bx = x11 - oc[0],                                                                                        // 13340
              by = y11 - oc[1],                                                                                        // 13341
              kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
              lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);                                                              // 13343
          rc0 = min$1(rc, (r0 - lc) / (kc - 1));                                                                       // 13344
          rc1 = min$1(rc, (r1 - lc) / (kc + 1));                                                                       // 13345
        }                                                                                                              // 13346
      }                                                                                                                // 13347
                                                                                                                       // 13348
      // Is the sector collapsed to a line?                                                                            // 13349
      if (!(da1 > epsilon$3)) context.moveTo(x01, y01);                                                                // 13350
                                                                                                                       // 13351
      // Does the sector’s outer ring have rounded corners?                                                            // 13352
      else if (rc1 > epsilon$3) {                                                                                      // 13353
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);                                                          // 13354
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);                                                          // 13355
                                                                                                                       // 13356
        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);                                                                // 13357
                                                                                                                       // 13358
        // Have the corners merged?                                                                                    // 13359
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);           // 13360
                                                                                                                       // 13361
        // Otherwise, draw the two corners and the ring.                                                               // 13362
        else {                                                                                                         // 13363
          context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);                       // 13364
          context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);                       // 13366
        }                                                                                                              // 13367
      }                                                                                                                // 13368
                                                                                                                       // 13369
      // Or is the outer ring just a circular arc?                                                                     // 13370
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);                                             // 13371
                                                                                                                       // 13372
      // Is there no inner ring, and it’s a circular sector?                                                           // 13373
      // Or perhaps it’s an annular sector collapsed due to padding?                                                   // 13374
      if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);                                           // 13375
                                                                                                                       // 13376
      // Does the sector’s inner ring (or point) have rounded corners?                                                 // 13377
      else if (rc0 > epsilon$3) {                                                                                      // 13378
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);                                                         // 13379
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);                                                         // 13380
                                                                                                                       // 13381
        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);                                                                // 13382
                                                                                                                       // 13383
        // Have the corners merged?                                                                                    // 13384
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);           // 13385
                                                                                                                       // 13386
        // Otherwise, draw the two corners and the ring.                                                               // 13387
        else {                                                                                                         // 13388
          context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);                       // 13389
          context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);                       // 13391
        }                                                                                                              // 13392
      }                                                                                                                // 13393
                                                                                                                       // 13394
      // Or is the inner ring just a circular arc?                                                                     // 13395
      else context.arc(0, 0, r0, a10, a00, cw);                                                                        // 13396
    }                                                                                                                  // 13397
                                                                                                                       // 13398
    context.closePath();                                                                                               // 13399
                                                                                                                       // 13400
    if (buffer) return context = null, buffer + "" || null;                                                            // 13401
  }                                                                                                                    // 13402
                                                                                                                       // 13403
  arc.centroid = function() {                                                                                          // 13404
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,                           // 13405
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;                    // 13406
    return [cos$2(a) * r, sin$2(a) * r];                                                                               // 13407
  };                                                                                                                   // 13408
                                                                                                                       // 13409
  arc.innerRadius = function(_) {                                                                                      // 13410
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : innerRadius;        // 13411
  };                                                                                                                   // 13412
                                                                                                                       // 13413
  arc.outerRadius = function(_) {                                                                                      // 13414
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : outerRadius;        // 13415
  };                                                                                                                   // 13416
                                                                                                                       // 13417
  arc.cornerRadius = function(_) {                                                                                     // 13418
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : cornerRadius;      // 13419
  };                                                                                                                   // 13420
                                                                                                                       // 13421
  arc.padRadius = function(_) {                                                                                        // 13422
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), arc) : padRadius;
  };                                                                                                                   // 13424
                                                                                                                       // 13425
  arc.startAngle = function(_) {                                                                                       // 13426
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : startAngle;          // 13427
  };                                                                                                                   // 13428
                                                                                                                       // 13429
  arc.endAngle = function(_) {                                                                                         // 13430
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : endAngle;              // 13431
  };                                                                                                                   // 13432
                                                                                                                       // 13433
  arc.padAngle = function(_) {                                                                                         // 13434
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : padAngle;              // 13435
  };                                                                                                                   // 13436
                                                                                                                       // 13437
  arc.context = function(_) {                                                                                          // 13438
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;                                       // 13439
  };                                                                                                                   // 13440
                                                                                                                       // 13441
  return arc;                                                                                                          // 13442
};                                                                                                                     // 13443
                                                                                                                       // 13444
function Linear(context) {                                                                                             // 13445
  this._context = context;                                                                                             // 13446
}                                                                                                                      // 13447
                                                                                                                       // 13448
Linear.prototype = {                                                                                                   // 13449
  areaStart: function() {                                                                                              // 13450
    this._line = 0;                                                                                                    // 13451
  },                                                                                                                   // 13452
  areaEnd: function() {                                                                                                // 13453
    this._line = NaN;                                                                                                  // 13454
  },                                                                                                                   // 13455
  lineStart: function() {                                                                                              // 13456
    this._point = 0;                                                                                                   // 13457
  },                                                                                                                   // 13458
  lineEnd: function() {                                                                                                // 13459
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();                              // 13460
    this._line = 1 - this._line;                                                                                       // 13461
  },                                                                                                                   // 13462
  point: function(x, y) {                                                                                              // 13463
    x = +x, y = +y;                                                                                                    // 13464
    switch (this._point) {                                                                                             // 13465
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;            // 13466
      case 1: this._point = 2; // proceed                                                                              // 13467
      default: this._context.lineTo(x, y); break;                                                                      // 13468
    }                                                                                                                  // 13469
  }                                                                                                                    // 13470
};                                                                                                                     // 13471
                                                                                                                       // 13472
var curveLinear = function(context) {                                                                                  // 13473
  return new Linear(context);                                                                                          // 13474
};                                                                                                                     // 13475
                                                                                                                       // 13476
function x$3(p) {                                                                                                      // 13477
  return p[0];                                                                                                         // 13478
}                                                                                                                      // 13479
                                                                                                                       // 13480
function y$3(p) {                                                                                                      // 13481
  return p[1];                                                                                                         // 13482
}                                                                                                                      // 13483
                                                                                                                       // 13484
var line = function() {                                                                                                // 13485
  var x$$1 = x$3,                                                                                                      // 13486
      y$$1 = y$3,                                                                                                      // 13487
      defined = constant$10(true),                                                                                     // 13488
      context = null,                                                                                                  // 13489
      curve = curveLinear,                                                                                             // 13490
      output = null;                                                                                                   // 13491
                                                                                                                       // 13492
  function line(data) {                                                                                                // 13493
    var i,                                                                                                             // 13494
        n = data.length,                                                                                               // 13495
        d,                                                                                                             // 13496
        defined0 = false,                                                                                              // 13497
        buffer;                                                                                                        // 13498
                                                                                                                       // 13499
    if (context == null) output = curve(buffer = path());                                                              // 13500
                                                                                                                       // 13501
    for (i = 0; i <= n; ++i) {                                                                                         // 13502
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {                                                    // 13503
        if (defined0 = !defined0) output.lineStart();                                                                  // 13504
        else output.lineEnd();                                                                                         // 13505
      }                                                                                                                // 13506
      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));                                                // 13507
    }                                                                                                                  // 13508
                                                                                                                       // 13509
    if (buffer) return output = null, buffer + "" || null;                                                             // 13510
  }                                                                                                                    // 13511
                                                                                                                       // 13512
  line.x = function(_) {                                                                                               // 13513
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : x$$1;                     // 13514
  };                                                                                                                   // 13515
                                                                                                                       // 13516
  line.y = function(_) {                                                                                               // 13517
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : y$$1;                     // 13518
  };                                                                                                                   // 13519
                                                                                                                       // 13520
  line.defined = function(_) {                                                                                         // 13521
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), line) : defined;              // 13522
  };                                                                                                                   // 13523
                                                                                                                       // 13524
  line.curve = function(_) {                                                                                           // 13525
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;                 // 13526
  };                                                                                                                   // 13527
                                                                                                                       // 13528
  line.context = function(_) {                                                                                         // 13529
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;     // 13530
  };                                                                                                                   // 13531
                                                                                                                       // 13532
  return line;                                                                                                         // 13533
};                                                                                                                     // 13534
                                                                                                                       // 13535
var area$2 = function() {                                                                                              // 13536
  var x0 = x$3,                                                                                                        // 13537
      x1 = null,                                                                                                       // 13538
      y0 = constant$10(0),                                                                                             // 13539
      y1 = y$3,                                                                                                        // 13540
      defined = constant$10(true),                                                                                     // 13541
      context = null,                                                                                                  // 13542
      curve = curveLinear,                                                                                             // 13543
      output = null;                                                                                                   // 13544
                                                                                                                       // 13545
  function area(data) {                                                                                                // 13546
    var i,                                                                                                             // 13547
        j,                                                                                                             // 13548
        k,                                                                                                             // 13549
        n = data.length,                                                                                               // 13550
        d,                                                                                                             // 13551
        defined0 = false,                                                                                              // 13552
        buffer,                                                                                                        // 13553
        x0z = new Array(n),                                                                                            // 13554
        y0z = new Array(n);                                                                                            // 13555
                                                                                                                       // 13556
    if (context == null) output = curve(buffer = path());                                                              // 13557
                                                                                                                       // 13558
    for (i = 0; i <= n; ++i) {                                                                                         // 13559
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {                                                    // 13560
        if (defined0 = !defined0) {                                                                                    // 13561
          j = i;                                                                                                       // 13562
          output.areaStart();                                                                                          // 13563
          output.lineStart();                                                                                          // 13564
        } else {                                                                                                       // 13565
          output.lineEnd();                                                                                            // 13566
          output.lineStart();                                                                                          // 13567
          for (k = i - 1; k >= j; --k) {                                                                               // 13568
            output.point(x0z[k], y0z[k]);                                                                              // 13569
          }                                                                                                            // 13570
          output.lineEnd();                                                                                            // 13571
          output.areaEnd();                                                                                            // 13572
        }                                                                                                              // 13573
      }                                                                                                                // 13574
      if (defined0) {                                                                                                  // 13575
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);                                                            // 13576
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);                                    // 13577
      }                                                                                                                // 13578
    }                                                                                                                  // 13579
                                                                                                                       // 13580
    if (buffer) return output = null, buffer + "" || null;                                                             // 13581
  }                                                                                                                    // 13582
                                                                                                                       // 13583
  function arealine() {                                                                                                // 13584
    return line().defined(defined).curve(curve).context(context);                                                      // 13585
  }                                                                                                                    // 13586
                                                                                                                       // 13587
  area.x = function(_) {                                                                                               // 13588
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), x1 = null, area) : x0;              // 13589
  };                                                                                                                   // 13590
                                                                                                                       // 13591
  area.x0 = function(_) {                                                                                              // 13592
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), area) : x0;                         // 13593
  };                                                                                                                   // 13594
                                                                                                                       // 13595
  area.x1 = function(_) {                                                                                              // 13596
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : x1;      // 13597
  };                                                                                                                   // 13598
                                                                                                                       // 13599
  area.y = function(_) {                                                                                               // 13600
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), y1 = null, area) : y0;              // 13601
  };                                                                                                                   // 13602
                                                                                                                       // 13603
  area.y0 = function(_) {                                                                                              // 13604
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), area) : y0;                         // 13605
  };                                                                                                                   // 13606
                                                                                                                       // 13607
  area.y1 = function(_) {                                                                                              // 13608
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : y1;      // 13609
  };                                                                                                                   // 13610
                                                                                                                       // 13611
  area.lineX0 =                                                                                                        // 13612
  area.lineY0 = function() {                                                                                           // 13613
    return arealine().x(x0).y(y0);                                                                                     // 13614
  };                                                                                                                   // 13615
                                                                                                                       // 13616
  area.lineY1 = function() {                                                                                           // 13617
    return arealine().x(x0).y(y1);                                                                                     // 13618
  };                                                                                                                   // 13619
                                                                                                                       // 13620
  area.lineX1 = function() {                                                                                           // 13621
    return arealine().x(x1).y(y0);                                                                                     // 13622
  };                                                                                                                   // 13623
                                                                                                                       // 13624
  area.defined = function(_) {                                                                                         // 13625
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), area) : defined;              // 13626
  };                                                                                                                   // 13627
                                                                                                                       // 13628
  area.curve = function(_) {                                                                                           // 13629
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;                 // 13630
  };                                                                                                                   // 13631
                                                                                                                       // 13632
  area.context = function(_) {                                                                                         // 13633
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;     // 13634
  };                                                                                                                   // 13635
                                                                                                                       // 13636
  return area;                                                                                                         // 13637
};                                                                                                                     // 13638
                                                                                                                       // 13639
var descending$1 = function(a, b) {                                                                                    // 13640
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;                                                                    // 13641
};                                                                                                                     // 13642
                                                                                                                       // 13643
var identity$7 = function(d) {                                                                                         // 13644
  return d;                                                                                                            // 13645
};                                                                                                                     // 13646
                                                                                                                       // 13647
var pie = function() {                                                                                                 // 13648
  var value = identity$7,                                                                                              // 13649
      sortValues = descending$1,                                                                                       // 13650
      sort = null,                                                                                                     // 13651
      startAngle = constant$10(0),                                                                                     // 13652
      endAngle = constant$10(tau$4),                                                                                   // 13653
      padAngle = constant$10(0);                                                                                       // 13654
                                                                                                                       // 13655
  function pie(data) {                                                                                                 // 13656
    var i,                                                                                                             // 13657
        n = data.length,                                                                                               // 13658
        j,                                                                                                             // 13659
        k,                                                                                                             // 13660
        sum = 0,                                                                                                       // 13661
        index = new Array(n),                                                                                          // 13662
        arcs = new Array(n),                                                                                           // 13663
        a0 = +startAngle.apply(this, arguments),                                                                       // 13664
        da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),                                  // 13665
        a1,                                                                                                            // 13666
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),                                               // 13667
        pa = p * (da < 0 ? -1 : 1),                                                                                    // 13668
        v;                                                                                                             // 13669
                                                                                                                       // 13670
    for (i = 0; i < n; ++i) {                                                                                          // 13671
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {                                                   // 13672
        sum += v;                                                                                                      // 13673
      }                                                                                                                // 13674
    }                                                                                                                  // 13675
                                                                                                                       // 13676
    // Optionally sort the arcs by previously-computed values or by data.                                              // 13677
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });                       // 13678
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });                              // 13679
                                                                                                                       // 13680
    // Compute the arcs! They are stored in the original data's order.                                                 // 13681
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {                                              // 13682
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {                                       // 13683
        data: data[j],                                                                                                 // 13684
        index: i,                                                                                                      // 13685
        value: v,                                                                                                      // 13686
        startAngle: a0,                                                                                                // 13687
        endAngle: a1,                                                                                                  // 13688
        padAngle: p                                                                                                    // 13689
      };                                                                                                               // 13690
    }                                                                                                                  // 13691
                                                                                                                       // 13692
    return arcs;                                                                                                       // 13693
  }                                                                                                                    // 13694
                                                                                                                       // 13695
  pie.value = function(_) {                                                                                            // 13696
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), pie) : value;                    // 13697
  };                                                                                                                   // 13698
                                                                                                                       // 13699
  pie.sortValues = function(_) {                                                                                       // 13700
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;                                         // 13701
  };                                                                                                                   // 13702
                                                                                                                       // 13703
  pie.sort = function(_) {                                                                                             // 13704
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;                                               // 13705
  };                                                                                                                   // 13706
                                                                                                                       // 13707
  pie.startAngle = function(_) {                                                                                       // 13708
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : startAngle;          // 13709
  };                                                                                                                   // 13710
                                                                                                                       // 13711
  pie.endAngle = function(_) {                                                                                         // 13712
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : endAngle;              // 13713
  };                                                                                                                   // 13714
                                                                                                                       // 13715
  pie.padAngle = function(_) {                                                                                         // 13716
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : padAngle;              // 13717
  };                                                                                                                   // 13718
                                                                                                                       // 13719
  return pie;                                                                                                          // 13720
};                                                                                                                     // 13721
                                                                                                                       // 13722
var curveRadialLinear = curveRadial(curveLinear);                                                                      // 13723
                                                                                                                       // 13724
function Radial(curve) {                                                                                               // 13725
  this._curve = curve;                                                                                                 // 13726
}                                                                                                                      // 13727
                                                                                                                       // 13728
Radial.prototype = {                                                                                                   // 13729
  areaStart: function() {                                                                                              // 13730
    this._curve.areaStart();                                                                                           // 13731
  },                                                                                                                   // 13732
  areaEnd: function() {                                                                                                // 13733
    this._curve.areaEnd();                                                                                             // 13734
  },                                                                                                                   // 13735
  lineStart: function() {                                                                                              // 13736
    this._curve.lineStart();                                                                                           // 13737
  },                                                                                                                   // 13738
  lineEnd: function() {                                                                                                // 13739
    this._curve.lineEnd();                                                                                             // 13740
  },                                                                                                                   // 13741
  point: function(a, r) {                                                                                              // 13742
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));                                                              // 13743
  }                                                                                                                    // 13744
};                                                                                                                     // 13745
                                                                                                                       // 13746
function curveRadial(curve) {                                                                                          // 13747
                                                                                                                       // 13748
  function radial(context) {                                                                                           // 13749
    return new Radial(curve(context));                                                                                 // 13750
  }                                                                                                                    // 13751
                                                                                                                       // 13752
  radial._curve = curve;                                                                                               // 13753
                                                                                                                       // 13754
  return radial;                                                                                                       // 13755
}                                                                                                                      // 13756
                                                                                                                       // 13757
function radialLine(l) {                                                                                               // 13758
  var c = l.curve;                                                                                                     // 13759
                                                                                                                       // 13760
  l.angle = l.x, delete l.x;                                                                                           // 13761
  l.radius = l.y, delete l.y;                                                                                          // 13762
                                                                                                                       // 13763
  l.curve = function(_) {                                                                                              // 13764
    return arguments.length ? c(curveRadial(_)) : c()._curve;                                                          // 13765
  };                                                                                                                   // 13766
                                                                                                                       // 13767
  return l;                                                                                                            // 13768
}                                                                                                                      // 13769
                                                                                                                       // 13770
var radialLine$1 = function() {                                                                                        // 13771
  return radialLine(line().curve(curveRadialLinear));                                                                  // 13772
};                                                                                                                     // 13773
                                                                                                                       // 13774
var radialArea = function() {                                                                                          // 13775
  var a = area$2().curve(curveRadialLinear),                                                                           // 13776
      c = a.curve,                                                                                                     // 13777
      x0 = a.lineX0,                                                                                                   // 13778
      x1 = a.lineX1,                                                                                                   // 13779
      y0 = a.lineY0,                                                                                                   // 13780
      y1 = a.lineY1;                                                                                                   // 13781
                                                                                                                       // 13782
  a.angle = a.x, delete a.x;                                                                                           // 13783
  a.startAngle = a.x0, delete a.x0;                                                                                    // 13784
  a.endAngle = a.x1, delete a.x1;                                                                                      // 13785
  a.radius = a.y, delete a.y;                                                                                          // 13786
  a.innerRadius = a.y0, delete a.y0;                                                                                   // 13787
  a.outerRadius = a.y1, delete a.y1;                                                                                   // 13788
  a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;                                         // 13789
  a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;                                           // 13790
  a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;                                        // 13791
  a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;                                        // 13792
                                                                                                                       // 13793
  a.curve = function(_) {                                                                                              // 13794
    return arguments.length ? c(curveRadial(_)) : c()._curve;                                                          // 13795
  };                                                                                                                   // 13796
                                                                                                                       // 13797
  return a;                                                                                                            // 13798
};                                                                                                                     // 13799
                                                                                                                       // 13800
var slice$5 = Array.prototype.slice;                                                                                   // 13801
                                                                                                                       // 13802
var radialPoint = function(x, y) {                                                                                     // 13803
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];                                                     // 13804
};                                                                                                                     // 13805
                                                                                                                       // 13806
function linkSource(d) {                                                                                               // 13807
  return d.source;                                                                                                     // 13808
}                                                                                                                      // 13809
                                                                                                                       // 13810
function linkTarget(d) {                                                                                               // 13811
  return d.target;                                                                                                     // 13812
}                                                                                                                      // 13813
                                                                                                                       // 13814
function link$2(curve) {                                                                                               // 13815
  var source = linkSource,                                                                                             // 13816
      target = linkTarget,                                                                                             // 13817
      x$$1 = x$3,                                                                                                      // 13818
      y$$1 = y$3,                                                                                                      // 13819
      context = null;                                                                                                  // 13820
                                                                                                                       // 13821
  function link() {                                                                                                    // 13822
    var buffer, argv = slice$5.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);            // 13823
    if (!context) context = buffer = path();                                                                           // 13824
    curve(context, +x$$1.apply(this, (argv[0] = s, argv)), +y$$1.apply(this, argv), +x$$1.apply(this, (argv[0] = t, argv)), +y$$1.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;                                                            // 13826
  }                                                                                                                    // 13827
                                                                                                                       // 13828
  link.source = function(_) {                                                                                          // 13829
    return arguments.length ? (source = _, link) : source;                                                             // 13830
  };                                                                                                                   // 13831
                                                                                                                       // 13832
  link.target = function(_) {                                                                                          // 13833
    return arguments.length ? (target = _, link) : target;                                                             // 13834
  };                                                                                                                   // 13835
                                                                                                                       // 13836
  link.x = function(_) {                                                                                               // 13837
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$10(+_), link) : x$$1;                     // 13838
  };                                                                                                                   // 13839
                                                                                                                       // 13840
  link.y = function(_) {                                                                                               // 13841
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$10(+_), link) : y$$1;                     // 13842
  };                                                                                                                   // 13843
                                                                                                                       // 13844
  link.context = function(_) {                                                                                         // 13845
    return arguments.length ? ((context = _ == null ? null : _), link) : context;                                      // 13846
  };                                                                                                                   // 13847
                                                                                                                       // 13848
  return link;                                                                                                         // 13849
}                                                                                                                      // 13850
                                                                                                                       // 13851
function curveHorizontal(context, x0, y0, x1, y1) {                                                                    // 13852
  context.moveTo(x0, y0);                                                                                              // 13853
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);                                                       // 13854
}                                                                                                                      // 13855
                                                                                                                       // 13856
function curveVertical(context, x0, y0, x1, y1) {                                                                      // 13857
  context.moveTo(x0, y0);                                                                                              // 13858
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);                                                       // 13859
}                                                                                                                      // 13860
                                                                                                                       // 13861
function curveRadial$1(context, x0, y0, x1, y1) {                                                                      // 13862
  var p0 = radialPoint(x0, y0),                                                                                        // 13863
      p1 = radialPoint(x0, y0 = (y0 + y1) / 2),                                                                        // 13864
      p2 = radialPoint(x1, y0),                                                                                        // 13865
      p3 = radialPoint(x1, y1);                                                                                        // 13866
  context.moveTo(p0[0], p0[1]);                                                                                        // 13867
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);                                                     // 13868
}                                                                                                                      // 13869
                                                                                                                       // 13870
function linkHorizontal() {                                                                                            // 13871
  return link$2(curveHorizontal);                                                                                      // 13872
}                                                                                                                      // 13873
                                                                                                                       // 13874
function linkVertical() {                                                                                              // 13875
  return link$2(curveVertical);                                                                                        // 13876
}                                                                                                                      // 13877
                                                                                                                       // 13878
function linkRadial() {                                                                                                // 13879
  var l = link$2(curveRadial$1);                                                                                       // 13880
  l.angle = l.x, delete l.x;                                                                                           // 13881
  l.radius = l.y, delete l.y;                                                                                          // 13882
  return l;                                                                                                            // 13883
}                                                                                                                      // 13884
                                                                                                                       // 13885
var circle$2 = {                                                                                                       // 13886
  draw: function(context, size) {                                                                                      // 13887
    var r = Math.sqrt(size / pi$4);                                                                                    // 13888
    context.moveTo(r, 0);                                                                                              // 13889
    context.arc(0, 0, r, 0, tau$4);                                                                                    // 13890
  }                                                                                                                    // 13891
};                                                                                                                     // 13892
                                                                                                                       // 13893
var cross$2 = {                                                                                                        // 13894
  draw: function(context, size) {                                                                                      // 13895
    var r = Math.sqrt(size / 5) / 2;                                                                                   // 13896
    context.moveTo(-3 * r, -r);                                                                                        // 13897
    context.lineTo(-r, -r);                                                                                            // 13898
    context.lineTo(-r, -3 * r);                                                                                        // 13899
    context.lineTo(r, -3 * r);                                                                                         // 13900
    context.lineTo(r, -r);                                                                                             // 13901
    context.lineTo(3 * r, -r);                                                                                         // 13902
    context.lineTo(3 * r, r);                                                                                          // 13903
    context.lineTo(r, r);                                                                                              // 13904
    context.lineTo(r, 3 * r);                                                                                          // 13905
    context.lineTo(-r, 3 * r);                                                                                         // 13906
    context.lineTo(-r, r);                                                                                             // 13907
    context.lineTo(-3 * r, r);                                                                                         // 13908
    context.closePath();                                                                                               // 13909
  }                                                                                                                    // 13910
};                                                                                                                     // 13911
                                                                                                                       // 13912
var tan30 = Math.sqrt(1 / 3);                                                                                          // 13913
var tan30_2 = tan30 * 2;                                                                                               // 13914
                                                                                                                       // 13915
var diamond = {                                                                                                        // 13916
  draw: function(context, size) {                                                                                      // 13917
    var y = Math.sqrt(size / tan30_2),                                                                                 // 13918
        x = y * tan30;                                                                                                 // 13919
    context.moveTo(0, -y);                                                                                             // 13920
    context.lineTo(x, 0);                                                                                              // 13921
    context.lineTo(0, y);                                                                                              // 13922
    context.lineTo(-x, 0);                                                                                             // 13923
    context.closePath();                                                                                               // 13924
  }                                                                                                                    // 13925
};                                                                                                                     // 13926
                                                                                                                       // 13927
var ka = 0.89081309152928522810;                                                                                       // 13928
var kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10);                                                                // 13929
var kx = Math.sin(tau$4 / 10) * kr;                                                                                    // 13930
var ky = -Math.cos(tau$4 / 10) * kr;                                                                                   // 13931
                                                                                                                       // 13932
var star = {                                                                                                           // 13933
  draw: function(context, size) {                                                                                      // 13934
    var r = Math.sqrt(size * ka),                                                                                      // 13935
        x = kx * r,                                                                                                    // 13936
        y = ky * r;                                                                                                    // 13937
    context.moveTo(0, -r);                                                                                             // 13938
    context.lineTo(x, y);                                                                                              // 13939
    for (var i = 1; i < 5; ++i) {                                                                                      // 13940
      var a = tau$4 * i / 5,                                                                                           // 13941
          c = Math.cos(a),                                                                                             // 13942
          s = Math.sin(a);                                                                                             // 13943
      context.lineTo(s * r, -c * r);                                                                                   // 13944
      context.lineTo(c * x - s * y, s * x + c * y);                                                                    // 13945
    }                                                                                                                  // 13946
    context.closePath();                                                                                               // 13947
  }                                                                                                                    // 13948
};                                                                                                                     // 13949
                                                                                                                       // 13950
var square = {                                                                                                         // 13951
  draw: function(context, size) {                                                                                      // 13952
    var w = Math.sqrt(size),                                                                                           // 13953
        x = -w / 2;                                                                                                    // 13954
    context.rect(x, x, w, w);                                                                                          // 13955
  }                                                                                                                    // 13956
};                                                                                                                     // 13957
                                                                                                                       // 13958
var sqrt3 = Math.sqrt(3);                                                                                              // 13959
                                                                                                                       // 13960
var triangle = {                                                                                                       // 13961
  draw: function(context, size) {                                                                                      // 13962
    var y = -Math.sqrt(size / (sqrt3 * 3));                                                                            // 13963
    context.moveTo(0, y * 2);                                                                                          // 13964
    context.lineTo(-sqrt3 * y, -y);                                                                                    // 13965
    context.lineTo(sqrt3 * y, -y);                                                                                     // 13966
    context.closePath();                                                                                               // 13967
  }                                                                                                                    // 13968
};                                                                                                                     // 13969
                                                                                                                       // 13970
var c = -0.5;                                                                                                          // 13971
var s = Math.sqrt(3) / 2;                                                                                              // 13972
var k = 1 / Math.sqrt(12);                                                                                             // 13973
var a = (k / 2 + 1) * 3;                                                                                               // 13974
                                                                                                                       // 13975
var wye = {                                                                                                            // 13976
  draw: function(context, size) {                                                                                      // 13977
    var r = Math.sqrt(size / a),                                                                                       // 13978
        x0 = r / 2,                                                                                                    // 13979
        y0 = r * k,                                                                                                    // 13980
        x1 = x0,                                                                                                       // 13981
        y1 = r * k + r,                                                                                                // 13982
        x2 = -x1,                                                                                                      // 13983
        y2 = y1;                                                                                                       // 13984
    context.moveTo(x0, y0);                                                                                            // 13985
    context.lineTo(x1, y1);                                                                                            // 13986
    context.lineTo(x2, y2);                                                                                            // 13987
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);                                                                  // 13988
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);                                                                  // 13989
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);                                                                  // 13990
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);                                                                  // 13991
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);                                                                  // 13992
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);                                                                  // 13993
    context.closePath();                                                                                               // 13994
  }                                                                                                                    // 13995
};                                                                                                                     // 13996
                                                                                                                       // 13997
var symbols = [                                                                                                        // 13998
  circle$2,                                                                                                            // 13999
  cross$2,                                                                                                             // 14000
  diamond,                                                                                                             // 14001
  square,                                                                                                              // 14002
  star,                                                                                                                // 14003
  triangle,                                                                                                            // 14004
  wye                                                                                                                  // 14005
];                                                                                                                     // 14006
                                                                                                                       // 14007
var symbol = function() {                                                                                              // 14008
  var type = constant$10(circle$2),                                                                                    // 14009
      size = constant$10(64),                                                                                          // 14010
      context = null;                                                                                                  // 14011
                                                                                                                       // 14012
  function symbol() {                                                                                                  // 14013
    var buffer;                                                                                                        // 14014
    if (!context) context = buffer = path();                                                                           // 14015
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));                                           // 14016
    if (buffer) return context = null, buffer + "" || null;                                                            // 14017
  }                                                                                                                    // 14018
                                                                                                                       // 14019
  symbol.type = function(_) {                                                                                          // 14020
    return arguments.length ? (type = typeof _ === "function" ? _ : constant$10(_), symbol) : type;                    // 14021
  };                                                                                                                   // 14022
                                                                                                                       // 14023
  symbol.size = function(_) {                                                                                          // 14024
    return arguments.length ? (size = typeof _ === "function" ? _ : constant$10(+_), symbol) : size;                   // 14025
  };                                                                                                                   // 14026
                                                                                                                       // 14027
  symbol.context = function(_) {                                                                                       // 14028
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;                                      // 14029
  };                                                                                                                   // 14030
                                                                                                                       // 14031
  return symbol;                                                                                                       // 14032
};                                                                                                                     // 14033
                                                                                                                       // 14034
var noop$2 = function() {};                                                                                            // 14035
                                                                                                                       // 14036
function point$2(that, x, y) {                                                                                         // 14037
  that._context.bezierCurveTo(                                                                                         // 14038
    (2 * that._x0 + that._x1) / 3,                                                                                     // 14039
    (2 * that._y0 + that._y1) / 3,                                                                                     // 14040
    (that._x0 + 2 * that._x1) / 3,                                                                                     // 14041
    (that._y0 + 2 * that._y1) / 3,                                                                                     // 14042
    (that._x0 + 4 * that._x1 + x) / 6,                                                                                 // 14043
    (that._y0 + 4 * that._y1 + y) / 6                                                                                  // 14044
  );                                                                                                                   // 14045
}                                                                                                                      // 14046
                                                                                                                       // 14047
function Basis(context) {                                                                                              // 14048
  this._context = context;                                                                                             // 14049
}                                                                                                                      // 14050
                                                                                                                       // 14051
Basis.prototype = {                                                                                                    // 14052
  areaStart: function() {                                                                                              // 14053
    this._line = 0;                                                                                                    // 14054
  },                                                                                                                   // 14055
  areaEnd: function() {                                                                                                // 14056
    this._line = NaN;                                                                                                  // 14057
  },                                                                                                                   // 14058
  lineStart: function() {                                                                                              // 14059
    this._x0 = this._x1 =                                                                                              // 14060
    this._y0 = this._y1 = NaN;                                                                                         // 14061
    this._point = 0;                                                                                                   // 14062
  },                                                                                                                   // 14063
  lineEnd: function() {                                                                                                // 14064
    switch (this._point) {                                                                                             // 14065
      case 3: point$2(this, this._x1, this._y1); // proceed                                                            // 14066
      case 2: this._context.lineTo(this._x1, this._y1); break;                                                         // 14067
    }                                                                                                                  // 14068
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();                              // 14069
    this._line = 1 - this._line;                                                                                       // 14070
  },                                                                                                                   // 14071
  point: function(x, y) {                                                                                              // 14072
    x = +x, y = +y;                                                                                                    // 14073
    switch (this._point) {                                                                                             // 14074
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;            // 14075
      case 1: this._point = 2; break;                                                                                  // 14076
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
      default: point$2(this, x, y); break;                                                                             // 14078
    }                                                                                                                  // 14079
    this._x0 = this._x1, this._x1 = x;                                                                                 // 14080
    this._y0 = this._y1, this._y1 = y;                                                                                 // 14081
  }                                                                                                                    // 14082
};                                                                                                                     // 14083
                                                                                                                       // 14084
var basis$2 = function(context) {                                                                                      // 14085
  return new Basis(context);                                                                                           // 14086
};                                                                                                                     // 14087
                                                                                                                       // 14088
function BasisClosed(context) {                                                                                        // 14089
  this._context = context;                                                                                             // 14090
}                                                                                                                      // 14091
                                                                                                                       // 14092
BasisClosed.prototype = {                                                                                              // 14093
  areaStart: noop$2,                                                                                                   // 14094
  areaEnd: noop$2,                                                                                                     // 14095
  lineStart: function() {                                                                                              // 14096
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =                                                             // 14097
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;                                                        // 14098
    this._point = 0;                                                                                                   // 14099
  },                                                                                                                   // 14100
  lineEnd: function() {                                                                                                // 14101
    switch (this._point) {                                                                                             // 14102
      case 1: {                                                                                                        // 14103
        this._context.moveTo(this._x2, this._y2);                                                                      // 14104
        this._context.closePath();                                                                                     // 14105
        break;                                                                                                         // 14106
      }                                                                                                                // 14107
      case 2: {                                                                                                        // 14108
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);                            // 14109
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);                            // 14110
        this._context.closePath();                                                                                     // 14111
        break;                                                                                                         // 14112
      }                                                                                                                // 14113
      case 3: {                                                                                                        // 14114
        this.point(this._x2, this._y2);                                                                                // 14115
        this.point(this._x3, this._y3);                                                                                // 14116
        this.point(this._x4, this._y4);                                                                                // 14117
        break;                                                                                                         // 14118
      }                                                                                                                // 14119
    }                                                                                                                  // 14120
  },                                                                                                                   // 14121
  point: function(x, y) {                                                                                              // 14122
    x = +x, y = +y;                                                                                                    // 14123
    switch (this._point) {                                                                                             // 14124
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;                                                      // 14125
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;                                                      // 14126
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point$2(this, x, y); break;                                                                             // 14128
    }                                                                                                                  // 14129
    this._x0 = this._x1, this._x1 = x;                                                                                 // 14130
    this._y0 = this._y1, this._y1 = y;                                                                                 // 14131
  }                                                                                                                    // 14132
};                                                                                                                     // 14133
                                                                                                                       // 14134
var basisClosed$1 = function(context) {                                                                                // 14135
  return new BasisClosed(context);                                                                                     // 14136
};                                                                                                                     // 14137
                                                                                                                       // 14138
function BasisOpen(context) {                                                                                          // 14139
  this._context = context;                                                                                             // 14140
}                                                                                                                      // 14141
                                                                                                                       // 14142
BasisOpen.prototype = {                                                                                                // 14143
  areaStart: function() {                                                                                              // 14144
    this._line = 0;                                                                                                    // 14145
  },                                                                                                                   // 14146
  areaEnd: function() {                                                                                                // 14147
    this._line = NaN;                                                                                                  // 14148
  },                                                                                                                   // 14149
  lineStart: function() {                                                                                              // 14150
    this._x0 = this._x1 =                                                                                              // 14151
    this._y0 = this._y1 = NaN;                                                                                         // 14152
    this._point = 0;                                                                                                   // 14153
  },                                                                                                                   // 14154
  lineEnd: function() {                                                                                                // 14155
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();                              // 14156
    this._line = 1 - this._line;                                                                                       // 14157
  },                                                                                                                   // 14158
  point: function(x, y) {                                                                                              // 14159
    x = +x, y = +y;                                                                                                    // 14160
    switch (this._point) {                                                                                             // 14161
      case 0: this._point = 1; break;                                                                                  // 14162
      case 1: this._point = 2; break;                                                                                  // 14163
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // proceed                                                                              // 14165
      default: point$2(this, x, y); break;                                                                             // 14166
    }                                                                                                                  // 14167
    this._x0 = this._x1, this._x1 = x;                                                                                 // 14168
    this._y0 = this._y1, this._y1 = y;                                                                                 // 14169
  }                                                                                                                    // 14170
};                                                                                                                     // 14171
                                                                                                                       // 14172
var basisOpen = function(context) {                                                                                    // 14173
  return new BasisOpen(context);                                                                                       // 14174
};                                                                                                                     // 14175
                                                                                                                       // 14176
function Bundle(context, beta) {                                                                                       // 14177
  this._basis = new Basis(context);                                                                                    // 14178
  this._beta = beta;                                                                                                   // 14179
}                                                                                                                      // 14180
                                                                                                                       // 14181
Bundle.prototype = {                                                                                                   // 14182
  lineStart: function() {                                                                                              // 14183
    this._x = [];                                                                                                      // 14184
    this._y = [];                                                                                                      // 14185
    this._basis.lineStart();                                                                                           // 14186
  },                                                                                                                   // 14187
  lineEnd: function() {                                                                                                // 14188
    var x = this._x,                                                                                                   // 14189
        y = this._y,                                                                                                   // 14190
        j = x.length - 1;                                                                                              // 14191
                                                                                                                       // 14192
    if (j > 0) {                                                                                                       // 14193
      var x0 = x[0],                                                                                                   // 14194
          y0 = y[0],                                                                                                   // 14195
          dx = x[j] - x0,                                                                                              // 14196
          dy = y[j] - y0,                                                                                              // 14197
          i = -1,                                                                                                      // 14198
          t;                                                                                                           // 14199
                                                                                                                       // 14200
      while (++i <= j) {                                                                                               // 14201
        t = i / j;                                                                                                     // 14202
        this._basis.point(                                                                                             // 14203
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),                                                        // 14204
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)                                                         // 14205
        );                                                                                                             // 14206
      }                                                                                                                // 14207
    }                                                                                                                  // 14208
                                                                                                                       // 14209
    this._x = this._y = null;                                                                                          // 14210
    this._basis.lineEnd();                                                                                             // 14211
  },                                                                                                                   // 14212
  point: function(x, y) {                                                                                              // 14213
    this._x.push(+x);                                                                                                  // 14214
    this._y.push(+y);                                                                                                  // 14215
  }                                                                                                                    // 14216
};                                                                                                                     // 14217
                                                                                                                       // 14218
var bundle = ((function custom(beta) {                                                                                 // 14219
                                                                                                                       // 14220
  function bundle(context) {                                                                                           // 14221
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);                                                // 14222
  }                                                                                                                    // 14223
                                                                                                                       // 14224
  bundle.beta = function(beta) {                                                                                       // 14225
    return custom(+beta);                                                                                              // 14226
  };                                                                                                                   // 14227
                                                                                                                       // 14228
  return bundle;                                                                                                       // 14229
}))(0.85);                                                                                                             // 14230
                                                                                                                       // 14231
function point$3(that, x, y) {                                                                                         // 14232
  that._context.bezierCurveTo(                                                                                         // 14233
    that._x1 + that._k * (that._x2 - that._x0),                                                                        // 14234
    that._y1 + that._k * (that._y2 - that._y0),                                                                        // 14235
    that._x2 + that._k * (that._x1 - x),                                                                               // 14236
    that._y2 + that._k * (that._y1 - y),                                                                               // 14237
    that._x2,                                                                                                          // 14238
    that._y2                                                                                                           // 14239
  );                                                                                                                   // 14240
}                                                                                                                      // 14241
                                                                                                                       // 14242
function Cardinal(context, tension) {                                                                                  // 14243
  this._context = context;                                                                                             // 14244
  this._k = (1 - tension) / 6;                                                                                         // 14245
}                                                                                                                      // 14246
                                                                                                                       // 14247
Cardinal.prototype = {                                                                                                 // 14248
  areaStart: function() {                                                                                              // 14249
    this._line = 0;                                                                                                    // 14250
  },                                                                                                                   // 14251
  areaEnd: function() {                                                                                                // 14252
    this._line = NaN;                                                                                                  // 14253
  },                                                                                                                   // 14254
  lineStart: function() {                                                                                              // 14255
    this._x0 = this._x1 = this._x2 =                                                                                   // 14256
    this._y0 = this._y1 = this._y2 = NaN;                                                                              // 14257
    this._point = 0;                                                                                                   // 14258
  },                                                                                                                   // 14259
  lineEnd: function() {                                                                                                // 14260
    switch (this._point) {                                                                                             // 14261
      case 2: this._context.lineTo(this._x2, this._y2); break;                                                         // 14262
      case 3: point$3(this, this._x1, this._y1); break;                                                                // 14263
    }                                                                                                                  // 14264
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();                              // 14265
    this._line = 1 - this._line;                                                                                       // 14266
  },                                                                                                                   // 14267
  point: function(x, y) {                                                                                              // 14268
    x = +x, y = +y;                                                                                                    // 14269
    switch (this._point) {                                                                                             // 14270
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;            // 14271
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;                                                      // 14272
      case 2: this._point = 3; // proceed                                                                              // 14273
      default: point$3(this, x, y); break;                                                                             // 14274
    }                                                                                                                  // 14275
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;                                                            // 14276
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;                                                            // 14277
  }                                                                                                                    // 14278
};                                                                                                                     // 14279
                                                                                                                       // 14280
var cardinal = ((function custom(tension) {                                                                            // 14281
                                                                                                                       // 14282
  function cardinal(context) {                                                                                         // 14283
    return new Cardinal(context, tension);                                                                             // 14284
  }                                                                                                                    // 14285
                                                                                                                       // 14286
  cardinal.tension = function(tension) {                                                                               // 14287
    return custom(+tension);                                                                                           // 14288
  };                                                                                                                   // 14289
                                                                                                                       // 14290
  return cardinal;                                                                                                     // 14291
}))(0);                                                                                                                // 14292
                                                                                                                       // 14293
function CardinalClosed(context, tension) {                                                                            // 14294
  this._context = context;                                                                                             // 14295
  this._k = (1 - tension) / 6;                                                                                         // 14296
}                                                                                                                      // 14297
                                                                                                                       // 14298
CardinalClosed.prototype = {                                                                                           // 14299
  areaStart: noop$2,                                                                                                   // 14300
  areaEnd: noop$2,                                                                                                     // 14301
  lineStart: function() {                                                                                              // 14302
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =                                                  // 14303
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;                                             // 14304
    this._point = 0;                                                                                                   // 14305
  },                                                                                                                   // 14306
  lineEnd: function() {                                                                                                // 14307
    switch (this._point) {                                                                                             // 14308
      case 1: {                                                                                                        // 14309
        this._context.moveTo(this._x3, this._y3);                                                                      // 14310
        this._context.closePath();                                                                                     // 14311
        break;                                                                                                         // 14312
      }                                                                                                                // 14313
      case 2: {                                                                                                        // 14314
        this._context.lineTo(this._x3, this._y3);                                                                      // 14315
        this._context.closePath();                                                                                     // 14316
        break;                                                                                                         // 14317
      }                                                                                                                // 14318
      case 3: {                                                                                                        // 14319
        this.point(this._x3, this._y3);                                                                                // 14320
        this.point(this._x4, this._y4);                                                                                // 14321
        this.point(this._x5, this._y5);                                                                                // 14322
        break;                                                                                                         // 14323
      }                                                                                                                // 14324
    }                                                                                                                  // 14325
  },                                                                                                                   // 14326
  point: function(x, y) {                                                                                              // 14327
    x = +x, y = +y;                                                                                                    // 14328
    switch (this._point) {                                                                                             // 14329
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;                                                      // 14330
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;                                // 14331
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;                                                      // 14332
      default: point$3(this, x, y); break;                                                                             // 14333
    }                                                                                                                  // 14334
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;                                                            // 14335
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;                                                            // 14336
  }                                                                                                                    // 14337
};                                                                                                                     // 14338
                                                                                                                       // 14339
var cardinalClosed = ((function custom(tension) {                                                                      // 14340
                                                                                                                       // 14341
  function cardinal(context) {                                                                                         // 14342
    return new CardinalClosed(context, tension);                                                                       // 14343
  }                                                                                                                    // 14344
                                                                                                                       // 14345
  cardinal.tension = function(tension) {                                                                               // 14346
    return custom(+tension);                                                                                           // 14347
  };                                                                                                                   // 14348
                                                                                                                       // 14349
  return cardinal;                                                                                                     // 14350
}))(0);                                                                                                                // 14351
                                                                                                                       // 14352
function CardinalOpen(context, tension) {                                                                              // 14353
  this._context = context;                                                                                             // 14354
  this._k = (1 - tension) / 6;                                                                                         // 14355
}                                                                                                                      // 14356
                                                                                                                       // 14357
CardinalOpen.prototype = {                                                                                             // 14358
  areaStart: function() {                                                                                              // 14359
    this._line = 0;                                                                                                    // 14360
  },                                                                                                                   // 14361
  areaEnd: function() {                                                                                                // 14362
    this._line = NaN;                                                                                                  // 14363
  },                                                                                                                   // 14364
  lineStart: function() {                                                                                              // 14365
    this._x0 = this._x1 = this._x2 =                                                                                   // 14366
    this._y0 = this._y1 = this._y2 = NaN;                                                                              // 14367
    this._point = 0;                                                                                                   // 14368
  },                                                                                                                   // 14369
  lineEnd: function() {                                                                                                // 14370
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();                              // 14371
    this._line = 1 - this._line;                                                                                       // 14372
  },                                                                                                                   // 14373
  point: function(x, y) {                                                                                              // 14374
    x = +x, y = +y;                                                                                                    // 14375
    switch (this._point) {                                                                                             // 14376
      case 0: this._point = 1; break;                                                                                  // 14377
      case 1: this._point = 2; break;                                                                                  // 14378
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed                                                                              // 14380
      default: point$3(this, x, y); break;                                                                             // 14381
    }                                                                                                                  // 14382
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;                                                            // 14383
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;                                                            // 14384
  }                                                                                                                    // 14385
};                                                                                                                     // 14386
                                                                                                                       // 14387
var cardinalOpen = ((function custom(tension) {                                                                        // 14388
                                                                                                                       // 14389
  function cardinal(context) {                                                                                         // 14390
    return new CardinalOpen(context, tension);                                                                         // 14391
  }                                                                                                                    // 14392
                                                                                                                       // 14393
  cardinal.tension = function(tension) {                                                                               // 14394
    return custom(+tension);                                                                                           // 14395
  };                                                                                                                   // 14396
                                                                                                                       // 14397
  return cardinal;                                                                                                     // 14398
}))(0);                                                                                                                // 14399
                                                                                                                       // 14400
function point$4(that, x, y) {                                                                                         // 14401
  var x1 = that._x1,                                                                                                   // 14402
      y1 = that._y1,                                                                                                   // 14403
      x2 = that._x2,                                                                                                   // 14404
      y2 = that._y2;                                                                                                   // 14405
                                                                                                                       // 14406
  if (that._l01_a > epsilon$3) {                                                                                       // 14407
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,                                           // 14408
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);                                                             // 14409
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;                                             // 14410
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;                                             // 14411
  }                                                                                                                    // 14412
                                                                                                                       // 14413
  if (that._l23_a > epsilon$3) {                                                                                       // 14414
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,                                           // 14415
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);                                                             // 14416
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;                                                    // 14417
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;                                                    // 14418
  }                                                                                                                    // 14419
                                                                                                                       // 14420
  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);                                                     // 14421
}                                                                                                                      // 14422
                                                                                                                       // 14423
function CatmullRom(context, alpha) {                                                                                  // 14424
  this._context = context;                                                                                             // 14425
  this._alpha = alpha;                                                                                                 // 14426
}                                                                                                                      // 14427
                                                                                                                       // 14428
CatmullRom.prototype = {                                                                                               // 14429
  areaStart: function() {                                                                                              // 14430
    this._line = 0;                                                                                                    // 14431
  },                                                                                                                   // 14432
  areaEnd: function() {                                                                                                // 14433
    this._line = NaN;                                                                                                  // 14434
  },                                                                                                                   // 14435
  lineStart: function() {                                                                                              // 14436
    this._x0 = this._x1 = this._x2 =                                                                                   // 14437
    this._y0 = this._y1 = this._y2 = NaN;                                                                              // 14438
    this._l01_a = this._l12_a = this._l23_a =                                                                          // 14439
    this._l01_2a = this._l12_2a = this._l23_2a =                                                                       // 14440
    this._point = 0;                                                                                                   // 14441
  },                                                                                                                   // 14442
  lineEnd: function() {                                                                                                // 14443
    switch (this._point) {                                                                                             // 14444
      case 2: this._context.lineTo(this._x2, this._y2); break;                                                         // 14445
      case 3: this.point(this._x2, this._y2); break;                                                                   // 14446
    }                                                                                                                  // 14447
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();                              // 14448
    this._line = 1 - this._line;                                                                                       // 14449
  },                                                                                                                   // 14450
  point: function(x, y) {                                                                                              // 14451
    x = +x, y = +y;                                                                                                    // 14452
                                                                                                                       // 14453
    if (this._point) {                                                                                                 // 14454
      var x23 = this._x2 - x,                                                                                          // 14455
          y23 = this._y2 - y;                                                                                          // 14456
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));                            // 14457
    }                                                                                                                  // 14458
                                                                                                                       // 14459
    switch (this._point) {                                                                                             // 14460
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;            // 14461
      case 1: this._point = 2; break;                                                                                  // 14462
      case 2: this._point = 3; // proceed                                                                              // 14463
      default: point$4(this, x, y); break;                                                                             // 14464
    }                                                                                                                  // 14465
                                                                                                                       // 14466
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;                                                              // 14467
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;                                                          // 14468
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;                                                            // 14469
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;                                                            // 14470
  }                                                                                                                    // 14471
};                                                                                                                     // 14472
                                                                                                                       // 14473
var catmullRom = ((function custom(alpha) {                                                                            // 14474
                                                                                                                       // 14475
  function catmullRom(context) {                                                                                       // 14476
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);                                          // 14477
  }                                                                                                                    // 14478
                                                                                                                       // 14479
  catmullRom.alpha = function(alpha) {                                                                                 // 14480
    return custom(+alpha);                                                                                             // 14481
  };                                                                                                                   // 14482
                                                                                                                       // 14483
  return catmullRom;                                                                                                   // 14484
}))(0.5);                                                                                                              // 14485
                                                                                                                       // 14486
function CatmullRomClosed(context, alpha) {                                                                            // 14487
  this._context = context;                                                                                             // 14488
  this._alpha = alpha;                                                                                                 // 14489
}                                                                                                                      // 14490
                                                                                                                       // 14491
CatmullRomClosed.prototype = {                                                                                         // 14492
  areaStart: noop$2,                                                                                                   // 14493
  areaEnd: noop$2,                                                                                                     // 14494
  lineStart: function() {                                                                                              // 14495
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =                                                  // 14496
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;                                             // 14497
    this._l01_a = this._l12_a = this._l23_a =                                                                          // 14498
    this._l01_2a = this._l12_2a = this._l23_2a =                                                                       // 14499
    this._point = 0;                                                                                                   // 14500
  },                                                                                                                   // 14501
  lineEnd: function() {                                                                                                // 14502
    switch (this._point) {                                                                                             // 14503
      case 1: {                                                                                                        // 14504
        this._context.moveTo(this._x3, this._y3);                                                                      // 14505
        this._context.closePath();                                                                                     // 14506
        break;                                                                                                         // 14507
      }                                                                                                                // 14508
      case 2: {                                                                                                        // 14509
        this._context.lineTo(this._x3, this._y3);                                                                      // 14510
        this._context.closePath();                                                                                     // 14511
        break;                                                                                                         // 14512
      }                                                                                                                // 14513
      case 3: {                                                                                                        // 14514
        this.point(this._x3, this._y3);                                                                                // 14515
        this.point(this._x4, this._y4);                                                                                // 14516
        this.point(this._x5, this._y5);                                                                                // 14517
        break;                                                                                                         // 14518
      }                                                                                                                // 14519
    }                                                                                                                  // 14520
  },                                                                                                                   // 14521
  point: function(x, y) {                                                                                              // 14522
    x = +x, y = +y;                                                                                                    // 14523
                                                                                                                       // 14524
    if (this._point) {                                                                                                 // 14525
      var x23 = this._x2 - x,                                                                                          // 14526
          y23 = this._y2 - y;                                                                                          // 14527
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));                            // 14528
    }                                                                                                                  // 14529
                                                                                                                       // 14530
    switch (this._point) {                                                                                             // 14531
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;                                                      // 14532
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;                                // 14533
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;                                                      // 14534
      default: point$4(this, x, y); break;                                                                             // 14535
    }                                                                                                                  // 14536
                                                                                                                       // 14537
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;                                                              // 14538
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;                                                          // 14539
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;                                                            // 14540
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;                                                            // 14541
  }                                                                                                                    // 14542
};                                                                                                                     // 14543
                                                                                                                       // 14544
var catmullRomClosed = ((function custom(alpha) {                                                                      // 14545
                                                                                                                       // 14546
  function catmullRom(context) {                                                                                       // 14547
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);                              // 14548
  }                                                                                                                    // 14549
                                                                                                                       // 14550
  catmullRom.alpha = function(alpha) {                                                                                 // 14551
    return custom(+alpha);                                                                                             // 14552
  };                                                                                                                   // 14553
                                                                                                                       // 14554
  return catmullRom;                                                                                                   // 14555
}))(0.5);                                                                                                              // 14556
                                                                                                                       // 14557
function CatmullRomOpen(context, alpha) {                                                                              // 14558
  this._context = context;                                                                                             // 14559
  this._alpha = alpha;                                                                                                 // 14560
}                                                                                                                      // 14561
                                                                                                                       // 14562
CatmullRomOpen.prototype = {                                                                                           // 14563
  areaStart: function() {                                                                                              // 14564
    this._line = 0;                                                                                                    // 14565
  },                                                                                                                   // 14566
  areaEnd: function() {                                                                                                // 14567
    this._line = NaN;                                                                                                  // 14568
  },                                                                                                                   // 14569
  lineStart: function() {                                                                                              // 14570
    this._x0 = this._x1 = this._x2 =                                                                                   // 14571
    this._y0 = this._y1 = this._y2 = NaN;                                                                              // 14572
    this._l01_a = this._l12_a = this._l23_a =                                                                          // 14573
    this._l01_2a = this._l12_2a = this._l23_2a =                                                                       // 14574
    this._point = 0;                                                                                                   // 14575
  },                                                                                                                   // 14576
  lineEnd: function() {                                                                                                // 14577
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();                              // 14578
    this._line = 1 - this._line;                                                                                       // 14579
  },                                                                                                                   // 14580
  point: function(x, y) {                                                                                              // 14581
    x = +x, y = +y;                                                                                                    // 14582
                                                                                                                       // 14583
    if (this._point) {                                                                                                 // 14584
      var x23 = this._x2 - x,                                                                                          // 14585
          y23 = this._y2 - y;                                                                                          // 14586
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));                            // 14587
    }                                                                                                                  // 14588
                                                                                                                       // 14589
    switch (this._point) {                                                                                             // 14590
      case 0: this._point = 1; break;                                                                                  // 14591
      case 1: this._point = 2; break;                                                                                  // 14592
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed                                                                              // 14594
      default: point$4(this, x, y); break;                                                                             // 14595
    }                                                                                                                  // 14596
                                                                                                                       // 14597
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;                                                              // 14598
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;                                                          // 14599
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;                                                            // 14600
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;                                                            // 14601
  }                                                                                                                    // 14602
};                                                                                                                     // 14603
                                                                                                                       // 14604
var catmullRomOpen = ((function custom(alpha) {                                                                        // 14605
                                                                                                                       // 14606
  function catmullRom(context) {                                                                                       // 14607
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);                                  // 14608
  }                                                                                                                    // 14609
                                                                                                                       // 14610
  catmullRom.alpha = function(alpha) {                                                                                 // 14611
    return custom(+alpha);                                                                                             // 14612
  };                                                                                                                   // 14613
                                                                                                                       // 14614
  return catmullRom;                                                                                                   // 14615
}))(0.5);                                                                                                              // 14616
                                                                                                                       // 14617
function LinearClosed(context) {                                                                                       // 14618
  this._context = context;                                                                                             // 14619
}                                                                                                                      // 14620
                                                                                                                       // 14621
LinearClosed.prototype = {                                                                                             // 14622
  areaStart: noop$2,                                                                                                   // 14623
  areaEnd: noop$2,                                                                                                     // 14624
  lineStart: function() {                                                                                              // 14625
    this._point = 0;                                                                                                   // 14626
  },                                                                                                                   // 14627
  lineEnd: function() {                                                                                                // 14628
    if (this._point) this._context.closePath();                                                                        // 14629
  },                                                                                                                   // 14630
  point: function(x, y) {                                                                                              // 14631
    x = +x, y = +y;                                                                                                    // 14632
    if (this._point) this._context.lineTo(x, y);                                                                       // 14633
    else this._point = 1, this._context.moveTo(x, y);                                                                  // 14634
  }                                                                                                                    // 14635
};                                                                                                                     // 14636
                                                                                                                       // 14637
var linearClosed = function(context) {                                                                                 // 14638
  return new LinearClosed(context);                                                                                    // 14639
};                                                                                                                     // 14640
                                                                                                                       // 14641
function sign$1(x) {                                                                                                   // 14642
  return x < 0 ? -1 : 1;                                                                                               // 14643
}                                                                                                                      // 14644
                                                                                                                       // 14645
// Calculate the slopes of the tangents (Hermite-type interpolation) based on                                          // 14646
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic                                                // 14647
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.                                           // 14648
// NOV(II), P. 443, 1990.                                                                                              // 14649
function slope3(that, x2, y2) {                                                                                        // 14650
  var h0 = that._x1 - that._x0,                                                                                        // 14651
      h1 = x2 - that._x1,                                                                                              // 14652
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),                                                               // 14653
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),                                                                     // 14654
      p = (s0 * h1 + s1 * h0) / (h0 + h1);                                                                             // 14655
  return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;                     // 14656
}                                                                                                                      // 14657
                                                                                                                       // 14658
// Calculate a one-sided slope.                                                                                        // 14659
function slope2(that, t) {                                                                                             // 14660
  var h = that._x1 - that._x0;                                                                                         // 14661
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;                                                              // 14662
}                                                                                                                      // 14663
                                                                                                                       // 14664
// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations                                     // 14665
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves                                        // 14666
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".                                                  // 14667
function point$5(that, t0, t1) {                                                                                       // 14668
  var x0 = that._x0,                                                                                                   // 14669
      y0 = that._y0,                                                                                                   // 14670
      x1 = that._x1,                                                                                                   // 14671
      y1 = that._y1,                                                                                                   // 14672
      dx = (x1 - x0) / 3;                                                                                              // 14673
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);                                   // 14674
}                                                                                                                      // 14675
                                                                                                                       // 14676
function MonotoneX(context) {                                                                                          // 14677
  this._context = context;                                                                                             // 14678
}                                                                                                                      // 14679
                                                                                                                       // 14680
MonotoneX.prototype = {                                                                                                // 14681
  areaStart: function() {                                                                                              // 14682
    this._line = 0;                                                                                                    // 14683
  },                                                                                                                   // 14684
  areaEnd: function() {                                                                                                // 14685
    this._line = NaN;                                                                                                  // 14686
  },                                                                                                                   // 14687
  lineStart: function() {                                                                                              // 14688
    this._x0 = this._x1 =                                                                                              // 14689
    this._y0 = this._y1 =                                                                                              // 14690
    this._t0 = NaN;                                                                                                    // 14691
    this._point = 0;                                                                                                   // 14692
  },                                                                                                                   // 14693
  lineEnd: function() {                                                                                                // 14694
    switch (this._point) {                                                                                             // 14695
      case 2: this._context.lineTo(this._x1, this._y1); break;                                                         // 14696
      case 3: point$5(this, this._t0, slope2(this, this._t0)); break;                                                  // 14697
    }                                                                                                                  // 14698
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();                              // 14699
    this._line = 1 - this._line;                                                                                       // 14700
  },                                                                                                                   // 14701
  point: function(x, y) {                                                                                              // 14702
    var t1 = NaN;                                                                                                      // 14703
                                                                                                                       // 14704
    x = +x, y = +y;                                                                                                    // 14705
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.                                         // 14706
    switch (this._point) {                                                                                             // 14707
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;            // 14708
      case 1: this._point = 2; break;                                                                                  // 14709
      case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;                        // 14710
      default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;                                                // 14711
    }                                                                                                                  // 14712
                                                                                                                       // 14713
    this._x0 = this._x1, this._x1 = x;                                                                                 // 14714
    this._y0 = this._y1, this._y1 = y;                                                                                 // 14715
    this._t0 = t1;                                                                                                     // 14716
  }                                                                                                                    // 14717
};                                                                                                                     // 14718
                                                                                                                       // 14719
function MonotoneY(context) {                                                                                          // 14720
  this._context = new ReflectContext(context);                                                                         // 14721
}                                                                                                                      // 14722
                                                                                                                       // 14723
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {                                    // 14724
  MonotoneX.prototype.point.call(this, y, x);                                                                          // 14725
};                                                                                                                     // 14726
                                                                                                                       // 14727
function ReflectContext(context) {                                                                                     // 14728
  this._context = context;                                                                                             // 14729
}                                                                                                                      // 14730
                                                                                                                       // 14731
ReflectContext.prototype = {                                                                                           // 14732
  moveTo: function(x, y) { this._context.moveTo(y, x); },                                                              // 14733
  closePath: function() { this._context.closePath(); },                                                                // 14734
  lineTo: function(x, y) { this._context.lineTo(y, x); },                                                              // 14735
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }                 // 14736
};                                                                                                                     // 14737
                                                                                                                       // 14738
function monotoneX(context) {                                                                                          // 14739
  return new MonotoneX(context);                                                                                       // 14740
}                                                                                                                      // 14741
                                                                                                                       // 14742
function monotoneY(context) {                                                                                          // 14743
  return new MonotoneY(context);                                                                                       // 14744
}                                                                                                                      // 14745
                                                                                                                       // 14746
function Natural(context) {                                                                                            // 14747
  this._context = context;                                                                                             // 14748
}                                                                                                                      // 14749
                                                                                                                       // 14750
Natural.prototype = {                                                                                                  // 14751
  areaStart: function() {                                                                                              // 14752
    this._line = 0;                                                                                                    // 14753
  },                                                                                                                   // 14754
  areaEnd: function() {                                                                                                // 14755
    this._line = NaN;                                                                                                  // 14756
  },                                                                                                                   // 14757
  lineStart: function() {                                                                                              // 14758
    this._x = [];                                                                                                      // 14759
    this._y = [];                                                                                                      // 14760
  },                                                                                                                   // 14761
  lineEnd: function() {                                                                                                // 14762
    var x = this._x,                                                                                                   // 14763
        y = this._y,                                                                                                   // 14764
        n = x.length;                                                                                                  // 14765
                                                                                                                       // 14766
    if (n) {                                                                                                           // 14767
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);                                // 14768
      if (n === 2) {                                                                                                   // 14769
        this._context.lineTo(x[1], y[1]);                                                                              // 14770
      } else {                                                                                                         // 14771
        var px = controlPoints(x),                                                                                     // 14772
            py = controlPoints(y);                                                                                     // 14773
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {                                                                 // 14774
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);                       // 14775
        }                                                                                                              // 14776
      }                                                                                                                // 14777
    }                                                                                                                  // 14778
                                                                                                                       // 14779
    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();                                        // 14780
    this._line = 1 - this._line;                                                                                       // 14781
    this._x = this._y = null;                                                                                          // 14782
  },                                                                                                                   // 14783
  point: function(x, y) {                                                                                              // 14784
    this._x.push(+x);                                                                                                  // 14785
    this._y.push(+y);                                                                                                  // 14786
  }                                                                                                                    // 14787
};                                                                                                                     // 14788
                                                                                                                       // 14789
// See https://www.particleincell.com/2012/bezier-splines/ for derivation.                                             // 14790
function controlPoints(x) {                                                                                            // 14791
  var i,                                                                                                               // 14792
      n = x.length - 1,                                                                                                // 14793
      m,                                                                                                               // 14794
      a = new Array(n),                                                                                                // 14795
      b = new Array(n),                                                                                                // 14796
      r = new Array(n);                                                                                                // 14797
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];                                                                          // 14798
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];                                      // 14799
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];                                                          // 14800
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];                                        // 14801
  a[n - 1] = r[n - 1] / b[n - 1];                                                                                      // 14802
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];                                                        // 14803
  b[n - 1] = (x[n] + a[n - 1]) / 2;                                                                                    // 14804
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];                                                          // 14805
  return [a, b];                                                                                                       // 14806
}                                                                                                                      // 14807
                                                                                                                       // 14808
var natural = function(context) {                                                                                      // 14809
  return new Natural(context);                                                                                         // 14810
};                                                                                                                     // 14811
                                                                                                                       // 14812
function Step(context, t) {                                                                                            // 14813
  this._context = context;                                                                                             // 14814
  this._t = t;                                                                                                         // 14815
}                                                                                                                      // 14816
                                                                                                                       // 14817
Step.prototype = {                                                                                                     // 14818
  areaStart: function() {                                                                                              // 14819
    this._line = 0;                                                                                                    // 14820
  },                                                                                                                   // 14821
  areaEnd: function() {                                                                                                // 14822
    this._line = NaN;                                                                                                  // 14823
  },                                                                                                                   // 14824
  lineStart: function() {                                                                                              // 14825
    this._x = this._y = NaN;                                                                                           // 14826
    this._point = 0;                                                                                                   // 14827
  },                                                                                                                   // 14828
  lineEnd: function() {                                                                                                // 14829
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);                       // 14830
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();                              // 14831
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;                                           // 14832
  },                                                                                                                   // 14833
  point: function(x, y) {                                                                                              // 14834
    x = +x, y = +y;                                                                                                    // 14835
    switch (this._point) {                                                                                             // 14836
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;            // 14837
      case 1: this._point = 2; // proceed                                                                              // 14838
      default: {                                                                                                       // 14839
        if (this._t <= 0) {                                                                                            // 14840
          this._context.lineTo(this._x, y);                                                                            // 14841
          this._context.lineTo(x, y);                                                                                  // 14842
        } else {                                                                                                       // 14843
          var x1 = this._x * (1 - this._t) + x * this._t;                                                              // 14844
          this._context.lineTo(x1, this._y);                                                                           // 14845
          this._context.lineTo(x1, y);                                                                                 // 14846
        }                                                                                                              // 14847
        break;                                                                                                         // 14848
      }                                                                                                                // 14849
    }                                                                                                                  // 14850
    this._x = x, this._y = y;                                                                                          // 14851
  }                                                                                                                    // 14852
};                                                                                                                     // 14853
                                                                                                                       // 14854
var step = function(context) {                                                                                         // 14855
  return new Step(context, 0.5);                                                                                       // 14856
};                                                                                                                     // 14857
                                                                                                                       // 14858
function stepBefore(context) {                                                                                         // 14859
  return new Step(context, 0);                                                                                         // 14860
}                                                                                                                      // 14861
                                                                                                                       // 14862
function stepAfter(context) {                                                                                          // 14863
  return new Step(context, 1);                                                                                         // 14864
}                                                                                                                      // 14865
                                                                                                                       // 14866
var none$1 = function(series, order) {                                                                                 // 14867
  if (!((n = series.length) > 1)) return;                                                                              // 14868
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {                                        // 14869
    s0 = s1, s1 = series[order[i]];                                                                                    // 14870
    for (j = 0; j < m; ++j) {                                                                                          // 14871
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];                                                    // 14872
    }                                                                                                                  // 14873
  }                                                                                                                    // 14874
};                                                                                                                     // 14875
                                                                                                                       // 14876
var none$2 = function(series) {                                                                                        // 14877
  var n = series.length, o = new Array(n);                                                                             // 14878
  while (--n >= 0) o[n] = n;                                                                                           // 14879
  return o;                                                                                                            // 14880
};                                                                                                                     // 14881
                                                                                                                       // 14882
function stackValue(d, key) {                                                                                          // 14883
  return d[key];                                                                                                       // 14884
}                                                                                                                      // 14885
                                                                                                                       // 14886
var stack = function() {                                                                                               // 14887
  var keys = constant$10([]),                                                                                          // 14888
      order = none$2,                                                                                                  // 14889
      offset = none$1,                                                                                                 // 14890
      value = stackValue;                                                                                              // 14891
                                                                                                                       // 14892
  function stack(data) {                                                                                               // 14893
    var kz = keys.apply(this, arguments),                                                                              // 14894
        i,                                                                                                             // 14895
        m = data.length,                                                                                               // 14896
        n = kz.length,                                                                                                 // 14897
        sz = new Array(n),                                                                                             // 14898
        oz;                                                                                                            // 14899
                                                                                                                       // 14900
    for (i = 0; i < n; ++i) {                                                                                          // 14901
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {                                        // 14902
        si[j] = sij = [0, +value(data[j], ki, j, data)];                                                               // 14903
        sij.data = data[j];                                                                                            // 14904
      }                                                                                                                // 14905
      si.key = ki;                                                                                                     // 14906
    }                                                                                                                  // 14907
                                                                                                                       // 14908
    for (i = 0, oz = order(sz); i < n; ++i) {                                                                          // 14909
      sz[oz[i]].index = i;                                                                                             // 14910
    }                                                                                                                  // 14911
                                                                                                                       // 14912
    offset(sz, oz);                                                                                                    // 14913
    return sz;                                                                                                         // 14914
  }                                                                                                                    // 14915
                                                                                                                       // 14916
  stack.keys = function(_) {                                                                                           // 14917
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : keys;       // 14918
  };                                                                                                                   // 14919
                                                                                                                       // 14920
  stack.value = function(_) {                                                                                          // 14921
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), stack) : value;                  // 14922
  };                                                                                                                   // 14923
                                                                                                                       // 14924
  stack.order = function(_) {                                                                                          // 14925
    return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : order;
  };                                                                                                                   // 14927
                                                                                                                       // 14928
  stack.offset = function(_) {                                                                                         // 14929
    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;                                       // 14930
  };                                                                                                                   // 14931
                                                                                                                       // 14932
  return stack;                                                                                                        // 14933
};                                                                                                                     // 14934
                                                                                                                       // 14935
var expand = function(series, order) {                                                                                 // 14936
  if (!((n = series.length) > 0)) return;                                                                              // 14937
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {                                                         // 14938
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;                                                             // 14939
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;                                                               // 14940
  }                                                                                                                    // 14941
  none$1(series, order);                                                                                               // 14942
};                                                                                                                     // 14943
                                                                                                                       // 14944
var diverging = function(series, order) {                                                                              // 14945
  if (!((n = series.length) > 1)) return;                                                                              // 14946
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {                                      // 14947
    for (yp = yn = 0, i = 0; i < n; ++i) {                                                                             // 14948
      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {                                                           // 14949
        d[0] = yp, d[1] = yp += dy;                                                                                    // 14950
      } else if (dy < 0) {                                                                                             // 14951
        d[1] = yn, d[0] = yn += dy;                                                                                    // 14952
      } else {                                                                                                         // 14953
        d[0] = yp;                                                                                                     // 14954
      }                                                                                                                // 14955
    }                                                                                                                  // 14956
  }                                                                                                                    // 14957
};                                                                                                                     // 14958
                                                                                                                       // 14959
var silhouette = function(series, order) {                                                                             // 14960
  if (!((n = series.length) > 0)) return;                                                                              // 14961
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {                                               // 14962
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;                                                      // 14963
    s0[j][1] += s0[j][0] = -y / 2;                                                                                     // 14964
  }                                                                                                                    // 14965
  none$1(series, order);                                                                                               // 14966
};                                                                                                                     // 14967
                                                                                                                       // 14968
var wiggle = function(series, order) {                                                                                 // 14969
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;                               // 14970
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {                                                                       // 14971
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {                                                                      // 14972
      var si = series[order[i]],                                                                                       // 14973
          sij0 = si[j][1] || 0,                                                                                        // 14974
          sij1 = si[j - 1][1] || 0,                                                                                    // 14975
          s3 = (sij0 - sij1) / 2;                                                                                      // 14976
      for (var k = 0; k < i; ++k) {                                                                                    // 14977
        var sk = series[order[k]],                                                                                     // 14978
            skj0 = sk[j][1] || 0,                                                                                      // 14979
            skj1 = sk[j - 1][1] || 0;                                                                                  // 14980
        s3 += skj0 - skj1;                                                                                             // 14981
      }                                                                                                                // 14982
      s1 += sij0, s2 += s3 * sij0;                                                                                     // 14983
    }                                                                                                                  // 14984
    s0[j - 1][1] += s0[j - 1][0] = y;                                                                                  // 14985
    if (s1) y -= s2 / s1;                                                                                              // 14986
  }                                                                                                                    // 14987
  s0[j - 1][1] += s0[j - 1][0] = y;                                                                                    // 14988
  none$1(series, order);                                                                                               // 14989
};                                                                                                                     // 14990
                                                                                                                       // 14991
var ascending$2 = function(series) {                                                                                   // 14992
  var sums = series.map(sum$2);                                                                                        // 14993
  return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });                                            // 14994
};                                                                                                                     // 14995
                                                                                                                       // 14996
function sum$2(series) {                                                                                               // 14997
  var s = 0, i = -1, n = series.length, v;                                                                             // 14998
  while (++i < n) if (v = +series[i][1]) s += v;                                                                       // 14999
  return s;                                                                                                            // 15000
}                                                                                                                      // 15001
                                                                                                                       // 15002
var descending$2 = function(series) {                                                                                  // 15003
  return ascending$2(series).reverse();                                                                                // 15004
};                                                                                                                     // 15005
                                                                                                                       // 15006
var insideOut = function(series) {                                                                                     // 15007
  var n = series.length,                                                                                               // 15008
      i,                                                                                                               // 15009
      j,                                                                                                               // 15010
      sums = series.map(sum$2),                                                                                        // 15011
      order = none$2(series).sort(function(a, b) { return sums[b] - sums[a]; }),                                       // 15012
      top = 0,                                                                                                         // 15013
      bottom = 0,                                                                                                      // 15014
      tops = [],                                                                                                       // 15015
      bottoms = [];                                                                                                    // 15016
                                                                                                                       // 15017
  for (i = 0; i < n; ++i) {                                                                                            // 15018
    j = order[i];                                                                                                      // 15019
    if (top < bottom) {                                                                                                // 15020
      top += sums[j];                                                                                                  // 15021
      tops.push(j);                                                                                                    // 15022
    } else {                                                                                                           // 15023
      bottom += sums[j];                                                                                               // 15024
      bottoms.push(j);                                                                                                 // 15025
    }                                                                                                                  // 15026
  }                                                                                                                    // 15027
                                                                                                                       // 15028
  return bottoms.reverse().concat(tops);                                                                               // 15029
};                                                                                                                     // 15030
                                                                                                                       // 15031
var reverse = function(series) {                                                                                       // 15032
  return none$2(series).reverse();                                                                                     // 15033
};                                                                                                                     // 15034
                                                                                                                       // 15035
var constant$11 = function(x) {                                                                                        // 15036
  return function() {                                                                                                  // 15037
    return x;                                                                                                          // 15038
  };                                                                                                                   // 15039
};                                                                                                                     // 15040
                                                                                                                       // 15041
function x$4(d) {                                                                                                      // 15042
  return d[0];                                                                                                         // 15043
}                                                                                                                      // 15044
                                                                                                                       // 15045
function y$4(d) {                                                                                                      // 15046
  return d[1];                                                                                                         // 15047
}                                                                                                                      // 15048
                                                                                                                       // 15049
function RedBlackTree() {                                                                                              // 15050
  this._ = null; // root node                                                                                          // 15051
}                                                                                                                      // 15052
                                                                                                                       // 15053
function RedBlackNode(node) {                                                                                          // 15054
  node.U = // parent node                                                                                              // 15055
  node.C = // color - true for red, false for black                                                                    // 15056
  node.L = // left node                                                                                                // 15057
  node.R = // right node                                                                                               // 15058
  node.P = // previous node                                                                                            // 15059
  node.N = null; // next node                                                                                          // 15060
}                                                                                                                      // 15061
                                                                                                                       // 15062
RedBlackTree.prototype = {                                                                                             // 15063
  constructor: RedBlackTree,                                                                                           // 15064
                                                                                                                       // 15065
  insert: function(after, node) {                                                                                      // 15066
    var parent, grandpa, uncle;                                                                                        // 15067
                                                                                                                       // 15068
    if (after) {                                                                                                       // 15069
      node.P = after;                                                                                                  // 15070
      node.N = after.N;                                                                                                // 15071
      if (after.N) after.N.P = node;                                                                                   // 15072
      after.N = node;                                                                                                  // 15073
      if (after.R) {                                                                                                   // 15074
        after = after.R;                                                                                               // 15075
        while (after.L) after = after.L;                                                                               // 15076
        after.L = node;                                                                                                // 15077
      } else {                                                                                                         // 15078
        after.R = node;                                                                                                // 15079
      }                                                                                                                // 15080
      parent = after;                                                                                                  // 15081
    } else if (this._) {                                                                                               // 15082
      after = RedBlackFirst(this._);                                                                                   // 15083
      node.P = null;                                                                                                   // 15084
      node.N = after;                                                                                                  // 15085
      after.P = after.L = node;                                                                                        // 15086
      parent = after;                                                                                                  // 15087
    } else {                                                                                                           // 15088
      node.P = node.N = null;                                                                                          // 15089
      this._ = node;                                                                                                   // 15090
      parent = null;                                                                                                   // 15091
    }                                                                                                                  // 15092
    node.L = node.R = null;                                                                                            // 15093
    node.U = parent;                                                                                                   // 15094
    node.C = true;                                                                                                     // 15095
                                                                                                                       // 15096
    after = node;                                                                                                      // 15097
    while (parent && parent.C) {                                                                                       // 15098
      grandpa = parent.U;                                                                                              // 15099
      if (parent === grandpa.L) {                                                                                      // 15100
        uncle = grandpa.R;                                                                                             // 15101
        if (uncle && uncle.C) {                                                                                        // 15102
          parent.C = uncle.C = false;                                                                                  // 15103
          grandpa.C = true;                                                                                            // 15104
          after = grandpa;                                                                                             // 15105
        } else {                                                                                                       // 15106
          if (after === parent.R) {                                                                                    // 15107
            RedBlackRotateLeft(this, parent);                                                                          // 15108
            after = parent;                                                                                            // 15109
            parent = after.U;                                                                                          // 15110
          }                                                                                                            // 15111
          parent.C = false;                                                                                            // 15112
          grandpa.C = true;                                                                                            // 15113
          RedBlackRotateRight(this, grandpa);                                                                          // 15114
        }                                                                                                              // 15115
      } else {                                                                                                         // 15116
        uncle = grandpa.L;                                                                                             // 15117
        if (uncle && uncle.C) {                                                                                        // 15118
          parent.C = uncle.C = false;                                                                                  // 15119
          grandpa.C = true;                                                                                            // 15120
          after = grandpa;                                                                                             // 15121
        } else {                                                                                                       // 15122
          if (after === parent.L) {                                                                                    // 15123
            RedBlackRotateRight(this, parent);                                                                         // 15124
            after = parent;                                                                                            // 15125
            parent = after.U;                                                                                          // 15126
          }                                                                                                            // 15127
          parent.C = false;                                                                                            // 15128
          grandpa.C = true;                                                                                            // 15129
          RedBlackRotateLeft(this, grandpa);                                                                           // 15130
        }                                                                                                              // 15131
      }                                                                                                                // 15132
      parent = after.U;                                                                                                // 15133
    }                                                                                                                  // 15134
    this._.C = false;                                                                                                  // 15135
  },                                                                                                                   // 15136
                                                                                                                       // 15137
  remove: function(node) {                                                                                             // 15138
    if (node.N) node.N.P = node.P;                                                                                     // 15139
    if (node.P) node.P.N = node.N;                                                                                     // 15140
    node.N = node.P = null;                                                                                            // 15141
                                                                                                                       // 15142
    var parent = node.U,                                                                                               // 15143
        sibling,                                                                                                       // 15144
        left = node.L,                                                                                                 // 15145
        right = node.R,                                                                                                // 15146
        next,                                                                                                          // 15147
        red;                                                                                                           // 15148
                                                                                                                       // 15149
    if (!left) next = right;                                                                                           // 15150
    else if (!right) next = left;                                                                                      // 15151
    else next = RedBlackFirst(right);                                                                                  // 15152
                                                                                                                       // 15153
    if (parent) {                                                                                                      // 15154
      if (parent.L === node) parent.L = next;                                                                          // 15155
      else parent.R = next;                                                                                            // 15156
    } else {                                                                                                           // 15157
      this._ = next;                                                                                                   // 15158
    }                                                                                                                  // 15159
                                                                                                                       // 15160
    if (left && right) {                                                                                               // 15161
      red = next.C;                                                                                                    // 15162
      next.C = node.C;                                                                                                 // 15163
      next.L = left;                                                                                                   // 15164
      left.U = next;                                                                                                   // 15165
      if (next !== right) {                                                                                            // 15166
        parent = next.U;                                                                                               // 15167
        next.U = node.U;                                                                                               // 15168
        node = next.R;                                                                                                 // 15169
        parent.L = node;                                                                                               // 15170
        next.R = right;                                                                                                // 15171
        right.U = next;                                                                                                // 15172
      } else {                                                                                                         // 15173
        next.U = parent;                                                                                               // 15174
        parent = next;                                                                                                 // 15175
        node = next.R;                                                                                                 // 15176
      }                                                                                                                // 15177
    } else {                                                                                                           // 15178
      red = node.C;                                                                                                    // 15179
      node = next;                                                                                                     // 15180
    }                                                                                                                  // 15181
                                                                                                                       // 15182
    if (node) node.U = parent;                                                                                         // 15183
    if (red) return;                                                                                                   // 15184
    if (node && node.C) { node.C = false; return; }                                                                    // 15185
                                                                                                                       // 15186
    do {                                                                                                               // 15187
      if (node === this._) break;                                                                                      // 15188
      if (node === parent.L) {                                                                                         // 15189
        sibling = parent.R;                                                                                            // 15190
        if (sibling.C) {                                                                                               // 15191
          sibling.C = false;                                                                                           // 15192
          parent.C = true;                                                                                             // 15193
          RedBlackRotateLeft(this, parent);                                                                            // 15194
          sibling = parent.R;                                                                                          // 15195
        }                                                                                                              // 15196
        if ((sibling.L && sibling.L.C)                                                                                 // 15197
            || (sibling.R && sibling.R.C)) {                                                                           // 15198
          if (!sibling.R || !sibling.R.C) {                                                                            // 15199
            sibling.L.C = false;                                                                                       // 15200
            sibling.C = true;                                                                                          // 15201
            RedBlackRotateRight(this, sibling);                                                                        // 15202
            sibling = parent.R;                                                                                        // 15203
          }                                                                                                            // 15204
          sibling.C = parent.C;                                                                                        // 15205
          parent.C = sibling.R.C = false;                                                                              // 15206
          RedBlackRotateLeft(this, parent);                                                                            // 15207
          node = this._;                                                                                               // 15208
          break;                                                                                                       // 15209
        }                                                                                                              // 15210
      } else {                                                                                                         // 15211
        sibling = parent.L;                                                                                            // 15212
        if (sibling.C) {                                                                                               // 15213
          sibling.C = false;                                                                                           // 15214
          parent.C = true;                                                                                             // 15215
          RedBlackRotateRight(this, parent);                                                                           // 15216
          sibling = parent.L;                                                                                          // 15217
        }                                                                                                              // 15218
        if ((sibling.L && sibling.L.C)                                                                                 // 15219
          || (sibling.R && sibling.R.C)) {                                                                             // 15220
          if (!sibling.L || !sibling.L.C) {                                                                            // 15221
            sibling.R.C = false;                                                                                       // 15222
            sibling.C = true;                                                                                          // 15223
            RedBlackRotateLeft(this, sibling);                                                                         // 15224
            sibling = parent.L;                                                                                        // 15225
          }                                                                                                            // 15226
          sibling.C = parent.C;                                                                                        // 15227
          parent.C = sibling.L.C = false;                                                                              // 15228
          RedBlackRotateRight(this, parent);                                                                           // 15229
          node = this._;                                                                                               // 15230
          break;                                                                                                       // 15231
        }                                                                                                              // 15232
      }                                                                                                                // 15233
      sibling.C = true;                                                                                                // 15234
      node = parent;                                                                                                   // 15235
      parent = parent.U;                                                                                               // 15236
    } while (!node.C);                                                                                                 // 15237
                                                                                                                       // 15238
    if (node) node.C = false;                                                                                          // 15239
  }                                                                                                                    // 15240
};                                                                                                                     // 15241
                                                                                                                       // 15242
function RedBlackRotateLeft(tree, node) {                                                                              // 15243
  var p = node,                                                                                                        // 15244
      q = node.R,                                                                                                      // 15245
      parent = p.U;                                                                                                    // 15246
                                                                                                                       // 15247
  if (parent) {                                                                                                        // 15248
    if (parent.L === p) parent.L = q;                                                                                  // 15249
    else parent.R = q;                                                                                                 // 15250
  } else {                                                                                                             // 15251
    tree._ = q;                                                                                                        // 15252
  }                                                                                                                    // 15253
                                                                                                                       // 15254
  q.U = parent;                                                                                                        // 15255
  p.U = q;                                                                                                             // 15256
  p.R = q.L;                                                                                                           // 15257
  if (p.R) p.R.U = p;                                                                                                  // 15258
  q.L = p;                                                                                                             // 15259
}                                                                                                                      // 15260
                                                                                                                       // 15261
function RedBlackRotateRight(tree, node) {                                                                             // 15262
  var p = node,                                                                                                        // 15263
      q = node.L,                                                                                                      // 15264
      parent = p.U;                                                                                                    // 15265
                                                                                                                       // 15266
  if (parent) {                                                                                                        // 15267
    if (parent.L === p) parent.L = q;                                                                                  // 15268
    else parent.R = q;                                                                                                 // 15269
  } else {                                                                                                             // 15270
    tree._ = q;                                                                                                        // 15271
  }                                                                                                                    // 15272
                                                                                                                       // 15273
  q.U = parent;                                                                                                        // 15274
  p.U = q;                                                                                                             // 15275
  p.L = q.R;                                                                                                           // 15276
  if (p.L) p.L.U = p;                                                                                                  // 15277
  q.R = p;                                                                                                             // 15278
}                                                                                                                      // 15279
                                                                                                                       // 15280
function RedBlackFirst(node) {                                                                                         // 15281
  while (node.L) node = node.L;                                                                                        // 15282
  return node;                                                                                                         // 15283
}                                                                                                                      // 15284
                                                                                                                       // 15285
function createEdge(left, right, v0, v1) {                                                                             // 15286
  var edge = [null, null],                                                                                             // 15287
      index = edges.push(edge) - 1;                                                                                    // 15288
  edge.left = left;                                                                                                    // 15289
  edge.right = right;                                                                                                  // 15290
  if (v0) setEdgeEnd(edge, left, right, v0);                                                                           // 15291
  if (v1) setEdgeEnd(edge, right, left, v1);                                                                           // 15292
  cells[left.index].halfedges.push(index);                                                                             // 15293
  cells[right.index].halfedges.push(index);                                                                            // 15294
  return edge;                                                                                                         // 15295
}                                                                                                                      // 15296
                                                                                                                       // 15297
function createBorderEdge(left, v0, v1) {                                                                              // 15298
  var edge = [v0, v1];                                                                                                 // 15299
  edge.left = left;                                                                                                    // 15300
  return edge;                                                                                                         // 15301
}                                                                                                                      // 15302
                                                                                                                       // 15303
function setEdgeEnd(edge, left, right, vertex) {                                                                       // 15304
  if (!edge[0] && !edge[1]) {                                                                                          // 15305
    edge[0] = vertex;                                                                                                  // 15306
    edge.left = left;                                                                                                  // 15307
    edge.right = right;                                                                                                // 15308
  } else if (edge.left === right) {                                                                                    // 15309
    edge[1] = vertex;                                                                                                  // 15310
  } else {                                                                                                             // 15311
    edge[0] = vertex;                                                                                                  // 15312
  }                                                                                                                    // 15313
}                                                                                                                      // 15314
                                                                                                                       // 15315
// Liang–Barsky line clipping.                                                                                         // 15316
function clipEdge(edge, x0, y0, x1, y1) {                                                                              // 15317
  var a = edge[0],                                                                                                     // 15318
      b = edge[1],                                                                                                     // 15319
      ax = a[0],                                                                                                       // 15320
      ay = a[1],                                                                                                       // 15321
      bx = b[0],                                                                                                       // 15322
      by = b[1],                                                                                                       // 15323
      t0 = 0,                                                                                                          // 15324
      t1 = 1,                                                                                                          // 15325
      dx = bx - ax,                                                                                                    // 15326
      dy = by - ay,                                                                                                    // 15327
      r;                                                                                                               // 15328
                                                                                                                       // 15329
  r = x0 - ax;                                                                                                         // 15330
  if (!dx && r > 0) return;                                                                                            // 15331
  r /= dx;                                                                                                             // 15332
  if (dx < 0) {                                                                                                        // 15333
    if (r < t0) return;                                                                                                // 15334
    if (r < t1) t1 = r;                                                                                                // 15335
  } else if (dx > 0) {                                                                                                 // 15336
    if (r > t1) return;                                                                                                // 15337
    if (r > t0) t0 = r;                                                                                                // 15338
  }                                                                                                                    // 15339
                                                                                                                       // 15340
  r = x1 - ax;                                                                                                         // 15341
  if (!dx && r < 0) return;                                                                                            // 15342
  r /= dx;                                                                                                             // 15343
  if (dx < 0) {                                                                                                        // 15344
    if (r > t1) return;                                                                                                // 15345
    if (r > t0) t0 = r;                                                                                                // 15346
  } else if (dx > 0) {                                                                                                 // 15347
    if (r < t0) return;                                                                                                // 15348
    if (r < t1) t1 = r;                                                                                                // 15349
  }                                                                                                                    // 15350
                                                                                                                       // 15351
  r = y0 - ay;                                                                                                         // 15352
  if (!dy && r > 0) return;                                                                                            // 15353
  r /= dy;                                                                                                             // 15354
  if (dy < 0) {                                                                                                        // 15355
    if (r < t0) return;                                                                                                // 15356
    if (r < t1) t1 = r;                                                                                                // 15357
  } else if (dy > 0) {                                                                                                 // 15358
    if (r > t1) return;                                                                                                // 15359
    if (r > t0) t0 = r;                                                                                                // 15360
  }                                                                                                                    // 15361
                                                                                                                       // 15362
  r = y1 - ay;                                                                                                         // 15363
  if (!dy && r < 0) return;                                                                                            // 15364
  r /= dy;                                                                                                             // 15365
  if (dy < 0) {                                                                                                        // 15366
    if (r > t1) return;                                                                                                // 15367
    if (r > t0) t0 = r;                                                                                                // 15368
  } else if (dy > 0) {                                                                                                 // 15369
    if (r < t0) return;                                                                                                // 15370
    if (r < t1) t1 = r;                                                                                                // 15371
  }                                                                                                                    // 15372
                                                                                                                       // 15373
  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?                                                       // 15374
                                                                                                                       // 15375
  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];                                                                  // 15376
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];                                                                  // 15377
  return true;                                                                                                         // 15378
}                                                                                                                      // 15379
                                                                                                                       // 15380
function connectEdge(edge, x0, y0, x1, y1) {                                                                           // 15381
  var v1 = edge[1];                                                                                                    // 15382
  if (v1) return true;                                                                                                 // 15383
                                                                                                                       // 15384
  var v0 = edge[0],                                                                                                    // 15385
      left = edge.left,                                                                                                // 15386
      right = edge.right,                                                                                              // 15387
      lx = left[0],                                                                                                    // 15388
      ly = left[1],                                                                                                    // 15389
      rx = right[0],                                                                                                   // 15390
      ry = right[1],                                                                                                   // 15391
      fx = (lx + rx) / 2,                                                                                              // 15392
      fy = (ly + ry) / 2,                                                                                              // 15393
      fm,                                                                                                              // 15394
      fb;                                                                                                              // 15395
                                                                                                                       // 15396
  if (ry === ly) {                                                                                                     // 15397
    if (fx < x0 || fx >= x1) return;                                                                                   // 15398
    if (lx > rx) {                                                                                                     // 15399
      if (!v0) v0 = [fx, y0];                                                                                          // 15400
      else if (v0[1] >= y1) return;                                                                                    // 15401
      v1 = [fx, y1];                                                                                                   // 15402
    } else {                                                                                                           // 15403
      if (!v0) v0 = [fx, y1];                                                                                          // 15404
      else if (v0[1] < y0) return;                                                                                     // 15405
      v1 = [fx, y0];                                                                                                   // 15406
    }                                                                                                                  // 15407
  } else {                                                                                                             // 15408
    fm = (lx - rx) / (ry - ly);                                                                                        // 15409
    fb = fy - fm * fx;                                                                                                 // 15410
    if (fm < -1 || fm > 1) {                                                                                           // 15411
      if (lx > rx) {                                                                                                   // 15412
        if (!v0) v0 = [(y0 - fb) / fm, y0];                                                                            // 15413
        else if (v0[1] >= y1) return;                                                                                  // 15414
        v1 = [(y1 - fb) / fm, y1];                                                                                     // 15415
      } else {                                                                                                         // 15416
        if (!v0) v0 = [(y1 - fb) / fm, y1];                                                                            // 15417
        else if (v0[1] < y0) return;                                                                                   // 15418
        v1 = [(y0 - fb) / fm, y0];                                                                                     // 15419
      }                                                                                                                // 15420
    } else {                                                                                                           // 15421
      if (ly < ry) {                                                                                                   // 15422
        if (!v0) v0 = [x0, fm * x0 + fb];                                                                              // 15423
        else if (v0[0] >= x1) return;                                                                                  // 15424
        v1 = [x1, fm * x1 + fb];                                                                                       // 15425
      } else {                                                                                                         // 15426
        if (!v0) v0 = [x1, fm * x1 + fb];                                                                              // 15427
        else if (v0[0] < x0) return;                                                                                   // 15428
        v1 = [x0, fm * x0 + fb];                                                                                       // 15429
      }                                                                                                                // 15430
    }                                                                                                                  // 15431
  }                                                                                                                    // 15432
                                                                                                                       // 15433
  edge[0] = v0;                                                                                                        // 15434
  edge[1] = v1;                                                                                                        // 15435
  return true;                                                                                                         // 15436
}                                                                                                                      // 15437
                                                                                                                       // 15438
function clipEdges(x0, y0, x1, y1) {                                                                                   // 15439
  var i = edges.length,                                                                                                // 15440
      edge;                                                                                                            // 15441
                                                                                                                       // 15442
  while (i--) {                                                                                                        // 15443
    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)                                                                  // 15444
        || !clipEdge(edge, x0, y0, x1, y1)                                                                             // 15445
        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4                                                             // 15446
            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {                                                       // 15447
      delete edges[i];                                                                                                 // 15448
    }                                                                                                                  // 15449
  }                                                                                                                    // 15450
}                                                                                                                      // 15451
                                                                                                                       // 15452
function createCell(site) {                                                                                            // 15453
  return cells[site.index] = {                                                                                         // 15454
    site: site,                                                                                                        // 15455
    halfedges: []                                                                                                      // 15456
  };                                                                                                                   // 15457
}                                                                                                                      // 15458
                                                                                                                       // 15459
function cellHalfedgeAngle(cell, edge) {                                                                               // 15460
  var site = cell.site,                                                                                                // 15461
      va = edge.left,                                                                                                  // 15462
      vb = edge.right;                                                                                                 // 15463
  if (site === vb) vb = va, va = site;                                                                                 // 15464
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);                                                             // 15465
  if (site === va) va = edge[1], vb = edge[0];                                                                         // 15466
  else va = edge[0], vb = edge[1];                                                                                     // 15467
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);                                                                     // 15468
}                                                                                                                      // 15469
                                                                                                                       // 15470
function cellHalfedgeStart(cell, edge) {                                                                               // 15471
  return edge[+(edge.left !== cell.site)];                                                                             // 15472
}                                                                                                                      // 15473
                                                                                                                       // 15474
function cellHalfedgeEnd(cell, edge) {                                                                                 // 15475
  return edge[+(edge.left === cell.site)];                                                                             // 15476
}                                                                                                                      // 15477
                                                                                                                       // 15478
function sortCellHalfedges() {                                                                                         // 15479
  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {                                               // 15480
    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {                                              // 15481
      var index = new Array(m),                                                                                        // 15482
          array = new Array(m);                                                                                        // 15483
      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);                   // 15484
      index.sort(function(i, j) { return array[j] - array[i]; });                                                      // 15485
      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];                                                          // 15486
      for (j = 0; j < m; ++j) halfedges[j] = array[j];                                                                 // 15487
    }                                                                                                                  // 15488
  }                                                                                                                    // 15489
}                                                                                                                      // 15490
                                                                                                                       // 15491
function clipCells(x0, y0, x1, y1) {                                                                                   // 15492
  var nCells = cells.length,                                                                                           // 15493
      iCell,                                                                                                           // 15494
      cell,                                                                                                            // 15495
      site,                                                                                                            // 15496
      iHalfedge,                                                                                                       // 15497
      halfedges,                                                                                                       // 15498
      nHalfedges,                                                                                                      // 15499
      start,                                                                                                           // 15500
      startX,                                                                                                          // 15501
      startY,                                                                                                          // 15502
      end,                                                                                                             // 15503
      endX,                                                                                                            // 15504
      endY,                                                                                                            // 15505
      cover = true;                                                                                                    // 15506
                                                                                                                       // 15507
  for (iCell = 0; iCell < nCells; ++iCell) {                                                                           // 15508
    if (cell = cells[iCell]) {                                                                                         // 15509
      site = cell.site;                                                                                                // 15510
      halfedges = cell.halfedges;                                                                                      // 15511
      iHalfedge = halfedges.length;                                                                                    // 15512
                                                                                                                       // 15513
      // Remove any dangling clipped edges.                                                                            // 15514
      while (iHalfedge--) {                                                                                            // 15515
        if (!edges[halfedges[iHalfedge]]) {                                                                            // 15516
          halfedges.splice(iHalfedge, 1);                                                                              // 15517
        }                                                                                                              // 15518
      }                                                                                                                // 15519
                                                                                                                       // 15520
      // Insert any border edges as necessary.                                                                         // 15521
      iHalfedge = 0, nHalfedges = halfedges.length;                                                                    // 15522
      while (iHalfedge < nHalfedges) {                                                                                 // 15523
        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];                        // 15524
        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
        if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {                              // 15526
          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,                                        // 15527
              Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]
              : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]
              : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]
              : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]
              : null)) - 1);                                                                                           // 15532
          ++nHalfedges;                                                                                                // 15533
        }                                                                                                              // 15534
      }                                                                                                                // 15535
                                                                                                                       // 15536
      if (nHalfedges) cover = false;                                                                                   // 15537
    }                                                                                                                  // 15538
  }                                                                                                                    // 15539
                                                                                                                       // 15540
  // If there weren’t any edges, have the closest site cover the extent.                                               // 15541
  // It doesn’t matter which corner of the extent we measure!                                                          // 15542
  if (cover) {                                                                                                         // 15543
    var dx, dy, d2, dc = Infinity;                                                                                     // 15544
                                                                                                                       // 15545
    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {                                                           // 15546
      if (cell = cells[iCell]) {                                                                                       // 15547
        site = cell.site;                                                                                              // 15548
        dx = site[0] - x0;                                                                                             // 15549
        dy = site[1] - y0;                                                                                             // 15550
        d2 = dx * dx + dy * dy;                                                                                        // 15551
        if (d2 < dc) dc = d2, cover = cell;                                                                            // 15552
      }                                                                                                                // 15553
    }                                                                                                                  // 15554
                                                                                                                       // 15555
    if (cover) {                                                                                                       // 15556
      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];                                              // 15557
      cover.halfedges.push(                                                                                            // 15558
        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,                                                 // 15559
        edges.push(createBorderEdge(site, v01, v11)) - 1,                                                              // 15560
        edges.push(createBorderEdge(site, v11, v10)) - 1,                                                              // 15561
        edges.push(createBorderEdge(site, v10, v00)) - 1                                                               // 15562
      );                                                                                                               // 15563
    }                                                                                                                  // 15564
  }                                                                                                                    // 15565
                                                                                                                       // 15566
  // Lastly delete any cells with no edges; these were entirely clipped.                                               // 15567
  for (iCell = 0; iCell < nCells; ++iCell) {                                                                           // 15568
    if (cell = cells[iCell]) {                                                                                         // 15569
      if (!cell.halfedges.length) {                                                                                    // 15570
        delete cells[iCell];                                                                                           // 15571
      }                                                                                                                // 15572
    }                                                                                                                  // 15573
  }                                                                                                                    // 15574
}                                                                                                                      // 15575
                                                                                                                       // 15576
var circlePool = [];                                                                                                   // 15577
                                                                                                                       // 15578
var firstCircle;                                                                                                       // 15579
                                                                                                                       // 15580
function Circle() {                                                                                                    // 15581
  RedBlackNode(this);                                                                                                  // 15582
  this.x =                                                                                                             // 15583
  this.y =                                                                                                             // 15584
  this.arc =                                                                                                           // 15585
  this.site =                                                                                                          // 15586
  this.cy = null;                                                                                                      // 15587
}                                                                                                                      // 15588
                                                                                                                       // 15589
function attachCircle(arc) {                                                                                           // 15590
  var lArc = arc.P,                                                                                                    // 15591
      rArc = arc.N;                                                                                                    // 15592
                                                                                                                       // 15593
  if (!lArc || !rArc) return;                                                                                          // 15594
                                                                                                                       // 15595
  var lSite = lArc.site,                                                                                               // 15596
      cSite = arc.site,                                                                                                // 15597
      rSite = rArc.site;                                                                                               // 15598
                                                                                                                       // 15599
  if (lSite === rSite) return;                                                                                         // 15600
                                                                                                                       // 15601
  var bx = cSite[0],                                                                                                   // 15602
      by = cSite[1],                                                                                                   // 15603
      ax = lSite[0] - bx,                                                                                              // 15604
      ay = lSite[1] - by,                                                                                              // 15605
      cx = rSite[0] - bx,                                                                                              // 15606
      cy = rSite[1] - by;                                                                                              // 15607
                                                                                                                       // 15608
  var d = 2 * (ax * cy - ay * cx);                                                                                     // 15609
  if (d >= -epsilon2$2) return;                                                                                        // 15610
                                                                                                                       // 15611
  var ha = ax * ax + ay * ay,                                                                                          // 15612
      hc = cx * cx + cy * cy,                                                                                          // 15613
      x = (cy * ha - ay * hc) / d,                                                                                     // 15614
      y = (ax * hc - cx * ha) / d;                                                                                     // 15615
                                                                                                                       // 15616
  var circle = circlePool.pop() || new Circle;                                                                         // 15617
  circle.arc = arc;                                                                                                    // 15618
  circle.site = cSite;                                                                                                 // 15619
  circle.x = x + bx;                                                                                                   // 15620
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom                                              // 15621
                                                                                                                       // 15622
  arc.circle = circle;                                                                                                 // 15623
                                                                                                                       // 15624
  var before = null,                                                                                                   // 15625
      node = circles._;                                                                                                // 15626
                                                                                                                       // 15627
  while (node) {                                                                                                       // 15628
    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {                                            // 15629
      if (node.L) node = node.L;                                                                                       // 15630
      else { before = node.P; break; }                                                                                 // 15631
    } else {                                                                                                           // 15632
      if (node.R) node = node.R;                                                                                       // 15633
      else { before = node; break; }                                                                                   // 15634
    }                                                                                                                  // 15635
  }                                                                                                                    // 15636
                                                                                                                       // 15637
  circles.insert(before, circle);                                                                                      // 15638
  if (!before) firstCircle = circle;                                                                                   // 15639
}                                                                                                                      // 15640
                                                                                                                       // 15641
function detachCircle(arc) {                                                                                           // 15642
  var circle = arc.circle;                                                                                             // 15643
  if (circle) {                                                                                                        // 15644
    if (!circle.P) firstCircle = circle.N;                                                                             // 15645
    circles.remove(circle);                                                                                            // 15646
    circlePool.push(circle);                                                                                           // 15647
    RedBlackNode(circle);                                                                                              // 15648
    arc.circle = null;                                                                                                 // 15649
  }                                                                                                                    // 15650
}                                                                                                                      // 15651
                                                                                                                       // 15652
var beachPool = [];                                                                                                    // 15653
                                                                                                                       // 15654
function Beach() {                                                                                                     // 15655
  RedBlackNode(this);                                                                                                  // 15656
  this.edge =                                                                                                          // 15657
  this.site =                                                                                                          // 15658
  this.circle = null;                                                                                                  // 15659
}                                                                                                                      // 15660
                                                                                                                       // 15661
function createBeach(site) {                                                                                           // 15662
  var beach = beachPool.pop() || new Beach;                                                                            // 15663
  beach.site = site;                                                                                                   // 15664
  return beach;                                                                                                        // 15665
}                                                                                                                      // 15666
                                                                                                                       // 15667
function detachBeach(beach) {                                                                                          // 15668
  detachCircle(beach);                                                                                                 // 15669
  beaches.remove(beach);                                                                                               // 15670
  beachPool.push(beach);                                                                                               // 15671
  RedBlackNode(beach);                                                                                                 // 15672
}                                                                                                                      // 15673
                                                                                                                       // 15674
function removeBeach(beach) {                                                                                          // 15675
  var circle = beach.circle,                                                                                           // 15676
      x = circle.x,                                                                                                    // 15677
      y = circle.cy,                                                                                                   // 15678
      vertex = [x, y],                                                                                                 // 15679
      previous = beach.P,                                                                                              // 15680
      next = beach.N,                                                                                                  // 15681
      disappearing = [beach];                                                                                          // 15682
                                                                                                                       // 15683
  detachBeach(beach);                                                                                                  // 15684
                                                                                                                       // 15685
  var lArc = previous;                                                                                                 // 15686
  while (lArc.circle                                                                                                   // 15687
      && Math.abs(x - lArc.circle.x) < epsilon$4                                                                       // 15688
      && Math.abs(y - lArc.circle.cy) < epsilon$4) {                                                                   // 15689
    previous = lArc.P;                                                                                                 // 15690
    disappearing.unshift(lArc);                                                                                        // 15691
    detachBeach(lArc);                                                                                                 // 15692
    lArc = previous;                                                                                                   // 15693
  }                                                                                                                    // 15694
                                                                                                                       // 15695
  disappearing.unshift(lArc);                                                                                          // 15696
  detachCircle(lArc);                                                                                                  // 15697
                                                                                                                       // 15698
  var rArc = next;                                                                                                     // 15699
  while (rArc.circle                                                                                                   // 15700
      && Math.abs(x - rArc.circle.x) < epsilon$4                                                                       // 15701
      && Math.abs(y - rArc.circle.cy) < epsilon$4) {                                                                   // 15702
    next = rArc.N;                                                                                                     // 15703
    disappearing.push(rArc);                                                                                           // 15704
    detachBeach(rArc);                                                                                                 // 15705
    rArc = next;                                                                                                       // 15706
  }                                                                                                                    // 15707
                                                                                                                       // 15708
  disappearing.push(rArc);                                                                                             // 15709
  detachCircle(rArc);                                                                                                  // 15710
                                                                                                                       // 15711
  var nArcs = disappearing.length,                                                                                     // 15712
      iArc;                                                                                                            // 15713
  for (iArc = 1; iArc < nArcs; ++iArc) {                                                                               // 15714
    rArc = disappearing[iArc];                                                                                         // 15715
    lArc = disappearing[iArc - 1];                                                                                     // 15716
    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);                                                               // 15717
  }                                                                                                                    // 15718
                                                                                                                       // 15719
  lArc = disappearing[0];                                                                                              // 15720
  rArc = disappearing[nArcs - 1];                                                                                      // 15721
  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);                                                          // 15722
                                                                                                                       // 15723
  attachCircle(lArc);                                                                                                  // 15724
  attachCircle(rArc);                                                                                                  // 15725
}                                                                                                                      // 15726
                                                                                                                       // 15727
function addBeach(site) {                                                                                              // 15728
  var x = site[0],                                                                                                     // 15729
      directrix = site[1],                                                                                             // 15730
      lArc,                                                                                                            // 15731
      rArc,                                                                                                            // 15732
      dxl,                                                                                                             // 15733
      dxr,                                                                                                             // 15734
      node = beaches._;                                                                                                // 15735
                                                                                                                       // 15736
  while (node) {                                                                                                       // 15737
    dxl = leftBreakPoint(node, directrix) - x;                                                                         // 15738
    if (dxl > epsilon$4) node = node.L; else {                                                                         // 15739
      dxr = x - rightBreakPoint(node, directrix);                                                                      // 15740
      if (dxr > epsilon$4) {                                                                                           // 15741
        if (!node.R) {                                                                                                 // 15742
          lArc = node;                                                                                                 // 15743
          break;                                                                                                       // 15744
        }                                                                                                              // 15745
        node = node.R;                                                                                                 // 15746
      } else {                                                                                                         // 15747
        if (dxl > -epsilon$4) {                                                                                        // 15748
          lArc = node.P;                                                                                               // 15749
          rArc = node;                                                                                                 // 15750
        } else if (dxr > -epsilon$4) {                                                                                 // 15751
          lArc = node;                                                                                                 // 15752
          rArc = node.N;                                                                                               // 15753
        } else {                                                                                                       // 15754
          lArc = rArc = node;                                                                                          // 15755
        }                                                                                                              // 15756
        break;                                                                                                         // 15757
      }                                                                                                                // 15758
    }                                                                                                                  // 15759
  }                                                                                                                    // 15760
                                                                                                                       // 15761
  createCell(site);                                                                                                    // 15762
  var newArc = createBeach(site);                                                                                      // 15763
  beaches.insert(lArc, newArc);                                                                                        // 15764
                                                                                                                       // 15765
  if (!lArc && !rArc) return;                                                                                          // 15766
                                                                                                                       // 15767
  if (lArc === rArc) {                                                                                                 // 15768
    detachCircle(lArc);                                                                                                // 15769
    rArc = createBeach(lArc.site);                                                                                     // 15770
    beaches.insert(newArc, rArc);                                                                                      // 15771
    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);                                                      // 15772
    attachCircle(lArc);                                                                                                // 15773
    attachCircle(rArc);                                                                                                // 15774
    return;                                                                                                            // 15775
  }                                                                                                                    // 15776
                                                                                                                       // 15777
  if (!rArc) { // && lArc                                                                                              // 15778
    newArc.edge = createEdge(lArc.site, newArc.site);                                                                  // 15779
    return;                                                                                                            // 15780
  }                                                                                                                    // 15781
                                                                                                                       // 15782
  // else lArc !== rArc                                                                                                // 15783
  detachCircle(lArc);                                                                                                  // 15784
  detachCircle(rArc);                                                                                                  // 15785
                                                                                                                       // 15786
  var lSite = lArc.site,                                                                                               // 15787
      ax = lSite[0],                                                                                                   // 15788
      ay = lSite[1],                                                                                                   // 15789
      bx = site[0] - ax,                                                                                               // 15790
      by = site[1] - ay,                                                                                               // 15791
      rSite = rArc.site,                                                                                               // 15792
      cx = rSite[0] - ax,                                                                                              // 15793
      cy = rSite[1] - ay,                                                                                              // 15794
      d = 2 * (bx * cy - by * cx),                                                                                     // 15795
      hb = bx * bx + by * by,                                                                                          // 15796
      hc = cx * cx + cy * cy,                                                                                          // 15797
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];                                           // 15798
                                                                                                                       // 15799
  setEdgeEnd(rArc.edge, lSite, rSite, vertex);                                                                         // 15800
  newArc.edge = createEdge(lSite, site, null, vertex);                                                                 // 15801
  rArc.edge = createEdge(site, rSite, null, vertex);                                                                   // 15802
  attachCircle(lArc);                                                                                                  // 15803
  attachCircle(rArc);                                                                                                  // 15804
}                                                                                                                      // 15805
                                                                                                                       // 15806
function leftBreakPoint(arc, directrix) {                                                                              // 15807
  var site = arc.site,                                                                                                 // 15808
      rfocx = site[0],                                                                                                 // 15809
      rfocy = site[1],                                                                                                 // 15810
      pby2 = rfocy - directrix;                                                                                        // 15811
                                                                                                                       // 15812
  if (!pby2) return rfocx;                                                                                             // 15813
                                                                                                                       // 15814
  var lArc = arc.P;                                                                                                    // 15815
  if (!lArc) return -Infinity;                                                                                         // 15816
                                                                                                                       // 15817
  site = lArc.site;                                                                                                    // 15818
  var lfocx = site[0],                                                                                                 // 15819
      lfocy = site[1],                                                                                                 // 15820
      plby2 = lfocy - directrix;                                                                                       // 15821
                                                                                                                       // 15822
  if (!plby2) return lfocx;                                                                                            // 15823
                                                                                                                       // 15824
  var hl = lfocx - rfocx,                                                                                              // 15825
      aby2 = 1 / pby2 - 1 / plby2,                                                                                     // 15826
      b = hl / plby2;                                                                                                  // 15827
                                                                                                                       // 15828
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
                                                                                                                       // 15830
  return (rfocx + lfocx) / 2;                                                                                          // 15831
}                                                                                                                      // 15832
                                                                                                                       // 15833
function rightBreakPoint(arc, directrix) {                                                                             // 15834
  var rArc = arc.N;                                                                                                    // 15835
  if (rArc) return leftBreakPoint(rArc, directrix);                                                                    // 15836
  var site = arc.site;                                                                                                 // 15837
  return site[1] === directrix ? site[0] : Infinity;                                                                   // 15838
}                                                                                                                      // 15839
                                                                                                                       // 15840
var epsilon$4 = 1e-6;                                                                                                  // 15841
var epsilon2$2 = 1e-12;                                                                                                // 15842
var beaches;                                                                                                           // 15843
var cells;                                                                                                             // 15844
var circles;                                                                                                           // 15845
var edges;                                                                                                             // 15846
                                                                                                                       // 15847
function triangleArea(a, b, c) {                                                                                       // 15848
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);                                                // 15849
}                                                                                                                      // 15850
                                                                                                                       // 15851
function lexicographic(a, b) {                                                                                         // 15852
  return b[1] - a[1]                                                                                                   // 15853
      || b[0] - a[0];                                                                                                  // 15854
}                                                                                                                      // 15855
                                                                                                                       // 15856
function Diagram(sites, extent) {                                                                                      // 15857
  var site = sites.sort(lexicographic).pop(),                                                                          // 15858
      x,                                                                                                               // 15859
      y,                                                                                                               // 15860
      circle;                                                                                                          // 15861
                                                                                                                       // 15862
  edges = [];                                                                                                          // 15863
  cells = new Array(sites.length);                                                                                     // 15864
  beaches = new RedBlackTree;                                                                                          // 15865
  circles = new RedBlackTree;                                                                                          // 15866
                                                                                                                       // 15867
  while (true) {                                                                                                       // 15868
    circle = firstCircle;                                                                                              // 15869
    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {                     // 15870
      if (site[0] !== x || site[1] !== y) {                                                                            // 15871
        addBeach(site);                                                                                                // 15872
        x = site[0], y = site[1];                                                                                      // 15873
      }                                                                                                                // 15874
      site = sites.pop();                                                                                              // 15875
    } else if (circle) {                                                                                               // 15876
      removeBeach(circle.arc);                                                                                         // 15877
    } else {                                                                                                           // 15878
      break;                                                                                                           // 15879
    }                                                                                                                  // 15880
  }                                                                                                                    // 15881
                                                                                                                       // 15882
  sortCellHalfedges();                                                                                                 // 15883
                                                                                                                       // 15884
  if (extent) {                                                                                                        // 15885
    var x0 = +extent[0][0],                                                                                            // 15886
        y0 = +extent[0][1],                                                                                            // 15887
        x1 = +extent[1][0],                                                                                            // 15888
        y1 = +extent[1][1];                                                                                            // 15889
    clipEdges(x0, y0, x1, y1);                                                                                         // 15890
    clipCells(x0, y0, x1, y1);                                                                                         // 15891
  }                                                                                                                    // 15892
                                                                                                                       // 15893
  this.edges = edges;                                                                                                  // 15894
  this.cells = cells;                                                                                                  // 15895
                                                                                                                       // 15896
  beaches =                                                                                                            // 15897
  circles =                                                                                                            // 15898
  edges =                                                                                                              // 15899
  cells = null;                                                                                                        // 15900
}                                                                                                                      // 15901
                                                                                                                       // 15902
Diagram.prototype = {                                                                                                  // 15903
  constructor: Diagram,                                                                                                // 15904
                                                                                                                       // 15905
  polygons: function() {                                                                                               // 15906
    var edges = this.edges;                                                                                            // 15907
                                                                                                                       // 15908
    return this.cells.map(function(cell) {                                                                             // 15909
      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });                     // 15910
      polygon.data = cell.site.data;                                                                                   // 15911
      return polygon;                                                                                                  // 15912
    });                                                                                                                // 15913
  },                                                                                                                   // 15914
                                                                                                                       // 15915
  triangles: function() {                                                                                              // 15916
    var triangles = [],                                                                                                // 15917
        edges = this.edges;                                                                                            // 15918
                                                                                                                       // 15919
    this.cells.forEach(function(cell, i) {                                                                             // 15920
      if (!(m = (halfedges = cell.halfedges).length)) return;                                                          // 15921
      var site = cell.site,                                                                                            // 15922
          halfedges,                                                                                                   // 15923
          j = -1,                                                                                                      // 15924
          m,                                                                                                           // 15925
          s0,                                                                                                          // 15926
          e1 = edges[halfedges[m - 1]],                                                                                // 15927
          s1 = e1.left === site ? e1.right : e1.left;                                                                  // 15928
                                                                                                                       // 15929
      while (++j < m) {                                                                                                // 15930
        s0 = s1;                                                                                                       // 15931
        e1 = edges[halfedges[j]];                                                                                      // 15932
        s1 = e1.left === site ? e1.right : e1.left;                                                                    // 15933
        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {                              // 15934
          triangles.push([site.data, s0.data, s1.data]);                                                               // 15935
        }                                                                                                              // 15936
      }                                                                                                                // 15937
    });                                                                                                                // 15938
                                                                                                                       // 15939
    return triangles;                                                                                                  // 15940
  },                                                                                                                   // 15941
                                                                                                                       // 15942
  links: function() {                                                                                                  // 15943
    return this.edges.filter(function(edge) {                                                                          // 15944
      return edge.right;                                                                                               // 15945
    }).map(function(edge) {                                                                                            // 15946
      return {                                                                                                         // 15947
        source: edge.left.data,                                                                                        // 15948
        target: edge.right.data                                                                                        // 15949
      };                                                                                                               // 15950
    });                                                                                                                // 15951
  },                                                                                                                   // 15952
                                                                                                                       // 15953
  find: function(x, y, radius) {                                                                                       // 15954
    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;                                           // 15955
                                                                                                                       // 15956
    // Use the previously-found cell, or start with an arbitrary one.                                                  // 15957
    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;                                                       // 15958
    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;                                          // 15959
                                                                                                                       // 15960
    // Traverse the half-edges to find a closer cell, if any.                                                          // 15961
    do {                                                                                                               // 15962
      cell = that.cells[i0 = i1], i1 = null;                                                                           // 15963
      cell.halfedges.forEach(function(e) {                                                                             // 15964
        var edge = that.edges[e], v = edge.left;                                                                       // 15965
        if ((v === cell.site || !v) && !(v = edge.right)) return;                                                      // 15966
        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;                                                      // 15967
        if (v2 < d2) d2 = v2, i1 = v.index;                                                                            // 15968
      });                                                                                                              // 15969
    } while (i1 !== null);                                                                                             // 15970
                                                                                                                       // 15971
    that._found = i0;                                                                                                  // 15972
                                                                                                                       // 15973
    return radius == null || d2 <= radius * radius ? cell.site : null;                                                 // 15974
  }                                                                                                                    // 15975
};                                                                                                                     // 15976
                                                                                                                       // 15977
var voronoi = function() {                                                                                             // 15978
  var x$$1 = x$4,                                                                                                      // 15979
      y$$1 = y$4,                                                                                                      // 15980
      extent = null;                                                                                                   // 15981
                                                                                                                       // 15982
  function voronoi(data) {                                                                                             // 15983
    return new Diagram(data.map(function(d, i) {                                                                       // 15984
      var s = [Math.round(x$$1(d, i, data) / epsilon$4) * epsilon$4, Math.round(y$$1(d, i, data) / epsilon$4) * epsilon$4];
      s.index = i;                                                                                                     // 15986
      s.data = d;                                                                                                      // 15987
      return s;                                                                                                        // 15988
    }), extent);                                                                                                       // 15989
  }                                                                                                                    // 15990
                                                                                                                       // 15991
  voronoi.polygons = function(data) {                                                                                  // 15992
    return voronoi(data).polygons();                                                                                   // 15993
  };                                                                                                                   // 15994
                                                                                                                       // 15995
  voronoi.links = function(data) {                                                                                     // 15996
    return voronoi(data).links();                                                                                      // 15997
  };                                                                                                                   // 15998
                                                                                                                       // 15999
  voronoi.triangles = function(data) {                                                                                 // 16000
    return voronoi(data).triangles();                                                                                  // 16001
  };                                                                                                                   // 16002
                                                                                                                       // 16003
  voronoi.x = function(_) {                                                                                            // 16004
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : x$$1;                  // 16005
  };                                                                                                                   // 16006
                                                                                                                       // 16007
  voronoi.y = function(_) {                                                                                            // 16008
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : y$$1;                  // 16009
  };                                                                                                                   // 16010
                                                                                                                       // 16011
  voronoi.extent = function(_) {                                                                                       // 16012
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };                                                                                                                   // 16014
                                                                                                                       // 16015
  voronoi.size = function(_) {                                                                                         // 16016
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };                                                                                                                   // 16018
                                                                                                                       // 16019
  return voronoi;                                                                                                      // 16020
};                                                                                                                     // 16021
                                                                                                                       // 16022
var constant$12 = function(x) {                                                                                        // 16023
  return function() {                                                                                                  // 16024
    return x;                                                                                                          // 16025
  };                                                                                                                   // 16026
};                                                                                                                     // 16027
                                                                                                                       // 16028
function ZoomEvent(target, type, transform) {                                                                          // 16029
  this.target = target;                                                                                                // 16030
  this.type = type;                                                                                                    // 16031
  this.transform = transform;                                                                                          // 16032
}                                                                                                                      // 16033
                                                                                                                       // 16034
function Transform(k, x, y) {                                                                                          // 16035
  this.k = k;                                                                                                          // 16036
  this.x = x;                                                                                                          // 16037
  this.y = y;                                                                                                          // 16038
}                                                                                                                      // 16039
                                                                                                                       // 16040
Transform.prototype = {                                                                                                // 16041
  constructor: Transform,                                                                                              // 16042
  scale: function(k) {                                                                                                 // 16043
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);                                                 // 16044
  },                                                                                                                   // 16045
  translate: function(x, y) {                                                                                          // 16046
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);                 // 16047
  },                                                                                                                   // 16048
  apply: function(point) {                                                                                             // 16049
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];                                                   // 16050
  },                                                                                                                   // 16051
  applyX: function(x) {                                                                                                // 16052
    return x * this.k + this.x;                                                                                        // 16053
  },                                                                                                                   // 16054
  applyY: function(y) {                                                                                                // 16055
    return y * this.k + this.y;                                                                                        // 16056
  },                                                                                                                   // 16057
  invert: function(location) {                                                                                         // 16058
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];                                         // 16059
  },                                                                                                                   // 16060
  invertX: function(x) {                                                                                               // 16061
    return (x - this.x) / this.k;                                                                                      // 16062
  },                                                                                                                   // 16063
  invertY: function(y) {                                                                                               // 16064
    return (y - this.y) / this.k;                                                                                      // 16065
  },                                                                                                                   // 16066
  rescaleX: function(x) {                                                                                              // 16067
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));                                        // 16068
  },                                                                                                                   // 16069
  rescaleY: function(y) {                                                                                              // 16070
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));                                        // 16071
  },                                                                                                                   // 16072
  toString: function() {                                                                                               // 16073
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";                                           // 16074
  }                                                                                                                    // 16075
};                                                                                                                     // 16076
                                                                                                                       // 16077
var identity$8 = new Transform(1, 0, 0);                                                                               // 16078
                                                                                                                       // 16079
transform$1.prototype = Transform.prototype;                                                                           // 16080
                                                                                                                       // 16081
function transform$1(node) {                                                                                           // 16082
  return node.__zoom || identity$8;                                                                                    // 16083
}                                                                                                                      // 16084
                                                                                                                       // 16085
function nopropagation$2() {                                                                                           // 16086
  exports.event.stopImmediatePropagation();                                                                            // 16087
}                                                                                                                      // 16088
                                                                                                                       // 16089
var noevent$2 = function() {                                                                                           // 16090
  exports.event.preventDefault();                                                                                      // 16091
  exports.event.stopImmediatePropagation();                                                                            // 16092
};                                                                                                                     // 16093
                                                                                                                       // 16094
// Ignore right-click, since that should open the context menu.                                                        // 16095
function defaultFilter$2() {                                                                                           // 16096
  return !exports.event.button;                                                                                        // 16097
}                                                                                                                      // 16098
                                                                                                                       // 16099
function defaultExtent$1() {                                                                                           // 16100
  var e = this, w, h;                                                                                                  // 16101
  if (e instanceof SVGElement) {                                                                                       // 16102
    e = e.ownerSVGElement || e;                                                                                        // 16103
    w = e.width.baseVal.value;                                                                                         // 16104
    h = e.height.baseVal.value;                                                                                        // 16105
  } else {                                                                                                             // 16106
    w = e.clientWidth;                                                                                                 // 16107
    h = e.clientHeight;                                                                                                // 16108
  }                                                                                                                    // 16109
  return [[0, 0], [w, h]];                                                                                             // 16110
}                                                                                                                      // 16111
                                                                                                                       // 16112
function defaultTransform() {                                                                                          // 16113
  return this.__zoom || identity$8;                                                                                    // 16114
}                                                                                                                      // 16115
                                                                                                                       // 16116
var zoom = function() {                                                                                                // 16117
  var filter = defaultFilter$2,                                                                                        // 16118
      extent = defaultExtent$1,                                                                                        // 16119
      k0 = 0,                                                                                                          // 16120
      k1 = Infinity,                                                                                                   // 16121
      x0 = -k1,                                                                                                        // 16122
      x1 = k1,                                                                                                         // 16123
      y0 = x0,                                                                                                         // 16124
      y1 = x1,                                                                                                         // 16125
      duration = 250,                                                                                                  // 16126
      interpolate$$1 = interpolateZoom,                                                                                // 16127
      gestures = [],                                                                                                   // 16128
      listeners = dispatch("start", "zoom", "end"),                                                                    // 16129
      touchstarting,                                                                                                   // 16130
      touchending,                                                                                                     // 16131
      touchDelay = 500,                                                                                                // 16132
      wheelDelay = 150,                                                                                                // 16133
      clickDistance2 = 0;                                                                                              // 16134
                                                                                                                       // 16135
  function zoom(selection$$1) {                                                                                        // 16136
    selection$$1                                                                                                       // 16137
        .on("wheel.zoom", wheeled)                                                                                     // 16138
        .on("mousedown.zoom", mousedowned)                                                                             // 16139
        .on("dblclick.zoom", dblclicked)                                                                               // 16140
        .on("touchstart.zoom", touchstarted)                                                                           // 16141
        .on("touchmove.zoom", touchmoved)                                                                              // 16142
        .on("touchend.zoom touchcancel.zoom", touchended)                                                              // 16143
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")                                                         // 16144
        .property("__zoom", defaultTransform);                                                                         // 16145
  }                                                                                                                    // 16146
                                                                                                                       // 16147
  zoom.transform = function(collection, transform) {                                                                   // 16148
    var selection$$1 = collection.selection ? collection.selection() : collection;                                     // 16149
    selection$$1.property("__zoom", defaultTransform);                                                                 // 16150
    if (collection !== selection$$1) {                                                                                 // 16151
      schedule(collection, transform);                                                                                 // 16152
    } else {                                                                                                           // 16153
      selection$$1.interrupt().each(function() {                                                                       // 16154
        gesture(this, arguments)                                                                                       // 16155
            .start()                                                                                                   // 16156
            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)                // 16157
            .end();                                                                                                    // 16158
      });                                                                                                              // 16159
    }                                                                                                                  // 16160
  };                                                                                                                   // 16161
                                                                                                                       // 16162
  zoom.scaleBy = function(selection$$1, k) {                                                                           // 16163
    zoom.scaleTo(selection$$1, function() {                                                                            // 16164
      var k0 = this.__zoom.k,                                                                                          // 16165
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;                                                 // 16166
      return k0 * k1;                                                                                                  // 16167
    });                                                                                                                // 16168
  };                                                                                                                   // 16169
                                                                                                                       // 16170
  zoom.scaleTo = function(selection$$1, k) {                                                                           // 16171
    zoom.transform(selection$$1, function() {                                                                          // 16172
      var e = extent.apply(this, arguments),                                                                           // 16173
          t0 = this.__zoom,                                                                                            // 16174
          p0 = centroid(e),                                                                                            // 16175
          p1 = t0.invert(p0),                                                                                          // 16176
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;                                                 // 16177
      return constrain(translate(scale(t0, k1), p0, p1), e);                                                           // 16178
    });                                                                                                                // 16179
  };                                                                                                                   // 16180
                                                                                                                       // 16181
  zoom.translateBy = function(selection$$1, x, y) {                                                                    // 16182
    zoom.transform(selection$$1, function() {                                                                          // 16183
      return constrain(this.__zoom.translate(                                                                          // 16184
        typeof x === "function" ? x.apply(this, arguments) : x,                                                        // 16185
        typeof y === "function" ? y.apply(this, arguments) : y                                                         // 16186
      ), extent.apply(this, arguments));                                                                               // 16187
    });                                                                                                                // 16188
  };                                                                                                                   // 16189
                                                                                                                       // 16190
  function scale(transform, k) {                                                                                       // 16191
    k = Math.max(k0, Math.min(k1, k));                                                                                 // 16192
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);                                 // 16193
  }                                                                                                                    // 16194
                                                                                                                       // 16195
  function translate(transform, p0, p1) {                                                                              // 16196
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;                                              // 16197
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);                      // 16198
  }                                                                                                                    // 16199
                                                                                                                       // 16200
  function constrain(transform, extent) {                                                                              // 16201
    var dx0 = transform.invertX(extent[0][0]) - x0,                                                                    // 16202
        dx1 = transform.invertX(extent[1][0]) - x1,                                                                    // 16203
        dy0 = transform.invertY(extent[0][1]) - y0,                                                                    // 16204
        dy1 = transform.invertY(extent[1][1]) - y1;                                                                    // 16205
    return transform.translate(                                                                                        // 16206
      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),                                              // 16207
      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)                                               // 16208
    );                                                                                                                 // 16209
  }                                                                                                                    // 16210
                                                                                                                       // 16211
  function centroid(extent) {                                                                                          // 16212
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];                                 // 16213
  }                                                                                                                    // 16214
                                                                                                                       // 16215
  function schedule(transition$$1, transform, center) {                                                                // 16216
    transition$$1                                                                                                      // 16217
        .on("start.zoom", function() { gesture(this, arguments).start(); })                                            // 16218
        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })                                 // 16219
        .tween("zoom", function() {                                                                                    // 16220
          var that = this,                                                                                             // 16221
              args = arguments,                                                                                        // 16222
              g = gesture(that, args),                                                                                 // 16223
              e = extent.apply(that, args),                                                                            // 16224
              p = center || centroid(e),                                                                               // 16225
              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),                                                      // 16226
              a = that.__zoom,                                                                                         // 16227
              b = typeof transform === "function" ? transform.apply(that, args) : transform,                           // 16228
              i = interpolate$$1(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));                            // 16229
          return function(t) {                                                                                         // 16230
            if (t === 1) t = b; // Avoid rounding error on end.                                                        // 16231
            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }               // 16232
            g.zoom(null, t);                                                                                           // 16233
          };                                                                                                           // 16234
        });                                                                                                            // 16235
  }                                                                                                                    // 16236
                                                                                                                       // 16237
  function gesture(that, args) {                                                                                       // 16238
    for (var i = 0, n = gestures.length, g; i < n; ++i) {                                                              // 16239
      if ((g = gestures[i]).that === that) {                                                                           // 16240
        return g;                                                                                                      // 16241
      }                                                                                                                // 16242
    }                                                                                                                  // 16243
    return new Gesture(that, args);                                                                                    // 16244
  }                                                                                                                    // 16245
                                                                                                                       // 16246
  function Gesture(that, args) {                                                                                       // 16247
    this.that = that;                                                                                                  // 16248
    this.args = args;                                                                                                  // 16249
    this.index = -1;                                                                                                   // 16250
    this.active = 0;                                                                                                   // 16251
    this.extent = extent.apply(that, args);                                                                            // 16252
  }                                                                                                                    // 16253
                                                                                                                       // 16254
  Gesture.prototype = {                                                                                                // 16255
    start: function() {                                                                                                // 16256
      if (++this.active === 1) {                                                                                       // 16257
        this.index = gestures.push(this) - 1;                                                                          // 16258
        this.emit("start");                                                                                            // 16259
      }                                                                                                                // 16260
      return this;                                                                                                     // 16261
    },                                                                                                                 // 16262
    zoom: function(key, transform) {                                                                                   // 16263
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);                              // 16264
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);                           // 16265
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);                           // 16266
      this.that.__zoom = transform;                                                                                    // 16267
      this.emit("zoom");                                                                                               // 16268
      return this;                                                                                                     // 16269
    },                                                                                                                 // 16270
    end: function() {                                                                                                  // 16271
      if (--this.active === 0) {                                                                                       // 16272
        gestures.splice(this.index, 1);                                                                                // 16273
        this.index = -1;                                                                                               // 16274
        this.emit("end");                                                                                              // 16275
      }                                                                                                                // 16276
      return this;                                                                                                     // 16277
    },                                                                                                                 // 16278
    emit: function(type) {                                                                                             // 16279
      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }                                                                                                                  // 16281
  };                                                                                                                   // 16282
                                                                                                                       // 16283
  function wheeled() {                                                                                                 // 16284
    if (!filter.apply(this, arguments)) return;                                                                        // 16285
    var g = gesture(this, arguments),                                                                                  // 16286
        t = this.__zoom,                                                                                               // 16287
        k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),
        p = mouse(this);                                                                                               // 16289
                                                                                                                       // 16290
    // If the mouse is in the same location as before, reuse it.                                                       // 16291
    // If there were recent wheel events, reset the wheel idle timeout.                                                // 16292
    if (g.wheel) {                                                                                                     // 16293
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {                                                          // 16294
        g.mouse[1] = t.invert(g.mouse[0] = p);                                                                         // 16295
      }                                                                                                                // 16296
      clearTimeout(g.wheel);                                                                                           // 16297
    }                                                                                                                  // 16298
                                                                                                                       // 16299
    // If this wheel event won’t trigger a transform change, ignore it.                                                // 16300
    else if (t.k === k) return;                                                                                        // 16301
                                                                                                                       // 16302
    // Otherwise, capture the mouse point and location at the start.                                                   // 16303
    else {                                                                                                             // 16304
      g.mouse = [p, t.invert(p)];                                                                                      // 16305
      interrupt(this);                                                                                                 // 16306
      g.start();                                                                                                       // 16307
    }                                                                                                                  // 16308
                                                                                                                       // 16309
    noevent$2();                                                                                                       // 16310
    g.wheel = setTimeout(wheelidled, wheelDelay);                                                                      // 16311
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));                              // 16312
                                                                                                                       // 16313
    function wheelidled() {                                                                                            // 16314
      g.wheel = null;                                                                                                  // 16315
      g.end();                                                                                                         // 16316
    }                                                                                                                  // 16317
  }                                                                                                                    // 16318
                                                                                                                       // 16319
  function mousedowned() {                                                                                             // 16320
    if (touchending || !filter.apply(this, arguments)) return;                                                         // 16321
    var g = gesture(this, arguments),                                                                                  // 16322
        v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),    // 16323
        p = mouse(this),                                                                                               // 16324
        x0 = exports.event.clientX,                                                                                    // 16325
        y0 = exports.event.clientY;                                                                                    // 16326
                                                                                                                       // 16327
    dragDisable(exports.event.view);                                                                                   // 16328
    nopropagation$2();                                                                                                 // 16329
    g.mouse = [p, this.__zoom.invert(p)];                                                                              // 16330
    interrupt(this);                                                                                                   // 16331
    g.start();                                                                                                         // 16332
                                                                                                                       // 16333
    function mousemoved() {                                                                                            // 16334
      noevent$2();                                                                                                     // 16335
      if (!g.moved) {                                                                                                  // 16336
        var dx = exports.event.clientX - x0, dy = exports.event.clientY - y0;                                          // 16337
        g.moved = dx * dx + dy * dy > clickDistance2;                                                                  // 16338
      }                                                                                                                // 16339
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));          // 16340
    }                                                                                                                  // 16341
                                                                                                                       // 16342
    function mouseupped() {                                                                                            // 16343
      v.on("mousemove.zoom mouseup.zoom", null);                                                                       // 16344
      yesdrag(exports.event.view, g.moved);                                                                            // 16345
      noevent$2();                                                                                                     // 16346
      g.end();                                                                                                         // 16347
    }                                                                                                                  // 16348
  }                                                                                                                    // 16349
                                                                                                                       // 16350
  function dblclicked() {                                                                                              // 16351
    if (!filter.apply(this, arguments)) return;                                                                        // 16352
    var t0 = this.__zoom,                                                                                              // 16353
        p0 = mouse(this),                                                                                              // 16354
        p1 = t0.invert(p0),                                                                                            // 16355
        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),                                                                // 16356
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));                               // 16357
                                                                                                                       // 16358
    noevent$2();                                                                                                       // 16359
    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);                             // 16360
    else select(this).call(zoom.transform, t1);                                                                        // 16361
  }                                                                                                                    // 16362
                                                                                                                       // 16363
  function touchstarted() {                                                                                            // 16364
    if (!filter.apply(this, arguments)) return;                                                                        // 16365
    var g = gesture(this, arguments),                                                                                  // 16366
        touches$$1 = exports.event.changedTouches,                                                                     // 16367
        started,                                                                                                       // 16368
        n = touches$$1.length, i, t, p;                                                                                // 16369
                                                                                                                       // 16370
    nopropagation$2();                                                                                                 // 16371
    for (i = 0; i < n; ++i) {                                                                                          // 16372
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);                                                    // 16373
      p = [p, this.__zoom.invert(p), t.identifier];                                                                    // 16374
      if (!g.touch0) g.touch0 = p, started = true;                                                                     // 16375
      else if (!g.touch1) g.touch1 = p;                                                                                // 16376
    }                                                                                                                  // 16377
                                                                                                                       // 16378
    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.                                           // 16379
    if (touchstarting) {                                                                                               // 16380
      touchstarting = clearTimeout(touchstarting);                                                                     // 16381
      if (!g.touch1) {                                                                                                 // 16382
        g.end();                                                                                                       // 16383
        p = select(this).on("dblclick.zoom");                                                                          // 16384
        if (p) p.apply(this, arguments);                                                                               // 16385
        return;                                                                                                        // 16386
      }                                                                                                                // 16387
    }                                                                                                                  // 16388
                                                                                                                       // 16389
    if (started) {                                                                                                     // 16390
      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);                                    // 16391
      interrupt(this);                                                                                                 // 16392
      g.start();                                                                                                       // 16393
    }                                                                                                                  // 16394
  }                                                                                                                    // 16395
                                                                                                                       // 16396
  function touchmoved() {                                                                                              // 16397
    var g = gesture(this, arguments),                                                                                  // 16398
        touches$$1 = exports.event.changedTouches,                                                                     // 16399
        n = touches$$1.length, i, t, p, l;                                                                             // 16400
                                                                                                                       // 16401
    noevent$2();                                                                                                       // 16402
    if (touchstarting) touchstarting = clearTimeout(touchstarting);                                                    // 16403
    for (i = 0; i < n; ++i) {                                                                                          // 16404
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);                                                    // 16405
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;                                                   // 16406
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;                                              // 16407
    }                                                                                                                  // 16408
    t = g.that.__zoom;                                                                                                 // 16409
    if (g.touch1) {                                                                                                    // 16410
      var p0 = g.touch0[0], l0 = g.touch0[1],                                                                          // 16411
          p1 = g.touch1[0], l1 = g.touch1[1],                                                                          // 16412
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,                                                  // 16413
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;                                                  // 16414
      t = scale(t, Math.sqrt(dp / dl));                                                                                // 16415
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];                                                                  // 16416
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];                                                                  // 16417
    }                                                                                                                  // 16418
    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];                                                               // 16419
    else return;                                                                                                       // 16420
    g.zoom("touch", constrain(translate(t, p, l), g.extent));                                                          // 16421
  }                                                                                                                    // 16422
                                                                                                                       // 16423
  function touchended() {                                                                                              // 16424
    var g = gesture(this, arguments),                                                                                  // 16425
        touches$$1 = exports.event.changedTouches,                                                                     // 16426
        n = touches$$1.length, i, t;                                                                                   // 16427
                                                                                                                       // 16428
    nopropagation$2();                                                                                                 // 16429
    if (touchending) clearTimeout(touchending);                                                                        // 16430
    touchending = setTimeout(function() { touchending = null; }, touchDelay);                                          // 16431
    for (i = 0; i < n; ++i) {                                                                                          // 16432
      t = touches$$1[i];                                                                                               // 16433
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;                                                   // 16434
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;                                              // 16435
    }                                                                                                                  // 16436
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;                                                   // 16437
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);                                                       // 16438
    else g.end();                                                                                                      // 16439
  }                                                                                                                    // 16440
                                                                                                                       // 16441
  zoom.filter = function(_) {                                                                                          // 16442
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$12(!!_), zoom) : filter;                // 16443
  };                                                                                                                   // 16444
                                                                                                                       // 16445
  zoom.extent = function(_) {                                                                                          // 16446
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$12([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };                                                                                                                   // 16448
                                                                                                                       // 16449
  zoom.scaleExtent = function(_) {                                                                                     // 16450
    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];                                               // 16451
  };                                                                                                                   // 16452
                                                                                                                       // 16453
  zoom.translateExtent = function(_) {                                                                                 // 16454
    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
  };                                                                                                                   // 16456
                                                                                                                       // 16457
  zoom.duration = function(_) {                                                                                        // 16458
    return arguments.length ? (duration = +_, zoom) : duration;                                                        // 16459
  };                                                                                                                   // 16460
                                                                                                                       // 16461
  zoom.interpolate = function(_) {                                                                                     // 16462
    return arguments.length ? (interpolate$$1 = _, zoom) : interpolate$$1;                                             // 16463
  };                                                                                                                   // 16464
                                                                                                                       // 16465
  zoom.on = function() {                                                                                               // 16466
    var value = listeners.on.apply(listeners, arguments);                                                              // 16467
    return value === listeners ? zoom : value;                                                                         // 16468
  };                                                                                                                   // 16469
                                                                                                                       // 16470
  zoom.clickDistance = function(_) {                                                                                   // 16471
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);                       // 16472
  };                                                                                                                   // 16473
                                                                                                                       // 16474
  return zoom;                                                                                                         // 16475
};                                                                                                                     // 16476
                                                                                                                       // 16477
exports.version = version;                                                                                             // 16478
exports.bisect = bisectRight;                                                                                          // 16479
exports.bisectRight = bisectRight;                                                                                     // 16480
exports.bisectLeft = bisectLeft;                                                                                       // 16481
exports.ascending = ascending;                                                                                         // 16482
exports.bisector = bisector;                                                                                           // 16483
exports.cross = cross;                                                                                                 // 16484
exports.descending = descending;                                                                                       // 16485
exports.deviation = deviation;                                                                                         // 16486
exports.extent = extent;                                                                                               // 16487
exports.histogram = histogram;                                                                                         // 16488
exports.thresholdFreedmanDiaconis = freedmanDiaconis;                                                                  // 16489
exports.thresholdScott = scott;                                                                                        // 16490
exports.thresholdSturges = sturges;                                                                                    // 16491
exports.max = max;                                                                                                     // 16492
exports.mean = mean;                                                                                                   // 16493
exports.median = median;                                                                                               // 16494
exports.merge = merge;                                                                                                 // 16495
exports.min = min;                                                                                                     // 16496
exports.pairs = pairs;                                                                                                 // 16497
exports.permute = permute;                                                                                             // 16498
exports.quantile = threshold;                                                                                          // 16499
exports.range = sequence;                                                                                              // 16500
exports.scan = scan;                                                                                                   // 16501
exports.shuffle = shuffle;                                                                                             // 16502
exports.sum = sum;                                                                                                     // 16503
exports.ticks = ticks;                                                                                                 // 16504
exports.tickIncrement = tickIncrement;                                                                                 // 16505
exports.tickStep = tickStep;                                                                                           // 16506
exports.transpose = transpose;                                                                                         // 16507
exports.variance = variance;                                                                                           // 16508
exports.zip = zip;                                                                                                     // 16509
exports.axisTop = axisTop;                                                                                             // 16510
exports.axisRight = axisRight;                                                                                         // 16511
exports.axisBottom = axisBottom;                                                                                       // 16512
exports.axisLeft = axisLeft;                                                                                           // 16513
exports.brush = brush;                                                                                                 // 16514
exports.brushX = brushX;                                                                                               // 16515
exports.brushY = brushY;                                                                                               // 16516
exports.brushSelection = brushSelection;                                                                               // 16517
exports.chord = chord;                                                                                                 // 16518
exports.ribbon = ribbon;                                                                                               // 16519
exports.nest = nest;                                                                                                   // 16520
exports.set = set$2;                                                                                                   // 16521
exports.map = map$1;                                                                                                   // 16522
exports.keys = keys;                                                                                                   // 16523
exports.values = values;                                                                                               // 16524
exports.entries = entries;                                                                                             // 16525
exports.color = color;                                                                                                 // 16526
exports.rgb = rgb;                                                                                                     // 16527
exports.hsl = hsl;                                                                                                     // 16528
exports.lab = lab;                                                                                                     // 16529
exports.hcl = hcl;                                                                                                     // 16530
exports.cubehelix = cubehelix;                                                                                         // 16531
exports.dispatch = dispatch;                                                                                           // 16532
exports.drag = drag;                                                                                                   // 16533
exports.dragDisable = dragDisable;                                                                                     // 16534
exports.dragEnable = yesdrag;                                                                                          // 16535
exports.dsvFormat = dsv;                                                                                               // 16536
exports.csvParse = csvParse;                                                                                           // 16537
exports.csvParseRows = csvParseRows;                                                                                   // 16538
exports.csvFormat = csvFormat;                                                                                         // 16539
exports.csvFormatRows = csvFormatRows;                                                                                 // 16540
exports.tsvParse = tsvParse;                                                                                           // 16541
exports.tsvParseRows = tsvParseRows;                                                                                   // 16542
exports.tsvFormat = tsvFormat;                                                                                         // 16543
exports.tsvFormatRows = tsvFormatRows;                                                                                 // 16544
exports.easeLinear = linear$1;                                                                                         // 16545
exports.easeQuad = quadInOut;                                                                                          // 16546
exports.easeQuadIn = quadIn;                                                                                           // 16547
exports.easeQuadOut = quadOut;                                                                                         // 16548
exports.easeQuadInOut = quadInOut;                                                                                     // 16549
exports.easeCubic = cubicInOut;                                                                                        // 16550
exports.easeCubicIn = cubicIn;                                                                                         // 16551
exports.easeCubicOut = cubicOut;                                                                                       // 16552
exports.easeCubicInOut = cubicInOut;                                                                                   // 16553
exports.easePoly = polyInOut;                                                                                          // 16554
exports.easePolyIn = polyIn;                                                                                           // 16555
exports.easePolyOut = polyOut;                                                                                         // 16556
exports.easePolyInOut = polyInOut;                                                                                     // 16557
exports.easeSin = sinInOut;                                                                                            // 16558
exports.easeSinIn = sinIn;                                                                                             // 16559
exports.easeSinOut = sinOut;                                                                                           // 16560
exports.easeSinInOut = sinInOut;                                                                                       // 16561
exports.easeExp = expInOut;                                                                                            // 16562
exports.easeExpIn = expIn;                                                                                             // 16563
exports.easeExpOut = expOut;                                                                                           // 16564
exports.easeExpInOut = expInOut;                                                                                       // 16565
exports.easeCircle = circleInOut;                                                                                      // 16566
exports.easeCircleIn = circleIn;                                                                                       // 16567
exports.easeCircleOut = circleOut;                                                                                     // 16568
exports.easeCircleInOut = circleInOut;                                                                                 // 16569
exports.easeBounce = bounceOut;                                                                                        // 16570
exports.easeBounceIn = bounceIn;                                                                                       // 16571
exports.easeBounceOut = bounceOut;                                                                                     // 16572
exports.easeBounceInOut = bounceInOut;                                                                                 // 16573
exports.easeBack = backInOut;                                                                                          // 16574
exports.easeBackIn = backIn;                                                                                           // 16575
exports.easeBackOut = backOut;                                                                                         // 16576
exports.easeBackInOut = backInOut;                                                                                     // 16577
exports.easeElastic = elasticOut;                                                                                      // 16578
exports.easeElasticIn = elasticIn;                                                                                     // 16579
exports.easeElasticOut = elasticOut;                                                                                   // 16580
exports.easeElasticInOut = elasticInOut;                                                                               // 16581
exports.forceCenter = center$1;                                                                                        // 16582
exports.forceCollide = collide;                                                                                        // 16583
exports.forceLink = link;                                                                                              // 16584
exports.forceManyBody = manyBody;                                                                                      // 16585
exports.forceSimulation = simulation;                                                                                  // 16586
exports.forceX = x$2;                                                                                                  // 16587
exports.forceY = y$2;                                                                                                  // 16588
exports.formatDefaultLocale = defaultLocale;                                                                           // 16589
exports.formatLocale = formatLocale;                                                                                   // 16590
exports.formatSpecifier = formatSpecifier;                                                                             // 16591
exports.precisionFixed = precisionFixed;                                                                               // 16592
exports.precisionPrefix = precisionPrefix;                                                                             // 16593
exports.precisionRound = precisionRound;                                                                               // 16594
exports.geoArea = area;                                                                                                // 16595
exports.geoBounds = bounds;                                                                                            // 16596
exports.geoCentroid = centroid;                                                                                        // 16597
exports.geoCircle = circle;                                                                                            // 16598
exports.geoClipExtent = extent$1;                                                                                      // 16599
exports.geoContains = contains;                                                                                        // 16600
exports.geoDistance = distance;                                                                                        // 16601
exports.geoGraticule = graticule;                                                                                      // 16602
exports.geoGraticule10 = graticule10;                                                                                  // 16603
exports.geoInterpolate = interpolate$1;                                                                                // 16604
exports.geoLength = length$1;                                                                                          // 16605
exports.geoPath = index$1;                                                                                             // 16606
exports.geoAlbers = albers;                                                                                            // 16607
exports.geoAlbersUsa = albersUsa;                                                                                      // 16608
exports.geoAzimuthalEqualArea = azimuthalEqualArea;                                                                    // 16609
exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;                                                              // 16610
exports.geoAzimuthalEquidistant = azimuthalEquidistant;                                                                // 16611
exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;                                                          // 16612
exports.geoConicConformal = conicConformal;                                                                            // 16613
exports.geoConicConformalRaw = conicConformalRaw;                                                                      // 16614
exports.geoConicEqualArea = conicEqualArea;                                                                            // 16615
exports.geoConicEqualAreaRaw = conicEqualAreaRaw;                                                                      // 16616
exports.geoConicEquidistant = conicEquidistant;                                                                        // 16617
exports.geoConicEquidistantRaw = conicEquidistantRaw;                                                                  // 16618
exports.geoEquirectangular = equirectangular;                                                                          // 16619
exports.geoEquirectangularRaw = equirectangularRaw;                                                                    // 16620
exports.geoGnomonic = gnomonic;                                                                                        // 16621
exports.geoGnomonicRaw = gnomonicRaw;                                                                                  // 16622
exports.geoIdentity = identity$5;                                                                                      // 16623
exports.geoProjection = projection;                                                                                    // 16624
exports.geoProjectionMutator = projectionMutator;                                                                      // 16625
exports.geoMercator = mercator;                                                                                        // 16626
exports.geoMercatorRaw = mercatorRaw;                                                                                  // 16627
exports.geoOrthographic = orthographic;                                                                                // 16628
exports.geoOrthographicRaw = orthographicRaw;                                                                          // 16629
exports.geoStereographic = stereographic;                                                                              // 16630
exports.geoStereographicRaw = stereographicRaw;                                                                        // 16631
exports.geoTransverseMercator = transverseMercator;                                                                    // 16632
exports.geoTransverseMercatorRaw = transverseMercatorRaw;                                                              // 16633
exports.geoRotation = rotation;                                                                                        // 16634
exports.geoStream = geoStream;                                                                                         // 16635
exports.geoTransform = transform;                                                                                      // 16636
exports.cluster = cluster;                                                                                             // 16637
exports.hierarchy = hierarchy;                                                                                         // 16638
exports.pack = index$2;                                                                                                // 16639
exports.packSiblings = siblings;                                                                                       // 16640
exports.packEnclose = enclose;                                                                                         // 16641
exports.partition = partition;                                                                                         // 16642
exports.stratify = stratify;                                                                                           // 16643
exports.tree = tree;                                                                                                   // 16644
exports.treemap = index$3;                                                                                             // 16645
exports.treemapBinary = binary;                                                                                        // 16646
exports.treemapDice = treemapDice;                                                                                     // 16647
exports.treemapSlice = treemapSlice;                                                                                   // 16648
exports.treemapSliceDice = sliceDice;                                                                                  // 16649
exports.treemapSquarify = squarify;                                                                                    // 16650
exports.treemapResquarify = resquarify;                                                                                // 16651
exports.interpolate = interpolateValue;                                                                                // 16652
exports.interpolateArray = array$1;                                                                                    // 16653
exports.interpolateBasis = basis$1;                                                                                    // 16654
exports.interpolateBasisClosed = basisClosed;                                                                          // 16655
exports.interpolateDate = date;                                                                                        // 16656
exports.interpolateNumber = reinterpolate;                                                                             // 16657
exports.interpolateObject = object;                                                                                    // 16658
exports.interpolateRound = interpolateRound;                                                                           // 16659
exports.interpolateString = interpolateString;                                                                         // 16660
exports.interpolateTransformCss = interpolateTransformCss;                                                             // 16661
exports.interpolateTransformSvg = interpolateTransformSvg;                                                             // 16662
exports.interpolateZoom = interpolateZoom;                                                                             // 16663
exports.interpolateRgb = interpolateRgb;                                                                               // 16664
exports.interpolateRgbBasis = rgbBasis;                                                                                // 16665
exports.interpolateRgbBasisClosed = rgbBasisClosed;                                                                    // 16666
exports.interpolateHsl = hsl$2;                                                                                        // 16667
exports.interpolateHslLong = hslLong;                                                                                  // 16668
exports.interpolateLab = lab$1;                                                                                        // 16669
exports.interpolateHcl = hcl$2;                                                                                        // 16670
exports.interpolateHclLong = hclLong;                                                                                  // 16671
exports.interpolateCubehelix = cubehelix$2;                                                                            // 16672
exports.interpolateCubehelixLong = cubehelixLong;                                                                      // 16673
exports.quantize = quantize;                                                                                           // 16674
exports.path = path;                                                                                                   // 16675
exports.polygonArea = area$1;                                                                                          // 16676
exports.polygonCentroid = centroid$1;                                                                                  // 16677
exports.polygonHull = hull;                                                                                            // 16678
exports.polygonContains = contains$1;                                                                                  // 16679
exports.polygonLength = length$2;                                                                                      // 16680
exports.quadtree = quadtree;                                                                                           // 16681
exports.queue = queue;                                                                                                 // 16682
exports.randomUniform = uniform;                                                                                       // 16683
exports.randomNormal = normal;                                                                                         // 16684
exports.randomLogNormal = logNormal;                                                                                   // 16685
exports.randomBates = bates;                                                                                           // 16686
exports.randomIrwinHall = irwinHall;                                                                                   // 16687
exports.randomExponential = exponential$1;                                                                             // 16688
exports.request = request;                                                                                             // 16689
exports.html = html;                                                                                                   // 16690
exports.json = json;                                                                                                   // 16691
exports.text = text;                                                                                                   // 16692
exports.xml = xml;                                                                                                     // 16693
exports.csv = csv$1;                                                                                                   // 16694
exports.tsv = tsv$1;                                                                                                   // 16695
exports.scaleBand = band;                                                                                              // 16696
exports.scalePoint = point$1;                                                                                          // 16697
exports.scaleIdentity = identity$6;                                                                                    // 16698
exports.scaleLinear = linear$2;                                                                                        // 16699
exports.scaleLog = log$1;                                                                                              // 16700
exports.scaleOrdinal = ordinal;                                                                                        // 16701
exports.scaleImplicit = implicit;                                                                                      // 16702
exports.scalePow = pow$1;                                                                                              // 16703
exports.scaleSqrt = sqrt$1;                                                                                            // 16704
exports.scaleQuantile = quantile$$1;                                                                                   // 16705
exports.scaleQuantize = quantize$1;                                                                                    // 16706
exports.scaleThreshold = threshold$1;                                                                                  // 16707
exports.scaleTime = time;                                                                                              // 16708
exports.scaleUtc = utcTime;                                                                                            // 16709
exports.schemeCategory10 = category10;                                                                                 // 16710
exports.schemeCategory20b = category20b;                                                                               // 16711
exports.schemeCategory20c = category20c;                                                                               // 16712
exports.schemeCategory20 = category20;                                                                                 // 16713
exports.interpolateCubehelixDefault = cubehelix$3;                                                                     // 16714
exports.interpolateRainbow = rainbow$1;                                                                                // 16715
exports.interpolateWarm = warm;                                                                                        // 16716
exports.interpolateCool = cool;                                                                                        // 16717
exports.interpolateViridis = viridis;                                                                                  // 16718
exports.interpolateMagma = magma;                                                                                      // 16719
exports.interpolateInferno = inferno;                                                                                  // 16720
exports.interpolatePlasma = plasma;                                                                                    // 16721
exports.scaleSequential = sequential;                                                                                  // 16722
exports.creator = creator;                                                                                             // 16723
exports.local = local$1;                                                                                               // 16724
exports.matcher = matcher$1;                                                                                           // 16725
exports.mouse = mouse;                                                                                                 // 16726
exports.namespace = namespace;                                                                                         // 16727
exports.namespaces = namespaces;                                                                                       // 16728
exports.select = select;                                                                                               // 16729
exports.selectAll = selectAll;                                                                                         // 16730
exports.selection = selection;                                                                                         // 16731
exports.selector = selector;                                                                                           // 16732
exports.selectorAll = selectorAll;                                                                                     // 16733
exports.style = styleValue;                                                                                            // 16734
exports.touch = touch;                                                                                                 // 16735
exports.touches = touches;                                                                                             // 16736
exports.window = defaultView;                                                                                          // 16737
exports.customEvent = customEvent;                                                                                     // 16738
exports.arc = arc;                                                                                                     // 16739
exports.area = area$2;                                                                                                 // 16740
exports.line = line;                                                                                                   // 16741
exports.pie = pie;                                                                                                     // 16742
exports.radialArea = radialArea;                                                                                       // 16743
exports.radialLine = radialLine$1;                                                                                     // 16744
exports.linkHorizontal = linkHorizontal;                                                                               // 16745
exports.linkVertical = linkVertical;                                                                                   // 16746
exports.linkRadial = linkRadial;                                                                                       // 16747
exports.symbol = symbol;                                                                                               // 16748
exports.symbols = symbols;                                                                                             // 16749
exports.symbolCircle = circle$2;                                                                                       // 16750
exports.symbolCross = cross$2;                                                                                         // 16751
exports.symbolDiamond = diamond;                                                                                       // 16752
exports.symbolSquare = square;                                                                                         // 16753
exports.symbolStar = star;                                                                                             // 16754
exports.symbolTriangle = triangle;                                                                                     // 16755
exports.symbolWye = wye;                                                                                               // 16756
exports.curveBasisClosed = basisClosed$1;                                                                              // 16757
exports.curveBasisOpen = basisOpen;                                                                                    // 16758
exports.curveBasis = basis$2;                                                                                          // 16759
exports.curveBundle = bundle;                                                                                          // 16760
exports.curveCardinalClosed = cardinalClosed;                                                                          // 16761
exports.curveCardinalOpen = cardinalOpen;                                                                              // 16762
exports.curveCardinal = cardinal;                                                                                      // 16763
exports.curveCatmullRomClosed = catmullRomClosed;                                                                      // 16764
exports.curveCatmullRomOpen = catmullRomOpen;                                                                          // 16765
exports.curveCatmullRom = catmullRom;                                                                                  // 16766
exports.curveLinearClosed = linearClosed;                                                                              // 16767
exports.curveLinear = curveLinear;                                                                                     // 16768
exports.curveMonotoneX = monotoneX;                                                                                    // 16769
exports.curveMonotoneY = monotoneY;                                                                                    // 16770
exports.curveNatural = natural;                                                                                        // 16771
exports.curveStep = step;                                                                                              // 16772
exports.curveStepAfter = stepAfter;                                                                                    // 16773
exports.curveStepBefore = stepBefore;                                                                                  // 16774
exports.stack = stack;                                                                                                 // 16775
exports.stackOffsetExpand = expand;                                                                                    // 16776
exports.stackOffsetDiverging = diverging;                                                                              // 16777
exports.stackOffsetNone = none$1;                                                                                      // 16778
exports.stackOffsetSilhouette = silhouette;                                                                            // 16779
exports.stackOffsetWiggle = wiggle;                                                                                    // 16780
exports.stackOrderAscending = ascending$2;                                                                             // 16781
exports.stackOrderDescending = descending$2;                                                                           // 16782
exports.stackOrderInsideOut = insideOut;                                                                               // 16783
exports.stackOrderNone = none$2;                                                                                       // 16784
exports.stackOrderReverse = reverse;                                                                                   // 16785
exports.timeInterval = newInterval;                                                                                    // 16786
exports.timeMillisecond = millisecond;                                                                                 // 16787
exports.timeMilliseconds = milliseconds;                                                                               // 16788
exports.utcMillisecond = millisecond;                                                                                  // 16789
exports.utcMilliseconds = milliseconds;                                                                                // 16790
exports.timeSecond = second;                                                                                           // 16791
exports.timeSeconds = seconds;                                                                                         // 16792
exports.utcSecond = second;                                                                                            // 16793
exports.utcSeconds = seconds;                                                                                          // 16794
exports.timeMinute = minute;                                                                                           // 16795
exports.timeMinutes = minutes;                                                                                         // 16796
exports.timeHour = hour;                                                                                               // 16797
exports.timeHours = hours;                                                                                             // 16798
exports.timeDay = day;                                                                                                 // 16799
exports.timeDays = days;                                                                                               // 16800
exports.timeWeek = sunday;                                                                                             // 16801
exports.timeWeeks = sundays;                                                                                           // 16802
exports.timeSunday = sunday;                                                                                           // 16803
exports.timeSundays = sundays;                                                                                         // 16804
exports.timeMonday = monday;                                                                                           // 16805
exports.timeMondays = mondays;                                                                                         // 16806
exports.timeTuesday = tuesday;                                                                                         // 16807
exports.timeTuesdays = tuesdays;                                                                                       // 16808
exports.timeWednesday = wednesday;                                                                                     // 16809
exports.timeWednesdays = wednesdays;                                                                                   // 16810
exports.timeThursday = thursday;                                                                                       // 16811
exports.timeThursdays = thursdays;                                                                                     // 16812
exports.timeFriday = friday;                                                                                           // 16813
exports.timeFridays = fridays;                                                                                         // 16814
exports.timeSaturday = saturday;                                                                                       // 16815
exports.timeSaturdays = saturdays;                                                                                     // 16816
exports.timeMonth = month;                                                                                             // 16817
exports.timeMonths = months;                                                                                           // 16818
exports.timeYear = year;                                                                                               // 16819
exports.timeYears = years;                                                                                             // 16820
exports.utcMinute = utcMinute;                                                                                         // 16821
exports.utcMinutes = utcMinutes;                                                                                       // 16822
exports.utcHour = utcHour;                                                                                             // 16823
exports.utcHours = utcHours;                                                                                           // 16824
exports.utcDay = utcDay;                                                                                               // 16825
exports.utcDays = utcDays;                                                                                             // 16826
exports.utcWeek = utcSunday;                                                                                           // 16827
exports.utcWeeks = utcSundays;                                                                                         // 16828
exports.utcSunday = utcSunday;                                                                                         // 16829
exports.utcSundays = utcSundays;                                                                                       // 16830
exports.utcMonday = utcMonday;                                                                                         // 16831
exports.utcMondays = utcMondays;                                                                                       // 16832
exports.utcTuesday = utcTuesday;                                                                                       // 16833
exports.utcTuesdays = utcTuesdays;                                                                                     // 16834
exports.utcWednesday = utcWednesday;                                                                                   // 16835
exports.utcWednesdays = utcWednesdays;                                                                                 // 16836
exports.utcThursday = utcThursday;                                                                                     // 16837
exports.utcThursdays = utcThursdays;                                                                                   // 16838
exports.utcFriday = utcFriday;                                                                                         // 16839
exports.utcFridays = utcFridays;                                                                                       // 16840
exports.utcSaturday = utcSaturday;                                                                                     // 16841
exports.utcSaturdays = utcSaturdays;                                                                                   // 16842
exports.utcMonth = utcMonth;                                                                                           // 16843
exports.utcMonths = utcMonths;                                                                                         // 16844
exports.utcYear = utcYear;                                                                                             // 16845
exports.utcYears = utcYears;                                                                                           // 16846
exports.timeFormatDefaultLocale = defaultLocale$1;                                                                     // 16847
exports.timeFormatLocale = formatLocale$1;                                                                             // 16848
exports.isoFormat = formatIso;                                                                                         // 16849
exports.isoParse = parseIso;                                                                                           // 16850
exports.now = now;                                                                                                     // 16851
exports.timer = timer;                                                                                                 // 16852
exports.timerFlush = timerFlush;                                                                                       // 16853
exports.timeout = timeout$1;                                                                                           // 16854
exports.interval = interval$1;                                                                                         // 16855
exports.transition = transition;                                                                                       // 16856
exports.active = active;                                                                                               // 16857
exports.interrupt = interrupt;                                                                                         // 16858
exports.voronoi = voronoi;                                                                                             // 16859
exports.zoom = zoom;                                                                                                   // 16860
exports.zoomTransform = transform$1;                                                                                   // 16861
exports.zoomIdentity = identity$8;                                                                                     // 16862
                                                                                                                       // 16863
Object.defineProperty(exports, '__esModule', { value: true });                                                         // 16864
                                                                                                                       // 16865
})));                                                                                                                  // 16866
                                                                                                                       // 16867
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"meteor-node-stubs":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/package.json                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "meteor-node-stubs";                                                                                    // 1
exports.version = "0.2.6";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["./map.json",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var map = require("./map.json");                                                                                       // 1
var meteorAliases = {};                                                                                                // 2
                                                                                                                       // 3
Object.keys(map).forEach(function (id) {                                                                               // 4
  if (typeof map[id] === "string") {                                                                                   // 5
    var aliasParts = module.id.split("/");                                                                             // 6
    aliasParts.pop();                                                                                                  // 7
    aliasParts.push("node_modules", map[id]);                                                                          // 8
    exports[id] = meteorAliases[id + ".js"] =                                                                          // 9
      aliasParts.join("/");                                                                                            // 10
  } else {                                                                                                             // 11
    exports[id] = map[id];                                                                                             // 12
    meteorAliases[id + ".js"] = function(){};                                                                          // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
if (typeof meteorInstall === "function") {                                                                             // 17
  meteorInstall({                                                                                                      // 18
    // Install the aliases into a node_modules directory one level up from                                             // 19
    // the root directory, so that they do not clutter the namespace                                                   // 20
    // available to apps and packages.                                                                                 // 21
    "..": {                                                                                                            // 22
      node_modules: meteorAliases                                                                                      // 23
    }                                                                                                                  // 24
  });                                                                                                                  // 25
}                                                                                                                      // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"map.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/map.json                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {                                                                                                     // 1
  "assert": "assert/",                                                                                                 // 2
  "buffer": "buffer/",                                                                                                 // 3
  "child_process": null,                                                                                               // 4
  "cluster": null,                                                                                                     // 5
  "console": "console-browserify",                                                                                     // 6
  "constants": "constants-browserify",                                                                                 // 7
  "crypto": "crypto-browserify",                                                                                       // 8
  "dgram": null,                                                                                                       // 9
  "dns": null,                                                                                                         // 10
  "domain": "domain-browser",                                                                                          // 11
  "events": "events/",                                                                                                 // 12
  "fs": null,                                                                                                          // 13
  "http": "http-browserify",                                                                                           // 14
  "https": "https-browserify",                                                                                         // 15
  "module": null,                                                                                                      // 16
  "net": null,                                                                                                         // 17
  "os": "os-browserify/browser.js",                                                                                    // 18
  "path": "path-browserify",                                                                                           // 19
  "process": "process/browser.js",                                                                                     // 20
  "punycode": "punycode/",                                                                                             // 21
  "querystring": "querystring-es3/",                                                                                   // 22
  "readline": null,                                                                                                    // 23
  "repl": null,                                                                                                        // 24
  "stream": "stream-browserify",                                                                                       // 25
  "_stream_duplex": "readable-stream/duplex.js",                                                                       // 26
  "_stream_passthrough": "readable-stream/passthrough.js",                                                             // 27
  "_stream_readable": "readable-stream/readable.js",                                                                   // 28
  "_stream_transform": "readable-stream/transform.js",                                                                 // 29
  "_stream_writable": "readable-stream/writable.js",                                                                   // 30
  "string_decoder": "string_decoder/",                                                                                 // 31
  "sys": "util/util.js",                                                                                               // 32
  "timers": "timers-browserify",                                                                                       // 33
  "tls": null,                                                                                                         // 34
  "tty": "tty-browserify",                                                                                             // 35
  "url": "url/",                                                                                                       // 36
  "util": "util/util.js",                                                                                              // 37
  "vm": "vm-browserify",                                                                                               // 38
  "zlib": "browserify-zlib"                                                                                            // 39
};                                                                                                                     // 40
                                                                                                                       // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deps":{"buffer.js":["buffer/",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/buffer.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("buffer/");                                                                                                    // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"process.js":["process/browser.js",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/process.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("process/browser.js");                                                                                         // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"domain.js":["domain-browser",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/domain.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("domain-browser");                                                                                             // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"node_modules":{"buffer":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "buffer";                                                                                               // 1
exports.version = "4.9.1";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["base64-js","ieee754","isarray",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * The buffer module from node.js, for the browser.                                                                    // 2
 *                                                                                                                     // 3
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4
 * @license  MIT                                                                                                       // 5
 */                                                                                                                    // 6
/* eslint-disable no-proto */                                                                                          // 7
                                                                                                                       // 8
'use strict'                                                                                                           // 9
                                                                                                                       // 10
var base64 = require('base64-js')                                                                                      // 11
var ieee754 = require('ieee754')                                                                                       // 12
var isArray = require('isarray')                                                                                       // 13
                                                                                                                       // 14
exports.Buffer = Buffer                                                                                                // 15
exports.SlowBuffer = SlowBuffer                                                                                        // 16
exports.INSPECT_MAX_BYTES = 50                                                                                         // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 20
 *   === true    Use Uint8Array implementation (fastest)                                                               // 21
 *   === false   Use Object implementation (most compatible, even IE6)                                                 // 22
 *                                                                                                                     // 23
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 24
 * Opera 11.6+, iOS 4.2+.                                                                                              // 25
 *                                                                                                                     // 26
 * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 27
 * when the browser supports typed arrays.                                                                             // 28
 *                                                                                                                     // 29
 * Note:                                                                                                               // 30
 *                                                                                                                     // 31
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 32
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 33
 *                                                                                                                     // 34
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 35
 *                                                                                                                     // 36
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 37
 *     incorrect length in some situations.                                                                            // 38
                                                                                                                       // 39
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 40
 * get the Object implementation, which is slower but behaves correctly.                                               // 41
 */                                                                                                                    // 42
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                                  // 43
  ? global.TYPED_ARRAY_SUPPORT                                                                                         // 44
  : typedArraySupport()                                                                                                // 45
                                                                                                                       // 46
/*                                                                                                                     // 47
 * Export kMaxLength after typed array support is determined.                                                          // 48
 */                                                                                                                    // 49
exports.kMaxLength = kMaxLength()                                                                                      // 50
                                                                                                                       // 51
function typedArraySupport () {                                                                                        // 52
  try {                                                                                                                // 53
    var arr = new Uint8Array(1)                                                                                        // 54
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}                                  // 55
    return arr.foo() === 42 && // typed array instances can be augmented                                               // 56
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 57
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 58
  } catch (e) {                                                                                                        // 59
    return false                                                                                                       // 60
  }                                                                                                                    // 61
}                                                                                                                      // 62
                                                                                                                       // 63
function kMaxLength () {                                                                                               // 64
  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 65
    ? 0x7fffffff                                                                                                       // 66
    : 0x3fffffff                                                                                                       // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function createBuffer (that, length) {                                                                                 // 70
  if (kMaxLength() < length) {                                                                                         // 71
    throw new RangeError('Invalid typed array length')                                                                 // 72
  }                                                                                                                    // 73
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 74
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 75
    that = new Uint8Array(length)                                                                                      // 76
    that.__proto__ = Buffer.prototype                                                                                  // 77
  } else {                                                                                                             // 78
    // Fallback: Return an object instance of the Buffer class                                                         // 79
    if (that === null) {                                                                                               // 80
      that = new Buffer(length)                                                                                        // 81
    }                                                                                                                  // 82
    that.length = length                                                                                               // 83
  }                                                                                                                    // 84
                                                                                                                       // 85
  return that                                                                                                          // 86
}                                                                                                                      // 87
                                                                                                                       // 88
/**                                                                                                                    // 89
 * The Buffer constructor returns instances of `Uint8Array` that have their                                            // 90
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                                     // 91
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                                     // 92
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                       // 93
 * returns a single octet.                                                                                             // 94
 *                                                                                                                     // 95
 * The `Uint8Array` prototype remains unmodified.                                                                      // 96
 */                                                                                                                    // 97
                                                                                                                       // 98
function Buffer (arg, encodingOrOffset, length) {                                                                      // 99
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {                                                      // 100
    return new Buffer(arg, encodingOrOffset, length)                                                                   // 101
  }                                                                                                                    // 102
                                                                                                                       // 103
  // Common case.                                                                                                      // 104
  if (typeof arg === 'number') {                                                                                       // 105
    if (typeof encodingOrOffset === 'string') {                                                                        // 106
      throw new Error(                                                                                                 // 107
        'If encoding is specified then the first argument must be a string'                                            // 108
      )                                                                                                                // 109
    }                                                                                                                  // 110
    return allocUnsafe(this, arg)                                                                                      // 111
  }                                                                                                                    // 112
  return from(this, arg, encodingOrOffset, length)                                                                     // 113
}                                                                                                                      // 114
                                                                                                                       // 115
Buffer.poolSize = 8192 // not used by this implementation                                                              // 116
                                                                                                                       // 117
// TODO: Legacy, not needed anymore. Remove in next major version.                                                     // 118
Buffer._augment = function (arr) {                                                                                     // 119
  arr.__proto__ = Buffer.prototype                                                                                     // 120
  return arr                                                                                                           // 121
}                                                                                                                      // 122
                                                                                                                       // 123
function from (that, value, encodingOrOffset, length) {                                                                // 124
  if (typeof value === 'number') {                                                                                     // 125
    throw new TypeError('"value" argument must not be a number')                                                       // 126
  }                                                                                                                    // 127
                                                                                                                       // 128
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {                                            // 129
    return fromArrayBuffer(that, value, encodingOrOffset, length)                                                      // 130
  }                                                                                                                    // 131
                                                                                                                       // 132
  if (typeof value === 'string') {                                                                                     // 133
    return fromString(that, value, encodingOrOffset)                                                                   // 134
  }                                                                                                                    // 135
                                                                                                                       // 136
  return fromObject(that, value)                                                                                       // 137
}                                                                                                                      // 138
                                                                                                                       // 139
/**                                                                                                                    // 140
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError                                             // 141
 * if value is a number.                                                                                               // 142
 * Buffer.from(str[, encoding])                                                                                        // 143
 * Buffer.from(array)                                                                                                  // 144
 * Buffer.from(buffer)                                                                                                 // 145
 * Buffer.from(arrayBuffer[, byteOffset[, length]])                                                                    // 146
 **/                                                                                                                   // 147
Buffer.from = function (value, encodingOrOffset, length) {                                                             // 148
  return from(null, value, encodingOrOffset, length)                                                                   // 149
}                                                                                                                      // 150
                                                                                                                       // 151
if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                      // 152
  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                    // 153
  Buffer.__proto__ = Uint8Array                                                                                        // 154
  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                               // 155
      Buffer[Symbol.species] === Buffer) {                                                                             // 156
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                         // 157
    Object.defineProperty(Buffer, Symbol.species, {                                                                    // 158
      value: null,                                                                                                     // 159
      configurable: true                                                                                               // 160
    })                                                                                                                 // 161
  }                                                                                                                    // 162
}                                                                                                                      // 163
                                                                                                                       // 164
function assertSize (size) {                                                                                           // 165
  if (typeof size !== 'number') {                                                                                      // 166
    throw new TypeError('"size" argument must be a number')                                                            // 167
  } else if (size < 0) {                                                                                               // 168
    throw new RangeError('"size" argument must not be negative')                                                       // 169
  }                                                                                                                    // 170
}                                                                                                                      // 171
                                                                                                                       // 172
function alloc (that, size, fill, encoding) {                                                                          // 173
  assertSize(size)                                                                                                     // 174
  if (size <= 0) {                                                                                                     // 175
    return createBuffer(that, size)                                                                                    // 176
  }                                                                                                                    // 177
  if (fill !== undefined) {                                                                                            // 178
    // Only pay attention to encoding if it's a string. This                                                           // 179
    // prevents accidentally sending in a number that would                                                            // 180
    // be interpretted as a start offset.                                                                              // 181
    return typeof encoding === 'string'                                                                                // 182
      ? createBuffer(that, size).fill(fill, encoding)                                                                  // 183
      : createBuffer(that, size).fill(fill)                                                                            // 184
  }                                                                                                                    // 185
  return createBuffer(that, size)                                                                                      // 186
}                                                                                                                      // 187
                                                                                                                       // 188
/**                                                                                                                    // 189
 * Creates a new filled Buffer instance.                                                                               // 190
 * alloc(size[, fill[, encoding]])                                                                                     // 191
 **/                                                                                                                   // 192
Buffer.alloc = function (size, fill, encoding) {                                                                       // 193
  return alloc(null, size, fill, encoding)                                                                             // 194
}                                                                                                                      // 195
                                                                                                                       // 196
function allocUnsafe (that, size) {                                                                                    // 197
  assertSize(size)                                                                                                     // 198
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)                                                          // 199
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 200
    for (var i = 0; i < size; ++i) {                                                                                   // 201
      that[i] = 0                                                                                                      // 202
    }                                                                                                                  // 203
  }                                                                                                                    // 204
  return that                                                                                                          // 205
}                                                                                                                      // 206
                                                                                                                       // 207
/**                                                                                                                    // 208
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.                                    // 209
 * */                                                                                                                  // 210
Buffer.allocUnsafe = function (size) {                                                                                 // 211
  return allocUnsafe(null, size)                                                                                       // 212
}                                                                                                                      // 213
/**                                                                                                                    // 214
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.                                // 215
 */                                                                                                                    // 216
Buffer.allocUnsafeSlow = function (size) {                                                                             // 217
  return allocUnsafe(null, size)                                                                                       // 218
}                                                                                                                      // 219
                                                                                                                       // 220
function fromString (that, string, encoding) {                                                                         // 221
  if (typeof encoding !== 'string' || encoding === '') {                                                               // 222
    encoding = 'utf8'                                                                                                  // 223
  }                                                                                                                    // 224
                                                                                                                       // 225
  if (!Buffer.isEncoding(encoding)) {                                                                                  // 226
    throw new TypeError('"encoding" must be a valid string encoding')                                                  // 227
  }                                                                                                                    // 228
                                                                                                                       // 229
  var length = byteLength(string, encoding) | 0                                                                        // 230
  that = createBuffer(that, length)                                                                                    // 231
                                                                                                                       // 232
  var actual = that.write(string, encoding)                                                                            // 233
                                                                                                                       // 234
  if (actual !== length) {                                                                                             // 235
    // Writing a hex string, for example, that contains invalid characters will                                        // 236
    // cause everything after the first invalid character to be ignored. (e.g.                                         // 237
    // 'abxxcd' will be treated as 'ab')                                                                               // 238
    that = that.slice(0, actual)                                                                                       // 239
  }                                                                                                                    // 240
                                                                                                                       // 241
  return that                                                                                                          // 242
}                                                                                                                      // 243
                                                                                                                       // 244
function fromArrayLike (that, array) {                                                                                 // 245
  var length = array.length < 0 ? 0 : checked(array.length) | 0                                                        // 246
  that = createBuffer(that, length)                                                                                    // 247
  for (var i = 0; i < length; i += 1) {                                                                                // 248
    that[i] = array[i] & 255                                                                                           // 249
  }                                                                                                                    // 250
  return that                                                                                                          // 251
}                                                                                                                      // 252
                                                                                                                       // 253
function fromArrayBuffer (that, array, byteOffset, length) {                                                           // 254
  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                                // 255
                                                                                                                       // 256
  if (byteOffset < 0 || array.byteLength < byteOffset) {                                                               // 257
    throw new RangeError('\'offset\' is out of bounds')                                                                // 258
  }                                                                                                                    // 259
                                                                                                                       // 260
  if (array.byteLength < byteOffset + (length || 0)) {                                                                 // 261
    throw new RangeError('\'length\' is out of bounds')                                                                // 262
  }                                                                                                                    // 263
                                                                                                                       // 264
  if (byteOffset === undefined && length === undefined) {                                                              // 265
    array = new Uint8Array(array)                                                                                      // 266
  } else if (length === undefined) {                                                                                   // 267
    array = new Uint8Array(array, byteOffset)                                                                          // 268
  } else {                                                                                                             // 269
    array = new Uint8Array(array, byteOffset, length)                                                                  // 270
  }                                                                                                                    // 271
                                                                                                                       // 272
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 273
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 274
    that = array                                                                                                       // 275
    that.__proto__ = Buffer.prototype                                                                                  // 276
  } else {                                                                                                             // 277
    // Fallback: Return an object instance of the Buffer class                                                         // 278
    that = fromArrayLike(that, array)                                                                                  // 279
  }                                                                                                                    // 280
  return that                                                                                                          // 281
}                                                                                                                      // 282
                                                                                                                       // 283
function fromObject (that, obj) {                                                                                      // 284
  if (Buffer.isBuffer(obj)) {                                                                                          // 285
    var len = checked(obj.length) | 0                                                                                  // 286
    that = createBuffer(that, len)                                                                                     // 287
                                                                                                                       // 288
    if (that.length === 0) {                                                                                           // 289
      return that                                                                                                      // 290
    }                                                                                                                  // 291
                                                                                                                       // 292
    obj.copy(that, 0, 0, len)                                                                                          // 293
    return that                                                                                                        // 294
  }                                                                                                                    // 295
                                                                                                                       // 296
  if (obj) {                                                                                                           // 297
    if ((typeof ArrayBuffer !== 'undefined' &&                                                                         // 298
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {                                                       // 299
      if (typeof obj.length !== 'number' || isnan(obj.length)) {                                                       // 300
        return createBuffer(that, 0)                                                                                   // 301
      }                                                                                                                // 302
      return fromArrayLike(that, obj)                                                                                  // 303
    }                                                                                                                  // 304
                                                                                                                       // 305
    if (obj.type === 'Buffer' && isArray(obj.data)) {                                                                  // 306
      return fromArrayLike(that, obj.data)                                                                             // 307
    }                                                                                                                  // 308
  }                                                                                                                    // 309
                                                                                                                       // 310
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')            // 311
}                                                                                                                      // 312
                                                                                                                       // 313
function checked (length) {                                                                                            // 314
  // Note: cannot use `length < kMaxLength()` here because that fails when                                             // 315
  // length is NaN (which is otherwise coerced to zero.)                                                               // 316
  if (length >= kMaxLength()) {                                                                                        // 317
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 318
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 319
  }                                                                                                                    // 320
  return length | 0                                                                                                    // 321
}                                                                                                                      // 322
                                                                                                                       // 323
function SlowBuffer (length) {                                                                                         // 324
  if (+length != length) { // eslint-disable-line eqeqeq                                                               // 325
    length = 0                                                                                                         // 326
  }                                                                                                                    // 327
  return Buffer.alloc(+length)                                                                                         // 328
}                                                                                                                      // 329
                                                                                                                       // 330
Buffer.isBuffer = function isBuffer (b) {                                                                              // 331
  return !!(b != null && b._isBuffer)                                                                                  // 332
}                                                                                                                      // 333
                                                                                                                       // 334
Buffer.compare = function compare (a, b) {                                                                             // 335
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 336
    throw new TypeError('Arguments must be Buffers')                                                                   // 337
  }                                                                                                                    // 338
                                                                                                                       // 339
  if (a === b) return 0                                                                                                // 340
                                                                                                                       // 341
  var x = a.length                                                                                                     // 342
  var y = b.length                                                                                                     // 343
                                                                                                                       // 344
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                                // 345
    if (a[i] !== b[i]) {                                                                                               // 346
      x = a[i]                                                                                                         // 347
      y = b[i]                                                                                                         // 348
      break                                                                                                            // 349
    }                                                                                                                  // 350
  }                                                                                                                    // 351
                                                                                                                       // 352
  if (x < y) return -1                                                                                                 // 353
  if (y < x) return 1                                                                                                  // 354
  return 0                                                                                                             // 355
}                                                                                                                      // 356
                                                                                                                       // 357
Buffer.isEncoding = function isEncoding (encoding) {                                                                   // 358
  switch (String(encoding).toLowerCase()) {                                                                            // 359
    case 'hex':                                                                                                        // 360
    case 'utf8':                                                                                                       // 361
    case 'utf-8':                                                                                                      // 362
    case 'ascii':                                                                                                      // 363
    case 'latin1':                                                                                                     // 364
    case 'binary':                                                                                                     // 365
    case 'base64':                                                                                                     // 366
    case 'ucs2':                                                                                                       // 367
    case 'ucs-2':                                                                                                      // 368
    case 'utf16le':                                                                                                    // 369
    case 'utf-16le':                                                                                                   // 370
      return true                                                                                                      // 371
    default:                                                                                                           // 372
      return false                                                                                                     // 373
  }                                                                                                                    // 374
}                                                                                                                      // 375
                                                                                                                       // 376
Buffer.concat = function concat (list, length) {                                                                       // 377
  if (!isArray(list)) {                                                                                                // 378
    throw new TypeError('"list" argument must be an Array of Buffers')                                                 // 379
  }                                                                                                                    // 380
                                                                                                                       // 381
  if (list.length === 0) {                                                                                             // 382
    return Buffer.alloc(0)                                                                                             // 383
  }                                                                                                                    // 384
                                                                                                                       // 385
  var i                                                                                                                // 386
  if (length === undefined) {                                                                                          // 387
    length = 0                                                                                                         // 388
    for (i = 0; i < list.length; ++i) {                                                                                // 389
      length += list[i].length                                                                                         // 390
    }                                                                                                                  // 391
  }                                                                                                                    // 392
                                                                                                                       // 393
  var buffer = Buffer.allocUnsafe(length)                                                                              // 394
  var pos = 0                                                                                                          // 395
  for (i = 0; i < list.length; ++i) {                                                                                  // 396
    var buf = list[i]                                                                                                  // 397
    if (!Buffer.isBuffer(buf)) {                                                                                       // 398
      throw new TypeError('"list" argument must be an Array of Buffers')                                               // 399
    }                                                                                                                  // 400
    buf.copy(buffer, pos)                                                                                              // 401
    pos += buf.length                                                                                                  // 402
  }                                                                                                                    // 403
  return buffer                                                                                                        // 404
}                                                                                                                      // 405
                                                                                                                       // 406
function byteLength (string, encoding) {                                                                               // 407
  if (Buffer.isBuffer(string)) {                                                                                       // 408
    return string.length                                                                                               // 409
  }                                                                                                                    // 410
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&                                // 411
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {                                                 // 412
    return string.byteLength                                                                                           // 413
  }                                                                                                                    // 414
  if (typeof string !== 'string') {                                                                                    // 415
    string = '' + string                                                                                               // 416
  }                                                                                                                    // 417
                                                                                                                       // 418
  var len = string.length                                                                                              // 419
  if (len === 0) return 0                                                                                              // 420
                                                                                                                       // 421
  // Use a for loop to avoid recursion                                                                                 // 422
  var loweredCase = false                                                                                              // 423
  for (;;) {                                                                                                           // 424
    switch (encoding) {                                                                                                // 425
      case 'ascii':                                                                                                    // 426
      case 'latin1':                                                                                                   // 427
      case 'binary':                                                                                                   // 428
        return len                                                                                                     // 429
      case 'utf8':                                                                                                     // 430
      case 'utf-8':                                                                                                    // 431
      case undefined:                                                                                                  // 432
        return utf8ToBytes(string).length                                                                              // 433
      case 'ucs2':                                                                                                     // 434
      case 'ucs-2':                                                                                                    // 435
      case 'utf16le':                                                                                                  // 436
      case 'utf-16le':                                                                                                 // 437
        return len * 2                                                                                                 // 438
      case 'hex':                                                                                                      // 439
        return len >>> 1                                                                                               // 440
      case 'base64':                                                                                                   // 441
        return base64ToBytes(string).length                                                                            // 442
      default:                                                                                                         // 443
        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 444
        encoding = ('' + encoding).toLowerCase()                                                                       // 445
        loweredCase = true                                                                                             // 446
    }                                                                                                                  // 447
  }                                                                                                                    // 448
}                                                                                                                      // 449
Buffer.byteLength = byteLength                                                                                         // 450
                                                                                                                       // 451
function slowToString (encoding, start, end) {                                                                         // 452
  var loweredCase = false                                                                                              // 453
                                                                                                                       // 454
  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only                                         // 455
  // property of a typed array.                                                                                        // 456
                                                                                                                       // 457
  // This behaves neither like String nor Uint8Array in that we set start/end                                          // 458
  // to their upper/lower bounds if the value passed is out of range.                                                  // 459
  // undefined is handled specially as per ECMA-262 6th Edition,                                                       // 460
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.                                                   // 461
  if (start === undefined || start < 0) {                                                                              // 462
    start = 0                                                                                                          // 463
  }                                                                                                                    // 464
  // Return early if start > this.length. Done here to prevent potential uint32                                        // 465
  // coercion fail below.                                                                                              // 466
  if (start > this.length) {                                                                                           // 467
    return ''                                                                                                          // 468
  }                                                                                                                    // 469
                                                                                                                       // 470
  if (end === undefined || end > this.length) {                                                                        // 471
    end = this.length                                                                                                  // 472
  }                                                                                                                    // 473
                                                                                                                       // 474
  if (end <= 0) {                                                                                                      // 475
    return ''                                                                                                          // 476
  }                                                                                                                    // 477
                                                                                                                       // 478
  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.                                           // 479
  end >>>= 0                                                                                                           // 480
  start >>>= 0                                                                                                         // 481
                                                                                                                       // 482
  if (end <= start) {                                                                                                  // 483
    return ''                                                                                                          // 484
  }                                                                                                                    // 485
                                                                                                                       // 486
  if (!encoding) encoding = 'utf8'                                                                                     // 487
                                                                                                                       // 488
  while (true) {                                                                                                       // 489
    switch (encoding) {                                                                                                // 490
      case 'hex':                                                                                                      // 491
        return hexSlice(this, start, end)                                                                              // 492
                                                                                                                       // 493
      case 'utf8':                                                                                                     // 494
      case 'utf-8':                                                                                                    // 495
        return utf8Slice(this, start, end)                                                                             // 496
                                                                                                                       // 497
      case 'ascii':                                                                                                    // 498
        return asciiSlice(this, start, end)                                                                            // 499
                                                                                                                       // 500
      case 'latin1':                                                                                                   // 501
      case 'binary':                                                                                                   // 502
        return latin1Slice(this, start, end)                                                                           // 503
                                                                                                                       // 504
      case 'base64':                                                                                                   // 505
        return base64Slice(this, start, end)                                                                           // 506
                                                                                                                       // 507
      case 'ucs2':                                                                                                     // 508
      case 'ucs-2':                                                                                                    // 509
      case 'utf16le':                                                                                                  // 510
      case 'utf-16le':                                                                                                 // 511
        return utf16leSlice(this, start, end)                                                                          // 512
                                                                                                                       // 513
      default:                                                                                                         // 514
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 515
        encoding = (encoding + '').toLowerCase()                                                                       // 516
        loweredCase = true                                                                                             // 517
    }                                                                                                                  // 518
  }                                                                                                                    // 519
}                                                                                                                      // 520
                                                                                                                       // 521
// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                                 // 522
// Buffer instances.                                                                                                   // 523
Buffer.prototype._isBuffer = true                                                                                      // 524
                                                                                                                       // 525
function swap (b, n, m) {                                                                                              // 526
  var i = b[n]                                                                                                         // 527
  b[n] = b[m]                                                                                                          // 528
  b[m] = i                                                                                                             // 529
}                                                                                                                      // 530
                                                                                                                       // 531
Buffer.prototype.swap16 = function swap16 () {                                                                         // 532
  var len = this.length                                                                                                // 533
  if (len % 2 !== 0) {                                                                                                 // 534
    throw new RangeError('Buffer size must be a multiple of 16-bits')                                                  // 535
  }                                                                                                                    // 536
  for (var i = 0; i < len; i += 2) {                                                                                   // 537
    swap(this, i, i + 1)                                                                                               // 538
  }                                                                                                                    // 539
  return this                                                                                                          // 540
}                                                                                                                      // 541
                                                                                                                       // 542
Buffer.prototype.swap32 = function swap32 () {                                                                         // 543
  var len = this.length                                                                                                // 544
  if (len % 4 !== 0) {                                                                                                 // 545
    throw new RangeError('Buffer size must be a multiple of 32-bits')                                                  // 546
  }                                                                                                                    // 547
  for (var i = 0; i < len; i += 4) {                                                                                   // 548
    swap(this, i, i + 3)                                                                                               // 549
    swap(this, i + 1, i + 2)                                                                                           // 550
  }                                                                                                                    // 551
  return this                                                                                                          // 552
}                                                                                                                      // 553
                                                                                                                       // 554
Buffer.prototype.swap64 = function swap64 () {                                                                         // 555
  var len = this.length                                                                                                // 556
  if (len % 8 !== 0) {                                                                                                 // 557
    throw new RangeError('Buffer size must be a multiple of 64-bits')                                                  // 558
  }                                                                                                                    // 559
  for (var i = 0; i < len; i += 8) {                                                                                   // 560
    swap(this, i, i + 7)                                                                                               // 561
    swap(this, i + 1, i + 6)                                                                                           // 562
    swap(this, i + 2, i + 5)                                                                                           // 563
    swap(this, i + 3, i + 4)                                                                                           // 564
  }                                                                                                                    // 565
  return this                                                                                                          // 566
}                                                                                                                      // 567
                                                                                                                       // 568
Buffer.prototype.toString = function toString () {                                                                     // 569
  var length = this.length | 0                                                                                         // 570
  if (length === 0) return ''                                                                                          // 571
  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 572
  return slowToString.apply(this, arguments)                                                                           // 573
}                                                                                                                      // 574
                                                                                                                       // 575
Buffer.prototype.equals = function equals (b) {                                                                        // 576
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 577
  if (this === b) return true                                                                                          // 578
  return Buffer.compare(this, b) === 0                                                                                 // 579
}                                                                                                                      // 580
                                                                                                                       // 581
Buffer.prototype.inspect = function inspect () {                                                                       // 582
  var str = ''                                                                                                         // 583
  var max = exports.INSPECT_MAX_BYTES                                                                                  // 584
  if (this.length > 0) {                                                                                               // 585
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 586
    if (this.length > max) str += ' ... '                                                                              // 587
  }                                                                                                                    // 588
  return '<Buffer ' + str + '>'                                                                                        // 589
}                                                                                                                      // 590
                                                                                                                       // 591
Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {                                 // 592
  if (!Buffer.isBuffer(target)) {                                                                                      // 593
    throw new TypeError('Argument must be a Buffer')                                                                   // 594
  }                                                                                                                    // 595
                                                                                                                       // 596
  if (start === undefined) {                                                                                           // 597
    start = 0                                                                                                          // 598
  }                                                                                                                    // 599
  if (end === undefined) {                                                                                             // 600
    end = target ? target.length : 0                                                                                   // 601
  }                                                                                                                    // 602
  if (thisStart === undefined) {                                                                                       // 603
    thisStart = 0                                                                                                      // 604
  }                                                                                                                    // 605
  if (thisEnd === undefined) {                                                                                         // 606
    thisEnd = this.length                                                                                              // 607
  }                                                                                                                    // 608
                                                                                                                       // 609
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {                                    // 610
    throw new RangeError('out of range index')                                                                         // 611
  }                                                                                                                    // 612
                                                                                                                       // 613
  if (thisStart >= thisEnd && start >= end) {                                                                          // 614
    return 0                                                                                                           // 615
  }                                                                                                                    // 616
  if (thisStart >= thisEnd) {                                                                                          // 617
    return -1                                                                                                          // 618
  }                                                                                                                    // 619
  if (start >= end) {                                                                                                  // 620
    return 1                                                                                                           // 621
  }                                                                                                                    // 622
                                                                                                                       // 623
  start >>>= 0                                                                                                         // 624
  end >>>= 0                                                                                                           // 625
  thisStart >>>= 0                                                                                                     // 626
  thisEnd >>>= 0                                                                                                       // 627
                                                                                                                       // 628
  if (this === target) return 0                                                                                        // 629
                                                                                                                       // 630
  var x = thisEnd - thisStart                                                                                          // 631
  var y = end - start                                                                                                  // 632
  var len = Math.min(x, y)                                                                                             // 633
                                                                                                                       // 634
  var thisCopy = this.slice(thisStart, thisEnd)                                                                        // 635
  var targetCopy = target.slice(start, end)                                                                            // 636
                                                                                                                       // 637
  for (var i = 0; i < len; ++i) {                                                                                      // 638
    if (thisCopy[i] !== targetCopy[i]) {                                                                               // 639
      x = thisCopy[i]                                                                                                  // 640
      y = targetCopy[i]                                                                                                // 641
      break                                                                                                            // 642
    }                                                                                                                  // 643
  }                                                                                                                    // 644
                                                                                                                       // 645
  if (x < y) return -1                                                                                                 // 646
  if (y < x) return 1                                                                                                  // 647
  return 0                                                                                                             // 648
}                                                                                                                      // 649
                                                                                                                       // 650
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,                                        // 651
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.                                                   // 652
//                                                                                                                     // 653
// Arguments:                                                                                                          // 654
// - buffer - a Buffer to search                                                                                       // 655
// - val - a string, Buffer, or number                                                                                 // 656
// - byteOffset - an index into `buffer`; will be clamped to an int32                                                  // 657
// - encoding - an optional encoding, relevant is val is a string                                                      // 658
// - dir - true for indexOf, false for lastIndexOf                                                                     // 659
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {                                               // 660
  // Empty buffer means no match                                                                                       // 661
  if (buffer.length === 0) return -1                                                                                   // 662
                                                                                                                       // 663
  // Normalize byteOffset                                                                                              // 664
  if (typeof byteOffset === 'string') {                                                                                // 665
    encoding = byteOffset                                                                                              // 666
    byteOffset = 0                                                                                                     // 667
  } else if (byteOffset > 0x7fffffff) {                                                                                // 668
    byteOffset = 0x7fffffff                                                                                            // 669
  } else if (byteOffset < -0x80000000) {                                                                               // 670
    byteOffset = -0x80000000                                                                                           // 671
  }                                                                                                                    // 672
  byteOffset = +byteOffset  // Coerce to Number.                                                                       // 673
  if (isNaN(byteOffset)) {                                                                                             // 674
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer                                       // 675
    byteOffset = dir ? 0 : (buffer.length - 1)                                                                         // 676
  }                                                                                                                    // 677
                                                                                                                       // 678
  // Normalize byteOffset: negative offsets start from the end of the buffer                                           // 679
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset                                                          // 680
  if (byteOffset >= buffer.length) {                                                                                   // 681
    if (dir) return -1                                                                                                 // 682
    else byteOffset = buffer.length - 1                                                                                // 683
  } else if (byteOffset < 0) {                                                                                         // 684
    if (dir) byteOffset = 0                                                                                            // 685
    else return -1                                                                                                     // 686
  }                                                                                                                    // 687
                                                                                                                       // 688
  // Normalize val                                                                                                     // 689
  if (typeof val === 'string') {                                                                                       // 690
    val = Buffer.from(val, encoding)                                                                                   // 691
  }                                                                                                                    // 692
                                                                                                                       // 693
  // Finally, search either indexOf (if dir is true) or lastIndexOf                                                    // 694
  if (Buffer.isBuffer(val)) {                                                                                          // 695
    // Special case: looking for empty string/buffer always fails                                                      // 696
    if (val.length === 0) {                                                                                            // 697
      return -1                                                                                                        // 698
    }                                                                                                                  // 699
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)                                                        // 700
  } else if (typeof val === 'number') {                                                                                // 701
    val = val & 0xFF // Search for a byte value [0-255]                                                                // 702
    if (Buffer.TYPED_ARRAY_SUPPORT &&                                                                                  // 703
        typeof Uint8Array.prototype.indexOf === 'function') {                                                          // 704
      if (dir) {                                                                                                       // 705
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)                                              // 706
      } else {                                                                                                         // 707
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)                                          // 708
      }                                                                                                                // 709
    }                                                                                                                  // 710
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)                                                    // 711
  }                                                                                                                    // 712
                                                                                                                       // 713
  throw new TypeError('val must be string, number or Buffer')                                                          // 714
}                                                                                                                      // 715
                                                                                                                       // 716
function arrayIndexOf (arr, val, byteOffset, encoding, dir) {                                                          // 717
  var indexSize = 1                                                                                                    // 718
  var arrLength = arr.length                                                                                           // 719
  var valLength = val.length                                                                                           // 720
                                                                                                                       // 721
  if (encoding !== undefined) {                                                                                        // 722
    encoding = String(encoding).toLowerCase()                                                                          // 723
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||                                                                 // 724
        encoding === 'utf16le' || encoding === 'utf-16le') {                                                           // 725
      if (arr.length < 2 || val.length < 2) {                                                                          // 726
        return -1                                                                                                      // 727
      }                                                                                                                // 728
      indexSize = 2                                                                                                    // 729
      arrLength /= 2                                                                                                   // 730
      valLength /= 2                                                                                                   // 731
      byteOffset /= 2                                                                                                  // 732
    }                                                                                                                  // 733
  }                                                                                                                    // 734
                                                                                                                       // 735
  function read (buf, i) {                                                                                             // 736
    if (indexSize === 1) {                                                                                             // 737
      return buf[i]                                                                                                    // 738
    } else {                                                                                                           // 739
      return buf.readUInt16BE(i * indexSize)                                                                           // 740
    }                                                                                                                  // 741
  }                                                                                                                    // 742
                                                                                                                       // 743
  var i                                                                                                                // 744
  if (dir) {                                                                                                           // 745
    var foundIndex = -1                                                                                                // 746
    for (i = byteOffset; i < arrLength; i++) {                                                                         // 747
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {                                        // 748
        if (foundIndex === -1) foundIndex = i                                                                          // 749
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize                                            // 750
      } else {                                                                                                         // 751
        if (foundIndex !== -1) i -= i - foundIndex                                                                     // 752
        foundIndex = -1                                                                                                // 753
      }                                                                                                                // 754
    }                                                                                                                  // 755
  } else {                                                                                                             // 756
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength                                         // 757
    for (i = byteOffset; i >= 0; i--) {                                                                                // 758
      var found = true                                                                                                 // 759
      for (var j = 0; j < valLength; j++) {                                                                            // 760
        if (read(arr, i + j) !== read(val, j)) {                                                                       // 761
          found = false                                                                                                // 762
          break                                                                                                        // 763
        }                                                                                                              // 764
      }                                                                                                                // 765
      if (found) return i                                                                                              // 766
    }                                                                                                                  // 767
  }                                                                                                                    // 768
                                                                                                                       // 769
  return -1                                                                                                            // 770
}                                                                                                                      // 771
                                                                                                                       // 772
Buffer.prototype.includes = function includes (val, byteOffset, encoding) {                                            // 773
  return this.indexOf(val, byteOffset, encoding) !== -1                                                                // 774
}                                                                                                                      // 775
                                                                                                                       // 776
Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {                                              // 777
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)                                                   // 778
}                                                                                                                      // 779
                                                                                                                       // 780
Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {                                      // 781
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)                                                  // 782
}                                                                                                                      // 783
                                                                                                                       // 784
function hexWrite (buf, string, offset, length) {                                                                      // 785
  offset = Number(offset) || 0                                                                                         // 786
  var remaining = buf.length - offset                                                                                  // 787
  if (!length) {                                                                                                       // 788
    length = remaining                                                                                                 // 789
  } else {                                                                                                             // 790
    length = Number(length)                                                                                            // 791
    if (length > remaining) {                                                                                          // 792
      length = remaining                                                                                               // 793
    }                                                                                                                  // 794
  }                                                                                                                    // 795
                                                                                                                       // 796
  // must be an even number of digits                                                                                  // 797
  var strLen = string.length                                                                                           // 798
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')                                                      // 799
                                                                                                                       // 800
  if (length > strLen / 2) {                                                                                           // 801
    length = strLen / 2                                                                                                // 802
  }                                                                                                                    // 803
  for (var i = 0; i < length; ++i) {                                                                                   // 804
    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 805
    if (isNaN(parsed)) return i                                                                                        // 806
    buf[offset + i] = parsed                                                                                           // 807
  }                                                                                                                    // 808
  return i                                                                                                             // 809
}                                                                                                                      // 810
                                                                                                                       // 811
function utf8Write (buf, string, offset, length) {                                                                     // 812
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 813
}                                                                                                                      // 814
                                                                                                                       // 815
function asciiWrite (buf, string, offset, length) {                                                                    // 816
  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 817
}                                                                                                                      // 818
                                                                                                                       // 819
function latin1Write (buf, string, offset, length) {                                                                   // 820
  return asciiWrite(buf, string, offset, length)                                                                       // 821
}                                                                                                                      // 822
                                                                                                                       // 823
function base64Write (buf, string, offset, length) {                                                                   // 824
  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 825
}                                                                                                                      // 826
                                                                                                                       // 827
function ucs2Write (buf, string, offset, length) {                                                                     // 828
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 829
}                                                                                                                      // 830
                                                                                                                       // 831
Buffer.prototype.write = function write (string, offset, length, encoding) {                                           // 832
  // Buffer#write(string)                                                                                              // 833
  if (offset === undefined) {                                                                                          // 834
    encoding = 'utf8'                                                                                                  // 835
    length = this.length                                                                                               // 836
    offset = 0                                                                                                         // 837
  // Buffer#write(string, encoding)                                                                                    // 838
  } else if (length === undefined && typeof offset === 'string') {                                                     // 839
    encoding = offset                                                                                                  // 840
    length = this.length                                                                                               // 841
    offset = 0                                                                                                         // 842
  // Buffer#write(string, offset[, length][, encoding])                                                                // 843
  } else if (isFinite(offset)) {                                                                                       // 844
    offset = offset | 0                                                                                                // 845
    if (isFinite(length)) {                                                                                            // 846
      length = length | 0                                                                                              // 847
      if (encoding === undefined) encoding = 'utf8'                                                                    // 848
    } else {                                                                                                           // 849
      encoding = length                                                                                                // 850
      length = undefined                                                                                               // 851
    }                                                                                                                  // 852
  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 853
  } else {                                                                                                             // 854
    throw new Error(                                                                                                   // 855
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'                                        // 856
    )                                                                                                                  // 857
  }                                                                                                                    // 858
                                                                                                                       // 859
  var remaining = this.length - offset                                                                                 // 860
  if (length === undefined || length > remaining) length = remaining                                                   // 861
                                                                                                                       // 862
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 863
    throw new RangeError('Attempt to write outside buffer bounds')                                                     // 864
  }                                                                                                                    // 865
                                                                                                                       // 866
  if (!encoding) encoding = 'utf8'                                                                                     // 867
                                                                                                                       // 868
  var loweredCase = false                                                                                              // 869
  for (;;) {                                                                                                           // 870
    switch (encoding) {                                                                                                // 871
      case 'hex':                                                                                                      // 872
        return hexWrite(this, string, offset, length)                                                                  // 873
                                                                                                                       // 874
      case 'utf8':                                                                                                     // 875
      case 'utf-8':                                                                                                    // 876
        return utf8Write(this, string, offset, length)                                                                 // 877
                                                                                                                       // 878
      case 'ascii':                                                                                                    // 879
        return asciiWrite(this, string, offset, length)                                                                // 880
                                                                                                                       // 881
      case 'latin1':                                                                                                   // 882
      case 'binary':                                                                                                   // 883
        return latin1Write(this, string, offset, length)                                                               // 884
                                                                                                                       // 885
      case 'base64':                                                                                                   // 886
        // Warning: maxLength not taken into account in base64Write                                                    // 887
        return base64Write(this, string, offset, length)                                                               // 888
                                                                                                                       // 889
      case 'ucs2':                                                                                                     // 890
      case 'ucs-2':                                                                                                    // 891
      case 'utf16le':                                                                                                  // 892
      case 'utf-16le':                                                                                                 // 893
        return ucs2Write(this, string, offset, length)                                                                 // 894
                                                                                                                       // 895
      default:                                                                                                         // 896
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 897
        encoding = ('' + encoding).toLowerCase()                                                                       // 898
        loweredCase = true                                                                                             // 899
    }                                                                                                                  // 900
  }                                                                                                                    // 901
}                                                                                                                      // 902
                                                                                                                       // 903
Buffer.prototype.toJSON = function toJSON () {                                                                         // 904
  return {                                                                                                             // 905
    type: 'Buffer',                                                                                                    // 906
    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 907
  }                                                                                                                    // 908
}                                                                                                                      // 909
                                                                                                                       // 910
function base64Slice (buf, start, end) {                                                                               // 911
  if (start === 0 && end === buf.length) {                                                                             // 912
    return base64.fromByteArray(buf)                                                                                   // 913
  } else {                                                                                                             // 914
    return base64.fromByteArray(buf.slice(start, end))                                                                 // 915
  }                                                                                                                    // 916
}                                                                                                                      // 917
                                                                                                                       // 918
function utf8Slice (buf, start, end) {                                                                                 // 919
  end = Math.min(buf.length, end)                                                                                      // 920
  var res = []                                                                                                         // 921
                                                                                                                       // 922
  var i = start                                                                                                        // 923
  while (i < end) {                                                                                                    // 924
    var firstByte = buf[i]                                                                                             // 925
    var codePoint = null                                                                                               // 926
    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 927
      : (firstByte > 0xDF) ? 3                                                                                         // 928
      : (firstByte > 0xBF) ? 2                                                                                         // 929
      : 1                                                                                                              // 930
                                                                                                                       // 931
    if (i + bytesPerSequence <= end) {                                                                                 // 932
      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 933
                                                                                                                       // 934
      switch (bytesPerSequence) {                                                                                      // 935
        case 1:                                                                                                        // 936
          if (firstByte < 0x80) {                                                                                      // 937
            codePoint = firstByte                                                                                      // 938
          }                                                                                                            // 939
          break                                                                                                        // 940
        case 2:                                                                                                        // 941
          secondByte = buf[i + 1]                                                                                      // 942
          if ((secondByte & 0xC0) === 0x80) {                                                                          // 943
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 944
            if (tempCodePoint > 0x7F) {                                                                                // 945
              codePoint = tempCodePoint                                                                                // 946
            }                                                                                                          // 947
          }                                                                                                            // 948
          break                                                                                                        // 949
        case 3:                                                                                                        // 950
          secondByte = buf[i + 1]                                                                                      // 951
          thirdByte = buf[i + 2]                                                                                       // 952
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 953
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 954
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 955
              codePoint = tempCodePoint                                                                                // 956
            }                                                                                                          // 957
          }                                                                                                            // 958
          break                                                                                                        // 959
        case 4:                                                                                                        // 960
          secondByte = buf[i + 1]                                                                                      // 961
          thirdByte = buf[i + 2]                                                                                       // 962
          fourthByte = buf[i + 3]                                                                                      // 963
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 964
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 966
              codePoint = tempCodePoint                                                                                // 967
            }                                                                                                          // 968
          }                                                                                                            // 969
      }                                                                                                                // 970
    }                                                                                                                  // 971
                                                                                                                       // 972
    if (codePoint === null) {                                                                                          // 973
      // we did not generate a valid codePoint so insert a                                                             // 974
      // replacement char (U+FFFD) and advance only 1 byte                                                             // 975
      codePoint = 0xFFFD                                                                                               // 976
      bytesPerSequence = 1                                                                                             // 977
    } else if (codePoint > 0xFFFF) {                                                                                   // 978
      // encode to utf16 (surrogate pair dance)                                                                        // 979
      codePoint -= 0x10000                                                                                             // 980
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 981
      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 982
    }                                                                                                                  // 983
                                                                                                                       // 984
    res.push(codePoint)                                                                                                // 985
    i += bytesPerSequence                                                                                              // 986
  }                                                                                                                    // 987
                                                                                                                       // 988
  return decodeCodePointsArray(res)                                                                                    // 989
}                                                                                                                      // 990
                                                                                                                       // 991
// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 992
// the lowest limit is Chrome, with 0x10000 args.                                                                      // 993
// We go 1 magnitude less, for safety                                                                                  // 994
var MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 995
                                                                                                                       // 996
function decodeCodePointsArray (codePoints) {                                                                          // 997
  var len = codePoints.length                                                                                          // 998
  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 999
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 1000
  }                                                                                                                    // 1001
                                                                                                                       // 1002
  // Decode in chunks to avoid "call stack size exceeded".                                                             // 1003
  var res = ''                                                                                                         // 1004
  var i = 0                                                                                                            // 1005
  while (i < len) {                                                                                                    // 1006
    res += String.fromCharCode.apply(                                                                                  // 1007
      String,                                                                                                          // 1008
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 1009
    )                                                                                                                  // 1010
  }                                                                                                                    // 1011
  return res                                                                                                           // 1012
}                                                                                                                      // 1013
                                                                                                                       // 1014
function asciiSlice (buf, start, end) {                                                                                // 1015
  var ret = ''                                                                                                         // 1016
  end = Math.min(buf.length, end)                                                                                      // 1017
                                                                                                                       // 1018
  for (var i = start; i < end; ++i) {                                                                                  // 1019
    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 1020
  }                                                                                                                    // 1021
  return ret                                                                                                           // 1022
}                                                                                                                      // 1023
                                                                                                                       // 1024
function latin1Slice (buf, start, end) {                                                                               // 1025
  var ret = ''                                                                                                         // 1026
  end = Math.min(buf.length, end)                                                                                      // 1027
                                                                                                                       // 1028
  for (var i = start; i < end; ++i) {                                                                                  // 1029
    ret += String.fromCharCode(buf[i])                                                                                 // 1030
  }                                                                                                                    // 1031
  return ret                                                                                                           // 1032
}                                                                                                                      // 1033
                                                                                                                       // 1034
function hexSlice (buf, start, end) {                                                                                  // 1035
  var len = buf.length                                                                                                 // 1036
                                                                                                                       // 1037
  if (!start || start < 0) start = 0                                                                                   // 1038
  if (!end || end < 0 || end > len) end = len                                                                          // 1039
                                                                                                                       // 1040
  var out = ''                                                                                                         // 1041
  for (var i = start; i < end; ++i) {                                                                                  // 1042
    out += toHex(buf[i])                                                                                               // 1043
  }                                                                                                                    // 1044
  return out                                                                                                           // 1045
}                                                                                                                      // 1046
                                                                                                                       // 1047
function utf16leSlice (buf, start, end) {                                                                              // 1048
  var bytes = buf.slice(start, end)                                                                                    // 1049
  var res = ''                                                                                                         // 1050
  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 1051
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 1052
  }                                                                                                                    // 1053
  return res                                                                                                           // 1054
}                                                                                                                      // 1055
                                                                                                                       // 1056
Buffer.prototype.slice = function slice (start, end) {                                                                 // 1057
  var len = this.length                                                                                                // 1058
  start = ~~start                                                                                                      // 1059
  end = end === undefined ? len : ~~end                                                                                // 1060
                                                                                                                       // 1061
  if (start < 0) {                                                                                                     // 1062
    start += len                                                                                                       // 1063
    if (start < 0) start = 0                                                                                           // 1064
  } else if (start > len) {                                                                                            // 1065
    start = len                                                                                                        // 1066
  }                                                                                                                    // 1067
                                                                                                                       // 1068
  if (end < 0) {                                                                                                       // 1069
    end += len                                                                                                         // 1070
    if (end < 0) end = 0                                                                                               // 1071
  } else if (end > len) {                                                                                              // 1072
    end = len                                                                                                          // 1073
  }                                                                                                                    // 1074
                                                                                                                       // 1075
  if (end < start) end = start                                                                                         // 1076
                                                                                                                       // 1077
  var newBuf                                                                                                           // 1078
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1079
    newBuf = this.subarray(start, end)                                                                                 // 1080
    newBuf.__proto__ = Buffer.prototype                                                                                // 1081
  } else {                                                                                                             // 1082
    var sliceLen = end - start                                                                                         // 1083
    newBuf = new Buffer(sliceLen, undefined)                                                                           // 1084
    for (var i = 0; i < sliceLen; ++i) {                                                                               // 1085
      newBuf[i] = this[i + start]                                                                                      // 1086
    }                                                                                                                  // 1087
  }                                                                                                                    // 1088
                                                                                                                       // 1089
  return newBuf                                                                                                        // 1090
}                                                                                                                      // 1091
                                                                                                                       // 1092
/*                                                                                                                     // 1093
 * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 1094
 */                                                                                                                    // 1095
function checkOffset (offset, ext, length) {                                                                           // 1096
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 1097
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 1098
}                                                                                                                      // 1099
                                                                                                                       // 1100
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 1101
  offset = offset | 0                                                                                                  // 1102
  byteLength = byteLength | 0                                                                                          // 1103
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1104
                                                                                                                       // 1105
  var val = this[offset]                                                                                               // 1106
  var mul = 1                                                                                                          // 1107
  var i = 0                                                                                                            // 1108
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1109
    val += this[offset + i] * mul                                                                                      // 1110
  }                                                                                                                    // 1111
                                                                                                                       // 1112
  return val                                                                                                           // 1113
}                                                                                                                      // 1114
                                                                                                                       // 1115
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 1116
  offset = offset | 0                                                                                                  // 1117
  byteLength = byteLength | 0                                                                                          // 1118
  if (!noAssert) {                                                                                                     // 1119
    checkOffset(offset, byteLength, this.length)                                                                       // 1120
  }                                                                                                                    // 1121
                                                                                                                       // 1122
  var val = this[offset + --byteLength]                                                                                // 1123
  var mul = 1                                                                                                          // 1124
  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 1125
    val += this[offset + --byteLength] * mul                                                                           // 1126
  }                                                                                                                    // 1127
                                                                                                                       // 1128
  return val                                                                                                           // 1129
}                                                                                                                      // 1130
                                                                                                                       // 1131
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 1132
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1133
  return this[offset]                                                                                                  // 1134
}                                                                                                                      // 1135
                                                                                                                       // 1136
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 1137
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1138
  return this[offset] | (this[offset + 1] << 8)                                                                        // 1139
}                                                                                                                      // 1140
                                                                                                                       // 1141
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 1142
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1143
  return (this[offset] << 8) | this[offset + 1]                                                                        // 1144
}                                                                                                                      // 1145
                                                                                                                       // 1146
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 1147
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1148
                                                                                                                       // 1149
  return ((this[offset]) |                                                                                             // 1150
      (this[offset + 1] << 8) |                                                                                        // 1151
      (this[offset + 2] << 16)) +                                                                                      // 1152
      (this[offset + 3] * 0x1000000)                                                                                   // 1153
}                                                                                                                      // 1154
                                                                                                                       // 1155
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 1156
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1157
                                                                                                                       // 1158
  return (this[offset] * 0x1000000) +                                                                                  // 1159
    ((this[offset + 1] << 16) |                                                                                        // 1160
    (this[offset + 2] << 8) |                                                                                          // 1161
    this[offset + 3])                                                                                                  // 1162
}                                                                                                                      // 1163
                                                                                                                       // 1164
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 1165
  offset = offset | 0                                                                                                  // 1166
  byteLength = byteLength | 0                                                                                          // 1167
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1168
                                                                                                                       // 1169
  var val = this[offset]                                                                                               // 1170
  var mul = 1                                                                                                          // 1171
  var i = 0                                                                                                            // 1172
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1173
    val += this[offset + i] * mul                                                                                      // 1174
  }                                                                                                                    // 1175
  mul *= 0x80                                                                                                          // 1176
                                                                                                                       // 1177
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1178
                                                                                                                       // 1179
  return val                                                                                                           // 1180
}                                                                                                                      // 1181
                                                                                                                       // 1182
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 1183
  offset = offset | 0                                                                                                  // 1184
  byteLength = byteLength | 0                                                                                          // 1185
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1186
                                                                                                                       // 1187
  var i = byteLength                                                                                                   // 1188
  var mul = 1                                                                                                          // 1189
  var val = this[offset + --i]                                                                                         // 1190
  while (i > 0 && (mul *= 0x100)) {                                                                                    // 1191
    val += this[offset + --i] * mul                                                                                    // 1192
  }                                                                                                                    // 1193
  mul *= 0x80                                                                                                          // 1194
                                                                                                                       // 1195
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1196
                                                                                                                       // 1197
  return val                                                                                                           // 1198
}                                                                                                                      // 1199
                                                                                                                       // 1200
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 1201
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1202
  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 1203
  return ((0xff - this[offset] + 1) * -1)                                                                              // 1204
}                                                                                                                      // 1205
                                                                                                                       // 1206
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 1207
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1208
  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 1209
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1210
}                                                                                                                      // 1211
                                                                                                                       // 1212
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 1213
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1214
  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 1215
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1216
}                                                                                                                      // 1217
                                                                                                                       // 1218
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 1219
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1220
                                                                                                                       // 1221
  return (this[offset]) |                                                                                              // 1222
    (this[offset + 1] << 8) |                                                                                          // 1223
    (this[offset + 2] << 16) |                                                                                         // 1224
    (this[offset + 3] << 24)                                                                                           // 1225
}                                                                                                                      // 1226
                                                                                                                       // 1227
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 1228
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1229
                                                                                                                       // 1230
  return (this[offset] << 24) |                                                                                        // 1231
    (this[offset + 1] << 16) |                                                                                         // 1232
    (this[offset + 2] << 8) |                                                                                          // 1233
    (this[offset + 3])                                                                                                 // 1234
}                                                                                                                      // 1235
                                                                                                                       // 1236
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 1237
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1238
  return ieee754.read(this, offset, true, 23, 4)                                                                       // 1239
}                                                                                                                      // 1240
                                                                                                                       // 1241
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 1242
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1243
  return ieee754.read(this, offset, false, 23, 4)                                                                      // 1244
}                                                                                                                      // 1245
                                                                                                                       // 1246
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 1247
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1248
  return ieee754.read(this, offset, true, 52, 8)                                                                       // 1249
}                                                                                                                      // 1250
                                                                                                                       // 1251
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 1252
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1253
  return ieee754.read(this, offset, false, 52, 8)                                                                      // 1254
}                                                                                                                      // 1255
                                                                                                                       // 1256
function checkInt (buf, value, offset, ext, max, min) {                                                                // 1257
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')                        // 1258
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')                            // 1259
  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1260
}                                                                                                                      // 1261
                                                                                                                       // 1262
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 1263
  value = +value                                                                                                       // 1264
  offset = offset | 0                                                                                                  // 1265
  byteLength = byteLength | 0                                                                                          // 1266
  if (!noAssert) {                                                                                                     // 1267
    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1268
    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1269
  }                                                                                                                    // 1270
                                                                                                                       // 1271
  var mul = 1                                                                                                          // 1272
  var i = 0                                                                                                            // 1273
  this[offset] = value & 0xFF                                                                                          // 1274
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1275
    this[offset + i] = (value / mul) & 0xFF                                                                            // 1276
  }                                                                                                                    // 1277
                                                                                                                       // 1278
  return offset + byteLength                                                                                           // 1279
}                                                                                                                      // 1280
                                                                                                                       // 1281
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 1282
  value = +value                                                                                                       // 1283
  offset = offset | 0                                                                                                  // 1284
  byteLength = byteLength | 0                                                                                          // 1285
  if (!noAssert) {                                                                                                     // 1286
    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1287
    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1288
  }                                                                                                                    // 1289
                                                                                                                       // 1290
  var i = byteLength - 1                                                                                               // 1291
  var mul = 1                                                                                                          // 1292
  this[offset + i] = value & 0xFF                                                                                      // 1293
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1294
    this[offset + i] = (value / mul) & 0xFF                                                                            // 1295
  }                                                                                                                    // 1296
                                                                                                                       // 1297
  return offset + byteLength                                                                                           // 1298
}                                                                                                                      // 1299
                                                                                                                       // 1300
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 1301
  value = +value                                                                                                       // 1302
  offset = offset | 0                                                                                                  // 1303
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 1304
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1305
  this[offset] = (value & 0xff)                                                                                        // 1306
  return offset + 1                                                                                                    // 1307
}                                                                                                                      // 1308
                                                                                                                       // 1309
function objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 1310
  if (value < 0) value = 0xffff + value + 1                                                                            // 1311
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {                                                  // 1312
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 1313
      (littleEndian ? i : 1 - i) * 8                                                                                   // 1314
  }                                                                                                                    // 1315
}                                                                                                                      // 1316
                                                                                                                       // 1317
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 1318
  value = +value                                                                                                       // 1319
  offset = offset | 0                                                                                                  // 1320
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1321
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1322
    this[offset] = (value & 0xff)                                                                                      // 1323
    this[offset + 1] = (value >>> 8)                                                                                   // 1324
  } else {                                                                                                             // 1325
    objectWriteUInt16(this, value, offset, true)                                                                       // 1326
  }                                                                                                                    // 1327
  return offset + 2                                                                                                    // 1328
}                                                                                                                      // 1329
                                                                                                                       // 1330
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 1331
  value = +value                                                                                                       // 1332
  offset = offset | 0                                                                                                  // 1333
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1334
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1335
    this[offset] = (value >>> 8)                                                                                       // 1336
    this[offset + 1] = (value & 0xff)                                                                                  // 1337
  } else {                                                                                                             // 1338
    objectWriteUInt16(this, value, offset, false)                                                                      // 1339
  }                                                                                                                    // 1340
  return offset + 2                                                                                                    // 1341
}                                                                                                                      // 1342
                                                                                                                       // 1343
function objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 1344
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1345
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {                                                  // 1346
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 1347
  }                                                                                                                    // 1348
}                                                                                                                      // 1349
                                                                                                                       // 1350
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 1351
  value = +value                                                                                                       // 1352
  offset = offset | 0                                                                                                  // 1353
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1354
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1355
    this[offset + 3] = (value >>> 24)                                                                                  // 1356
    this[offset + 2] = (value >>> 16)                                                                                  // 1357
    this[offset + 1] = (value >>> 8)                                                                                   // 1358
    this[offset] = (value & 0xff)                                                                                      // 1359
  } else {                                                                                                             // 1360
    objectWriteUInt32(this, value, offset, true)                                                                       // 1361
  }                                                                                                                    // 1362
  return offset + 4                                                                                                    // 1363
}                                                                                                                      // 1364
                                                                                                                       // 1365
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 1366
  value = +value                                                                                                       // 1367
  offset = offset | 0                                                                                                  // 1368
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1369
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1370
    this[offset] = (value >>> 24)                                                                                      // 1371
    this[offset + 1] = (value >>> 16)                                                                                  // 1372
    this[offset + 2] = (value >>> 8)                                                                                   // 1373
    this[offset + 3] = (value & 0xff)                                                                                  // 1374
  } else {                                                                                                             // 1375
    objectWriteUInt32(this, value, offset, false)                                                                      // 1376
  }                                                                                                                    // 1377
  return offset + 4                                                                                                    // 1378
}                                                                                                                      // 1379
                                                                                                                       // 1380
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 1381
  value = +value                                                                                                       // 1382
  offset = offset | 0                                                                                                  // 1383
  if (!noAssert) {                                                                                                     // 1384
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1385
                                                                                                                       // 1386
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1387
  }                                                                                                                    // 1388
                                                                                                                       // 1389
  var i = 0                                                                                                            // 1390
  var mul = 1                                                                                                          // 1391
  var sub = 0                                                                                                          // 1392
  this[offset] = value & 0xFF                                                                                          // 1393
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1394
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {                                                        // 1395
      sub = 1                                                                                                          // 1396
    }                                                                                                                  // 1397
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1398
  }                                                                                                                    // 1399
                                                                                                                       // 1400
  return offset + byteLength                                                                                           // 1401
}                                                                                                                      // 1402
                                                                                                                       // 1403
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 1404
  value = +value                                                                                                       // 1405
  offset = offset | 0                                                                                                  // 1406
  if (!noAssert) {                                                                                                     // 1407
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1408
                                                                                                                       // 1409
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1410
  }                                                                                                                    // 1411
                                                                                                                       // 1412
  var i = byteLength - 1                                                                                               // 1413
  var mul = 1                                                                                                          // 1414
  var sub = 0                                                                                                          // 1415
  this[offset + i] = value & 0xFF                                                                                      // 1416
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1417
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {                                                        // 1418
      sub = 1                                                                                                          // 1419
    }                                                                                                                  // 1420
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1421
  }                                                                                                                    // 1422
                                                                                                                       // 1423
  return offset + byteLength                                                                                           // 1424
}                                                                                                                      // 1425
                                                                                                                       // 1426
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 1427
  value = +value                                                                                                       // 1428
  offset = offset | 0                                                                                                  // 1429
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 1430
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1431
  if (value < 0) value = 0xff + value + 1                                                                              // 1432
  this[offset] = (value & 0xff)                                                                                        // 1433
  return offset + 1                                                                                                    // 1434
}                                                                                                                      // 1435
                                                                                                                       // 1436
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 1437
  value = +value                                                                                                       // 1438
  offset = offset | 0                                                                                                  // 1439
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1440
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1441
    this[offset] = (value & 0xff)                                                                                      // 1442
    this[offset + 1] = (value >>> 8)                                                                                   // 1443
  } else {                                                                                                             // 1444
    objectWriteUInt16(this, value, offset, true)                                                                       // 1445
  }                                                                                                                    // 1446
  return offset + 2                                                                                                    // 1447
}                                                                                                                      // 1448
                                                                                                                       // 1449
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 1450
  value = +value                                                                                                       // 1451
  offset = offset | 0                                                                                                  // 1452
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1453
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1454
    this[offset] = (value >>> 8)                                                                                       // 1455
    this[offset + 1] = (value & 0xff)                                                                                  // 1456
  } else {                                                                                                             // 1457
    objectWriteUInt16(this, value, offset, false)                                                                      // 1458
  }                                                                                                                    // 1459
  return offset + 2                                                                                                    // 1460
}                                                                                                                      // 1461
                                                                                                                       // 1462
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 1463
  value = +value                                                                                                       // 1464
  offset = offset | 0                                                                                                  // 1465
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1466
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1467
    this[offset] = (value & 0xff)                                                                                      // 1468
    this[offset + 1] = (value >>> 8)                                                                                   // 1469
    this[offset + 2] = (value >>> 16)                                                                                  // 1470
    this[offset + 3] = (value >>> 24)                                                                                  // 1471
  } else {                                                                                                             // 1472
    objectWriteUInt32(this, value, offset, true)                                                                       // 1473
  }                                                                                                                    // 1474
  return offset + 4                                                                                                    // 1475
}                                                                                                                      // 1476
                                                                                                                       // 1477
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 1478
  value = +value                                                                                                       // 1479
  offset = offset | 0                                                                                                  // 1480
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1481
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1482
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1483
    this[offset] = (value >>> 24)                                                                                      // 1484
    this[offset + 1] = (value >>> 16)                                                                                  // 1485
    this[offset + 2] = (value >>> 8)                                                                                   // 1486
    this[offset + 3] = (value & 0xff)                                                                                  // 1487
  } else {                                                                                                             // 1488
    objectWriteUInt32(this, value, offset, false)                                                                      // 1489
  }                                                                                                                    // 1490
  return offset + 4                                                                                                    // 1491
}                                                                                                                      // 1492
                                                                                                                       // 1493
function checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 1494
  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1495
  if (offset < 0) throw new RangeError('Index out of range')                                                           // 1496
}                                                                                                                      // 1497
                                                                                                                       // 1498
function writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 1499
  if (!noAssert) {                                                                                                     // 1500
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 1501
  }                                                                                                                    // 1502
  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 1503
  return offset + 4                                                                                                    // 1504
}                                                                                                                      // 1505
                                                                                                                       // 1506
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 1507
  return writeFloat(this, value, offset, true, noAssert)                                                               // 1508
}                                                                                                                      // 1509
                                                                                                                       // 1510
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 1511
  return writeFloat(this, value, offset, false, noAssert)                                                              // 1512
}                                                                                                                      // 1513
                                                                                                                       // 1514
function writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 1515
  if (!noAssert) {                                                                                                     // 1516
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 1517
  }                                                                                                                    // 1518
  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 1519
  return offset + 8                                                                                                    // 1520
}                                                                                                                      // 1521
                                                                                                                       // 1522
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 1523
  return writeDouble(this, value, offset, true, noAssert)                                                              // 1524
}                                                                                                                      // 1525
                                                                                                                       // 1526
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 1527
  return writeDouble(this, value, offset, false, noAssert)                                                             // 1528
}                                                                                                                      // 1529
                                                                                                                       // 1530
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 1531
Buffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 1532
  if (!start) start = 0                                                                                                // 1533
  if (!end && end !== 0) end = this.length                                                                             // 1534
  if (targetStart >= target.length) targetStart = target.length                                                        // 1535
  if (!targetStart) targetStart = 0                                                                                    // 1536
  if (end > 0 && end < start) end = start                                                                              // 1537
                                                                                                                       // 1538
  // Copy 0 bytes; we're done                                                                                          // 1539
  if (end === start) return 0                                                                                          // 1540
  if (target.length === 0 || this.length === 0) return 0                                                               // 1541
                                                                                                                       // 1542
  // Fatal error conditions                                                                                            // 1543
  if (targetStart < 0) {                                                                                               // 1544
    throw new RangeError('targetStart out of bounds')                                                                  // 1545
  }                                                                                                                    // 1546
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 1547
  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 1548
                                                                                                                       // 1549
  // Are we oob?                                                                                                       // 1550
  if (end > this.length) end = this.length                                                                             // 1551
  if (target.length - targetStart < end - start) {                                                                     // 1552
    end = target.length - targetStart + start                                                                          // 1553
  }                                                                                                                    // 1554
                                                                                                                       // 1555
  var len = end - start                                                                                                // 1556
  var i                                                                                                                // 1557
                                                                                                                       // 1558
  if (this === target && start < targetStart && targetStart < end) {                                                   // 1559
    // descending copy from end                                                                                        // 1560
    for (i = len - 1; i >= 0; --i) {                                                                                   // 1561
      target[i + targetStart] = this[i + start]                                                                        // 1562
    }                                                                                                                  // 1563
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 1564
    // ascending copy from start                                                                                       // 1565
    for (i = 0; i < len; ++i) {                                                                                        // 1566
      target[i + targetStart] = this[i + start]                                                                        // 1567
    }                                                                                                                  // 1568
  } else {                                                                                                             // 1569
    Uint8Array.prototype.set.call(                                                                                     // 1570
      target,                                                                                                          // 1571
      this.subarray(start, start + len),                                                                               // 1572
      targetStart                                                                                                      // 1573
    )                                                                                                                  // 1574
  }                                                                                                                    // 1575
                                                                                                                       // 1576
  return len                                                                                                           // 1577
}                                                                                                                      // 1578
                                                                                                                       // 1579
// Usage:                                                                                                              // 1580
//    buffer.fill(number[, offset[, end]])                                                                             // 1581
//    buffer.fill(buffer[, offset[, end]])                                                                             // 1582
//    buffer.fill(string[, offset[, end]][, encoding])                                                                 // 1583
Buffer.prototype.fill = function fill (val, start, end, encoding) {                                                    // 1584
  // Handle string cases:                                                                                              // 1585
  if (typeof val === 'string') {                                                                                       // 1586
    if (typeof start === 'string') {                                                                                   // 1587
      encoding = start                                                                                                 // 1588
      start = 0                                                                                                        // 1589
      end = this.length                                                                                                // 1590
    } else if (typeof end === 'string') {                                                                              // 1591
      encoding = end                                                                                                   // 1592
      end = this.length                                                                                                // 1593
    }                                                                                                                  // 1594
    if (val.length === 1) {                                                                                            // 1595
      var code = val.charCodeAt(0)                                                                                     // 1596
      if (code < 256) {                                                                                                // 1597
        val = code                                                                                                     // 1598
      }                                                                                                                // 1599
    }                                                                                                                  // 1600
    if (encoding !== undefined && typeof encoding !== 'string') {                                                      // 1601
      throw new TypeError('encoding must be a string')                                                                 // 1602
    }                                                                                                                  // 1603
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {                                                // 1604
      throw new TypeError('Unknown encoding: ' + encoding)                                                             // 1605
    }                                                                                                                  // 1606
  } else if (typeof val === 'number') {                                                                                // 1607
    val = val & 255                                                                                                    // 1608
  }                                                                                                                    // 1609
                                                                                                                       // 1610
  // Invalid ranges are not set to a default, so can range check early.                                                // 1611
  if (start < 0 || this.length < start || this.length < end) {                                                         // 1612
    throw new RangeError('Out of range index')                                                                         // 1613
  }                                                                                                                    // 1614
                                                                                                                       // 1615
  if (end <= start) {                                                                                                  // 1616
    return this                                                                                                        // 1617
  }                                                                                                                    // 1618
                                                                                                                       // 1619
  start = start >>> 0                                                                                                  // 1620
  end = end === undefined ? this.length : end >>> 0                                                                    // 1621
                                                                                                                       // 1622
  if (!val) val = 0                                                                                                    // 1623
                                                                                                                       // 1624
  var i                                                                                                                // 1625
  if (typeof val === 'number') {                                                                                       // 1626
    for (i = start; i < end; ++i) {                                                                                    // 1627
      this[i] = val                                                                                                    // 1628
    }                                                                                                                  // 1629
  } else {                                                                                                             // 1630
    var bytes = Buffer.isBuffer(val)                                                                                   // 1631
      ? val                                                                                                            // 1632
      : utf8ToBytes(new Buffer(val, encoding).toString())                                                              // 1633
    var len = bytes.length                                                                                             // 1634
    for (i = 0; i < end - start; ++i) {                                                                                // 1635
      this[i + start] = bytes[i % len]                                                                                 // 1636
    }                                                                                                                  // 1637
  }                                                                                                                    // 1638
                                                                                                                       // 1639
  return this                                                                                                          // 1640
}                                                                                                                      // 1641
                                                                                                                       // 1642
// HELPER FUNCTIONS                                                                                                    // 1643
// ================                                                                                                    // 1644
                                                                                                                       // 1645
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g                                                                           // 1646
                                                                                                                       // 1647
function base64clean (str) {                                                                                           // 1648
  // Node strips out invalid characters like \n and \t from the string, base64-js does not                             // 1649
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 1650
  // Node converts strings with length < 2 to ''                                                                       // 1651
  if (str.length < 2) return ''                                                                                        // 1652
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 1653
  while (str.length % 4 !== 0) {                                                                                       // 1654
    str = str + '='                                                                                                    // 1655
  }                                                                                                                    // 1656
  return str                                                                                                           // 1657
}                                                                                                                      // 1658
                                                                                                                       // 1659
function stringtrim (str) {                                                                                            // 1660
  if (str.trim) return str.trim()                                                                                      // 1661
  return str.replace(/^\s+|\s+$/g, '')                                                                                 // 1662
}                                                                                                                      // 1663
                                                                                                                       // 1664
function toHex (n) {                                                                                                   // 1665
  if (n < 16) return '0' + n.toString(16)                                                                              // 1666
  return n.toString(16)                                                                                                // 1667
}                                                                                                                      // 1668
                                                                                                                       // 1669
function utf8ToBytes (string, units) {                                                                                 // 1670
  units = units || Infinity                                                                                            // 1671
  var codePoint                                                                                                        // 1672
  var length = string.length                                                                                           // 1673
  var leadSurrogate = null                                                                                             // 1674
  var bytes = []                                                                                                       // 1675
                                                                                                                       // 1676
  for (var i = 0; i < length; ++i) {                                                                                   // 1677
    codePoint = string.charCodeAt(i)                                                                                   // 1678
                                                                                                                       // 1679
    // is surrogate component                                                                                          // 1680
    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 1681
      // last char was a lead                                                                                          // 1682
      if (!leadSurrogate) {                                                                                            // 1683
        // no lead yet                                                                                                 // 1684
        if (codePoint > 0xDBFF) {                                                                                      // 1685
          // unexpected trail                                                                                          // 1686
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1687
          continue                                                                                                     // 1688
        } else if (i + 1 === length) {                                                                                 // 1689
          // unpaired lead                                                                                             // 1690
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1691
          continue                                                                                                     // 1692
        }                                                                                                              // 1693
                                                                                                                       // 1694
        // valid lead                                                                                                  // 1695
        leadSurrogate = codePoint                                                                                      // 1696
                                                                                                                       // 1697
        continue                                                                                                       // 1698
      }                                                                                                                // 1699
                                                                                                                       // 1700
      // 2 leads in a row                                                                                              // 1701
      if (codePoint < 0xDC00) {                                                                                        // 1702
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 1703
        leadSurrogate = codePoint                                                                                      // 1704
        continue                                                                                                       // 1705
      }                                                                                                                // 1706
                                                                                                                       // 1707
      // valid surrogate pair                                                                                          // 1708
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                        // 1709
    } else if (leadSurrogate) {                                                                                        // 1710
      // valid bmp char, but last char was a lead                                                                      // 1711
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 1712
    }                                                                                                                  // 1713
                                                                                                                       // 1714
    leadSurrogate = null                                                                                               // 1715
                                                                                                                       // 1716
    // encode utf8                                                                                                     // 1717
    if (codePoint < 0x80) {                                                                                            // 1718
      if ((units -= 1) < 0) break                                                                                      // 1719
      bytes.push(codePoint)                                                                                            // 1720
    } else if (codePoint < 0x800) {                                                                                    // 1721
      if ((units -= 2) < 0) break                                                                                      // 1722
      bytes.push(                                                                                                      // 1723
        codePoint >> 0x6 | 0xC0,                                                                                       // 1724
        codePoint & 0x3F | 0x80                                                                                        // 1725
      )                                                                                                                // 1726
    } else if (codePoint < 0x10000) {                                                                                  // 1727
      if ((units -= 3) < 0) break                                                                                      // 1728
      bytes.push(                                                                                                      // 1729
        codePoint >> 0xC | 0xE0,                                                                                       // 1730
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1731
        codePoint & 0x3F | 0x80                                                                                        // 1732
      )                                                                                                                // 1733
    } else if (codePoint < 0x110000) {                                                                                 // 1734
      if ((units -= 4) < 0) break                                                                                      // 1735
      bytes.push(                                                                                                      // 1736
        codePoint >> 0x12 | 0xF0,                                                                                      // 1737
        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 1738
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1739
        codePoint & 0x3F | 0x80                                                                                        // 1740
      )                                                                                                                // 1741
    } else {                                                                                                           // 1742
      throw new Error('Invalid code point')                                                                            // 1743
    }                                                                                                                  // 1744
  }                                                                                                                    // 1745
                                                                                                                       // 1746
  return bytes                                                                                                         // 1747
}                                                                                                                      // 1748
                                                                                                                       // 1749
function asciiToBytes (str) {                                                                                          // 1750
  var byteArray = []                                                                                                   // 1751
  for (var i = 0; i < str.length; ++i) {                                                                               // 1752
    // Node's code seems to be doing this and not & 0x7F..                                                             // 1753
    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 1754
  }                                                                                                                    // 1755
  return byteArray                                                                                                     // 1756
}                                                                                                                      // 1757
                                                                                                                       // 1758
function utf16leToBytes (str, units) {                                                                                 // 1759
  var c, hi, lo                                                                                                        // 1760
  var byteArray = []                                                                                                   // 1761
  for (var i = 0; i < str.length; ++i) {                                                                               // 1762
    if ((units -= 2) < 0) break                                                                                        // 1763
                                                                                                                       // 1764
    c = str.charCodeAt(i)                                                                                              // 1765
    hi = c >> 8                                                                                                        // 1766
    lo = c % 256                                                                                                       // 1767
    byteArray.push(lo)                                                                                                 // 1768
    byteArray.push(hi)                                                                                                 // 1769
  }                                                                                                                    // 1770
                                                                                                                       // 1771
  return byteArray                                                                                                     // 1772
}                                                                                                                      // 1773
                                                                                                                       // 1774
function base64ToBytes (str) {                                                                                         // 1775
  return base64.toByteArray(base64clean(str))                                                                          // 1776
}                                                                                                                      // 1777
                                                                                                                       // 1778
function blitBuffer (src, dst, offset, length) {                                                                       // 1779
  for (var i = 0; i < length; ++i) {                                                                                   // 1780
    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 1781
    dst[i + offset] = src[i]                                                                                           // 1782
  }                                                                                                                    // 1783
  return i                                                                                                             // 1784
}                                                                                                                      // 1785
                                                                                                                       // 1786
function isnan (val) {                                                                                                 // 1787
  return val !== val // eslint-disable-line no-self-compare                                                            // 1788
}                                                                                                                      // 1789
                                                                                                                       // 1790
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"base64-js":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/base64-js/package.json                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "base64-js";                                                                                            // 1
exports.version = "1.2.0";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/base64-js/index.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict'                                                                                                           // 1
                                                                                                                       // 2
exports.byteLength = byteLength                                                                                        // 3
exports.toByteArray = toByteArray                                                                                      // 4
exports.fromByteArray = fromByteArray                                                                                  // 5
                                                                                                                       // 6
var lookup = []                                                                                                        // 7
var revLookup = []                                                                                                     // 8
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                                       // 9
                                                                                                                       // 10
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                          // 11
for (var i = 0, len = code.length; i < len; ++i) {                                                                     // 12
  lookup[i] = code[i]                                                                                                  // 13
  revLookup[code.charCodeAt(i)] = i                                                                                    // 14
}                                                                                                                      // 15
                                                                                                                       // 16
revLookup['-'.charCodeAt(0)] = 62                                                                                      // 17
revLookup['_'.charCodeAt(0)] = 63                                                                                      // 18
                                                                                                                       // 19
function placeHoldersCount (b64) {                                                                                     // 20
  var len = b64.length                                                                                                 // 21
  if (len % 4 > 0) {                                                                                                   // 22
    throw new Error('Invalid string. Length must be a multiple of 4')                                                  // 23
  }                                                                                                                    // 24
                                                                                                                       // 25
  // the number of equal signs (place holders)                                                                         // 26
  // if there are two placeholders, than the two characters before it                                                  // 27
  // represent one byte                                                                                                // 28
  // if there is only one, then the three characters before it represent 2 bytes                                       // 29
  // this is just a cheap hack to not do indexOf twice                                                                 // 30
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                                       // 31
}                                                                                                                      // 32
                                                                                                                       // 33
function byteLength (b64) {                                                                                            // 34
  // base64 is 4/3 + up to two characters of the original data                                                         // 35
  return b64.length * 3 / 4 - placeHoldersCount(b64)                                                                   // 36
}                                                                                                                      // 37
                                                                                                                       // 38
function toByteArray (b64) {                                                                                           // 39
  var i, j, l, tmp, placeHolders, arr                                                                                  // 40
  var len = b64.length                                                                                                 // 41
  placeHolders = placeHoldersCount(b64)                                                                                // 42
                                                                                                                       // 43
  arr = new Arr(len * 3 / 4 - placeHolders)                                                                            // 44
                                                                                                                       // 45
  // if there are placeholders, only get up to the last complete 4 chars                                               // 46
  l = placeHolders > 0 ? len - 4 : len                                                                                 // 47
                                                                                                                       // 48
  var L = 0                                                                                                            // 49
                                                                                                                       // 50
  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 51
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF                                                                                      // 53
    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 54
    arr[L++] = tmp & 0xFF                                                                                              // 55
  }                                                                                                                    // 56
                                                                                                                       // 57
  if (placeHolders === 2) {                                                                                            // 58
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                                // 59
    arr[L++] = tmp & 0xFF                                                                                              // 60
  } else if (placeHolders === 1) {                                                                                     // 61
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 63
    arr[L++] = tmp & 0xFF                                                                                              // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  return arr                                                                                                           // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function tripletToBase64 (num) {                                                                                       // 70
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]            // 71
}                                                                                                                      // 72
                                                                                                                       // 73
function encodeChunk (uint8, start, end) {                                                                             // 74
  var tmp                                                                                                              // 75
  var output = []                                                                                                      // 76
  for (var i = start; i < end; i += 3) {                                                                               // 77
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 78
    output.push(tripletToBase64(tmp))                                                                                  // 79
  }                                                                                                                    // 80
  return output.join('')                                                                                               // 81
}                                                                                                                      // 82
                                                                                                                       // 83
function fromByteArray (uint8) {                                                                                       // 84
  var tmp                                                                                                              // 85
  var len = uint8.length                                                                                               // 86
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                                      // 87
  var output = ''                                                                                                      // 88
  var parts = []                                                                                                       // 89
  var maxChunkLength = 16383 // must be multiple of 3                                                                  // 90
                                                                                                                       // 91
  // go through the array every three bytes, we'll deal with trailing stuff later                                      // 92
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                            // 93
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))                       // 94
  }                                                                                                                    // 95
                                                                                                                       // 96
  // pad the end with zeros, but make sure to not forget the extra bytes                                               // 97
  if (extraBytes === 1) {                                                                                              // 98
    tmp = uint8[len - 1]                                                                                               // 99
    output += lookup[tmp >> 2]                                                                                         // 100
    output += lookup[(tmp << 4) & 0x3F]                                                                                // 101
    output += '=='                                                                                                     // 102
  } else if (extraBytes === 2) {                                                                                       // 103
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                                     // 104
    output += lookup[tmp >> 10]                                                                                        // 105
    output += lookup[(tmp >> 4) & 0x3F]                                                                                // 106
    output += lookup[(tmp << 2) & 0x3F]                                                                                // 107
    output += '='                                                                                                      // 108
  }                                                                                                                    // 109
                                                                                                                       // 110
  parts.push(output)                                                                                                   // 111
                                                                                                                       // 112
  return parts.join('')                                                                                                // 113
}                                                                                                                      // 114
                                                                                                                       // 115
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"ieee754":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/ieee754/package.json                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "ieee754";                                                                                              // 1
exports.version = "1.1.8";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/ieee754/index.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 1
  var e, m                                                                                                             // 2
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 3
  var eMax = (1 << eLen) - 1                                                                                           // 4
  var eBias = eMax >> 1                                                                                                // 5
  var nBits = -7                                                                                                       // 6
  var i = isLE ? (nBytes - 1) : 0                                                                                      // 7
  var d = isLE ? -1 : 1                                                                                                // 8
  var s = buffer[offset + i]                                                                                           // 9
                                                                                                                       // 10
  i += d                                                                                                               // 11
                                                                                                                       // 12
  e = s & ((1 << (-nBits)) - 1)                                                                                        // 13
  s >>= (-nBits)                                                                                                       // 14
  nBits += eLen                                                                                                        // 15
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 16
                                                                                                                       // 17
  m = e & ((1 << (-nBits)) - 1)                                                                                        // 18
  e >>= (-nBits)                                                                                                       // 19
  nBits += mLen                                                                                                        // 20
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 21
                                                                                                                       // 22
  if (e === 0) {                                                                                                       // 23
    e = 1 - eBias                                                                                                      // 24
  } else if (e === eMax) {                                                                                             // 25
    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 26
  } else {                                                                                                             // 27
    m = m + Math.pow(2, mLen)                                                                                          // 28
    e = e - eBias                                                                                                      // 29
  }                                                                                                                    // 30
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 31
}                                                                                                                      // 32
                                                                                                                       // 33
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 34
  var e, m, c                                                                                                          // 35
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 36
  var eMax = (1 << eLen) - 1                                                                                           // 37
  var eBias = eMax >> 1                                                                                                // 38
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 39
  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 40
  var d = isLE ? 1 : -1                                                                                                // 41
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 42
                                                                                                                       // 43
  value = Math.abs(value)                                                                                              // 44
                                                                                                                       // 45
  if (isNaN(value) || value === Infinity) {                                                                            // 46
    m = isNaN(value) ? 1 : 0                                                                                           // 47
    e = eMax                                                                                                           // 48
  } else {                                                                                                             // 49
    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 50
    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 51
      e--                                                                                                              // 52
      c *= 2                                                                                                           // 53
    }                                                                                                                  // 54
    if (e + eBias >= 1) {                                                                                              // 55
      value += rt / c                                                                                                  // 56
    } else {                                                                                                           // 57
      value += rt * Math.pow(2, 1 - eBias)                                                                             // 58
    }                                                                                                                  // 59
    if (value * c >= 2) {                                                                                              // 60
      e++                                                                                                              // 61
      c /= 2                                                                                                           // 62
    }                                                                                                                  // 63
                                                                                                                       // 64
    if (e + eBias >= eMax) {                                                                                           // 65
      m = 0                                                                                                            // 66
      e = eMax                                                                                                         // 67
    } else if (e + eBias >= 1) {                                                                                       // 68
      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 69
      e = e + eBias                                                                                                    // 70
    } else {                                                                                                           // 71
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 72
      e = 0                                                                                                            // 73
    }                                                                                                                  // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 77
                                                                                                                       // 78
  e = (e << mLen) | m                                                                                                  // 79
  eLen += mLen                                                                                                         // 80
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 81
                                                                                                                       // 82
  buffer[offset + i - d] |= s * 128                                                                                    // 83
}                                                                                                                      // 84
                                                                                                                       // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"isarray":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/isarray/package.json                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "isarray";                                                                                              // 1
exports.version = "1.0.0";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/isarray/index.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = Array.isArray || function (arr) {                                                                     // 3
  return toString.call(arr) == '[object Array]';                                                                       // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"process":{"browser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// shim for using process in browser                                                                                   // 1
var process = module.exports = {};                                                                                     // 2
                                                                                                                       // 3
// cached from whatever global is present so that test runners that stub it                                            // 4
// don't break things.  But we need to wrap it in a try catch in case it is                                            // 5
// wrapped in strict mode code which doesn't define any globals.  It's inside a                                        // 6
// function because try/catches deoptimize in certain engines.                                                         // 7
                                                                                                                       // 8
var cachedSetTimeout;                                                                                                  // 9
var cachedClearTimeout;                                                                                                // 10
                                                                                                                       // 11
function defaultSetTimout() {                                                                                          // 12
    throw new Error('setTimeout has not been defined');                                                                // 13
}                                                                                                                      // 14
function defaultClearTimeout () {                                                                                      // 15
    throw new Error('clearTimeout has not been defined');                                                              // 16
}                                                                                                                      // 17
(function () {                                                                                                         // 18
    try {                                                                                                              // 19
        if (typeof setTimeout === 'function') {                                                                        // 20
            cachedSetTimeout = setTimeout;                                                                             // 21
        } else {                                                                                                       // 22
            cachedSetTimeout = defaultSetTimout;                                                                       // 23
        }                                                                                                              // 24
    } catch (e) {                                                                                                      // 25
        cachedSetTimeout = defaultSetTimout;                                                                           // 26
    }                                                                                                                  // 27
    try {                                                                                                              // 28
        if (typeof clearTimeout === 'function') {                                                                      // 29
            cachedClearTimeout = clearTimeout;                                                                         // 30
        } else {                                                                                                       // 31
            cachedClearTimeout = defaultClearTimeout;                                                                  // 32
        }                                                                                                              // 33
    } catch (e) {                                                                                                      // 34
        cachedClearTimeout = defaultClearTimeout;                                                                      // 35
    }                                                                                                                  // 36
} ())                                                                                                                  // 37
function runTimeout(fun) {                                                                                             // 38
    if (cachedSetTimeout === setTimeout) {                                                                             // 39
        //normal enviroments in sane situations                                                                        // 40
        return setTimeout(fun, 0);                                                                                     // 41
    }                                                                                                                  // 42
    // if setTimeout wasn't available but was latter defined                                                           // 43
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {                                  // 44
        cachedSetTimeout = setTimeout;                                                                                 // 45
        return setTimeout(fun, 0);                                                                                     // 46
    }                                                                                                                  // 47
    try {                                                                                                              // 48
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 49
        return cachedSetTimeout(fun, 0);                                                                               // 50
    } catch(e){                                                                                                        // 51
        try {                                                                                                          // 52
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);                                                                // 54
        } catch(e){                                                                                                    // 55
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);                                                                // 57
        }                                                                                                              // 58
    }                                                                                                                  // 59
                                                                                                                       // 60
                                                                                                                       // 61
}                                                                                                                      // 62
function runClearTimeout(marker) {                                                                                     // 63
    if (cachedClearTimeout === clearTimeout) {                                                                         // 64
        //normal enviroments in sane situations                                                                        // 65
        return clearTimeout(marker);                                                                                   // 66
    }                                                                                                                  // 67
    // if clearTimeout wasn't available but was latter defined                                                         // 68
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {                         // 69
        cachedClearTimeout = clearTimeout;                                                                             // 70
        return clearTimeout(marker);                                                                                   // 71
    }                                                                                                                  // 72
    try {                                                                                                              // 73
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 74
        return cachedClearTimeout(marker);                                                                             // 75
    } catch (e){                                                                                                       // 76
        try {                                                                                                          // 77
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);                                                              // 79
        } catch (e){                                                                                                   // 80
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout                               // 82
            return cachedClearTimeout.call(this, marker);                                                              // 83
        }                                                                                                              // 84
    }                                                                                                                  // 85
                                                                                                                       // 86
                                                                                                                       // 87
                                                                                                                       // 88
}                                                                                                                      // 89
var queue = [];                                                                                                        // 90
var draining = false;                                                                                                  // 91
var currentQueue;                                                                                                      // 92
var queueIndex = -1;                                                                                                   // 93
                                                                                                                       // 94
function cleanUpNextTick() {                                                                                           // 95
    if (!draining || !currentQueue) {                                                                                  // 96
        return;                                                                                                        // 97
    }                                                                                                                  // 98
    draining = false;                                                                                                  // 99
    if (currentQueue.length) {                                                                                         // 100
        queue = currentQueue.concat(queue);                                                                            // 101
    } else {                                                                                                           // 102
        queueIndex = -1;                                                                                               // 103
    }                                                                                                                  // 104
    if (queue.length) {                                                                                                // 105
        drainQueue();                                                                                                  // 106
    }                                                                                                                  // 107
}                                                                                                                      // 108
                                                                                                                       // 109
function drainQueue() {                                                                                                // 110
    if (draining) {                                                                                                    // 111
        return;                                                                                                        // 112
    }                                                                                                                  // 113
    var timeout = runTimeout(cleanUpNextTick);                                                                         // 114
    draining = true;                                                                                                   // 115
                                                                                                                       // 116
    var len = queue.length;                                                                                            // 117
    while(len) {                                                                                                       // 118
        currentQueue = queue;                                                                                          // 119
        queue = [];                                                                                                    // 120
        while (++queueIndex < len) {                                                                                   // 121
            if (currentQueue) {                                                                                        // 122
                currentQueue[queueIndex].run();                                                                        // 123
            }                                                                                                          // 124
        }                                                                                                              // 125
        queueIndex = -1;                                                                                               // 126
        len = queue.length;                                                                                            // 127
    }                                                                                                                  // 128
    currentQueue = null;                                                                                               // 129
    draining = false;                                                                                                  // 130
    runClearTimeout(timeout);                                                                                          // 131
}                                                                                                                      // 132
                                                                                                                       // 133
process.nextTick = function (fun) {                                                                                    // 134
    var args = new Array(arguments.length - 1);                                                                        // 135
    if (arguments.length > 1) {                                                                                        // 136
        for (var i = 1; i < arguments.length; i++) {                                                                   // 137
            args[i - 1] = arguments[i];                                                                                // 138
        }                                                                                                              // 139
    }                                                                                                                  // 140
    queue.push(new Item(fun, args));                                                                                   // 141
    if (queue.length === 1 && !draining) {                                                                             // 142
        runTimeout(drainQueue);                                                                                        // 143
    }                                                                                                                  // 144
};                                                                                                                     // 145
                                                                                                                       // 146
// v8 likes predictible objects                                                                                        // 147
function Item(fun, array) {                                                                                            // 148
    this.fun = fun;                                                                                                    // 149
    this.array = array;                                                                                                // 150
}                                                                                                                      // 151
Item.prototype.run = function () {                                                                                     // 152
    this.fun.apply(null, this.array);                                                                                  // 153
};                                                                                                                     // 154
process.title = 'browser';                                                                                             // 155
process.browser = true;                                                                                                // 156
process.env = {};                                                                                                      // 157
process.argv = [];                                                                                                     // 158
process.version = ''; // empty string to avoid regexp issues                                                           // 159
process.versions = {};                                                                                                 // 160
                                                                                                                       // 161
function noop() {}                                                                                                     // 162
                                                                                                                       // 163
process.on = noop;                                                                                                     // 164
process.addListener = noop;                                                                                            // 165
process.once = noop;                                                                                                   // 166
process.off = noop;                                                                                                    // 167
process.removeListener = noop;                                                                                         // 168
process.removeAllListeners = noop;                                                                                     // 169
process.emit = noop;                                                                                                   // 170
                                                                                                                       // 171
process.binding = function (name) {                                                                                    // 172
    throw new Error('process.binding is not supported');                                                               // 173
};                                                                                                                     // 174
                                                                                                                       // 175
process.cwd = function () { return '/' };                                                                              // 176
process.chdir = function (dir) {                                                                                       // 177
    throw new Error('process.chdir is not supported');                                                                 // 178
};                                                                                                                     // 179
process.umask = function() { return 0; };                                                                              // 180
                                                                                                                       // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"domain-browser":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "domain-browser";                                                                                       // 1
exports.version = "1.1.7";                                                                                             // 2
exports.main = "./index.js";                                                                                           // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["events",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This file should be ES5 compatible                                                                                  // 1
/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2
'use strict'                                                                                                           // 3
module.exports = (function () {                                                                                        // 4
	// Import Events                                                                                                      // 5
	var events = require('events')                                                                                        // 6
                                                                                                                       // 7
	// Export Domain                                                                                                      // 8
	var domain = {}                                                                                                       // 9
	domain.createDomain = domain.create = function () {                                                                   // 10
		var d = new events.EventEmitter()                                                                                    // 11
                                                                                                                       // 12
		function emitError (e) {                                                                                             // 13
			d.emit('error', e)                                                                                                  // 14
		}                                                                                                                    // 15
                                                                                                                       // 16
		d.add = function (emitter) {                                                                                         // 17
			emitter.on('error', emitError)                                                                                      // 18
		}                                                                                                                    // 19
		d.remove = function (emitter) {                                                                                      // 20
			emitter.removeListener('error', emitError)                                                                          // 21
		}                                                                                                                    // 22
		d.bind = function (fn) {                                                                                             // 23
			return function () {                                                                                                // 24
				var args = Array.prototype.slice.call(arguments)                                                                   // 25
				try {                                                                                                              // 26
					fn.apply(null, args)                                                                                              // 27
				}                                                                                                                  // 28
				catch (err) {                                                                                                      // 29
					emitError(err)                                                                                                    // 30
				}                                                                                                                  // 31
			}                                                                                                                   // 32
		}                                                                                                                    // 33
		d.intercept = function (fn) {                                                                                        // 34
			return function (err) {                                                                                             // 35
				if ( err ) {                                                                                                       // 36
					emitError(err)                                                                                                    // 37
				}                                                                                                                  // 38
				else {                                                                                                             // 39
					var args = Array.prototype.slice.call(arguments, 1)                                                               // 40
					try {                                                                                                             // 41
						fn.apply(null, args)                                                                                             // 42
					}                                                                                                                 // 43
					catch (err) {                                                                                                     // 44
						emitError(err)                                                                                                   // 45
					}                                                                                                                 // 46
				}                                                                                                                  // 47
			}                                                                                                                   // 48
		}                                                                                                                    // 49
		d.run = function (fn) {                                                                                              // 50
			try {                                                                                                               // 51
				fn()                                                                                                               // 52
			}                                                                                                                   // 53
			catch (err) {                                                                                                       // 54
				emitError(err)                                                                                                     // 55
			}                                                                                                                   // 56
			return this                                                                                                         // 57
		}                                                                                                                    // 58
		d.dispose = function () {                                                                                            // 59
			this.removeAllListeners()                                                                                           // 60
			return this                                                                                                         // 61
		}                                                                                                                    // 62
		d.enter = d.exit = function () {                                                                                     // 63
			return this                                                                                                         // 64
		}                                                                                                                    // 65
		return d                                                                                                             // 66
	}                                                                                                                     // 67
	return domain                                                                                                         // 68
}).call(this)                                                                                                          // 69
                                                                                                                       // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"events":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "events";                                                                                               // 1
exports.version = "1.1.1";                                                                                             // 2
exports.main = "./events.js";                                                                                          // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"events.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
function EventEmitter() {                                                                                              // 22
  this._events = this._events || {};                                                                                   // 23
  this._maxListeners = this._maxListeners || undefined;                                                                // 24
}                                                                                                                      // 25
module.exports = EventEmitter;                                                                                         // 26
                                                                                                                       // 27
// Backwards-compat with node 0.10.x                                                                                   // 28
EventEmitter.EventEmitter = EventEmitter;                                                                              // 29
                                                                                                                       // 30
EventEmitter.prototype._events = undefined;                                                                            // 31
EventEmitter.prototype._maxListeners = undefined;                                                                      // 32
                                                                                                                       // 33
// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34
// added to it. This is a useful default which helps finding memory leaks.                                             // 35
EventEmitter.defaultMaxListeners = 10;                                                                                 // 36
                                                                                                                       // 37
// Obviously not all Emitters should be limited to 10. This function allows                                            // 38
// that to be increased. Set to zero for unlimited.                                                                    // 39
EventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41
    throw TypeError('n must be a positive number');                                                                    // 42
  this._maxListeners = n;                                                                                              // 43
  return this;                                                                                                         // 44
};                                                                                                                     // 45
                                                                                                                       // 46
EventEmitter.prototype.emit = function(type) {                                                                         // 47
  var er, handler, len, args, i, listeners;                                                                            // 48
                                                                                                                       // 49
  if (!this._events)                                                                                                   // 50
    this._events = {};                                                                                                 // 51
                                                                                                                       // 52
  // If there is no 'error' event listener then throw.                                                                 // 53
  if (type === 'error') {                                                                                              // 54
    if (!this._events.error ||                                                                                         // 55
        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56
      er = arguments[1];                                                                                               // 57
      if (er instanceof Error) {                                                                                       // 58
        throw er; // Unhandled 'error' event                                                                           // 59
      } else {                                                                                                         // 60
        // At least give some kind of context to the user                                                              // 61
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');                                      // 62
        err.context = er;                                                                                              // 63
        throw err;                                                                                                     // 64
      }                                                                                                                // 65
    }                                                                                                                  // 66
  }                                                                                                                    // 67
                                                                                                                       // 68
  handler = this._events[type];                                                                                        // 69
                                                                                                                       // 70
  if (isUndefined(handler))                                                                                            // 71
    return false;                                                                                                      // 72
                                                                                                                       // 73
  if (isFunction(handler)) {                                                                                           // 74
    switch (arguments.length) {                                                                                        // 75
      // fast cases                                                                                                    // 76
      case 1:                                                                                                          // 77
        handler.call(this);                                                                                            // 78
        break;                                                                                                         // 79
      case 2:                                                                                                          // 80
        handler.call(this, arguments[1]);                                                                              // 81
        break;                                                                                                         // 82
      case 3:                                                                                                          // 83
        handler.call(this, arguments[1], arguments[2]);                                                                // 84
        break;                                                                                                         // 85
      // slower                                                                                                        // 86
      default:                                                                                                         // 87
        args = Array.prototype.slice.call(arguments, 1);                                                               // 88
        handler.apply(this, args);                                                                                     // 89
    }                                                                                                                  // 90
  } else if (isObject(handler)) {                                                                                      // 91
    args = Array.prototype.slice.call(arguments, 1);                                                                   // 92
    listeners = handler.slice();                                                                                       // 93
    len = listeners.length;                                                                                            // 94
    for (i = 0; i < len; i++)                                                                                          // 95
      listeners[i].apply(this, args);                                                                                  // 96
  }                                                                                                                    // 97
                                                                                                                       // 98
  return true;                                                                                                         // 99
};                                                                                                                     // 100
                                                                                                                       // 101
EventEmitter.prototype.addListener = function(type, listener) {                                                        // 102
  var m;                                                                                                               // 103
                                                                                                                       // 104
  if (!isFunction(listener))                                                                                           // 105
    throw TypeError('listener must be a function');                                                                    // 106
                                                                                                                       // 107
  if (!this._events)                                                                                                   // 108
    this._events = {};                                                                                                 // 109
                                                                                                                       // 110
  // To avoid recursion in the case that type === "newListener"! Before                                                // 111
  // adding it to the listeners, first emit "newListener".                                                             // 112
  if (this._events.newListener)                                                                                        // 113
    this.emit('newListener', type,                                                                                     // 114
              isFunction(listener.listener) ?                                                                          // 115
              listener.listener : listener);                                                                           // 116
                                                                                                                       // 117
  if (!this._events[type])                                                                                             // 118
    // Optimize the case of one listener. Don't need the extra array object.                                           // 119
    this._events[type] = listener;                                                                                     // 120
  else if (isObject(this._events[type]))                                                                               // 121
    // If we've already got an array, just append.                                                                     // 122
    this._events[type].push(listener);                                                                                 // 123
  else                                                                                                                 // 124
    // Adding the second element, need to change to array.                                                             // 125
    this._events[type] = [this._events[type], listener];                                                               // 126
                                                                                                                       // 127
  // Check for listener leak                                                                                           // 128
  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 129
    if (!isUndefined(this._maxListeners)) {                                                                            // 130
      m = this._maxListeners;                                                                                          // 131
    } else {                                                                                                           // 132
      m = EventEmitter.defaultMaxListeners;                                                                            // 133
    }                                                                                                                  // 134
                                                                                                                       // 135
    if (m && m > 0 && this._events[type].length > m) {                                                                 // 136
      this._events[type].warned = true;                                                                                // 137
      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 138
                    'leak detected. %d listeners added. ' +                                                            // 139
                    'Use emitter.setMaxListeners() to increase limit.',                                                // 140
                    this._events[type].length);                                                                        // 141
      if (typeof console.trace === 'function') {                                                                       // 142
        // not supported in IE 10                                                                                      // 143
        console.trace();                                                                                               // 144
      }                                                                                                                // 145
    }                                                                                                                  // 146
  }                                                                                                                    // 147
                                                                                                                       // 148
  return this;                                                                                                         // 149
};                                                                                                                     // 150
                                                                                                                       // 151
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 152
                                                                                                                       // 153
EventEmitter.prototype.once = function(type, listener) {                                                               // 154
  if (!isFunction(listener))                                                                                           // 155
    throw TypeError('listener must be a function');                                                                    // 156
                                                                                                                       // 157
  var fired = false;                                                                                                   // 158
                                                                                                                       // 159
  function g() {                                                                                                       // 160
    this.removeListener(type, g);                                                                                      // 161
                                                                                                                       // 162
    if (!fired) {                                                                                                      // 163
      fired = true;                                                                                                    // 164
      listener.apply(this, arguments);                                                                                 // 165
    }                                                                                                                  // 166
  }                                                                                                                    // 167
                                                                                                                       // 168
  g.listener = listener;                                                                                               // 169
  this.on(type, g);                                                                                                    // 170
                                                                                                                       // 171
  return this;                                                                                                         // 172
};                                                                                                                     // 173
                                                                                                                       // 174
// emits a 'removeListener' event iff the listener was removed                                                         // 175
EventEmitter.prototype.removeListener = function(type, listener) {                                                     // 176
  var list, position, length, i;                                                                                       // 177
                                                                                                                       // 178
  if (!isFunction(listener))                                                                                           // 179
    throw TypeError('listener must be a function');                                                                    // 180
                                                                                                                       // 181
  if (!this._events || !this._events[type])                                                                            // 182
    return this;                                                                                                       // 183
                                                                                                                       // 184
  list = this._events[type];                                                                                           // 185
  length = list.length;                                                                                                // 186
  position = -1;                                                                                                       // 187
                                                                                                                       // 188
  if (list === listener ||                                                                                             // 189
      (isFunction(list.listener) && list.listener === listener)) {                                                     // 190
    delete this._events[type];                                                                                         // 191
    if (this._events.removeListener)                                                                                   // 192
      this.emit('removeListener', type, listener);                                                                     // 193
                                                                                                                       // 194
  } else if (isObject(list)) {                                                                                         // 195
    for (i = length; i-- > 0;) {                                                                                       // 196
      if (list[i] === listener ||                                                                                      // 197
          (list[i].listener && list[i].listener === listener)) {                                                       // 198
        position = i;                                                                                                  // 199
        break;                                                                                                         // 200
      }                                                                                                                // 201
    }                                                                                                                  // 202
                                                                                                                       // 203
    if (position < 0)                                                                                                  // 204
      return this;                                                                                                     // 205
                                                                                                                       // 206
    if (list.length === 1) {                                                                                           // 207
      list.length = 0;                                                                                                 // 208
      delete this._events[type];                                                                                       // 209
    } else {                                                                                                           // 210
      list.splice(position, 1);                                                                                        // 211
    }                                                                                                                  // 212
                                                                                                                       // 213
    if (this._events.removeListener)                                                                                   // 214
      this.emit('removeListener', type, listener);                                                                     // 215
  }                                                                                                                    // 216
                                                                                                                       // 217
  return this;                                                                                                         // 218
};                                                                                                                     // 219
                                                                                                                       // 220
EventEmitter.prototype.removeAllListeners = function(type) {                                                           // 221
  var key, listeners;                                                                                                  // 222
                                                                                                                       // 223
  if (!this._events)                                                                                                   // 224
    return this;                                                                                                       // 225
                                                                                                                       // 226
  // not listening for removeListener, no need to emit                                                                 // 227
  if (!this._events.removeListener) {                                                                                  // 228
    if (arguments.length === 0)                                                                                        // 229
      this._events = {};                                                                                               // 230
    else if (this._events[type])                                                                                       // 231
      delete this._events[type];                                                                                       // 232
    return this;                                                                                                       // 233
  }                                                                                                                    // 234
                                                                                                                       // 235
  // emit removeListener for all listeners on all events                                                               // 236
  if (arguments.length === 0) {                                                                                        // 237
    for (key in this._events) {                                                                                        // 238
      if (key === 'removeListener') continue;                                                                          // 239
      this.removeAllListeners(key);                                                                                    // 240
    }                                                                                                                  // 241
    this.removeAllListeners('removeListener');                                                                         // 242
    this._events = {};                                                                                                 // 243
    return this;                                                                                                       // 244
  }                                                                                                                    // 245
                                                                                                                       // 246
  listeners = this._events[type];                                                                                      // 247
                                                                                                                       // 248
  if (isFunction(listeners)) {                                                                                         // 249
    this.removeListener(type, listeners);                                                                              // 250
  } else if (listeners) {                                                                                              // 251
    // LIFO order                                                                                                      // 252
    while (listeners.length)                                                                                           // 253
      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 254
  }                                                                                                                    // 255
  delete this._events[type];                                                                                           // 256
                                                                                                                       // 257
  return this;                                                                                                         // 258
};                                                                                                                     // 259
                                                                                                                       // 260
EventEmitter.prototype.listeners = function(type) {                                                                    // 261
  var ret;                                                                                                             // 262
  if (!this._events || !this._events[type])                                                                            // 263
    ret = [];                                                                                                          // 264
  else if (isFunction(this._events[type]))                                                                             // 265
    ret = [this._events[type]];                                                                                        // 266
  else                                                                                                                 // 267
    ret = this._events[type].slice();                                                                                  // 268
  return ret;                                                                                                          // 269
};                                                                                                                     // 270
                                                                                                                       // 271
EventEmitter.prototype.listenerCount = function(type) {                                                                // 272
  if (this._events) {                                                                                                  // 273
    var evlistener = this._events[type];                                                                               // 274
                                                                                                                       // 275
    if (isFunction(evlistener))                                                                                        // 276
      return 1;                                                                                                        // 277
    else if (evlistener)                                                                                               // 278
      return evlistener.length;                                                                                        // 279
  }                                                                                                                    // 280
  return 0;                                                                                                            // 281
};                                                                                                                     // 282
                                                                                                                       // 283
EventEmitter.listenerCount = function(emitter, type) {                                                                 // 284
  return emitter.listenerCount(type);                                                                                  // 285
};                                                                                                                     // 286
                                                                                                                       // 287
function isFunction(arg) {                                                                                             // 288
  return typeof arg === 'function';                                                                                    // 289
}                                                                                                                      // 290
                                                                                                                       // 291
function isNumber(arg) {                                                                                               // 292
  return typeof arg === 'number';                                                                                      // 293
}                                                                                                                      // 294
                                                                                                                       // 295
function isObject(arg) {                                                                                               // 296
  return typeof arg === 'object' && arg !== null;                                                                      // 297
}                                                                                                                      // 298
                                                                                                                       // 299
function isUndefined(arg) {                                                                                            // 300
  return arg === void 0;                                                                                               // 301
}                                                                                                                      // 302
                                                                                                                       // 303
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"babel-runtime":{"regenerator":{"index.js":["regenerator-runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/regenerator/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("regenerator-runtime");                                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"helpers":{"typeof.js":["../core-js/symbol/iterator","../core-js/symbol",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/typeof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _iterator = require("../core-js/symbol/iterator");                                                                 // 5
                                                                                                                       // 6
var _iterator2 = _interopRequireDefault(_iterator);                                                                    // 7
                                                                                                                       // 8
var _symbol = require("../core-js/symbol");                                                                            // 9
                                                                                                                       // 10
var _symbol2 = _interopRequireDefault(_symbol);                                                                        // 11
                                                                                                                       // 12
var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 14
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15
                                                                                                                       // 16
exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);                                                      // 18
} : function (obj) {                                                                                                   // 19
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"classCallCheck.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/classCallCheck.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
exports.default = function (instance, Constructor) {                                                                   // 5
  if (!(instance instanceof Constructor)) {                                                                            // 6
    throw new TypeError("Cannot call a class as a function");                                                          // 7
  }                                                                                                                    // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"possibleConstructorReturn.js":["../helpers/typeof",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/possibleConstructorReturn.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _typeof2 = require("../helpers/typeof");                                                                           // 5
                                                                                                                       // 6
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = function (self, call) {                                                                              // 11
  if (!self) {                                                                                                         // 12
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                             // 13
  }                                                                                                                    // 14
                                                                                                                       // 15
  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"inherits.js":["../core-js/object/set-prototype-of","../core-js/object/create","../helpers/typeof",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/inherits.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _setPrototypeOf = require("../core-js/object/set-prototype-of");                                                   // 5
                                                                                                                       // 6
var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);                                                        // 7
                                                                                                                       // 8
var _create = require("../core-js/object/create");                                                                     // 9
                                                                                                                       // 10
var _create2 = _interopRequireDefault(_create);                                                                        // 11
                                                                                                                       // 12
var _typeof2 = require("../helpers/typeof");                                                                           // 13
                                                                                                                       // 14
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 15
                                                                                                                       // 16
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 17
                                                                                                                       // 18
exports.default = function (subClass, superClass) {                                                                    // 19
  if (typeof superClass !== "function" && superClass !== null) {                                                       // 20
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }                                                                                                                    // 22
                                                                                                                       // 23
  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {                                     // 24
    constructor: {                                                                                                     // 25
      value: subClass,                                                                                                 // 26
      enumerable: false,                                                                                               // 27
      writable: true,                                                                                                  // 28
      configurable: true                                                                                               // 29
    }                                                                                                                  // 30
  });                                                                                                                  // 31
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};                                                                                                                     // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"core-js":{"symbol":{"iterator.js":["core-js/library/fn/symbol/iterator",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"symbol.js":["core-js/library/fn/symbol",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"object":{"set-prototype-of.js":["core-js/library/fn/object/set-prototype-of",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };               // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"create.js":["core-js/library/fn/object/create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}},"regenerator-runtime":{"package.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/package.json                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "regenerator-runtime";                                                                                  // 1
exports.version = "0.10.5";                                                                                            // 2
exports.main = "runtime-module.js";                                                                                    // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"runtime-module.js":["./runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime-module.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This method of obtaining a reference to the global object needs to be                                               // 1
// kept identical to the way it is obtained in runtime.js                                                              // 2
var g =                                                                                                                // 3
  typeof global === "object" ? global :                                                                                // 4
  typeof window === "object" ? window :                                                                                // 5
  typeof self === "object" ? self : this;                                                                              // 6
                                                                                                                       // 7
// Use `getOwnPropertyNames` because not all browsers support calling                                                  // 8
// `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 9
var hadRuntime = g.regeneratorRuntime &&                                                                               // 10
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;                                                    // 11
                                                                                                                       // 12
// Save the old regeneratorRuntime in case it needs to be restored later.                                              // 13
var oldRuntime = hadRuntime && g.regeneratorRuntime;                                                                   // 14
                                                                                                                       // 15
// Force reevalutation of runtime.js.                                                                                  // 16
g.regeneratorRuntime = undefined;                                                                                      // 17
                                                                                                                       // 18
module.exports = require("./runtime");                                                                                 // 19
                                                                                                                       // 20
if (hadRuntime) {                                                                                                      // 21
  // Restore the original runtime.                                                                                     // 22
  g.regeneratorRuntime = oldRuntime;                                                                                   // 23
} else {                                                                                                               // 24
  // Remove the global property added by runtime.js.                                                                   // 25
  try {                                                                                                                // 26
    delete g.regeneratorRuntime;                                                                                       // 27
  } catch(e) {                                                                                                         // 28
    g.regeneratorRuntime = undefined;                                                                                  // 29
  }                                                                                                                    // 30
}                                                                                                                      // 31
                                                                                                                       // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"runtime.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2014, Facebook, Inc.                                                                                  // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                                 // 6
 * additional grant of patent rights can be found in the PATENTS file in                                               // 7
 * the same directory.                                                                                                 // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
!(function(global) {                                                                                                   // 11
  "use strict";                                                                                                        // 12
                                                                                                                       // 13
  var Op = Object.prototype;                                                                                           // 14
  var hasOwn = Op.hasOwnProperty;                                                                                      // 15
  var undefined; // More compressible than void 0.                                                                     // 16
  var $Symbol = typeof Symbol === "function" ? Symbol : {};                                                            // 17
  var iteratorSymbol = $Symbol.iterator || "@@iterator";                                                               // 18
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";                                                // 19
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";                                                      // 20
                                                                                                                       // 21
  var inModule = typeof module === "object";                                                                           // 22
  var runtime = global.regeneratorRuntime;                                                                             // 23
  if (runtime) {                                                                                                       // 24
    if (inModule) {                                                                                                    // 25
      // If regeneratorRuntime is defined globally and we're in a module,                                              // 26
      // make the exports object identical to regeneratorRuntime.                                                      // 27
      module.exports = runtime;                                                                                        // 28
    }                                                                                                                  // 29
    // Don't bother evaluating the rest of this file if the runtime was                                                // 30
    // already defined globally.                                                                                       // 31
    return;                                                                                                            // 32
  }                                                                                                                    // 33
                                                                                                                       // 34
  // Define the runtime globally (as expected by generated code) as either                                             // 35
  // module.exports (if we're in a module) or a new, empty object.                                                     // 36
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                                // 37
                                                                                                                       // 38
  function wrap(innerFn, outerFn, self, tryLocsList) {                                                                 // 39
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 40
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;                      // 41
    var generator = Object.create(protoGenerator.prototype);                                                           // 42
    var context = new Context(tryLocsList || []);                                                                      // 43
                                                                                                                       // 44
    // The ._invoke method unifies the implementations of the .next,                                                   // 45
    // .throw, and .return methods.                                                                                    // 46
    generator._invoke = makeInvokeMethod(innerFn, self, context);                                                      // 47
                                                                                                                       // 48
    return generator;                                                                                                  // 49
  }                                                                                                                    // 50
  runtime.wrap = wrap;                                                                                                 // 51
                                                                                                                       // 52
  // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 53
  // record like context.tryEntries[i].completion. This interface could                                                // 54
  // have been (and was previously) designed to take a closure to be                                                   // 55
  // invoked without arguments, but in all the cases we care about we                                                  // 56
  // already have an existing method we want to call, so there's no need                                               // 57
  // to create a new function object. We can even get away with assuming                                               // 58
  // the method takes exactly one argument, since that happens to be true                                              // 59
  // in every case, so we don't have to touch the arguments object. The                                                // 60
  // only additional allocation required is the completion record, which                                               // 61
  // has a stable shape and so hopefully should be cheap to allocate.                                                  // 62
  function tryCatch(fn, obj, arg) {                                                                                    // 63
    try {                                                                                                              // 64
      return { type: "normal", arg: fn.call(obj, arg) };                                                               // 65
    } catch (err) {                                                                                                    // 66
      return { type: "throw", arg: err };                                                                              // 67
    }                                                                                                                  // 68
  }                                                                                                                    // 69
                                                                                                                       // 70
  var GenStateSuspendedStart = "suspendedStart";                                                                       // 71
  var GenStateSuspendedYield = "suspendedYield";                                                                       // 72
  var GenStateExecuting = "executing";                                                                                 // 73
  var GenStateCompleted = "completed";                                                                                 // 74
                                                                                                                       // 75
  // Returning this object from the innerFn has the same effect as                                                     // 76
  // breaking out of the dispatch switch statement.                                                                    // 77
  var ContinueSentinel = {};                                                                                           // 78
                                                                                                                       // 79
  // Dummy constructor functions that we use as the .constructor and                                                   // 80
  // .constructor.prototype properties for functions that return Generator                                             // 81
  // objects. For full spec compliance, you may wish to configure your                                                 // 82
  // minifier not to mangle the names of these two functions.                                                          // 83
  function Generator() {}                                                                                              // 84
  function GeneratorFunction() {}                                                                                      // 85
  function GeneratorFunctionPrototype() {}                                                                             // 86
                                                                                                                       // 87
  // This is a polyfill for %IteratorPrototype% for environments that                                                  // 88
  // don't natively support it.                                                                                        // 89
  var IteratorPrototype = {};                                                                                          // 90
  IteratorPrototype[iteratorSymbol] = function () {                                                                    // 91
    return this;                                                                                                       // 92
  };                                                                                                                   // 93
                                                                                                                       // 94
  var getProto = Object.getPrototypeOf;                                                                                // 95
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));                                            // 96
  if (NativeIteratorPrototype &&                                                                                       // 97
      NativeIteratorPrototype !== Op &&                                                                                // 98
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {                                                          // 99
    // This environment has a native %IteratorPrototype%; use it instead                                               // 100
    // of the polyfill.                                                                                                // 101
    IteratorPrototype = NativeIteratorPrototype;                                                                       // 102
  }                                                                                                                    // 103
                                                                                                                       // 104
  var Gp = GeneratorFunctionPrototype.prototype =                                                                      // 105
    Generator.prototype = Object.create(IteratorPrototype);                                                            // 106
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                                           // 107
  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                                          // 108
  GeneratorFunctionPrototype[toStringTagSymbol] =                                                                      // 109
    GeneratorFunction.displayName = "GeneratorFunction";                                                               // 110
                                                                                                                       // 111
  // Helper for defining the .next, .throw, and .return methods of the                                                 // 112
  // Iterator interface in terms of a single ._invoke method.                                                          // 113
  function defineIteratorMethods(prototype) {                                                                          // 114
    ["next", "throw", "return"].forEach(function(method) {                                                             // 115
      prototype[method] = function(arg) {                                                                              // 116
        return this._invoke(method, arg);                                                                              // 117
      };                                                                                                               // 118
    });                                                                                                                // 119
  }                                                                                                                    // 120
                                                                                                                       // 121
  runtime.isGeneratorFunction = function(genFun) {                                                                     // 122
    var ctor = typeof genFun === "function" && genFun.constructor;                                                     // 123
    return ctor                                                                                                        // 124
      ? ctor === GeneratorFunction ||                                                                                  // 125
        // For the native GeneratorFunction constructor, the best we can                                               // 126
        // do is to check its .name property.                                                                          // 127
        (ctor.displayName || ctor.name) === "GeneratorFunction"                                                        // 128
      : false;                                                                                                         // 129
  };                                                                                                                   // 130
                                                                                                                       // 131
  runtime.mark = function(genFun) {                                                                                    // 132
    if (Object.setPrototypeOf) {                                                                                       // 133
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                                       // 134
    } else {                                                                                                           // 135
      genFun.__proto__ = GeneratorFunctionPrototype;                                                                   // 136
      if (!(toStringTagSymbol in genFun)) {                                                                            // 137
        genFun[toStringTagSymbol] = "GeneratorFunction";                                                               // 138
      }                                                                                                                // 139
    }                                                                                                                  // 140
    genFun.prototype = Object.create(Gp);                                                                              // 141
    return genFun;                                                                                                     // 142
  };                                                                                                                   // 143
                                                                                                                       // 144
  // Within the body of any async function, `await x` is transformed to                                                // 145
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 146
  // `hasOwn.call(value, "__await")` to determine if the yielded value is                                              // 147
  // meant to be awaited.                                                                                              // 148
  runtime.awrap = function(arg) {                                                                                      // 149
    return { __await: arg };                                                                                           // 150
  };                                                                                                                   // 151
                                                                                                                       // 152
  function AsyncIterator(generator) {                                                                                  // 153
    function invoke(method, arg, resolve, reject) {                                                                    // 154
      var record = tryCatch(generator[method], generator, arg);                                                        // 155
      if (record.type === "throw") {                                                                                   // 156
        reject(record.arg);                                                                                            // 157
      } else {                                                                                                         // 158
        var result = record.arg;                                                                                       // 159
        var value = result.value;                                                                                      // 160
        if (value &&                                                                                                   // 161
            typeof value === "object" &&                                                                               // 162
            hasOwn.call(value, "__await")) {                                                                           // 163
          return Promise.resolve(value.__await).then(function(value) {                                                 // 164
            invoke("next", value, resolve, reject);                                                                    // 165
          }, function(err) {                                                                                           // 166
            invoke("throw", err, resolve, reject);                                                                     // 167
          });                                                                                                          // 168
        }                                                                                                              // 169
                                                                                                                       // 170
        return Promise.resolve(value).then(function(unwrapped) {                                                       // 171
          // When a yielded Promise is resolved, its final value becomes                                               // 172
          // the .value of the Promise<{value,done}> result for the                                                    // 173
          // current iteration. If the Promise is rejected, however, the                                               // 174
          // result for this iteration will be rejected with the same                                                  // 175
          // reason. Note that rejections of yielded Promises are not                                                  // 176
          // thrown back into the generator function, as is the case                                                   // 177
          // when an awaited Promise is rejected. This difference in                                                   // 178
          // behavior between yield and await is important, because it                                                 // 179
          // allows the consumer to decide what to do with the yielded                                                 // 180
          // rejection (swallow it and continue, manually .throw it back                                               // 181
          // into the generator, abandon iteration, whatever). With                                                    // 182
          // await, by contrast, there is no opportunity to examine the                                                // 183
          // rejection reason outside the generator function, so the                                                   // 184
          // only option is to throw it from the await expression, and                                                 // 185
          // let the generator function handle the exception.                                                          // 186
          result.value = unwrapped;                                                                                    // 187
          resolve(result);                                                                                             // 188
        }, reject);                                                                                                    // 189
      }                                                                                                                // 190
    }                                                                                                                  // 191
                                                                                                                       // 192
    if (typeof global.process === "object" && global.process.domain) {                                                 // 193
      invoke = global.process.domain.bind(invoke);                                                                     // 194
    }                                                                                                                  // 195
                                                                                                                       // 196
    var previousPromise;                                                                                               // 197
                                                                                                                       // 198
    function enqueue(method, arg) {                                                                                    // 199
      function callInvokeWithMethodAndArg() {                                                                          // 200
        return new Promise(function(resolve, reject) {                                                                 // 201
          invoke(method, arg, resolve, reject);                                                                        // 202
        });                                                                                                            // 203
      }                                                                                                                // 204
                                                                                                                       // 205
      return previousPromise =                                                                                         // 206
        // If enqueue has been called before, then we want to wait until                                               // 207
        // all previous Promises have been resolved before calling invoke,                                             // 208
        // so that results are always delivered in the correct order. If                                               // 209
        // enqueue has not been called before, then it is important to                                                 // 210
        // call invoke immediately, without waiting on a callback to fire,                                             // 211
        // so that the async generator function has the opportunity to do                                              // 212
        // any necessary setup in a predictable way. This predictability                                               // 213
        // is why the Promise constructor synchronously invokes its                                                    // 214
        // executor callback, and why async functions synchronously                                                    // 215
        // execute code before the first await. Since we implement simple                                              // 216
        // async functions in terms of async generators, it is especially                                              // 217
        // important to get this right, even though it requires care.                                                  // 218
        previousPromise ? previousPromise.then(                                                                        // 219
          callInvokeWithMethodAndArg,                                                                                  // 220
          // Avoid propagating failures to Promises returned by later                                                  // 221
          // invocations of the iterator.                                                                              // 222
          callInvokeWithMethodAndArg                                                                                   // 223
        ) : callInvokeWithMethodAndArg();                                                                              // 224
    }                                                                                                                  // 225
                                                                                                                       // 226
    // Define the unified helper method that is used to implement .next,                                               // 227
    // .throw, and .return (see defineIteratorMethods).                                                                // 228
    this._invoke = enqueue;                                                                                            // 229
  }                                                                                                                    // 230
                                                                                                                       // 231
  defineIteratorMethods(AsyncIterator.prototype);                                                                      // 232
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {                                                         // 233
    return this;                                                                                                       // 234
  };                                                                                                                   // 235
  runtime.AsyncIterator = AsyncIterator;                                                                               // 236
                                                                                                                       // 237
  // Note that simple async functions are implemented on top of                                                        // 238
  // AsyncIterator objects; they just return a Promise for the value of                                                // 239
  // the final result produced by the iterator.                                                                        // 240
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {                                                      // 241
    var iter = new AsyncIterator(                                                                                      // 242
      wrap(innerFn, outerFn, self, tryLocsList)                                                                        // 243
    );                                                                                                                 // 244
                                                                                                                       // 245
    return runtime.isGeneratorFunction(outerFn)                                                                        // 246
      ? iter // If outerFn is a generator, return the full iterator.                                                   // 247
      : iter.next().then(function(result) {                                                                            // 248
          return result.done ? result.value : iter.next();                                                             // 249
        });                                                                                                            // 250
  };                                                                                                                   // 251
                                                                                                                       // 252
  function makeInvokeMethod(innerFn, self, context) {                                                                  // 253
    var state = GenStateSuspendedStart;                                                                                // 254
                                                                                                                       // 255
    return function invoke(method, arg) {                                                                              // 256
      if (state === GenStateExecuting) {                                                                               // 257
        throw new Error("Generator is already running");                                                               // 258
      }                                                                                                                // 259
                                                                                                                       // 260
      if (state === GenStateCompleted) {                                                                               // 261
        if (method === "throw") {                                                                                      // 262
          throw arg;                                                                                                   // 263
        }                                                                                                              // 264
                                                                                                                       // 265
        // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 266
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 267
        return doneResult();                                                                                           // 268
      }                                                                                                                // 269
                                                                                                                       // 270
      context.method = method;                                                                                         // 271
      context.arg = arg;                                                                                               // 272
                                                                                                                       // 273
      while (true) {                                                                                                   // 274
        var delegate = context.delegate;                                                                               // 275
        if (delegate) {                                                                                                // 276
          var delegateResult = maybeInvokeDelegate(delegate, context);                                                 // 277
          if (delegateResult) {                                                                                        // 278
            if (delegateResult === ContinueSentinel) continue;                                                         // 279
            return delegateResult;                                                                                     // 280
          }                                                                                                            // 281
        }                                                                                                              // 282
                                                                                                                       // 283
        if (context.method === "next") {                                                                               // 284
          // Setting context._sent for legacy support of Babel's                                                       // 285
          // function.sent implementation.                                                                             // 286
          context.sent = context._sent = context.arg;                                                                  // 287
                                                                                                                       // 288
        } else if (context.method === "throw") {                                                                       // 289
          if (state === GenStateSuspendedStart) {                                                                      // 290
            state = GenStateCompleted;                                                                                 // 291
            throw context.arg;                                                                                         // 292
          }                                                                                                            // 293
                                                                                                                       // 294
          context.dispatchException(context.arg);                                                                      // 295
                                                                                                                       // 296
        } else if (context.method === "return") {                                                                      // 297
          context.abrupt("return", context.arg);                                                                       // 298
        }                                                                                                              // 299
                                                                                                                       // 300
        state = GenStateExecuting;                                                                                     // 301
                                                                                                                       // 302
        var record = tryCatch(innerFn, self, context);                                                                 // 303
        if (record.type === "normal") {                                                                                // 304
          // If an exception is thrown from innerFn, we leave state ===                                                // 305
          // GenStateExecuting and loop back for another invocation.                                                   // 306
          state = context.done                                                                                         // 307
            ? GenStateCompleted                                                                                        // 308
            : GenStateSuspendedYield;                                                                                  // 309
                                                                                                                       // 310
          if (record.arg === ContinueSentinel) {                                                                       // 311
            continue;                                                                                                  // 312
          }                                                                                                            // 313
                                                                                                                       // 314
          return {                                                                                                     // 315
            value: record.arg,                                                                                         // 316
            done: context.done                                                                                         // 317
          };                                                                                                           // 318
                                                                                                                       // 319
        } else if (record.type === "throw") {                                                                          // 320
          state = GenStateCompleted;                                                                                   // 321
          // Dispatch the exception by looping back around to the                                                      // 322
          // context.dispatchException(context.arg) call above.                                                        // 323
          context.method = "throw";                                                                                    // 324
          context.arg = record.arg;                                                                                    // 325
        }                                                                                                              // 326
      }                                                                                                                // 327
    };                                                                                                                 // 328
  }                                                                                                                    // 329
                                                                                                                       // 330
  // Call delegate.iterator[context.method](context.arg) and handle the                                                // 331
  // result, either by returning a { value, done } result from the                                                     // 332
  // delegate iterator, or by modifying context.method and context.arg,                                                // 333
  // setting context.delegate to null, and returning the ContinueSentinel.                                             // 334
  function maybeInvokeDelegate(delegate, context) {                                                                    // 335
    var method = delegate.iterator[context.method];                                                                    // 336
    if (method === undefined) {                                                                                        // 337
      // A .throw or .return when the delegate iterator has no .throw                                                  // 338
      // method always terminates the yield* loop.                                                                     // 339
      context.delegate = null;                                                                                         // 340
                                                                                                                       // 341
      if (context.method === "throw") {                                                                                // 342
        if (delegate.iterator.return) {                                                                                // 343
          // If the delegate iterator has a return method, give it a                                                   // 344
          // chance to clean up.                                                                                       // 345
          context.method = "return";                                                                                   // 346
          context.arg = undefined;                                                                                     // 347
          maybeInvokeDelegate(delegate, context);                                                                      // 348
                                                                                                                       // 349
          if (context.method === "throw") {                                                                            // 350
            // If maybeInvokeDelegate(context) changed context.method from                                             // 351
            // "return" to "throw", let that override the TypeError below.                                             // 352
            return ContinueSentinel;                                                                                   // 353
          }                                                                                                            // 354
        }                                                                                                              // 355
                                                                                                                       // 356
        context.method = "throw";                                                                                      // 357
        context.arg = new TypeError(                                                                                   // 358
          "The iterator does not provide a 'throw' method");                                                           // 359
      }                                                                                                                // 360
                                                                                                                       // 361
      return ContinueSentinel;                                                                                         // 362
    }                                                                                                                  // 363
                                                                                                                       // 364
    var record = tryCatch(method, delegate.iterator, context.arg);                                                     // 365
                                                                                                                       // 366
    if (record.type === "throw") {                                                                                     // 367
      context.method = "throw";                                                                                        // 368
      context.arg = record.arg;                                                                                        // 369
      context.delegate = null;                                                                                         // 370
      return ContinueSentinel;                                                                                         // 371
    }                                                                                                                  // 372
                                                                                                                       // 373
    var info = record.arg;                                                                                             // 374
                                                                                                                       // 375
    if (! info) {                                                                                                      // 376
      context.method = "throw";                                                                                        // 377
      context.arg = new TypeError("iterator result is not an object");                                                 // 378
      context.delegate = null;                                                                                         // 379
      return ContinueSentinel;                                                                                         // 380
    }                                                                                                                  // 381
                                                                                                                       // 382
    if (info.done) {                                                                                                   // 383
      // Assign the result of the finished delegate to the temporary                                                   // 384
      // variable specified by delegate.resultName (see delegateYield).                                                // 385
      context[delegate.resultName] = info.value;                                                                       // 386
                                                                                                                       // 387
      // Resume execution at the desired location (see delegateYield).                                                 // 388
      context.next = delegate.nextLoc;                                                                                 // 389
                                                                                                                       // 390
      // If context.method was "throw" but the delegate handled the                                                    // 391
      // exception, let the outer generator proceed normally. If                                                       // 392
      // context.method was "next", forget context.arg since it has been                                               // 393
      // "consumed" by the delegate iterator. If context.method was                                                    // 394
      // "return", allow the original .return call to continue in the                                                  // 395
      // outer generator.                                                                                              // 396
      if (context.method !== "return") {                                                                               // 397
        context.method = "next";                                                                                       // 398
        context.arg = undefined;                                                                                       // 399
      }                                                                                                                // 400
                                                                                                                       // 401
    } else {                                                                                                           // 402
      // Re-yield the result returned by the delegate method.                                                          // 403
      return info;                                                                                                     // 404
    }                                                                                                                  // 405
                                                                                                                       // 406
    // The delegate iterator is finished, so forget it and continue with                                               // 407
    // the outer generator.                                                                                            // 408
    context.delegate = null;                                                                                           // 409
    return ContinueSentinel;                                                                                           // 410
  }                                                                                                                    // 411
                                                                                                                       // 412
  // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 413
  // unified ._invoke helper method.                                                                                   // 414
  defineIteratorMethods(Gp);                                                                                           // 415
                                                                                                                       // 416
  Gp[toStringTagSymbol] = "Generator";                                                                                 // 417
                                                                                                                       // 418
  // A Generator should always return itself as the iterator object when the                                           // 419
  // @@iterator function is called on it. Some browsers' implementations of the                                        // 420
  // iterator prototype chain incorrectly implement this, causing the Generator                                        // 421
  // object to not be returned from this call. This ensures that doesn't happen.                                       // 422
  // See https://github.com/facebook/regenerator/issues/274 for more details.                                          // 423
  Gp[iteratorSymbol] = function() {                                                                                    // 424
    return this;                                                                                                       // 425
  };                                                                                                                   // 426
                                                                                                                       // 427
  Gp.toString = function() {                                                                                           // 428
    return "[object Generator]";                                                                                       // 429
  };                                                                                                                   // 430
                                                                                                                       // 431
  function pushTryEntry(locs) {                                                                                        // 432
    var entry = { tryLoc: locs[0] };                                                                                   // 433
                                                                                                                       // 434
    if (1 in locs) {                                                                                                   // 435
      entry.catchLoc = locs[1];                                                                                        // 436
    }                                                                                                                  // 437
                                                                                                                       // 438
    if (2 in locs) {                                                                                                   // 439
      entry.finallyLoc = locs[2];                                                                                      // 440
      entry.afterLoc = locs[3];                                                                                        // 441
    }                                                                                                                  // 442
                                                                                                                       // 443
    this.tryEntries.push(entry);                                                                                       // 444
  }                                                                                                                    // 445
                                                                                                                       // 446
  function resetTryEntry(entry) {                                                                                      // 447
    var record = entry.completion || {};                                                                               // 448
    record.type = "normal";                                                                                            // 449
    delete record.arg;                                                                                                 // 450
    entry.completion = record;                                                                                         // 451
  }                                                                                                                    // 452
                                                                                                                       // 453
  function Context(tryLocsList) {                                                                                      // 454
    // The root entry object (effectively a try statement without a catch                                              // 455
    // or a finally block) gives us a place to store values thrown from                                                // 456
    // locations where there is no enclosing try statement.                                                            // 457
    this.tryEntries = [{ tryLoc: "root" }];                                                                            // 458
    tryLocsList.forEach(pushTryEntry, this);                                                                           // 459
    this.reset(true);                                                                                                  // 460
  }                                                                                                                    // 461
                                                                                                                       // 462
  runtime.keys = function(object) {                                                                                    // 463
    var keys = [];                                                                                                     // 464
    for (var key in object) {                                                                                          // 465
      keys.push(key);                                                                                                  // 466
    }                                                                                                                  // 467
    keys.reverse();                                                                                                    // 468
                                                                                                                       // 469
    // Rather than returning an object with a next method, we keep                                                     // 470
    // things simple and return the next function itself.                                                              // 471
    return function next() {                                                                                           // 472
      while (keys.length) {                                                                                            // 473
        var key = keys.pop();                                                                                          // 474
        if (key in object) {                                                                                           // 475
          next.value = key;                                                                                            // 476
          next.done = false;                                                                                           // 477
          return next;                                                                                                 // 478
        }                                                                                                              // 479
      }                                                                                                                // 480
                                                                                                                       // 481
      // To avoid creating an additional object, we just hang the .value                                               // 482
      // and .done properties off the next function object itself. This                                                // 483
      // also ensures that the minifier will not anonymize the function.                                               // 484
      next.done = true;                                                                                                // 485
      return next;                                                                                                     // 486
    };                                                                                                                 // 487
  };                                                                                                                   // 488
                                                                                                                       // 489
  function values(iterable) {                                                                                          // 490
    if (iterable) {                                                                                                    // 491
      var iteratorMethod = iterable[iteratorSymbol];                                                                   // 492
      if (iteratorMethod) {                                                                                            // 493
        return iteratorMethod.call(iterable);                                                                          // 494
      }                                                                                                                // 495
                                                                                                                       // 496
      if (typeof iterable.next === "function") {                                                                       // 497
        return iterable;                                                                                               // 498
      }                                                                                                                // 499
                                                                                                                       // 500
      if (!isNaN(iterable.length)) {                                                                                   // 501
        var i = -1, next = function next() {                                                                           // 502
          while (++i < iterable.length) {                                                                              // 503
            if (hasOwn.call(iterable, i)) {                                                                            // 504
              next.value = iterable[i];                                                                                // 505
              next.done = false;                                                                                       // 506
              return next;                                                                                             // 507
            }                                                                                                          // 508
          }                                                                                                            // 509
                                                                                                                       // 510
          next.value = undefined;                                                                                      // 511
          next.done = true;                                                                                            // 512
                                                                                                                       // 513
          return next;                                                                                                 // 514
        };                                                                                                             // 515
                                                                                                                       // 516
        return next.next = next;                                                                                       // 517
      }                                                                                                                // 518
    }                                                                                                                  // 519
                                                                                                                       // 520
    // Return an iterator with no values.                                                                              // 521
    return { next: doneResult };                                                                                       // 522
  }                                                                                                                    // 523
  runtime.values = values;                                                                                             // 524
                                                                                                                       // 525
  function doneResult() {                                                                                              // 526
    return { value: undefined, done: true };                                                                           // 527
  }                                                                                                                    // 528
                                                                                                                       // 529
  Context.prototype = {                                                                                                // 530
    constructor: Context,                                                                                              // 531
                                                                                                                       // 532
    reset: function(skipTempReset) {                                                                                   // 533
      this.prev = 0;                                                                                                   // 534
      this.next = 0;                                                                                                   // 535
      // Resetting context._sent for legacy support of Babel's                                                         // 536
      // function.sent implementation.                                                                                 // 537
      this.sent = this._sent = undefined;                                                                              // 538
      this.done = false;                                                                                               // 539
      this.delegate = null;                                                                                            // 540
                                                                                                                       // 541
      this.method = "next";                                                                                            // 542
      this.arg = undefined;                                                                                            // 543
                                                                                                                       // 544
      this.tryEntries.forEach(resetTryEntry);                                                                          // 545
                                                                                                                       // 546
      if (!skipTempReset) {                                                                                            // 547
        for (var name in this) {                                                                                       // 548
          // Not sure about the optimal order of these conditions:                                                     // 549
          if (name.charAt(0) === "t" &&                                                                                // 550
              hasOwn.call(this, name) &&                                                                               // 551
              !isNaN(+name.slice(1))) {                                                                                // 552
            this[name] = undefined;                                                                                    // 553
          }                                                                                                            // 554
        }                                                                                                              // 555
      }                                                                                                                // 556
    },                                                                                                                 // 557
                                                                                                                       // 558
    stop: function() {                                                                                                 // 559
      this.done = true;                                                                                                // 560
                                                                                                                       // 561
      var rootEntry = this.tryEntries[0];                                                                              // 562
      var rootRecord = rootEntry.completion;                                                                           // 563
      if (rootRecord.type === "throw") {                                                                               // 564
        throw rootRecord.arg;                                                                                          // 565
      }                                                                                                                // 566
                                                                                                                       // 567
      return this.rval;                                                                                                // 568
    },                                                                                                                 // 569
                                                                                                                       // 570
    dispatchException: function(exception) {                                                                           // 571
      if (this.done) {                                                                                                 // 572
        throw exception;                                                                                               // 573
      }                                                                                                                // 574
                                                                                                                       // 575
      var context = this;                                                                                              // 576
      function handle(loc, caught) {                                                                                   // 577
        record.type = "throw";                                                                                         // 578
        record.arg = exception;                                                                                        // 579
        context.next = loc;                                                                                            // 580
                                                                                                                       // 581
        if (caught) {                                                                                                  // 582
          // If the dispatched exception was caught by a catch block,                                                  // 583
          // then let that catch block handle the exception normally.                                                  // 584
          context.method = "next";                                                                                     // 585
          context.arg = undefined;                                                                                     // 586
        }                                                                                                              // 587
                                                                                                                       // 588
        return !! caught;                                                                                              // 589
      }                                                                                                                // 590
                                                                                                                       // 591
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 592
        var entry = this.tryEntries[i];                                                                                // 593
        var record = entry.completion;                                                                                 // 594
                                                                                                                       // 595
        if (entry.tryLoc === "root") {                                                                                 // 596
          // Exception thrown outside of any try block that could handle                                               // 597
          // it, so set the completion value of the entire function to                                                 // 598
          // throw the exception.                                                                                      // 599
          return handle("end");                                                                                        // 600
        }                                                                                                              // 601
                                                                                                                       // 602
        if (entry.tryLoc <= this.prev) {                                                                               // 603
          var hasCatch = hasOwn.call(entry, "catchLoc");                                                               // 604
          var hasFinally = hasOwn.call(entry, "finallyLoc");                                                           // 605
                                                                                                                       // 606
          if (hasCatch && hasFinally) {                                                                                // 607
            if (this.prev < entry.catchLoc) {                                                                          // 608
              return handle(entry.catchLoc, true);                                                                     // 609
            } else if (this.prev < entry.finallyLoc) {                                                                 // 610
              return handle(entry.finallyLoc);                                                                         // 611
            }                                                                                                          // 612
                                                                                                                       // 613
          } else if (hasCatch) {                                                                                       // 614
            if (this.prev < entry.catchLoc) {                                                                          // 615
              return handle(entry.catchLoc, true);                                                                     // 616
            }                                                                                                          // 617
                                                                                                                       // 618
          } else if (hasFinally) {                                                                                     // 619
            if (this.prev < entry.finallyLoc) {                                                                        // 620
              return handle(entry.finallyLoc);                                                                         // 621
            }                                                                                                          // 622
                                                                                                                       // 623
          } else {                                                                                                     // 624
            throw new Error("try statement without catch or finally");                                                 // 625
          }                                                                                                            // 626
        }                                                                                                              // 627
      }                                                                                                                // 628
    },                                                                                                                 // 629
                                                                                                                       // 630
    abrupt: function(type, arg) {                                                                                      // 631
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 632
        var entry = this.tryEntries[i];                                                                                // 633
        if (entry.tryLoc <= this.prev &&                                                                               // 634
            hasOwn.call(entry, "finallyLoc") &&                                                                        // 635
            this.prev < entry.finallyLoc) {                                                                            // 636
          var finallyEntry = entry;                                                                                    // 637
          break;                                                                                                       // 638
        }                                                                                                              // 639
      }                                                                                                                // 640
                                                                                                                       // 641
      if (finallyEntry &&                                                                                              // 642
          (type === "break" ||                                                                                         // 643
           type === "continue") &&                                                                                     // 644
          finallyEntry.tryLoc <= arg &&                                                                                // 645
          arg <= finallyEntry.finallyLoc) {                                                                            // 646
        // Ignore the finally entry if control is not jumping to a                                                     // 647
        // location outside the try/catch block.                                                                       // 648
        finallyEntry = null;                                                                                           // 649
      }                                                                                                                // 650
                                                                                                                       // 651
      var record = finallyEntry ? finallyEntry.completion : {};                                                        // 652
      record.type = type;                                                                                              // 653
      record.arg = arg;                                                                                                // 654
                                                                                                                       // 655
      if (finallyEntry) {                                                                                              // 656
        this.method = "next";                                                                                          // 657
        this.next = finallyEntry.finallyLoc;                                                                           // 658
        return ContinueSentinel;                                                                                       // 659
      }                                                                                                                // 660
                                                                                                                       // 661
      return this.complete(record);                                                                                    // 662
    },                                                                                                                 // 663
                                                                                                                       // 664
    complete: function(record, afterLoc) {                                                                             // 665
      if (record.type === "throw") {                                                                                   // 666
        throw record.arg;                                                                                              // 667
      }                                                                                                                // 668
                                                                                                                       // 669
      if (record.type === "break" ||                                                                                   // 670
          record.type === "continue") {                                                                                // 671
        this.next = record.arg;                                                                                        // 672
      } else if (record.type === "return") {                                                                           // 673
        this.rval = this.arg = record.arg;                                                                             // 674
        this.method = "return";                                                                                        // 675
        this.next = "end";                                                                                             // 676
      } else if (record.type === "normal" && afterLoc) {                                                               // 677
        this.next = afterLoc;                                                                                          // 678
      }                                                                                                                // 679
                                                                                                                       // 680
      return ContinueSentinel;                                                                                         // 681
    },                                                                                                                 // 682
                                                                                                                       // 683
    finish: function(finallyLoc) {                                                                                     // 684
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 685
        var entry = this.tryEntries[i];                                                                                // 686
        if (entry.finallyLoc === finallyLoc) {                                                                         // 687
          this.complete(entry.completion, entry.afterLoc);                                                             // 688
          resetTryEntry(entry);                                                                                        // 689
          return ContinueSentinel;                                                                                     // 690
        }                                                                                                              // 691
      }                                                                                                                // 692
    },                                                                                                                 // 693
                                                                                                                       // 694
    "catch": function(tryLoc) {                                                                                        // 695
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 696
        var entry = this.tryEntries[i];                                                                                // 697
        if (entry.tryLoc === tryLoc) {                                                                                 // 698
          var record = entry.completion;                                                                               // 699
          if (record.type === "throw") {                                                                               // 700
            var thrown = record.arg;                                                                                   // 701
            resetTryEntry(entry);                                                                                      // 702
          }                                                                                                            // 703
          return thrown;                                                                                               // 704
        }                                                                                                              // 705
      }                                                                                                                // 706
                                                                                                                       // 707
      // The context.catch method must only be called with a location                                                  // 708
      // argument that corresponds to a known catch block.                                                             // 709
      throw new Error("illegal catch attempt");                                                                        // 710
    },                                                                                                                 // 711
                                                                                                                       // 712
    delegateYield: function(iterable, resultName, nextLoc) {                                                           // 713
      this.delegate = {                                                                                                // 714
        iterator: values(iterable),                                                                                    // 715
        resultName: resultName,                                                                                        // 716
        nextLoc: nextLoc                                                                                               // 717
      };                                                                                                               // 718
                                                                                                                       // 719
      if (this.method === "next") {                                                                                    // 720
        // Deliberately forget the last sent value so that we don't                                                    // 721
        // accidentally pass it on to the delegate.                                                                    // 722
        this.arg = undefined;                                                                                          // 723
      }                                                                                                                // 724
                                                                                                                       // 725
      return ContinueSentinel;                                                                                         // 726
    }                                                                                                                  // 727
  };                                                                                                                   // 728
})(                                                                                                                    // 729
  // Among the various tricks for obtaining a reference to the global                                                  // 730
  // object, this seems to be the most reliable technique that does not                                                // 731
  // use indirect eval (which violates Content Security Policy).                                                       // 732
  typeof global === "object" ? global :                                                                                // 733
  typeof window === "object" ? window :                                                                                // 734
  typeof self === "object" ? self : this                                                                               // 735
);                                                                                                                     // 736
                                                                                                                       // 737
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"core-js":{"library":{"fn":{"symbol":{"iterator.js":["../../modules/es6.string.iterator","../../modules/web.dom.iterable","../../modules/_wks-ext",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/iterator.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.string.iterator');                                                                          // 1
require('../../modules/web.dom.iterable');                                                                             // 2
module.exports = require('../../modules/_wks-ext').f('iterator');                                                      // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"index.js":["../../modules/es6.symbol","../../modules/es6.object.to-string","../../modules/es7.symbol.async-iterator","../../modules/es7.symbol.observable","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.symbol');                                                                                   // 1
require('../../modules/es6.object.to-string');                                                                         // 2
require('../../modules/es7.symbol.async-iterator');                                                                    // 3
require('../../modules/es7.symbol.observable');                                                                        // 4
module.exports = require('../../modules/_core').Symbol;                                                                // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"object":{"set-prototype-of.js":["../../modules/es6.object.set-prototype-of","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.set-prototype-of');                                                                  // 1
module.exports = require('../../modules/_core').Object.setPrototypeOf;                                                 // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"create.js":["../../modules/es6.object.create","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/create.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.create');                                                                            // 1
var $Object = require('../../modules/_core').Object;                                                                   // 2
module.exports = function create(P, D){                                                                                // 3
  return $Object.create(P, D);                                                                                         // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"modules":{"es6.string.iterator.js":["./_string-at","./_iter-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.string.iterator.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $at  = require('./_string-at')(true);                                                                              // 2
                                                                                                                       // 3
// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
require('./_iter-define')(String, 'String', function(iterated){                                                        // 5
  this._t = String(iterated); // target                                                                                // 6
  this._i = 0;                // next index                                                                            // 7
// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
}, function(){                                                                                                         // 9
  var O     = this._t                                                                                                  // 10
    , index = this._i                                                                                                  // 11
    , point;                                                                                                           // 12
  if(index >= O.length)return {value: undefined, done: true};                                                          // 13
  point = $at(O, index);                                                                                               // 14
  this._i += point.length;                                                                                             // 15
  return {value: point, done: false};                                                                                  // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-at.js":["./_to-integer","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_string-at.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , defined   = require('./_defined');                                                                                 // 2
// true  -> String#at                                                                                                  // 3
// false -> String#codePointAt                                                                                         // 4
module.exports = function(TO_STRING){                                                                                  // 5
  return function(that, pos){                                                                                          // 6
    var s = String(defined(that))                                                                                      // 7
      , i = toInteger(pos)                                                                                             // 8
      , l = s.length                                                                                                   // 9
      , a, b;                                                                                                          // 10
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                              // 11
    a = s.charCodeAt(i);                                                                                               // 12
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13
      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15
  };                                                                                                                   // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-integer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-integer.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.4 ToInteger                                                                                                     // 1
var ceil  = Math.ceil                                                                                                  // 2
  , floor = Math.floor;                                                                                                // 3
module.exports = function(it){                                                                                         // 4
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_defined.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_defined.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
module.exports = function(it){                                                                                         // 2
  if(it == undefined)throw TypeError("Can't call method on  " + it);                                                   // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-define.js":["./_library","./_export","./_redefine","./_hide","./_has","./_iterators","./_iter-create","./_set-to-string-tag","./_object-gpo","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-define.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var LIBRARY        = require('./_library')                                                                             // 2
  , $export        = require('./_export')                                                                              // 3
  , redefine       = require('./_redefine')                                                                            // 4
  , hide           = require('./_hide')                                                                                // 5
  , has            = require('./_has')                                                                                 // 6
  , Iterators      = require('./_iterators')                                                                           // 7
  , $iterCreate    = require('./_iter-create')                                                                         // 8
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 9
  , getPrototypeOf = require('./_object-gpo')                                                                          // 10
  , ITERATOR       = require('./_wks')('iterator')                                                                     // 11
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12
  , FF_ITERATOR    = '@@iterator'                                                                                      // 13
  , KEYS           = 'keys'                                                                                            // 14
  , VALUES         = 'values';                                                                                         // 15
                                                                                                                       // 16
var returnThis = function(){ return this; };                                                                           // 17
                                                                                                                       // 18
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                     // 19
  $iterCreate(Constructor, NAME, next);                                                                                // 20
  var getMethod = function(kind){                                                                                      // 21
    if(!BUGGY && kind in proto)return proto[kind];                                                                     // 22
    switch(kind){                                                                                                      // 23
      case KEYS: return function keys(){ return new Constructor(this, kind); };                                        // 24
      case VALUES: return function values(){ return new Constructor(this, kind); };                                    // 25
    } return function entries(){ return new Constructor(this, kind); };                                                // 26
  };                                                                                                                   // 27
  var TAG        = NAME + ' Iterator'                                                                                  // 28
    , DEF_VALUES = DEFAULT == VALUES                                                                                   // 29
    , VALUES_BUG = false                                                                                               // 30
    , proto      = Base.prototype                                                                                      // 31
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                  // 32
    , $default   = $native || getMethod(DEFAULT)                                                                       // 33
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                 // 34
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                                // 35
    , methods, key, IteratorPrototype;                                                                                 // 36
  // Fix native                                                                                                        // 37
  if($anyNative){                                                                                                      // 38
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                     // 39
    if(IteratorPrototype !== Object.prototype){                                                                        // 40
      // Set @@toStringTag to native iterators                                                                         // 41
      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42
      // fix for some old engines                                                                                      // 43
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                  // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
  if(DEF_VALUES && $native && $native.name !== VALUES){                                                                // 48
    VALUES_BUG = true;                                                                                                 // 49
    $default = function values(){ return $native.call(this); };                                                        // 50
  }                                                                                                                    // 51
  // Define iterator                                                                                                   // 52
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                               // 53
    hide(proto, ITERATOR, $default);                                                                                   // 54
  }                                                                                                                    // 55
  // Plug for library                                                                                                  // 56
  Iterators[NAME] = $default;                                                                                          // 57
  Iterators[TAG]  = returnThis;                                                                                        // 58
  if(DEFAULT){                                                                                                         // 59
    methods = {                                                                                                        // 60
      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                              // 61
      keys:    IS_SET     ? $default : getMethod(KEYS),                                                                // 62
      entries: $entries                                                                                                // 63
    };                                                                                                                 // 64
    if(FORCED)for(key in methods){                                                                                     // 65
      if(!(key in proto))redefine(proto, key, methods[key]);                                                           // 66
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67
  }                                                                                                                    // 68
  return methods;                                                                                                      // 69
};                                                                                                                     // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_library.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_library.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = true;                                                                                                 // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_export.js":["./_global","./_core","./_ctx","./_hide",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_export.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global    = require('./_global')                                                                                   // 1
  , core      = require('./_core')                                                                                     // 2
  , ctx       = require('./_ctx')                                                                                      // 3
  , hide      = require('./_hide')                                                                                     // 4
  , PROTOTYPE = 'prototype';                                                                                           // 5
                                                                                                                       // 6
var $export = function(type, name, source){                                                                            // 7
  var IS_FORCED = type & $export.F                                                                                     // 8
    , IS_GLOBAL = type & $export.G                                                                                     // 9
    , IS_STATIC = type & $export.S                                                                                     // 10
    , IS_PROTO  = type & $export.P                                                                                     // 11
    , IS_BIND   = type & $export.B                                                                                     // 12
    , IS_WRAP   = type & $export.W                                                                                     // 13
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                   // 14
    , expProto  = exports[PROTOTYPE]                                                                                   // 15
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]                      // 16
    , key, own, out;                                                                                                   // 17
  if(IS_GLOBAL)source = name;                                                                                          // 18
  for(key in source){                                                                                                  // 19
    // contains in native                                                                                              // 20
    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21
    if(own && key in exports)continue;                                                                                 // 22
    // export native or passed                                                                                         // 23
    out = own ? target[key] : source[key];                                                                             // 24
    // prevent global pollution for namespaces                                                                         // 25
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                         // 26
    // bind timers to global for call from export context                                                              // 27
    : IS_BIND && own ? ctx(out, global)                                                                                // 28
    // wrap global constructors for prevent change them in library                                                     // 29
    : IS_WRAP && target[key] == out ? (function(C){                                                                    // 30
      var F = function(a, b, c){                                                                                       // 31
        if(this instanceof C){                                                                                         // 32
          switch(arguments.length){                                                                                    // 33
            case 0: return new C;                                                                                      // 34
            case 1: return new C(a);                                                                                   // 35
            case 2: return new C(a, b);                                                                                // 36
          } return new C(a, b, c);                                                                                     // 37
        } return C.apply(this, arguments);                                                                             // 38
      };                                                                                                               // 39
      F[PROTOTYPE] = C[PROTOTYPE];                                                                                     // 40
      return F;                                                                                                        // 41
    // make static versions for prototype methods                                                                      // 42
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                    // 43
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44
    if(IS_PROTO){                                                                                                      // 45
      (exports.virtual || (exports.virtual = {}))[key] = out;                                                          // 46
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);                                      // 48
    }                                                                                                                  // 49
  }                                                                                                                    // 50
};                                                                                                                     // 51
// type bitmap                                                                                                         // 52
$export.F = 1;   // forced                                                                                             // 53
$export.G = 2;   // global                                                                                             // 54
$export.S = 4;   // static                                                                                             // 55
$export.P = 8;   // proto                                                                                              // 56
$export.B = 16;  // bind                                                                                               // 57
$export.W = 32;  // wrap                                                                                               // 58
$export.U = 64;  // safe                                                                                               // 59
$export.R = 128; // real proto method for `library`                                                                    // 60
module.exports = $export;                                                                                              // 61
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_global.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_global.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
var global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                       // 3
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                                // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_core.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var core = module.exports = {version: '2.4.0'};                                                                        // 1
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                  // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ctx.js":["./_a-function",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ctx.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// optional / simple context binding                                                                                   // 1
var aFunction = require('./_a-function');                                                                              // 2
module.exports = function(fn, that, length){                                                                           // 3
  aFunction(fn);                                                                                                       // 4
  if(that === undefined)return fn;                                                                                     // 5
  switch(length){                                                                                                      // 6
    case 1: return function(a){                                                                                        // 7
      return fn.call(that, a);                                                                                         // 8
    };                                                                                                                 // 9
    case 2: return function(a, b){                                                                                     // 10
      return fn.call(that, a, b);                                                                                      // 11
    };                                                                                                                 // 12
    case 3: return function(a, b, c){                                                                                  // 13
      return fn.call(that, a, b, c);                                                                                   // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
  return function(/* ...args */){                                                                                      // 17
    return fn.apply(that, arguments);                                                                                  // 18
  };                                                                                                                   // 19
};                                                                                                                     // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_a-function.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_a-function.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                              // 2
  return it;                                                                                                           // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_hide.js":["./_object-dp","./_property-desc","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_hide.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP         = require('./_object-dp')                                                                               // 1
  , createDesc = require('./_property-desc');                                                                          // 2
module.exports = require('./_descriptors') ? function(object, key, value){                                             // 3
  return dP.f(object, key, createDesc(1, value));                                                                      // 4
} : function(object, key, value){                                                                                      // 5
  object[key] = value;                                                                                                 // 6
  return object;                                                                                                       // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dp.js":["./_an-object","./_ie8-dom-define","./_to-primitive","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dp.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var anObject       = require('./_an-object')                                                                           // 1
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 2
  , toPrimitive    = require('./_to-primitive')                                                                        // 3
  , dP             = Object.defineProperty;                                                                            // 4
                                                                                                                       // 5
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){             // 6
  anObject(O);                                                                                                         // 7
  P = toPrimitive(P, true);                                                                                            // 8
  anObject(Attributes);                                                                                                // 9
  if(IE8_DOM_DEFINE)try {                                                                                              // 10
    return dP(O, P, Attributes);                                                                                       // 11
  } catch(e){ /* empty */ }                                                                                            // 12
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                           // 13
  if('value' in Attributes)O[P] = Attributes.value;                                                                    // 14
  return O;                                                                                                            // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_an-object.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_an-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
module.exports = function(it){                                                                                         // 2
  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                         // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_is-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ie8-dom-define.js":["./_descriptors","./_fails","./_dom-create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = !require('./_descriptors') && !require('./_fails')(function(){                                        // 1
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;           // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_descriptors.js":["./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_descriptors.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Thank's IE8 for his funny defineProperty                                                                            // 1
module.exports = !require('./_fails')(function(){                                                                      // 2
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                        // 3
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_fails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_fails.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(exec){                                                                                       // 1
  try {                                                                                                                // 2
    return !!exec();                                                                                                   // 3
  } catch(e){                                                                                                          // 4
    return true;                                                                                                       // 5
  }                                                                                                                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_dom-create.js":["./_is-object","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_dom-create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object')                                                                                 // 1
  , document = require('./_global').document                                                                           // 2
  // in old IE typeof document.createElement is 'object'                                                               // 3
  , is = isObject(document) && isObject(document.createElement);                                                       // 4
module.exports = function(it){                                                                                         // 5
  return is ? document.createElement(it) : {};                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-primitive.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-primitive.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
var isObject = require('./_is-object');                                                                                // 2
// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
// and the second argument - flag - preferred type is a string                                                         // 4
module.exports = function(it, S){                                                                                      // 5
  if(!isObject(it))return it;                                                                                          // 6
  var fn, val;                                                                                                         // 7
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                          // 8
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                                // 9
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 10
  throw TypeError("Can't convert object to primitive value");                                                          // 11
};                                                                                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_property-desc.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_property-desc.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(bitmap, value){                                                                              // 1
  return {                                                                                                             // 2
    enumerable  : !(bitmap & 1),                                                                                       // 3
    configurable: !(bitmap & 2),                                                                                       // 4
    writable    : !(bitmap & 4),                                                                                       // 5
    value       : value                                                                                                // 6
  };                                                                                                                   // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_redefine.js":["./_hide",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_redefine.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_hide');                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_has.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_has.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 1
module.exports = function(it, key){                                                                                    // 2
  return hasOwnProperty.call(it, key);                                                                                 // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iterators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iterators.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {};                                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-create.js":["./_object-create","./_property-desc","./_set-to-string-tag","./_hide","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-create.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var create         = require('./_object-create')                                                                       // 2
  , descriptor     = require('./_property-desc')                                                                       // 3
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 4
  , IteratorPrototype = {};                                                                                            // 5
                                                                                                                       // 6
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });                      // 8
                                                                                                                       // 9
module.exports = function(Constructor, NAME, next){                                                                    // 10
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                      // 11
  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-create.js":["./_an-object","./_object-dps","./_enum-bug-keys","./_shared-key","./_dom-create","./_html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-create.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
var anObject    = require('./_an-object')                                                                              // 2
  , dPs         = require('./_object-dps')                                                                             // 3
  , enumBugKeys = require('./_enum-bug-keys')                                                                          // 4
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 5
  , Empty       = function(){ /* empty */ }                                                                            // 6
  , PROTOTYPE   = 'prototype';                                                                                         // 7
                                                                                                                       // 8
// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
var createDict = function(){                                                                                           // 10
  // Thrash, waste and sodomy: IE GC bug                                                                               // 11
  var iframe = require('./_dom-create')('iframe')                                                                      // 12
    , i      = enumBugKeys.length                                                                                      // 13
    , lt     = '<'                                                                                                     // 14
    , gt     = '>'                                                                                                     // 15
    , iframeDocument;                                                                                                  // 16
  iframe.style.display = 'none';                                                                                       // 17
  require('./_html').appendChild(iframe);                                                                              // 18
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
  // createDict = iframe.contentWindow.Object;                                                                         // 20
  // html.removeChild(iframe);                                                                                         // 21
  iframeDocument = iframe.contentWindow.document;                                                                      // 22
  iframeDocument.open();                                                                                               // 23
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24
  iframeDocument.close();                                                                                              // 25
  createDict = iframeDocument.F;                                                                                       // 26
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];                                                              // 27
  return createDict();                                                                                                 // 28
};                                                                                                                     // 29
                                                                                                                       // 30
module.exports = Object.create || function create(O, Properties){                                                      // 31
  var result;                                                                                                          // 32
  if(O !== null){                                                                                                      // 33
    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34
    result = new Empty;                                                                                                // 35
    Empty[PROTOTYPE] = null;                                                                                           // 36
    // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
    result[IE_PROTO] = O;                                                                                              // 38
  } else result = createDict();                                                                                        // 39
  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40
};                                                                                                                     // 41
                                                                                                                       // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dps.js":["./_object-dp","./_an-object","./_object-keys","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dps.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP       = require('./_object-dp')                                                                                 // 1
  , anObject = require('./_an-object')                                                                                 // 2
  , getKeys  = require('./_object-keys');                                                                              // 3
                                                                                                                       // 4
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){       // 5
  anObject(O);                                                                                                         // 6
  var keys   = getKeys(Properties)                                                                                     // 7
    , length = keys.length                                                                                             // 8
    , i = 0                                                                                                            // 9
    , P;                                                                                                               // 10
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);                                                              // 11
  return O;                                                                                                            // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
var $keys       = require('./_object-keys-internal')                                                                   // 2
  , enumBugKeys = require('./_enum-bug-keys');                                                                         // 3
                                                                                                                       // 4
module.exports = Object.keys || function keys(O){                                                                      // 5
  return $keys(O, enumBugKeys);                                                                                        // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys-internal.js":["./_has","./_to-iobject","./_array-includes","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys-internal.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var has          = require('./_has')                                                                                   // 1
  , toIObject    = require('./_to-iobject')                                                                            // 2
  , arrayIndexOf = require('./_array-includes')(false)                                                                 // 3
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');                                                               // 4
                                                                                                                       // 5
module.exports = function(object, names){                                                                              // 6
  var O      = toIObject(object)                                                                                       // 7
    , i      = 0                                                                                                       // 8
    , result = []                                                                                                      // 9
    , key;                                                                                                             // 10
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);                                                     // 11
  // Don't enum bug & hidden keys                                                                                      // 12
  while(names.length > i)if(has(O, key = names[i++])){                                                                 // 13
    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14
  }                                                                                                                    // 15
  return result;                                                                                                       // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-iobject.js":["./_iobject","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-iobject.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
var IObject = require('./_iobject')                                                                                    // 2
  , defined = require('./_defined');                                                                                   // 3
module.exports = function(it){                                                                                         // 4
  return IObject(defined(it));                                                                                         // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iobject.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iobject.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                          // 3
  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_cof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_cof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = function(it){                                                                                         // 3
  return toString.call(it).slice(8, -1);                                                                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-includes.js":["./_to-iobject","./_to-length","./_to-index",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_array-includes.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// false -> Array#indexOf                                                                                              // 1
// true  -> Array#includes                                                                                             // 2
var toIObject = require('./_to-iobject')                                                                               // 3
  , toLength  = require('./_to-length')                                                                                // 4
  , toIndex   = require('./_to-index');                                                                                // 5
module.exports = function(IS_INCLUDES){                                                                                // 6
  return function($this, el, fromIndex){                                                                               // 7
    var O      = toIObject($this)                                                                                      // 8
      , length = toLength(O.length)                                                                                    // 9
      , index  = toIndex(fromIndex, length)                                                                            // 10
      , value;                                                                                                         // 11
    // Array#includes uses SameValueZero equality algorithm                                                            // 12
    if(IS_INCLUDES && el != el)while(length > index){                                                                  // 13
      value = O[index++];                                                                                              // 14
      if(value != value)return true;                                                                                   // 15
    // Array#toIndex ignores holes, Array#includes - not                                                               // 16
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                 // 17
      if(O[index] === el)return IS_INCLUDES || index || 0;                                                             // 18
    } return !IS_INCLUDES && -1;                                                                                       // 19
  };                                                                                                                   // 20
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-length.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-length.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.15 ToLength                                                                                                     // 1
var toInteger = require('./_to-integer')                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(it){                                                                                         // 4
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-index.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-index.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , max       = Math.max                                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(index, length){                                                                              // 4
  index = toInteger(index);                                                                                            // 5
  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared-key.js":["./_shared","./_uid",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared-key.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var shared = require('./_shared')('keys')                                                                              // 1
  , uid    = require('./_uid');                                                                                        // 2
module.exports = function(key){                                                                                        // 3
  return shared[key] || (shared[key] = uid(key));                                                                      // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global')                                                                                      // 1
  , SHARED = '__core-js_shared__'                                                                                      // 2
  , store  = global[SHARED] || (global[SHARED] = {});                                                                  // 3
module.exports = function(key){                                                                                        // 4
  return store[key] || (store[key] = {});                                                                              // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_uid.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_uid.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var id = 0                                                                                                             // 1
  , px = Math.random();                                                                                                // 2
module.exports = function(key){                                                                                        // 3
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-bug-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// IE 8- don't enum bug keys                                                                                           // 1
module.exports = (                                                                                                     // 2
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3
).split(',');                                                                                                          // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_html.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_html.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_global').document && document.documentElement;                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-to-string-tag.js":["./_object-dp","./_has","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var def = require('./_object-dp').f                                                                                    // 1
  , has = require('./_has')                                                                                            // 2
  , TAG = require('./_wks')('toStringTag');                                                                            // 3
                                                                                                                       // 4
module.exports = function(it, tag, stat){                                                                              // 5
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks.js":["./_shared","./_uid","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var store      = require('./_shared')('wks')                                                                           // 1
  , uid        = require('./_uid')                                                                                     // 2
  , Symbol     = require('./_global').Symbol                                                                           // 3
  , USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4
                                                                                                                       // 5
var $exports = module.exports = function(name){                                                                        // 6
  return store[name] || (store[name] =                                                                                 // 7
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8
};                                                                                                                     // 9
                                                                                                                       // 10
$exports.store = store;                                                                                                // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gpo.js":["./_has","./_to-object","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gpo.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
var has         = require('./_has')                                                                                    // 2
  , toObject    = require('./_to-object')                                                                              // 3
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 4
  , ObjectProto = Object.prototype;                                                                                    // 5
                                                                                                                       // 6
module.exports = Object.getPrototypeOf || function(O){                                                                 // 7
  O = toObject(O);                                                                                                     // 8
  if(has(O, IE_PROTO))return O[IE_PROTO];                                                                              // 9
  if(typeof O.constructor == 'function' && O instanceof O.constructor){                                                // 10
    return O.constructor.prototype;                                                                                    // 11
  } return O instanceof Object ? ObjectProto : null;                                                                   // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-object.js":["./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.13 ToObject(argument)                                                                                           // 1
var defined = require('./_defined');                                                                                   // 2
module.exports = function(it){                                                                                         // 3
  return Object(defined(it));                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"web.dom.iterable.js":["./es6.array.iterator","./_global","./_hide","./_iterators","./_wks",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/web.dom.iterable.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./es6.array.iterator');                                                                                       // 1
var global        = require('./_global')                                                                               // 2
  , hide          = require('./_hide')                                                                                 // 3
  , Iterators     = require('./_iterators')                                                                            // 4
  , TO_STRING_TAG = require('./_wks')('toStringTag');                                                                  // 5
                                                                                                                       // 6
for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){  // 7
  var NAME       = collections[i]                                                                                      // 8
    , Collection = global[NAME]                                                                                        // 9
    , proto      = Collection && Collection.prototype;                                                                 // 10
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                  // 11
  Iterators[NAME] = Iterators.Array;                                                                                   // 12
}                                                                                                                      // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.iterator.js":["./_add-to-unscopables","./_iter-step","./_iterators","./_to-iobject","./_iter-define",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.array.iterator.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var addToUnscopables = require('./_add-to-unscopables')                                                                // 2
  , step             = require('./_iter-step')                                                                         // 3
  , Iterators        = require('./_iterators')                                                                         // 4
  , toIObject        = require('./_to-iobject');                                                                       // 5
                                                                                                                       // 6
// 22.1.3.4 Array.prototype.entries()                                                                                  // 7
// 22.1.3.13 Array.prototype.keys()                                                                                    // 8
// 22.1.3.29 Array.prototype.values()                                                                                  // 9
// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){                                   // 11
  this._t = toIObject(iterated); // target                                                                             // 12
  this._i = 0;                   // next index                                                                         // 13
  this._k = kind;                // kind                                                                               // 14
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
}, function(){                                                                                                         // 16
  var O     = this._t                                                                                                  // 17
    , kind  = this._k                                                                                                  // 18
    , index = this._i++;                                                                                               // 19
  if(!O || index >= O.length){                                                                                         // 20
    this._t = undefined;                                                                                               // 21
    return step(1);                                                                                                    // 22
  }                                                                                                                    // 23
  if(kind == 'keys'  )return step(0, index);                                                                           // 24
  if(kind == 'values')return step(0, O[index]);                                                                        // 25
  return step(0, [index, O[index]]);                                                                                   // 26
}, 'values');                                                                                                          // 27
                                                                                                                       // 28
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
Iterators.Arguments = Iterators.Array;                                                                                 // 30
                                                                                                                       // 31
addToUnscopables('keys');                                                                                              // 32
addToUnscopables('values');                                                                                            // 33
addToUnscopables('entries');                                                                                           // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_add-to-unscopables.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(){ /* empty */ };                                                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-step.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-step.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(done, value){                                                                                // 1
  return {value: value, done: !!done};                                                                                 // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks-ext.js":["./_wks",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-ext.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = require('./_wks');                                                                                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.symbol.js":["./_global","./_has","./_descriptors","./_export","./_redefine","./_meta","./_fails","./_shared","./_set-to-string-tag","./_uid","./_wks","./_wks-ext","./_wks-define","./_keyof","./_enum-keys","./_is-array","./_an-object","./_to-iobject","./_to-primitive","./_property-desc","./_object-create","./_object-gopn-ext","./_object-gopd","./_object-dp","./_object-keys","./_object-gopn","./_object-pie","./_object-gops","./_library","./_hide",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.symbol.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// ECMAScript 6 symbols shim                                                                                           // 2
var global         = require('./_global')                                                                              // 3
  , has            = require('./_has')                                                                                 // 4
  , DESCRIPTORS    = require('./_descriptors')                                                                         // 5
  , $export        = require('./_export')                                                                              // 6
  , redefine       = require('./_redefine')                                                                            // 7
  , META           = require('./_meta').KEY                                                                            // 8
  , $fails         = require('./_fails')                                                                               // 9
  , shared         = require('./_shared')                                                                              // 10
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 11
  , uid            = require('./_uid')                                                                                 // 12
  , wks            = require('./_wks')                                                                                 // 13
  , wksExt         = require('./_wks-ext')                                                                             // 14
  , wksDefine      = require('./_wks-define')                                                                          // 15
  , keyOf          = require('./_keyof')                                                                               // 16
  , enumKeys       = require('./_enum-keys')                                                                           // 17
  , isArray        = require('./_is-array')                                                                            // 18
  , anObject       = require('./_an-object')                                                                           // 19
  , toIObject      = require('./_to-iobject')                                                                          // 20
  , toPrimitive    = require('./_to-primitive')                                                                        // 21
  , createDesc     = require('./_property-desc')                                                                       // 22
  , _create        = require('./_object-create')                                                                       // 23
  , gOPNExt        = require('./_object-gopn-ext')                                                                     // 24
  , $GOPD          = require('./_object-gopd')                                                                         // 25
  , $DP            = require('./_object-dp')                                                                           // 26
  , $keys          = require('./_object-keys')                                                                         // 27
  , gOPD           = $GOPD.f                                                                                           // 28
  , dP             = $DP.f                                                                                             // 29
  , gOPN           = gOPNExt.f                                                                                         // 30
  , $Symbol        = global.Symbol                                                                                     // 31
  , $JSON          = global.JSON                                                                                       // 32
  , _stringify     = $JSON && $JSON.stringify                                                                          // 33
  , PROTOTYPE      = 'prototype'                                                                                       // 34
  , HIDDEN         = wks('_hidden')                                                                                    // 35
  , TO_PRIMITIVE   = wks('toPrimitive')                                                                                // 36
  , isEnum         = {}.propertyIsEnumerable                                                                           // 37
  , SymbolRegistry = shared('symbol-registry')                                                                         // 38
  , AllSymbols     = shared('symbols')                                                                                 // 39
  , OPSymbols      = shared('op-symbols')                                                                              // 40
  , ObjectProto    = Object[PROTOTYPE]                                                                                 // 41
  , USE_NATIVE     = typeof $Symbol == 'function'                                                                      // 42
  , QObject        = global.QObject;                                                                                   // 43
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45
                                                                                                                       // 46
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
var setSymbolDesc = DESCRIPTORS && $fails(function(){                                                                  // 48
  return _create(dP({}, 'a', {                                                                                         // 49
    get: function(){ return dP(this, 'a', {value: 7}).a; }                                                             // 50
  })).a != 7;                                                                                                          // 51
}) ? function(it, key, D){                                                                                             // 52
  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53
  if(protoDesc)delete ObjectProto[key];                                                                                // 54
  dP(it, key, D);                                                                                                      // 55
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);                                                  // 56
} : dP;                                                                                                                // 57
                                                                                                                       // 58
var wrap = function(tag){                                                                                              // 59
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60
  sym._k = tag;                                                                                                        // 61
  return sym;                                                                                                          // 62
};                                                                                                                     // 63
                                                                                                                       // 64
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){                                       // 65
  return typeof it == 'symbol';                                                                                        // 66
} : function(it){                                                                                                      // 67
  return it instanceof $Symbol;                                                                                        // 68
};                                                                                                                     // 69
                                                                                                                       // 70
var $defineProperty = function defineProperty(it, key, D){                                                             // 71
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);                                                            // 72
  anObject(it);                                                                                                        // 73
  key = toPrimitive(key, true);                                                                                        // 74
  anObject(D);                                                                                                         // 75
  if(has(AllSymbols, key)){                                                                                            // 76
    if(!D.enumerable){                                                                                                 // 77
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));                                                           // 78
      it[HIDDEN][key] = true;                                                                                          // 79
    } else {                                                                                                           // 80
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                                   // 81
      D = _create(D, {enumerable: createDesc(0, false)});                                                              // 82
    } return setSymbolDesc(it, key, D);                                                                                // 83
  } return dP(it, key, D);                                                                                             // 84
};                                                                                                                     // 85
var $defineProperties = function defineProperties(it, P){                                                              // 86
  anObject(it);                                                                                                        // 87
  var keys = enumKeys(P = toIObject(P))                                                                                // 88
    , i    = 0                                                                                                         // 89
    , l = keys.length                                                                                                  // 90
    , key;                                                                                                             // 91
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                            // 92
  return it;                                                                                                           // 93
};                                                                                                                     // 94
var $create = function create(it, P){                                                                                  // 95
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96
};                                                                                                                     // 97
var $propertyIsEnumerable = function propertyIsEnumerable(key){                                                        // 98
  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;                                // 100
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101
};                                                                                                                     // 102
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                            // 103
  it  = toIObject(it);                                                                                                 // 104
  key = toPrimitive(key, true);                                                                                        // 105
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;                                        // 106
  var D = gOPD(it, key);                                                                                               // 107
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                           // 108
  return D;                                                                                                            // 109
};                                                                                                                     // 110
var $getOwnPropertyNames = function getOwnPropertyNames(it){                                                           // 111
  var names  = gOPN(toIObject(it))                                                                                     // 112
    , result = []                                                                                                      // 113
    , i      = 0                                                                                                       // 114
    , key;                                                                                                             // 115
  while(names.length > i){                                                                                             // 116
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);                            // 117
  } return result;                                                                                                     // 118
};                                                                                                                     // 119
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                                       // 120
  var IS_OP  = it === ObjectProto                                                                                      // 121
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))                                                                 // 122
    , result = []                                                                                                      // 123
    , i      = 0                                                                                                       // 124
    , key;                                                                                                             // 125
  while(names.length > i){                                                                                             // 126
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);       // 127
  } return result;                                                                                                     // 128
};                                                                                                                     // 129
                                                                                                                       // 130
// 19.4.1.1 Symbol([description])                                                                                      // 131
if(!USE_NATIVE){                                                                                                       // 132
  $Symbol = function Symbol(){                                                                                         // 133
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');                                        // 134
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135
    var $set = function(value){                                                                                        // 136
      if(this === ObjectProto)$set.call(OPSymbols, value);                                                             // 137
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                                        // 138
      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139
    };                                                                                                                 // 140
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});                         // 141
    return wrap(tag);                                                                                                  // 142
  };                                                                                                                   // 143
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){                                                        // 144
    return this._k;                                                                                                    // 145
  });                                                                                                                  // 146
                                                                                                                       // 147
  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148
  $DP.f   = $defineProperty;                                                                                           // 149
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150
  require('./_object-pie').f  = $propertyIsEnumerable;                                                                 // 151
  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152
                                                                                                                       // 153
  if(DESCRIPTORS && !require('./_library')){                                                                           // 154
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155
  }                                                                                                                    // 156
                                                                                                                       // 157
  wksExt.f = function(name){                                                                                           // 158
    return wrap(wks(name));                                                                                            // 159
  }                                                                                                                    // 160
}                                                                                                                      // 161
                                                                                                                       // 162
$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});                                           // 163
                                                                                                                       // 164
for(var symbols = (                                                                                                    // 165
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);                                                           // 168
                                                                                                                       // 169
for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);                               // 170
                                                                                                                       // 171
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172
  // 19.4.2.1 Symbol.for(key)                                                                                          // 173
  'for': function(key){                                                                                                // 174
    return has(SymbolRegistry, key += '')                                                                              // 175
      ? SymbolRegistry[key]                                                                                            // 176
      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177
  },                                                                                                                   // 178
  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
  keyFor: function keyFor(key){                                                                                        // 180
    if(isSymbol(key))return keyOf(SymbolRegistry, key);                                                                // 181
    throw TypeError(key + ' is not a symbol!');                                                                        // 182
  },                                                                                                                   // 183
  useSetter: function(){ setter = true; },                                                                             // 184
  useSimple: function(){ setter = false; }                                                                             // 185
});                                                                                                                    // 186
                                                                                                                       // 187
$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188
  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
  create: $create,                                                                                                     // 190
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
  defineProperty: $defineProperty,                                                                                     // 192
  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
  defineProperties: $defineProperties,                                                                                 // 194
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196
  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198
  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200
});                                                                                                                    // 201
                                                                                                                       // 202
// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){                                            // 204
  var S = $Symbol();                                                                                                   // 205
  // MS Edge converts symbol values to JSON as {}                                                                      // 206
  // WebKit converts symbol values to JSON as null                                                                     // 207
  // V8 throws on boxed symbols                                                                                        // 208
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';                   // 209
})), 'JSON', {                                                                                                         // 210
  stringify: function stringify(it){                                                                                   // 211
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined                                     // 212
    var args = [it]                                                                                                    // 213
      , i    = 1                                                                                                       // 214
      , replacer, $replacer;                                                                                           // 215
    while(arguments.length > i)args.push(arguments[i++]);                                                              // 216
    replacer = args[1];                                                                                                // 217
    if(typeof replacer == 'function')$replacer = replacer;                                                             // 218
    if($replacer || !isArray(replacer))replacer = function(key, value){                                                // 219
      if($replacer)value = $replacer.call(this, key, value);                                                           // 220
      if(!isSymbol(value))return value;                                                                                // 221
    };                                                                                                                 // 222
    args[1] = replacer;                                                                                                // 223
    return _stringify.apply($JSON, args);                                                                              // 224
  }                                                                                                                    // 225
});                                                                                                                    // 226
                                                                                                                       // 227
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 229
// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230
setToStringTag($Symbol, 'Symbol');                                                                                     // 231
// 20.2.1.9 Math[@@toStringTag]                                                                                        // 232
setToStringTag(Math, 'Math', true);                                                                                    // 233
// 24.3.3 JSON[@@toStringTag]                                                                                          // 234
setToStringTag(global.JSON, 'JSON', true);                                                                             // 235
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_meta.js":["./_uid","./_is-object","./_has","./_object-dp","./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_meta.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var META     = require('./_uid')('meta')                                                                               // 1
  , isObject = require('./_is-object')                                                                                 // 2
  , has      = require('./_has')                                                                                       // 3
  , setDesc  = require('./_object-dp').f                                                                               // 4
  , id       = 0;                                                                                                      // 5
var isExtensible = Object.isExtensible || function(){                                                                  // 6
  return true;                                                                                                         // 7
};                                                                                                                     // 8
var FREEZE = !require('./_fails')(function(){                                                                          // 9
  return isExtensible(Object.preventExtensions({}));                                                                   // 10
});                                                                                                                    // 11
var setMeta = function(it){                                                                                            // 12
  setDesc(it, META, {value: {                                                                                          // 13
    i: 'O' + ++id, // object ID                                                                                        // 14
    w: {}          // weak collections IDs                                                                             // 15
  }});                                                                                                                 // 16
};                                                                                                                     // 17
var fastKey = function(it, create){                                                                                    // 18
  // return primitive with prefix                                                                                      // 19
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                       // 20
  if(!has(it, META)){                                                                                                  // 21
    // can't set metadata to uncaught frozen object                                                                    // 22
    if(!isExtensible(it))return 'F';                                                                                   // 23
    // not necessary to add metadata                                                                                   // 24
    if(!create)return 'E';                                                                                             // 25
    // add missing metadata                                                                                            // 26
    setMeta(it);                                                                                                       // 27
  // return object ID                                                                                                  // 28
  } return it[META].i;                                                                                                 // 29
};                                                                                                                     // 30
var getWeak = function(it, create){                                                                                    // 31
  if(!has(it, META)){                                                                                                  // 32
    // can't set metadata to uncaught frozen object                                                                    // 33
    if(!isExtensible(it))return true;                                                                                  // 34
    // not necessary to add metadata                                                                                   // 35
    if(!create)return false;                                                                                           // 36
    // add missing metadata                                                                                            // 37
    setMeta(it);                                                                                                       // 38
  // return hash weak collections IDs                                                                                  // 39
  } return it[META].w;                                                                                                 // 40
};                                                                                                                     // 41
// add metadata on freeze-family methods calling                                                                       // 42
var onFreeze = function(it){                                                                                           // 43
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);                                            // 44
  return it;                                                                                                           // 45
};                                                                                                                     // 46
var meta = module.exports = {                                                                                          // 47
  KEY:      META,                                                                                                      // 48
  NEED:     false,                                                                                                     // 49
  fastKey:  fastKey,                                                                                                   // 50
  getWeak:  getWeak,                                                                                                   // 51
  onFreeze: onFreeze                                                                                                   // 52
};                                                                                                                     // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks-define.js":["./_global","./_core","./_library","./_wks-ext","./_object-dp",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-define.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global         = require('./_global')                                                                              // 1
  , core           = require('./_core')                                                                                // 2
  , LIBRARY        = require('./_library')                                                                             // 3
  , wksExt         = require('./_wks-ext')                                                                             // 4
  , defineProperty = require('./_object-dp').f;                                                                        // 5
module.exports = function(name){                                                                                       // 6
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});               // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_keyof.js":["./_object-keys","./_to-iobject",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_keyof.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getKeys   = require('./_object-keys')                                                                              // 1
  , toIObject = require('./_to-iobject');                                                                              // 2
module.exports = function(object, el){                                                                                 // 3
  var O      = toIObject(object)                                                                                       // 4
    , keys   = getKeys(O)                                                                                              // 5
    , length = keys.length                                                                                             // 6
    , index  = 0                                                                                                       // 7
    , key;                                                                                                             // 8
  while(length > index)if(O[key = keys[index++]] === el)return key;                                                    // 9
};                                                                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_enum-keys.js":["./_object-keys","./_object-gops","./_object-pie",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-keys.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all enumerable object keys, includes symbols                                                                        // 1
var getKeys = require('./_object-keys')                                                                                // 2
  , gOPS    = require('./_object-gops')                                                                                // 3
  , pIE     = require('./_object-pie');                                                                                // 4
module.exports = function(it){                                                                                         // 5
  var result     = getKeys(it)                                                                                         // 6
    , getSymbols = gOPS.f;                                                                                             // 7
  if(getSymbols){                                                                                                      // 8
    var symbols = getSymbols(it)                                                                                       // 9
      , isEnum  = pIE.f                                                                                                // 10
      , i       = 0                                                                                                    // 11
      , key;                                                                                                           // 12
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);                                  // 13
  } return result;                                                                                                     // 14
};                                                                                                                     // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gops.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gops.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = Object.getOwnPropertySymbols;                                                                              // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-pie.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-pie.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = {}.propertyIsEnumerable;                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-array.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-array.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.2 IsArray(argument)                                                                                             // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Array.isArray || function isArray(arg){                                                               // 3
  return cof(arg) == 'Array';                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn-ext.js":["./_to-iobject","./_object-gopn",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
var toIObject = require('./_to-iobject')                                                                               // 2
  , gOPN      = require('./_object-gopn').f                                                                            // 3
  , toString  = {}.toString;                                                                                           // 4
                                                                                                                       // 5
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6
  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7
                                                                                                                       // 8
var getWindowNames = function(it){                                                                                     // 9
  try {                                                                                                                // 10
    return gOPN(it);                                                                                                   // 11
  } catch(e){                                                                                                          // 12
    return windowNames.slice();                                                                                        // 13
  }                                                                                                                    // 14
};                                                                                                                     // 15
                                                                                                                       // 16
module.exports.f = function getOwnPropertyNames(it){                                                                   // 17
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18
};                                                                                                                     // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
var $keys      = require('./_object-keys-internal')                                                                    // 2
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3
                                                                                                                       // 4
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){                                             // 5
  return $keys(O, hiddenKeys);                                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopd.js":["./_object-pie","./_property-desc","./_to-iobject","./_to-primitive","./_has","./_ie8-dom-define","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopd.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var pIE            = require('./_object-pie')                                                                          // 1
  , createDesc     = require('./_property-desc')                                                                       // 2
  , toIObject      = require('./_to-iobject')                                                                          // 3
  , toPrimitive    = require('./_to-primitive')                                                                        // 4
  , has            = require('./_has')                                                                                 // 5
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 6
  , gOPD           = Object.getOwnPropertyDescriptor;                                                                  // 7
                                                                                                                       // 8
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){                                // 9
  O = toIObject(O);                                                                                                    // 10
  P = toPrimitive(P, true);                                                                                            // 11
  if(IE8_DOM_DEFINE)try {                                                                                              // 12
    return gOPD(O, P);                                                                                                 // 13
  } catch(e){ /* empty */ }                                                                                            // 14
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);                                                             // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.to-string.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.to-string.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.symbol.async-iterator.js":["./_wks-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('asyncIterator');                                                                             // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.symbol.observable.js":["./_wks-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('observable');                                                                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.set-prototype-of.js":["./_export","./_set-proto",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});                                           // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-proto.js":["./_is-object","./_an-object","./_ctx","./_object-gopd",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-proto.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
/* eslint-disable no-proto */                                                                                          // 2
var isObject = require('./_is-object')                                                                                 // 3
  , anObject = require('./_an-object');                                                                                // 4
var check = function(O, proto){                                                                                        // 5
  anObject(O);                                                                                                         // 6
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");                          // 7
};                                                                                                                     // 8
module.exports = {                                                                                                     // 9
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
    function(test, buggy, set){                                                                                        // 11
      try {                                                                                                            // 12
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13
        set(test, []);                                                                                                 // 14
        buggy = !(test instanceof Array);                                                                              // 15
      } catch(e){ buggy = true; }                                                                                      // 16
      return function setPrototypeOf(O, proto){                                                                        // 17
        check(O, proto);                                                                                               // 18
        if(buggy)O.__proto__ = proto;                                                                                  // 19
        else set(O, proto);                                                                                            // 20
        return O;                                                                                                      // 21
      };                                                                                                               // 22
    }({}, false) : undefined),                                                                                         // 23
  check: check                                                                                                         // 24
};                                                                                                                     // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.create.js":["./_export","./_object-create",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.create.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export')                                                                                     // 1
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
$export($export.S, 'Object', {create: require('./_object-create')});                                                   // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/modules/client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.modules = exports, {
  meteorInstall: meteorInstall,
  Buffer: Buffer,
  process: process
});

})();
