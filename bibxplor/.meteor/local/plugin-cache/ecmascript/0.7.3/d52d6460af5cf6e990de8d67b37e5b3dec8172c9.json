{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/collection_tests.js","filenameRelative":"/packages/mongo/collection_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/collection_tests.js.map","sourceFileName":"/packages/mongo/collection_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"collection_tests"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nTinytest.add('collection - call Mongo.Collection without new', function (test) {\n  test.throws(function () {\n    Mongo.Collection(null);\n  }, /use \"new\" to construct a Mongo\\.Collection/);\n});\nTinytest.add('collection - call new Mongo.Collection multiple times', function (test) {\n  var collectionName = 'multiple_times_1_' + test.id;\n  new Mongo.Collection(collectionName);\n  test.throws(function () {\n    new Mongo.Collection(collectionName);\n  }, /There is already a collection named/);\n});\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true', function (test) {\n  var collectionName = 'multiple_times_2_' + test.id;\n  new Mongo.Collection(collectionName);\n\n  try {\n    new Mongo.Collection(collectionName, {\n      _suppressSameNameError: true\n    });\n    test.ok();\n  } catch (error) {\n    console.log(error);\n    test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n  }\n});\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false', function (test) {\n  var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n  var methodCollectionName = 'hasmethods' + test.id;\n  var hasmethods = new Mongo.Collection(methodCollectionName);\n  test.equal((0, _typeof3.default)(hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert']), 'function');\n  var noMethodCollectionName = 'nomethods' + test.id;\n  var nomethods = new Mongo.Collection(noMethodCollectionName, {\n    defineMutationMethods: false\n  });\n  test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n});\nTinytest.add('collection - call find with sort function', function (test) {\n  var initialize = function (collection) {\n    collection.insert({\n      a: 2\n    });\n    collection.insert({\n      a: 3\n    });\n    collection.insert({\n      a: 1\n    });\n  };\n\n  var sorter = function (a, b) {\n    return a.a - b.a;\n  };\n\n  var getSorted = function (collection) {\n    return collection.find({}, {\n      sort: sorter\n    }).map(function (doc) {\n      return doc.a;\n    });\n  };\n\n  var collectionName = 'sort' + test.id;\n  var localCollection = new Mongo.Collection(null);\n  var namedCollection = new Mongo.Collection(collectionName, {\n    connection: null\n  });\n  initialize(localCollection);\n  test.equal(getSorted(localCollection), [1, 2, 3]);\n  initialize(namedCollection);\n  test.equal(getSorted(namedCollection), [1, 2, 3]);\n});\nTinytest.add('collection - call native find with sort function', function (test) {\n  var collectionName = 'sortNative' + test.id;\n  var nativeCollection = new Mongo.Collection(collectionName);\n\n  if (Meteor.isServer) {\n    test.throws(function () {\n      nativeCollection.find({}, {\n        sort: function () {}\n      }).map(function (doc) {\n        return doc.a;\n      });\n    }, /Illegal sort clause/);\n  }\n});","map":{"version":3,"sources":["/packages/mongo/collection_tests.js"],"names":["Tinytest","add","test","throws","Mongo","Collection","collectionName","id","_suppressSameNameError","ok","error","console","log","fail","handlerPropName","Meteor","isClient","methodCollectionName","hasmethods","equal","_connection","noMethodCollectionName","nomethods","defineMutationMethods","undefined","initialize","collection","insert","a","sorter","b","getSorted","find","sort","map","doc","localCollection","namedCollection","connection","nativeCollection","isServer"],"mappings":"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","file":"/packages/mongo/collection_tests.js.map","sourcesContent":["Tinytest.add(\n  'collection - call Mongo.Collection without new',\n  function (test) {\n    test.throws(\n      function () {\n        Mongo.Collection(null);\n      },\n      /use \"new\" to construct a Mongo\\.Collection/\n    );\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times',\n  function (test) {\n    var collectionName = 'multiple_times_1_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    test.throws(\n      function () {\n        new Mongo.Collection(collectionName);\n      },\n      /There is already a collection named/\n    );\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true',\n  function (test) {\n    var collectionName = 'multiple_times_2_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    try {\n      new Mongo.Collection(collectionName, {_suppressSameNameError: true});\n      test.ok();\n    } catch (error) {\n      console.log(error);\n      test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n    }\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false',\n  function (test) {\n    var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n\n    var methodCollectionName = 'hasmethods' + test.id;\n    var hasmethods = new Mongo.Collection(methodCollectionName);\n    test.equal(typeof hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert'], 'function');\n\n    var noMethodCollectionName = 'nomethods' + test.id;\n    var nomethods = new Mongo.Collection(noMethodCollectionName, {defineMutationMethods: false});\n    test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n  }\n);\n\nTinytest.add('collection - call find with sort function',\n  function (test) {\n    var initialize = function (collection) {\n      collection.insert({a: 2});\n      collection.insert({a: 3});\n      collection.insert({a: 1});\n    };\n\n    var sorter = function (a, b) {\n      return a.a - b.a;\n    };\n\n    var getSorted = function (collection) {\n      return collection.find({}, {sort: sorter}).map(function (doc) { return doc.a; });\n    };\n\n    var collectionName = 'sort' + test.id;\n    var localCollection = new Mongo.Collection(null);\n    var namedCollection = new Mongo.Collection(collectionName, {connection: null});\n\n    initialize(localCollection);\n    test.equal(getSorted(localCollection), [1, 2, 3]);\n\n    initialize(namedCollection);\n    test.equal(getSorted(namedCollection), [1, 2, 3]);\n  }\n);\n\nTinytest.add('collection - call native find with sort function',\n  function (test) {\n    var collectionName = 'sortNative' + test.id;\n    var nativeCollection = new Mongo.Collection(collectionName);\n\n    if (Meteor.isServer) {\n      test.throws(\n        function () {\n          nativeCollection\n            .find({}, {\n              sort: function () {},\n            })\n            .map(function (doc) {\n              return doc.a;\n            });\n        },\n        /Illegal sort clause/\n      );\n    }\n  }\n);\n"]},"hash":"d52d6460af5cf6e990de8d67b37e5b3dec8172c9"}
