{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/minimongo/selector.js","filenameRelative":"/packages/minimongo/selector.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/minimongo/selector.js.map","sourceFileName":"/packages/minimongo/selector.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"selector"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// The minimongo selector compiler!\n// Terminology:\n//  - a \"selector\" is the EJSON object representing a selector\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a \"result object\" is an object with a \"result\" field and maybe\n//    distance and arrayIndices.\n//  - a \"branched value\" is an object with a \"value\" field and maybe\n//    \"dontIterate\" and \"arrayIndices\".\n//  - a \"document\" is a top-level object that can be stored in a collection.\n//  - a \"lookup function\" is a function that takes in a document and returns\n//    an array of \"branched values\".\n//  - a \"branched matcher\" maps from an array of branched values to a result\n//    object.\n//  - an \"element matcher\" maps from a single value to a bool.\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nMinimongo.Matcher = function (selector) {\n  var self = this; // A set (object mapping string -> *) of all of the document paths looked\n  // at by the selector. Also includes the empty string if it may look at any\n  // path (eg, $where).\n\n  self._paths = {}; // Set to true if compilation finds a $near.\n\n  self._hasGeoQuery = false; // Set to true if compilation finds a $where.\n\n  self._hasWhere = false; // Set to false if compilation finds anything other than a simple equality or\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\n  // scalars as operands.\n\n  self._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null\n  // if such document is too hard to find.\n\n  self._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user\n  // passed in a function; otherwise is definitely an object (eg, IDs are\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n  // Sorter._useWithMatcher.\n\n  self._selector = null;\n  self._docMatcher = self._compileSelector(selector);\n};\n\n_.extend(Minimongo.Matcher.prototype, {\n  documentMatches: function (doc) {\n    if (!doc || (typeof doc === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(doc)) !== \"object\") {\n      throw Error(\"documentMatches needs a document\");\n    }\n\n    return this._docMatcher(doc);\n  },\n  hasGeoQuery: function () {\n    return this._hasGeoQuery;\n  },\n  hasWhere: function () {\n    return this._hasWhere;\n  },\n  isSimple: function () {\n    return this._isSimple;\n  },\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector: function (selector) {\n    var self = this; // you can pass a literal function instead of a selector\n\n    if (selector instanceof Function) {\n      self._isSimple = false;\n      self._selector = selector;\n\n      self._recordPathUsed('');\n\n      return function (doc) {\n        return {\n          result: !!selector.call(doc)\n        };\n      };\n    } // shorthand -- scalars match _id\n\n\n    if (LocalCollection._selectorIsId(selector)) {\n      self._selector = {\n        _id: selector\n      };\n\n      self._recordPathUsed('_id');\n\n      return function (doc) {\n        return {\n          result: EJSON.equals(doc._id, selector)\n        };\n      };\n    } // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n\n\n    if (!selector || '_id' in selector && !selector._id) {\n      self._isSimple = false;\n      return nothingMatcher;\n    } // Top level can't be an array or true or binary.\n\n\n    if (typeof selector === 'boolean' || isArray(selector) || EJSON.isBinary(selector)) throw new Error(\"Invalid selector: \" + selector);\n    self._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, self, {\n      isRoot: true\n    });\n  },\n  _recordPathUsed: function (path) {\n    this._paths[path] = true;\n  },\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths: function () {\n    return _.keys(this._paths);\n  }\n}); // Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\n\n\nvar compileDocumentSelector = function (docSelector, matcher, options) {\n  options = options || {};\n  var docMatchers = [];\n\n  _.each(docSelector, function (subSelector, key) {\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!_.has(LOGICAL_OPERATORS, key)) throw new Error(\"Unrecognized logical operator: \" + key);\n      matcher._isSimple = false;\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch));\n    } else {\n      // Record this path, but only if we aren't in an elemMatcher, since in an\n      // elemMatch this is a path inside an object in an array, not in the doc\n      // root.\n      if (!options.inElemMatch) matcher._recordPathUsed(key);\n      var lookUpByIndex = makeLookupFunction(key);\n      var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);\n      docMatchers.push(function (doc) {\n        var branchValues = lookUpByIndex(doc);\n        return valueMatcher(branchValues);\n      });\n    }\n  });\n\n  return andDocumentMatchers(docMatchers);\n}; // Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\n\n\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));\n  } else if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  } else {\n    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));\n  }\n}; // Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\n\n\nvar convertElementMatcherToBranchedMatcher = function (elementMatcher, options) {\n  options = options || {};\n  return function (branches) {\n    var expanded = branches;\n\n    if (!options.dontExpandLeafArrays) {\n      expanded = expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n    }\n\n    var ret = {};\n    ret.result = _.any(expanded, function (element) {\n      var matched = elementMatcher(element.value); // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) element.arrayIndices = [matched];\n        matched = true;\n      } // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n\n\n      if (matched && element.arrayIndices) ret.arrayIndices = element.arrayIndices;\n      return matched;\n    });\n    return ret;\n  };\n}; // Takes a RegExp object and returns an element matcher.\n\n\nregexpElementMatcher = function (regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      // Comparing two regexps means seeing if the regexps are identical\n      // (really!). Underscore knows how.\n      return _.isEqual(value, regexp);\n    } // Regexps only work against strings.\n\n\n    if (typeof value !== 'string') return false; // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n\n    regexp.lastIndex = 0;\n    return regexp.test(value);\n  };\n}; // Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\n\n\nequalityElementMatcher = function (elementSelector) {\n  if (isOperatorObject(elementSelector)) throw Error(\"Can't create equalityValueSelector for operator object\"); // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n\n  if (elementSelector == null) {\n    // undefined or null\n    return function (value) {\n      return value == null; // undefined or null\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n}; // Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\n\n\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  var operatorMatchers = [];\n\n  _.each(valueSelector, function (operand, operator) {\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) && _.isNumber(operand);\n\n    var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) && _.isArray(operand) && !_.any(operand, _.isObject);\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (_.has(VALUE_OPERATORS, operator)) {\n      operatorMatchers.push(VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      operatorMatchers.push(convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options));\n    } else {\n      throw new Error(\"Unrecognized operator: \" + operator);\n    }\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n};\n\nvar compileArrayOfDocumentSelectors = function (selectors, matcher, inElemMatch) {\n  if (!isArray(selectors) || _.isEmpty(selectors)) throw Error(\"$and/$or/$nor must be nonempty array\");\n  return _.map(selectors, function (subSelector) {\n    if (!isPlainObject(subSelector)) throw Error(\"$or/$and/$nor entries need to be full objects\");\n    return compileDocumentSelector(subSelector, matcher, {\n      inElemMatch: inElemMatch\n    });\n  });\n}; // Operators that appear at the top level of a document selector.\n\n\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n    return andDocumentMatchers(matchers);\n  },\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n\n    if (matchers.length === 1) return matchers[0];\n    return function (doc) {\n      var result = _.any(matchers, function (f) {\n        return f(doc).result;\n      }); // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n\n\n      return {\n        result: result\n      };\n    };\n  },\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = _.all(matchers, function (f) {\n        return !f(doc).result;\n      }); // Never set arrayIndices, because we only match if nothing in particular\n      // \"matched\" (and because this is consistent with MongoDB).\n\n\n      return {\n        result: result\n      };\n    };\n  },\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add \"return\"; not sure exactly what it is.\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);\n    }\n\n    return function (doc) {\n      // We make the document available as both `this` and `obj`.\n      // XXX not sure what we should do if this throws\n      return {\n        result: selectorValue.call(doc, doc)\n      };\n    };\n  },\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {\n        result: true\n      };\n    };\n  }\n}; // Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\n\nvar invertBranchedMatcher = function (branchedMatcher) {\n  return function (branchValues) {\n    var invertMe = branchedMatcher(branchValues); // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n\n    return {\n      result: !invertMe.result\n    };\n  };\n}; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\n\n\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!_.has(valueSelector, '$regex')) throw Error(\"$options needs a $regex\");\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near) throw Error(\"$maxDistance needs a $near\");\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!isArray(operand)) throw Error(\"$all requires array\"); // Not sure why, but this seems to be what MongoDB does.\n\n    if (_.isEmpty(operand)) return nothingMatcher;\n    var branchedMatchers = [];\n\n    _.each(operand, function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) throw Error(\"no $ expressions in $all\"); // This is always a regexp or equality selector.\n\n      branchedMatchers.push(compileValueSelector(criterion, matcher));\n    }); // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n\n\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) throw Error(\"$near can't be inside another $ operator\");\n    matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be \n    // matched using $geometry.\n\n    var maxDistance, point, distance;\n\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) return null;\n        if (!value.type) return GeoJSON.pointDistance(point, {\n          type: \"Point\",\n          coordinates: pointToArray(value)\n        });\n\n        if (value.type === \"Point\") {\n          return GeoJSON.pointDistance(point, value);\n        } else {\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;\n        }\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n      if (!isArray(operand) && !isPlainObject(operand)) throw Error(\"$near argument must be coordinate pair or GeoJSON\");\n      point = pointToArray(operand);\n\n      distance = function (value) {\n        if (!isArray(value) && !isPlainObject(value)) return null;\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      branchedValues = expandArraysInBranches(branchedValues);\n      var result = {\n        result: false\n      };\n\n      _.each(branchedValues, function (branch) {\n        if (!((0, _typeof3.default)(branch.value) === \"object\")) {\n          return;\n        }\n\n        var curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.\n\n        if (curDistance === null || curDistance > maxDistance) return; // Skip anything that's a tie.\n\n        if (result.distance !== undefined && result.distance <= curDistance) return;\n        result.result = true;\n        result.distance = curDistance;\n        if (!branch.arrayIndices) delete result.arrayIndices;else result.arrayIndices = branch.arrayIndices;\n      });\n\n      return result;\n    };\n  }\n}; // Helpers for $near.\n\nvar distanceCoordinatePairs = function (a, b) {\n  a = pointToArray(a);\n  b = pointToArray(b);\n  var x = a[0] - b[0];\n  var y = a[1] - b[1];\n  if (_.isNaN(x) || _.isNaN(y)) return null;\n  return Math.sqrt(x * x + y * y);\n}; // Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\n\n\nvar pointToArray = function (point) {\n  return _.map(point, _.identity);\n}; // Helper for $lt/$gt/$lte/$gte.\n\n\nvar makeInequality = function (cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (isArray(operand)) {\n        return function () {\n          return false;\n        };\n      } // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n\n\n      if (operand === undefined) operand = null;\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined) value = null; // Comparisons are never true among things of different type (except\n        // null vs undefined).\n\n        if (LocalCollection._f._type(value) !== operandType) return false;\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n};\n\nvar isBitSet = function (value, bit) {\n  if (value === 0) return false;\n  return (value & 1 << bit) !== 0;\n};\n\nvar eightBits = [0, 1, 2, 3, 4, 5, 6, 7];\n\nvar get8BitsSet = function (value) {\n  if (value === 0) return [];\n  return _.filter(eightBits, function (bit) {\n    return isBitSet(value, bit);\n  });\n};\n\nvar convertNumberToUint8Array = function (number) {\n  var numOfBits = number.toString(2).length;\n  var num8BitGroups = Math.ceil(numOfBits / 8);\n  var byteArray = new Uint8Array(num8BitGroups);\n\n  for (var i = 0; i < byteArray.length; i++) {\n    var byte = number & 0xff;\n    byteArray[i] = byte;\n    number = (number - byte) / 256;\n  }\n\n  return byteArray;\n};\n\nvar ensureUint8Array = function (number) {\n  return number instanceof Uint8Array ? number : convertNumberToUint8Array(number);\n};\n\nvar ensureOperandUint8Array = function (operand) {\n  if (!(operand instanceof Uint8Array)) {\n    operand = _.reduce(operand, function (num, n) {\n      return num | 1 << n;\n    }, 0);\n    operand = convertNumberToUint8Array(operand);\n  }\n\n  return operand;\n};\n\nvar bitsClear = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(_.find(bitsSetOp, function (bit) {\n    return bitsSetVal.indexOf(bit) === -1;\n  }));\n};\n\nvar bitsSet = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(_.find(bitsSetOp, function (bit) {\n    return bitsSetVal.indexOf(bit) !== -1;\n  }));\n};\n\nvar anyBitCompare = function (operand, value, setOrClear) {\n  return _.isUndefined(_.find(operand, function (op, i) {\n    var bitsSetOp = get8BitsSet(op);\n    var bitsSetVal = get8BitsSet(value[i]);\n    return setOrClear(bitsSetOp, bitsSetVal);\n  }));\n};\n\nvar allBitCompare = function (operand, value, setOrClear) {\n  return _.filter(operand, function (op, i) {\n    var bitsSetOp = get8BitsSet(op);\n    var bitsSetVal = get8BitsSet(value[i]);\n    return !setOrClear(bitsSetOp, bitsSetVal);\n  }).length === 0;\n}; // Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\n\n\nELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n        throw Error(\"argument to $mod must be an array of two numbers\");\n      } // XXX could require to be ints or round or something\n\n\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!isArray(operand)) throw Error(\"$in needs an array\");\n      var elementMatchers = [];\n\n      _.each(operand, function (option) {\n        if (option instanceof RegExp) elementMatchers.push(regexpElementMatcher(option));else if (isOperatorObject(option)) throw Error(\"cannot nest $ under $in\");else elementMatchers.push(equalityElementMatcher(option));\n      });\n\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) value = null;\n        return _.any(elementMatchers, function (e) {\n          return e(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error(\"$size needs a number\");\n      }\n\n      return function (value) {\n        return isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand !== 'number') throw Error(\"$type needs a number\");\n      return function (value) {\n        return value !== undefined && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $bitsAnyClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array)) throw Error(\"$bitsAnyClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array)) return false;\n        if (value === 0) return true;\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n        return anyBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAllClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array)) throw Error(\"$bitsAllClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array)) return false;\n        if (value === 0) return true;\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n        return allBitCompare(operand, value, bitsSet);\n      };\n    }\n  },\n  $bitsAllSet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array)) throw Error(\"$bitsAllSet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array)) return false;\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n        return allBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAnySet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array)) throw Error(\"$bitsAnySet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array)) return false;\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n        return _.isUndefined(_.find(operand, function (op, i) {\n          var bitsSetOp = get8BitsSet(op);\n          var bitsSetVal = get8BitsSet(value[i]);\n          return bitsSet(bitsSetOp, bitsSetVal);\n        }));\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) throw Error(\"$regex has to be a string or RegExp\");\n      var regexp;\n\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself. (See also\n        // Mongo.Collection._rewriteSelector.)\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) throw new Error(\"Only the i, m, and g regexp options are supported\");\n        var regexSource = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(regexSource, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isPlainObject(operand)) throw Error(\"$elemMatch need an object\");\n      var subMatcher, isDocMatcher;\n\n      if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {\n        subMatcher = compileValueSelector(operand, matcher);\n        isDocMatcher = false;\n      } else {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher, {\n          inElemMatch: true\n        });\n        isDocMatcher = true;\n      }\n\n      return function (value) {\n        if (!isArray(value)) return false;\n\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg;\n\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement)) return false;\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{\n              value: arrayElement,\n              dontIterate: true\n            }];\n          } // XXX support $near in $elemMatch by propagating $distance?\n\n\n          if (subMatcher(arg).result) return i; // specially understood to mean \"use as arrayIndices\"\n        }\n\n        return false;\n      };\n    }\n  }\n}; // makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we \"branch\". When we \"branch\", if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively \"branch\" over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like \"implicit\", but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\n\nmakeLookupFunction = function (key, options) {\n  options = options || {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var firstPartIsNumeric = isNumericKey(firstPart);\n  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);\n  var lookupRest;\n\n  if (parts.length > 1) {\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));\n  }\n\n  var omitUnnecessaryFields = function (retVal) {\n    if (!retVal.dontIterate) delete retVal.dontIterate;\n    if (retVal.arrayIndices && !retVal.arrayIndices.length) delete retVal.arrayIndices;\n    return retVal;\n  }; // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n\n\n  return function (doc, arrayIndices) {\n    if (!arrayIndices) arrayIndices = [];\n\n    if (isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(firstPartIsNumeric && firstPart < doc.length)) return []; // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    } // Do our first lookup.\n\n\n    var firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as \"don't iterate\".\n\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        value: firstLevel,\n        dontIterate: isArray(doc) && isArray(firstLevel),\n        arrayIndices: arrayIndices\n      })];\n    } // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n\n\n    if (!isIndexable(firstLevel)) {\n      if (isArray(doc)) return [];\n      return [omitUnnecessaryFields({\n        value: undefined,\n        arrayIndices: arrayIndices\n      })];\n    }\n\n    var result = [];\n\n    var appendToResult = function (more) {\n      Array.prototype.push.apply(result, more);\n    }; // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n\n\n    appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also \"branch\": try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // \"look up this index\" in that case, not \"also look up this index in all\n    // the elements of the array\".\n\n    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {\n      _.each(firstLevel, function (branch, arrayIndex) {\n        if (isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n};\n\nMinimongoTest.makeLookupFunction = makeLookupFunction;\n\nexpandArraysInBranches = function (branches, skipTheArrays) {\n  var branchesOut = [];\n\n  _.each(branches, function (branch) {\n    var thisIsArray = isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        value: branch.value,\n        arrayIndices: branch.arrayIndices\n      });\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      _.each(branch.value, function (leaf, i) {\n        branchesOut.push({\n          value: leaf,\n          arrayIndices: (branch.arrayIndices || []).concat(i)\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n};\n\nvar nothingMatcher = function (docOrBranchedValues) {\n  return {\n    result: false\n  };\n};\n\nvar everythingMatcher = function (docOrBranchedValues) {\n  return {\n    result: true\n  };\n}; // NB: We are cheating and using this function to implement \"AND\" for both\n// \"document matchers\" and \"branched matchers\". They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of \"branched values\".\n\n\nvar andSomeMatchers = function (subMatchers) {\n  if (subMatchers.length === 0) return everythingMatcher;\n  if (subMatchers.length === 1) return subMatchers[0];\n  return function (docOrBranches) {\n    var ret = {};\n    ret.result = _.all(subMatchers, function (f) {\n      var subResult = f(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n\n      if (subResult.result && subResult.distance !== undefined && ret.distance === undefined) {\n        ret.distance = subResult.distance;\n      } // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n\n\n      if (subResult.result && subResult.arrayIndices) {\n        ret.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    }); // If we didn't actually match, forget any extra metadata we came up with.\n\n    if (!ret.result) {\n      delete ret.distance;\n      delete ret.arrayIndices;\n    }\n\n    return ret;\n  };\n};\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers; // helpers used by compiled selector code\n\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type: function (v) {\n    if (typeof v === \"number\") return 1;\n    if (typeof v === \"string\") return 2;\n    if (typeof v === \"boolean\") return 8;\n    if (isArray(v)) return 4;\n    if (v === null) return 10;\n    if (v instanceof RegExp) // note that typeof(/x/) === \"object\"\n      return 11;\n    if (typeof v === \"function\") return 13;\n    if (v instanceof Date) return 9;\n    if (EJSON.isBinary(v)) return 5;\n    if (v instanceof MongoID.ObjectID) return 7;\n    return 3; // object\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {\n      keyOrderSensitive: true\n    });\n  },\n  // maps a type code to a value that can be used to sort values of\n  // different types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1, // (not a type)\n    1, // number\n    2, // string\n    3, // object\n    4, // array\n    5, // binary\n    -1, // deprecated\n    6, // ObjectID\n    7, // bool\n    8, // Date\n    0, // null\n    9, // RegExp\n    -1, // deprecated\n    100, // JS code\n    2, // deprecated (symbol)\n    100, // JS code\n    1, // 32-bit int\n    8, // Mongo timestamp\n    1 // 64-bit int\n    ][t];\n  },\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined) return b === undefined ? 0 : -1;\n    if (b === undefined) return 1;\n\n    var ta = LocalCollection._f._type(a);\n\n    var tb = LocalCollection._f._type(b);\n\n    var oa = LocalCollection._f._typeorder(ta);\n\n    var ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) return oa < ob ? -1 : 1;\n    if (ta !== tb) // XXX need to implement this if we implement Symbol or integers, or\n      // Timestamp\n      throw Error(\"Missing type coercion logic in _cmp\");\n\n    if (ta === 7) {\n      // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) {\n      // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) {\n      // Object\n      // this could be much more efficient in the expected case ...\n      var to_array = function (obj) {\n        var ret = [];\n\n        for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {\n          ret.push(key);\n          ret.push(obj[key]);\n        }\n\n        return ret;\n      };\n\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\n    }\n\n    if (ta === 4) {\n      // Array\n      for (var i = 0;; i++) {\n        if (i === a.length) return i === b.length ? 0 : -1;\n        if (i === b.length) return 1;\n\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n\n        if (s !== 0) return s;\n      }\n    }\n\n    if (ta === 5) {\n      // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) return a.length - b.length;\n\n      for (i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) return -1;\n        if (a[i] > b[i]) return 1;\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) {\n      // boolean\n      if (a) return b ? 0 : 1;\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n\n    if (ta === 13) // javascript code\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\n\n    throw Error(\"Unknown type to sort\");\n  }\n}; // Oddball function used by upsert.\n\nLocalCollection._removeDollarOperators = function (selector) {\n  var selectorDoc = {};\n\n  for (var k in meteorBabelHelpers.sanitizeForInObject(selector)) {\n    if (k.substr(0, 1) !== '$') selectorDoc[k] = selector[k];\n  }\n\n  return selectorDoc;\n};","map":{"version":3,"sources":["/packages/minimongo/selector.js"],"names":["Minimongo","Matcher","selector","self","_paths","_hasGeoQuery","_hasWhere","_isSimple","_matchingDocument","undefined","_selector","_docMatcher","_compileSelector","_","extend","prototype","documentMatches","doc","Error","hasGeoQuery","hasWhere","isSimple","Function","_recordPathUsed","result","call","LocalCollection","_selectorIsId","_id","EJSON","equals","nothingMatcher","isArray","isBinary","clone","compileDocumentSelector","isRoot","path","_getPaths","keys","docSelector","matcher","options","docMatchers","each","subSelector","key","substr","has","LOGICAL_OPERATORS","push","inElemMatch","lookUpByIndex","makeLookupFunction","valueMatcher","compileValueSelector","branchValues","andDocumentMatchers","valueSelector","RegExp","convertElementMatcherToBranchedMatcher","regexpElementMatcher","isOperatorObject","operatorBranchedMatcher","equalityElementMatcher","elementMatcher","branches","expanded","dontExpandLeafArrays","expandArraysInBranches","dontIncludeLeafArrays","ret","any","element","matched","value","arrayIndices","regexp","isEqual","lastIndex","test","elementSelector","_f","_equal","operatorMatchers","operand","operator","simpleRange","contains","isNumber","simpleEquality","isObject","simpleInclusion","VALUE_OPERATORS","ELEMENT_OPERATORS","compileElementSelector","andBranchedMatchers","compileArrayOfDocumentSelectors","selectors","isEmpty","map","isPlainObject","$and","matchers","$or","length","f","$nor","all","$where","selectorValue","$comment","invertBranchedMatcher","branchedMatcher","invertMe","$eq","$not","$ne","$nin","$in","$exists","exists","$options","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","a","b","x","y","isNaN","Math","sqrt","identity","makeInequality","cmpValueComparator","operandType","_type","_cmp","isBitSet","bit","eightBits","get8BitsSet","filter","convertNumberToUint8Array","number","numOfBits","toString","num8BitGroups","ceil","byteArray","Uint8Array","i","byte","ensureUint8Array","ensureOperandUint8Array","reduce","num","n","bitsClear","bitsSetOp","bitsSetVal","isUndefined","find","indexOf","bitsSet","anyBitCompare","setOrClear","op","allBitCompare","$lt","cmpValue","$gt","$lte","$gte","$mod","divisor","remainder","elementMatchers","option","e","$size","$type","$bitsAnyClear","$bitsAllClear","$bitsAllSet","$bitsAnySet","$regex","regexSource","source","$elemMatch","subMatcher","isDocMatcher","omit","arrayElement","arg","dontIterate","parts","split","firstPart","firstPartIsNumeric","isNumericKey","nextPartIsNumeric","lookupRest","slice","join","omitUnnecessaryFields","retVal","concat","firstLevel","isIndexable","appendToResult","more","Array","apply","forSort","arrayIndex","MinimongoTest","skipTheArrays","branchesOut","thisIsArray","leaf","docOrBranchedValues","andSomeMatchers","subMatchers","docOrBranches","subResult","v","Date","MongoID","ObjectID","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","to_array","obj","s","_removeDollarOperators","selectorDoc","k"],"mappings":"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","file":"/packages/minimongo/selector.js.map","sourcesContent":["// The minimongo selector compiler!\n\n// Terminology:\n//  - a \"selector\" is the EJSON object representing a selector\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a \"result object\" is an object with a \"result\" field and maybe\n//    distance and arrayIndices.\n//  - a \"branched value\" is an object with a \"value\" field and maybe\n//    \"dontIterate\" and \"arrayIndices\".\n//  - a \"document\" is a top-level object that can be stored in a collection.\n//  - a \"lookup function\" is a function that takes in a document and returns\n//    an array of \"branched values\".\n//  - a \"branched matcher\" maps from an array of branched values to a result\n//    object.\n//  - an \"element matcher\" maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nMinimongo.Matcher = function (selector) {\n  var self = this;\n  // A set (object mapping string -> *) of all of the document paths looked\n  // at by the selector. Also includes the empty string if it may look at any\n  // path (eg, $where).\n  self._paths = {};\n  // Set to true if compilation finds a $near.\n  self._hasGeoQuery = false;\n  // Set to true if compilation finds a $where.\n  self._hasWhere = false;\n  // Set to false if compilation finds anything other than a simple equality or\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\n  // scalars as operands.\n  self._isSimple = true;\n  // Set to a dummy document which always matches this Matcher. Or set to null\n  // if such document is too hard to find.\n  self._matchingDocument = undefined;\n  // A clone of the original selector. It may just be a function if the user\n  // passed in a function; otherwise is definitely an object (eg, IDs are\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n  // Sorter._useWithMatcher.\n  self._selector = null;\n  self._docMatcher = self._compileSelector(selector);\n};\n\n_.extend(Minimongo.Matcher.prototype, {\n  documentMatches: function (doc) {\n    if (!doc || typeof doc !== \"object\") {\n      throw Error(\"documentMatches needs a document\");\n    }\n    return this._docMatcher(doc);\n  },\n  hasGeoQuery: function () {\n    return this._hasGeoQuery;\n  },\n  hasWhere: function () {\n    return this._hasWhere;\n  },\n  isSimple: function () {\n    return this._isSimple;\n  },\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector: function (selector) {\n    var self = this;\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      self._isSimple = false;\n      self._selector = selector;\n      self._recordPathUsed('');\n      return function (doc) {\n        return {result: !!selector.call(doc)};\n      };\n    }\n\n    // shorthand -- scalars match _id\n    if (LocalCollection._selectorIsId(selector)) {\n      self._selector = {_id: selector};\n      self._recordPathUsed('_id');\n      return function (doc) {\n        return {result: EJSON.equals(doc._id, selector)};\n      };\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || (('_id' in selector) && !selector._id)) {\n      self._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (typeof(selector) === 'boolean' || isArray(selector) ||\n        EJSON.isBinary(selector))\n      throw new Error(\"Invalid selector: \" + selector);\n\n    self._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, self, {isRoot: true});\n  },\n  _recordPathUsed: function (path) {\n    this._paths[path] = true;\n  },\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths: function () {\n    return _.keys(this._paths);\n  }\n});\n\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nvar compileDocumentSelector = function (docSelector, matcher, options) {\n  options = options || {};\n  var docMatchers = [];\n  _.each(docSelector, function (subSelector, key) {\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!_.has(LOGICAL_OPERATORS, key))\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      matcher._isSimple = false;\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,\n                                              options.inElemMatch));\n    } else {\n      // Record this path, but only if we aren't in an elemMatcher, since in an\n      // elemMatch this is a path inside an object in an array, not in the doc\n      // root.\n      if (!options.inElemMatch)\n        matcher._recordPathUsed(key);\n      var lookUpByIndex = makeLookupFunction(key);\n      var valueMatcher =\n        compileValueSelector(subSelector, matcher, options.isRoot);\n      docMatchers.push(function (doc) {\n        var branchValues = lookUpByIndex(doc);\n        return valueMatcher(branchValues);\n      });\n    }\n  });\n\n  return andDocumentMatchers(docMatchers);\n};\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector));\n  } else if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  } else {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(valueSelector));\n  }\n};\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nvar convertElementMatcherToBranchedMatcher = function (\n    elementMatcher, options) {\n  options = options || {};\n  return function (branches) {\n    var expanded = branches;\n    if (!options.dontExpandLeafArrays) {\n      expanded = expandArraysInBranches(\n        branches, options.dontIncludeLeafArrays);\n    }\n    var ret = {};\n    ret.result = _.any(expanded, function (element) {\n      var matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices)\n          element.arrayIndices = [matched];\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices)\n        ret.arrayIndices = element.arrayIndices;\n\n      return matched;\n    });\n    return ret;\n  };\n};\n\n// Takes a RegExp object and returns an element matcher.\nregexpElementMatcher = function (regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      // Comparing two regexps means seeing if the regexps are identical\n      // (really!). Underscore knows how.\n      return _.isEqual(value, regexp);\n    }\n    // Regexps only work against strings.\n    if (typeof value !== 'string')\n      return false;\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n};\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nequalityElementMatcher = function (elementSelector) {\n  if (isOperatorObject(elementSelector))\n    throw Error(\"Can't create equalityValueSelector for operator object\");\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  if (elementSelector == null) {  // undefined or null\n    return function (value) {\n      return value == null;  // undefined or null\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n};\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n\n  var operatorMatchers = [];\n  _.each(valueSelector, function (operand, operator) {\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&\n      _.isNumber(operand);\n    var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&\n      _.isArray(operand) && !_.any(operand, _.isObject);\n\n    if (! (simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (_.has(VALUE_OPERATORS, operator)) {\n      operatorMatchers.push(\n        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      operatorMatchers.push(\n        convertElementMatcherToBranchedMatcher(\n          options.compileElementSelector(\n            operand, valueSelector, matcher),\n          options));\n    } else {\n      throw new Error(\"Unrecognized operator: \" + operator);\n    }\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n};\n\nvar compileArrayOfDocumentSelectors = function (\n    selectors, matcher, inElemMatch) {\n  if (!isArray(selectors) || _.isEmpty(selectors))\n    throw Error(\"$and/$or/$nor must be nonempty array\");\n  return _.map(selectors, function (subSelector) {\n    if (!isPlainObject(subSelector))\n      throw Error(\"$or/$and/$nor entries need to be full objects\");\n    return compileDocumentSelector(\n      subSelector, matcher, {inElemMatch: inElemMatch});\n  });\n};\n\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return andDocumentMatchers(matchers);\n  },\n\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1)\n      return matchers[0];\n\n    return function (doc) {\n      var result = _.any(matchers, function (f) {\n        return f(doc).result;\n      });\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result: result};\n    };\n  },\n\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = _.all(matchers, function (f) {\n        return !f(doc).result;\n      });\n      // Never set arrayIndices, because we only match if nothing in particular\n      // \"matched\" (and because this is consistent with MongoDB).\n      return {result: result};\n    };\n  },\n\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add \"return\"; not sure exactly what it is.\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);\n    }\n    return function (doc) {\n      // We make the document available as both `this` and `obj`.\n      // XXX not sure what we should do if this throws\n      return {result: selectorValue.call(doc, doc)};\n    };\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {result: true};\n    };\n  }\n};\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nvar invertBranchedMatcher = function (branchedMatcher) {\n  return function (branchValues) {\n    var invertMe = branchedMatcher(branchValues);\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !invertMe.result};\n  };\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!_.has(valueSelector, '$regex'))\n      throw Error(\"$options needs a $regex\");\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near)\n      throw Error(\"$maxDistance needs a $near\");\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!isArray(operand))\n      throw Error(\"$all requires array\");\n    // Not sure why, but this seems to be what MongoDB does.\n    if (_.isEmpty(operand))\n      return nothingMatcher;\n\n    var branchedMatchers = [];\n    _.each(operand, function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion))\n        throw Error(\"no $ expressions in $all\");\n      // This is always a regexp or equality selector.\n      branchedMatchers.push(compileValueSelector(criterion, matcher));\n    });\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot)\n      throw Error(\"$near can't be inside another $ operator\");\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be \n    // matched using $geometry.\n\n    var maxDistance, point, distance;\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value)\n          return null;\n        if(!value.type)\n          return GeoJSON.pointDistance(point,\n            { type: \"Point\", coordinates: pointToArray(value) });\n        if (value.type === \"Point\") {\n          return GeoJSON.pointDistance(point, value);\n        } else {\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n            ? 0 : maxDistance + 1;\n        }\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n      if (!isArray(operand) && !isPlainObject(operand))\n        throw Error(\"$near argument must be coordinate pair or GeoJSON\");\n      point = pointToArray(operand);\n      distance = function (value) {\n        if (!isArray(value) && !isPlainObject(value))\n          return null;\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      branchedValues = expandArraysInBranches(branchedValues);\n      var result = {result: false};\n      _.each(branchedValues, function (branch) {\n        if (!(typeof branch.value === \"object\")){\n          return;\n        }\n        var curDistance = distance(branch.value);\n        // Skip branches that aren't real points or are too far away.\n        if (curDistance === null || curDistance > maxDistance)\n          return;\n        // Skip anything that's a tie.\n        if (result.distance !== undefined && result.distance <= curDistance)\n          return;\n        result.result = true;\n        result.distance = curDistance;\n        if (!branch.arrayIndices)\n          delete result.arrayIndices;\n        else\n          result.arrayIndices = branch.arrayIndices;\n      });\n      return result;\n    };\n  }\n};\n\n// Helpers for $near.\nvar distanceCoordinatePairs = function (a, b) {\n  a = pointToArray(a);\n  b = pointToArray(b);\n  var x = a[0] - b[0];\n  var y = a[1] - b[1];\n  if (_.isNaN(x) || _.isNaN(y))\n    return null;\n  return Math.sqrt(x * x + y * y);\n};\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nvar pointToArray = function (point) {\n  return _.map(point, _.identity);\n};\n\n// Helper for $lt/$gt/$lte/$gte.\nvar makeInequality = function (cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (isArray(operand)) {\n        return function () {\n          return false;\n        };\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined)\n        operand = null;\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined)\n          value = null;\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType)\n          return false;\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n};\n\nvar isBitSet = function (value, bit) {\n  if (value === 0)\n    return false;\n  return (value & 1 << bit) !== 0;\n};\n\nvar eightBits = [0,1,2,3,4,5,6,7];\nvar get8BitsSet = function (value) {\n  if (value === 0)\n    return [];\n  return _.filter(eightBits, function (bit) {\n    return isBitSet(value, bit);\n  });\n};\n\nvar convertNumberToUint8Array = function(number) {\n  var numOfBits = number.toString(2).length;\n  var num8BitGroups = Math.ceil(numOfBits / 8);\n  var byteArray = new Uint8Array(num8BitGroups);\n\n  for (var i = 0; i < byteArray.length; i++) {\n    var byte = number & 0xff;\n    byteArray[i] = byte;\n    number = (number - byte) / 256;\n  }\n\n  return byteArray;\n};\n\nvar ensureUint8Array = function (number) {\n  return (number instanceof Uint8Array) ?\n    number : convertNumberToUint8Array(number);\n};\n\nvar ensureOperandUint8Array = function (operand) {\n  if (!(operand instanceof Uint8Array)) {\n    operand = _.reduce(operand, function (num, n) {\n      return num | (1 << n);\n    }, 0);\n\n    operand = convertNumberToUint8Array(operand);\n  }\n\n  return operand;\n};\n\nvar bitsClear = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(\n    _.find(bitsSetOp, function (bit) {\n      return bitsSetVal.indexOf(bit) === -1;\n    })\n  );\n};\n\nvar bitsSet = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(\n    _.find(bitsSetOp, function (bit) {\n      return bitsSetVal.indexOf(bit) !== -1;\n    })\n  );\n};\n\nvar anyBitCompare = function (operand, value, setOrClear) {\n  return _.isUndefined(\n    _.find(operand, function (op, i) {\n      var bitsSetOp = get8BitsSet(op);\n      var bitsSetVal = get8BitsSet(value[i]);\n\n      return setOrClear(bitsSetOp, bitsSetVal);\n    })\n  );\n};\n\nvar allBitCompare = function (operand, value, setOrClear) {\n  return _.filter(operand, function (op, i) {\n      var bitsSetOp = get8BitsSet(op);\n      var bitsSetVal = get8BitsSet(value[i]);\n\n      return !setOrClear(bitsSetOp, bitsSetVal);\n    }).length === 0;\n};\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(isArray(operand) && operand.length === 2\n            && typeof(operand[0]) === 'number'\n            && typeof(operand[1]) === 'number')) {\n        throw Error(\"argument to $mod must be an array of two numbers\");\n      }\n      // XXX could require to be ints or round or something\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!isArray(operand))\n        throw Error(\"$in needs an array\");\n\n      var elementMatchers = [];\n      _.each(operand, function (option) {\n        if (option instanceof RegExp)\n          elementMatchers.push(regexpElementMatcher(option));\n        else if (isOperatorObject(option))\n          throw Error(\"cannot nest $ under $in\");\n        else\n          elementMatchers.push(equalityElementMatcher(option));\n      });\n\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined)\n          value = null;\n        return _.any(elementMatchers, function (e) {\n          return e(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error(\"$size needs a number\");\n      }\n      return function (value) {\n        return isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand !== 'number')\n        throw Error(\"$type needs a number\");\n      return function (value) {\n        return value !== undefined\n          && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $bitsAnyClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAnyClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        if (value === 0)\n          return true;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return anyBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAllClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAllClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        if (value === 0)\n          return true;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return allBitCompare(operand, value, bitsSet);\n      };\n    }\n  },\n  $bitsAllSet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAllSet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return allBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAnySet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAnySet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return _.isUndefined(\n          _.find(operand, function (op, i) {\n            var bitsSetOp = get8BitsSet(op);\n            var bitsSetVal = get8BitsSet(value[i]);\n\n            return bitsSet(bitsSetOp, bitsSetVal);\n          })\n        );\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp))\n        throw Error(\"$regex has to be a string or RegExp\");\n\n      var regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself. (See also\n        // Mongo.Collection._rewriteSelector.)\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options))\n          throw new Error(\"Only the i, m, and g regexp options are supported\");\n\n        var regexSource = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(regexSource, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isPlainObject(operand))\n        throw Error(\"$elemMatch need an object\");\n\n      var subMatcher, isDocMatcher;\n      if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {\n        subMatcher = compileValueSelector(operand, matcher);\n        isDocMatcher = false;\n      } else {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher,\n                                             {inElemMatch: true});\n        isDocMatcher = true;\n      }\n\n      return function (value) {\n        if (!isArray(value))\n          return false;\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement))\n              return false;\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result)\n            return i;   // specially understood to mean \"use as arrayIndices\"\n        }\n        return false;\n      };\n    }\n  }\n};\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we \"branch\". When we \"branch\", if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively \"branch\" over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like \"implicit\", but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nmakeLookupFunction = function (key, options) {\n  options = options || {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var firstPartIsNumeric = isNumericKey(firstPart);\n  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);\n  var lookupRest;\n  if (parts.length > 1) {\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));\n  }\n\n  var omitUnnecessaryFields = function (retVal) {\n    if (!retVal.dontIterate)\n      delete retVal.dontIterate;\n    if (retVal.arrayIndices && !retVal.arrayIndices.length)\n      delete retVal.arrayIndices;\n    return retVal;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return function (doc, arrayIndices) {\n    if (!arrayIndices)\n      arrayIndices = [];\n\n    if (isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(firstPartIsNumeric && firstPart < doc.length))\n        return [];\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    var firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as \"don't iterate\".\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        value: firstLevel,\n        dontIterate: isArray(doc) && isArray(firstLevel),\n        arrayIndices: arrayIndices})];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (isArray(doc))\n        return [];\n      return [omitUnnecessaryFields({value: undefined,\n                                      arrayIndices: arrayIndices})];\n    }\n\n    var result = [];\n    var appendToResult = function (more) {\n      Array.prototype.push.apply(result, more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also \"branch\": try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // \"look up this index\" in that case, not \"also look up this index in all\n    // the elements of the array\".\n    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {\n      _.each(firstLevel, function (branch, arrayIndex) {\n        if (isPlainObject(branch)) {\n          appendToResult(lookupRest(\n            branch,\n            arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n};\nMinimongoTest.makeLookupFunction = makeLookupFunction;\n\nexpandArraysInBranches = function (branches, skipTheArrays) {\n  var branchesOut = [];\n  _.each(branches, function (branch) {\n    var thisIsArray = isArray(branch.value);\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        value: branch.value,\n        arrayIndices: branch.arrayIndices\n      });\n    }\n    if (thisIsArray && !branch.dontIterate) {\n      _.each(branch.value, function (leaf, i) {\n        branchesOut.push({\n          value: leaf,\n          arrayIndices: (branch.arrayIndices || []).concat(i)\n        });\n      });\n    }\n  });\n  return branchesOut;\n};\n\nvar nothingMatcher = function (docOrBranchedValues) {\n  return {result: false};\n};\n\nvar everythingMatcher = function (docOrBranchedValues) {\n  return {result: true};\n};\n\n\n// NB: We are cheating and using this function to implement \"AND\" for both\n// \"document matchers\" and \"branched matchers\". They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of \"branched values\".\nvar andSomeMatchers = function (subMatchers) {\n  if (subMatchers.length === 0)\n    return everythingMatcher;\n  if (subMatchers.length === 1)\n    return subMatchers[0];\n\n  return function (docOrBranches) {\n    var ret = {};\n    ret.result = _.all(subMatchers, function (f) {\n      var subResult = f(docOrBranches);\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result && subResult.distance !== undefined\n          && ret.distance === undefined) {\n        ret.distance = subResult.distance;\n      }\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        ret.arrayIndices = subResult.arrayIndices;\n      }\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!ret.result) {\n      delete ret.distance;\n      delete ret.arrayIndices;\n    }\n    return ret;\n  };\n};\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\n\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n\n  _type: function (v) {\n    if (typeof v === \"number\")\n      return 1;\n    if (typeof v === \"string\")\n      return 2;\n    if (typeof v === \"boolean\")\n      return 8;\n    if (isArray(v))\n      return 4;\n    if (v === null)\n      return 10;\n    if (v instanceof RegExp)\n      // note that typeof(/x/) === \"object\"\n      return 11;\n    if (typeof v === \"function\")\n      return 13;\n    if (v instanceof Date)\n      return 9;\n    if (EJSON.isBinary(v))\n      return 5;\n    if (v instanceof MongoID.ObjectID)\n      return 7;\n    return 3; // object\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of\n  // different types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1,  // (not a type)\n            1,   // number\n            2,   // string\n            3,   // object\n            4,   // array\n            5,   // binary\n            -1,  // deprecated\n            6,   // ObjectID\n            7,   // bool\n            8,   // Date\n            0,   // null\n            9,   // RegExp\n            -1,  // deprecated\n            100, // JS code\n            2,   // deprecated (symbol)\n            100, // JS code\n            1,   // 32-bit int\n            8,   // Mongo timestamp\n            1    // 64-bit int\n           ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined)\n      return b === undefined ? 0 : -1;\n    if (b === undefined)\n      return 1;\n    var ta = LocalCollection._f._type(a);\n    var tb = LocalCollection._f._type(b);\n    var oa = LocalCollection._f._typeorder(ta);\n    var ob = LocalCollection._f._typeorder(tb);\n    if (oa !== ob)\n      return oa < ob ? -1 : 1;\n    if (ta !== tb)\n      // XXX need to implement this if we implement Symbol or integers, or\n      // Timestamp\n      throw Error(\"Missing type coercion logic in _cmp\");\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : (a === b ? 0 : 1);\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      var to_array = function (obj) {\n        var ret = [];\n        for (var key in obj) {\n          ret.push(key);\n          ret.push(obj[key]);\n        }\n        return ret;\n      };\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\n    }\n    if (ta === 4) { // Array\n      for (var i = 0; ; i++) {\n        if (i === a.length)\n          return (i === b.length) ? 0 : -1;\n        if (i === b.length)\n          return 1;\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0)\n          return s;\n      }\n    }\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length)\n        return a.length - b.length;\n      for (i = 0; i < a.length; i++) {\n        if (a[i] < b[i])\n          return -1;\n        if (a[i] > b[i])\n          return 1;\n      }\n      return 0;\n    }\n    if (ta === 8) { // boolean\n      if (a) return b ? 0 : 1;\n      return b ? -1 : 0;\n    }\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\n    throw Error(\"Unknown type to sort\");\n  }\n};\n\n// Oddball function used by upsert.\nLocalCollection._removeDollarOperators = function (selector) {\n  var selectorDoc = {};\n  for (var k in selector)\n    if (k.substr(0, 1) !== '$')\n      selectorDoc[k] = selector[k];\n  return selectorDoc;\n};\n"]},"hash":"783744c9ece2e89b39ea2413036d2152a7bdfe0b"}
