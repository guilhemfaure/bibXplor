{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ddp-server/livedata_server_tests.js","filenameRelative":"/packages/ddp-server/livedata_server_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ddp-server/livedata_server_tests.js.map","sourceFileName":"/packages/ddp-server/livedata_server_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"livedata_server_tests"},"ignored":false,"code":"var Fiber = Npm.require('fibers');\n\nTinytest.addAsync(\"livedata server - connectionHandle.onClose()\", function (test, onComplete) {\n  makeTestConnection(test, function (clientConn, serverConn) {\n    // On the server side, wait for the connection to be closed.\n    serverConn.onClose(function () {\n      test.isTrue(true); // Add a new onClose after the connection is already\n      // closed. See that it fires.\n\n      serverConn.onClose(function () {\n        onComplete();\n      });\n    }); // Close the connection from the client.\n\n    clientConn.disconnect();\n  }, onComplete);\n});\nTinytest.addAsync(\"livedata server - connectionHandle.close()\", function (test, onComplete) {\n  makeTestConnection(test, function (clientConn, serverConn) {\n    // Wait for the connection to be closed from the server side.\n    simplePoll(function () {\n      return !clientConn.status().connected;\n    }, onComplete, function () {\n      test.fail(\"timeout waiting for the connection to be closed on the server side\");\n      onComplete();\n    }); // Close the connection from the server.\n\n    serverConn.close();\n  }, onComplete);\n});\ntestAsyncMulti(\"livedata server - onConnection doesn't get callback after stop.\", [function (test, expect) {\n  var afterStop = false;\n  var expectStop1 = expect();\n  var stopHandle1 = Meteor.onConnection(function (conn) {\n    stopHandle2.stop();\n    stopHandle1.stop();\n    afterStop = true; // yield to the event loop for a moment to see that no other calls\n    // to listener2 are called.\n\n    Meteor.setTimeout(expectStop1, 10);\n  });\n  var stopHandle2 = Meteor.onConnection(function (conn) {\n    test.isFalse(afterStop);\n  }); // trigger a connection\n\n  var expectConnection = expect();\n  makeTestConnection(test, function (clientConn, serverConn) {\n    // Close the connection from the client.\n    clientConn.disconnect();\n    expectConnection();\n  }, expectConnection);\n}]);\nMeteor.methods({\n  livedata_server_test_inner: function () {\n    return this.connection.id;\n  },\n  livedata_server_test_outer: function () {\n    return Meteor.call('livedata_server_test_inner');\n  }\n});\nTinytest.addAsync(\"livedata server - onMessage hook\", function (test, onComplete) {\n  var cb = Meteor.onMessage(function (msg, session) {\n    test.equal(msg.method, 'livedata_server_test_inner');\n    cb.stop();\n    onComplete();\n  });\n  makeTestConnection(test, function (clientConn, serverConn) {\n    clientConn.call('livedata_server_test_inner');\n    clientConn.disconnect();\n  }, onComplete);\n});\nTinytest.addAsync(\"livedata server - connection in method invocation\", function (test, onComplete) {\n  makeTestConnection(test, function (clientConn, serverConn) {\n    var res = clientConn.call('livedata_server_test_inner');\n    test.equal(res, serverConn.id);\n    clientConn.disconnect();\n    onComplete();\n  }, onComplete);\n});\nTinytest.addAsync(\"livedata server - connection in nested method invocation\", function (test, onComplete) {\n  makeTestConnection(test, function (clientConn, serverConn) {\n    var res = clientConn.call('livedata_server_test_outer');\n    test.equal(res, serverConn.id);\n    clientConn.disconnect();\n    onComplete();\n  }, onComplete);\n}); // connectionId -> callback\n\nvar onSubscription = {};\nMeteor.publish(\"livedata_server_test_sub\", function (connectionId) {\n  var callback = onSubscription[connectionId];\n  if (callback) callback(this);\n  this.stop();\n});\nTinytest.addAsync(\"livedata server - connection in publish function\", function (test, onComplete) {\n  makeTestConnection(test, function (clientConn, serverConn) {\n    onSubscription[serverConn.id] = function (subscription) {\n      delete onSubscription[serverConn.id];\n      test.equal(subscription.connection.id, serverConn.id);\n      clientConn.disconnect();\n      onComplete();\n    };\n\n    clientConn.subscribe(\"livedata_server_test_sub\", serverConn.id);\n  });\n});\nvar onSubscriptions = {};\nMeteor.publish({\n  publicationObject: function () {\n    var callback = onSubscriptions;\n    if (callback) callback();\n    this.stop();\n  }\n});\nMeteor.publish({\n  \"publication_object\": function () {\n    var callback = onSubscriptions;\n    if (callback) callback();\n    this.stop();\n  }\n});\nMeteor.publish(\"publication_compatibility\", function () {\n  var callback = onSubscriptions;\n  if (callback) callback();\n  this.stop();\n});\nTinytest.addAsync(\"livedata server - publish object\", function (test, onComplete) {\n  makeTestConnection(test, function (clientConn, serverConn) {\n    var testsLength = 0;\n\n    onSubscriptions = function (subscription) {\n      delete onSubscriptions;\n      clientConn.disconnect();\n      testsLength++;\n\n      if (testsLength == 3) {\n        onComplete();\n      }\n    };\n\n    clientConn.subscribe(\"publicationObject\");\n    clientConn.subscribe(\"publication_object\");\n    clientConn.subscribe(\"publication_compatibility\");\n  });\n});\nMeteor.methods({\n  testResolvedPromise: function (arg) {\n    var invocation1 = DDP._CurrentInvocation.get();\n\n    return Promise.resolve(arg).then(function (result) {\n      var invocation2 = DDP._CurrentInvocation.get(); // This equality holds because Promise callbacks are bound to the\n      // dynamic environment where .then was called.\n\n\n      if (invocation1 !== invocation2) {\n        throw new Meteor.Error(\"invocation mismatch\");\n      }\n\n      return result + \" after waiting\";\n    });\n  },\n  testRejectedPromise: function (arg) {\n    return Promise.resolve(arg).then(function (result) {\n      throw new Meteor.Error(result + \" raised Meteor.Error\");\n    });\n  }\n});\nTinytest.addAsync(\"livedata server - waiting for Promise\", function (test, onComplete) {\n  return makeTestConnection(test, function (clientConn, serverConn) {\n    test.equal(clientConn.call(\"testResolvedPromise\", \"clientConn.call\"), \"clientConn.call after waiting\");\n    var clientCallPromise = new Promise(function (resolve, reject) {\n      return clientConn.call(\"testResolvedPromise\", \"clientConn.call with callback\", function (error, result) {\n        return error ? reject(error) : resolve(result);\n      });\n    });\n    var serverCallAsyncPromise = Meteor.server.callAsync(\"testResolvedPromise\", \"Meteor.server.callAsync\");\n    var serverApplyAsyncPromise = Meteor.server.applyAsync(\"testResolvedPromise\", [\"Meteor.server.applyAsync\"]);\n    var clientCallRejectedPromise = new Promise(function (resolve) {\n      clientConn.call(\"testRejectedPromise\", \"with callback\", function (error, result) {\n        return resolve(error.message);\n      });\n    });\n    Promise.all([clientCallPromise, clientCallRejectedPromise, serverCallAsyncPromise, serverApplyAsyncPromise]).then(function (results) {\n      return test.equal(results, [\"clientConn.call with callback after waiting\", \"[with callback raised Meteor.Error]\", \"Meteor.server.callAsync after waiting\", \"Meteor.server.applyAsync after waiting\"]);\n    }, function (error) {\n      return test.fail(error);\n    }).then(onComplete);\n  });\n});","map":{"version":3,"sources":["/packages/ddp-server/livedata_server_tests.js"],"names":["Fiber","Npm","require","Tinytest","addAsync","test","onComplete","makeTestConnection","clientConn","serverConn","onClose","isTrue","disconnect","simplePoll","status","connected","fail","close","testAsyncMulti","expect","afterStop","expectStop1","stopHandle1","Meteor","onConnection","conn","stopHandle2","stop","setTimeout","isFalse","expectConnection","methods","livedata_server_test_inner","connection","id","livedata_server_test_outer","call","cb","onMessage","msg","session","equal","method","res","onSubscription","publish","connectionId","callback","subscription","subscribe","onSubscriptions","publicationObject","testsLength","testResolvedPromise","arg","invocation1","DDP","_CurrentInvocation","get","Promise","resolve","then","invocation2","Error","result","testRejectedPromise","clientCallPromise","reject","error","serverCallAsyncPromise","server","callAsync","serverApplyAsyncPromise","applyAsync","clientCallRejectedPromise","message","all","results"],"mappings":"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","file":"/packages/ddp-server/livedata_server_tests.js.map","sourcesContent":["var Fiber = Npm.require('fibers');\n\n\nTinytest.addAsync(\n  \"livedata server - connectionHandle.onClose()\",\n  function (test, onComplete) {\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        // On the server side, wait for the connection to be closed.\n        serverConn.onClose(function () {\n          test.isTrue(true);\n          // Add a new onClose after the connection is already\n          // closed. See that it fires.\n          serverConn.onClose(function () {\n            onComplete();\n          });\n        });\n        // Close the connection from the client.\n        clientConn.disconnect();\n      },\n      onComplete\n    );\n  }\n);\n\nTinytest.addAsync(\n  \"livedata server - connectionHandle.close()\",\n  function (test, onComplete) {\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        // Wait for the connection to be closed from the server side.\n        simplePoll(\n          function () {\n            return ! clientConn.status().connected;\n          },\n          onComplete,\n          function () {\n            test.fail(\"timeout waiting for the connection to be closed on the server side\");\n            onComplete();\n          }\n        );\n\n        // Close the connection from the server.\n        serverConn.close();\n      },\n      onComplete\n    );\n  }\n);\n\n\ntestAsyncMulti(\n  \"livedata server - onConnection doesn't get callback after stop.\",\n  [function (test, expect) {\n    var afterStop = false;\n    var expectStop1 = expect();\n    var stopHandle1 = Meteor.onConnection(function (conn) {\n      stopHandle2.stop();\n      stopHandle1.stop();\n      afterStop = true;\n      // yield to the event loop for a moment to see that no other calls\n      // to listener2 are called.\n      Meteor.setTimeout(expectStop1, 10);\n    });\n    var stopHandle2 = Meteor.onConnection(function (conn) {\n      test.isFalse(afterStop);\n    });\n\n    // trigger a connection\n    var expectConnection = expect();\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        // Close the connection from the client.\n        clientConn.disconnect();\n        expectConnection();\n      },\n      expectConnection\n    );\n  }]\n);\n\nMeteor.methods({\n  livedata_server_test_inner: function () {\n    return this.connection.id;\n  },\n\n  livedata_server_test_outer: function () {\n    return Meteor.call('livedata_server_test_inner');\n  }\n});\n\n\nTinytest.addAsync(\n    \"livedata server - onMessage hook\",\n    function (test, onComplete) {\n\n        var cb = Meteor.onMessage(function (msg, session) {\n            test.equal(msg.method, 'livedata_server_test_inner');\n            cb.stop();\n            onComplete();\n        });\n\n        makeTestConnection(\n            test,\n            function (clientConn, serverConn) {\n                clientConn.call('livedata_server_test_inner');\n                clientConn.disconnect();\n            },\n            onComplete\n        );\n    }\n);\n\n\nTinytest.addAsync(\n  \"livedata server - connection in method invocation\",\n  function (test, onComplete) {\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        var res = clientConn.call('livedata_server_test_inner');\n        test.equal(res, serverConn.id);\n        clientConn.disconnect();\n        onComplete();\n      },\n      onComplete\n    );\n  }\n);\n\n\nTinytest.addAsync(\n  \"livedata server - connection in nested method invocation\",\n  function (test, onComplete) {\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        var res = clientConn.call('livedata_server_test_outer');\n        test.equal(res, serverConn.id);\n        clientConn.disconnect();\n        onComplete();\n      },\n      onComplete\n    );\n  }\n);\n\n\n// connectionId -> callback\nvar onSubscription = {};\n\nMeteor.publish(\"livedata_server_test_sub\", function (connectionId) {\n  var callback = onSubscription[connectionId];\n  if (callback)\n    callback(this);\n  this.stop();\n});\n\n\nTinytest.addAsync(\n  \"livedata server - connection in publish function\",\n  function (test, onComplete) {\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        onSubscription[serverConn.id] = function (subscription) {\n          delete onSubscription[serverConn.id];\n          test.equal(subscription.connection.id, serverConn.id);\n          clientConn.disconnect();\n          onComplete();\n        };\n        clientConn.subscribe(\"livedata_server_test_sub\", serverConn.id);\n      }\n    );\n  }\n);\n\nlet onSubscriptions = {};\n\nMeteor.publish({\n  publicationObject () {\n    let callback = onSubscriptions;\n    if (callback)\n      callback();\n    this.stop();\n  }\n});\n\nMeteor.publish({\n  \"publication_object\": function () {\n    let callback = onSubscriptions;\n    if (callback)\n      callback();\n    this.stop();\n  }\n});\n\nMeteor.publish(\"publication_compatibility\", function () {\n  let callback = onSubscriptions;\n  if (callback)\n    callback();\n  this.stop();\n});\n\nTinytest.addAsync(\n  \"livedata server - publish object\",\n  function (test, onComplete) {\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        let testsLength = 0;\n\n        onSubscriptions = function (subscription) {\n          delete onSubscriptions;\n          clientConn.disconnect();\n          testsLength++;\n          if(testsLength == 3){\n            onComplete();\n          }\n        };\n        clientConn.subscribe(\"publicationObject\");\n        clientConn.subscribe(\"publication_object\");\n        clientConn.subscribe(\"publication_compatibility\");\n      }\n    );\n  }\n);\n\nMeteor.methods({\n  testResolvedPromise(arg) {\n    const invocation1 = DDP._CurrentInvocation.get();\n    return Promise.resolve(arg).then(result => {\n      const invocation2 = DDP._CurrentInvocation.get();\n      // This equality holds because Promise callbacks are bound to the\n      // dynamic environment where .then was called.\n      if (invocation1 !== invocation2) {\n        throw new Meteor.Error(\"invocation mismatch\");\n      }\n      return result + \" after waiting\";\n    });\n  },\n\n  testRejectedPromise(arg) {\n    return Promise.resolve(arg).then(result => {\n      throw new Meteor.Error(result + \" raised Meteor.Error\");\n    });\n  }\n});\n\nTinytest.addAsync(\n  \"livedata server - waiting for Promise\",\n  (test, onComplete) => makeTestConnection(test, (clientConn, serverConn) => {\n    test.equal(\n      clientConn.call(\"testResolvedPromise\", \"clientConn.call\"),\n      \"clientConn.call after waiting\"\n    );\n\n    const clientCallPromise = new Promise(\n      (resolve, reject) => clientConn.call(\n        \"testResolvedPromise\",\n        \"clientConn.call with callback\",\n        (error, result) => error ? reject(error) : resolve(result)\n      )\n    );\n\n    const serverCallAsyncPromise = Meteor.server.callAsync(\n      \"testResolvedPromise\",\n      \"Meteor.server.callAsync\"\n    );\n\n    const serverApplyAsyncPromise = Meteor.server.applyAsync(\n      \"testResolvedPromise\",\n      [\"Meteor.server.applyAsync\"]\n    );\n\n    const clientCallRejectedPromise = new Promise(resolve => {\n      clientConn.call(\n        \"testRejectedPromise\",\n        \"with callback\",\n        (error, result) => resolve(error.message)\n      );\n    });\n\n    Promise.all([\n      clientCallPromise,\n      clientCallRejectedPromise,\n      serverCallAsyncPromise,\n      serverApplyAsyncPromise\n    ]).then(results => test.equal(results, [\n      \"clientConn.call with callback after waiting\",\n      \"[with callback raised Meteor.Error]\",\n      \"Meteor.server.callAsync after waiting\",\n      \"Meteor.server.applyAsync after waiting\"\n    ]), error => test.fail(error))\n      .then(onComplete);\n  })\n);\n"]},"hash":"a81af088d32fa76b338d766cf1735d9dbbd78662"}
