{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/minimongo/helpers.js","filenameRelative":"/packages/minimongo/helpers.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/minimongo/helpers.js.map","sourceFileName":"/packages/minimongo/helpers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"helpers"},"ignored":false,"code":"// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n// arrays.\n// XXX maybe this should be EJSON.isArray\nisArray = function (x) {\n  return _.isArray(x) && !EJSON.isBinary(x);\n}; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\n\n\nisPlainObject = LocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\nisIndexable = function (x) {\n  return isArray(x) || isPlainObject(x);\n}; // Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\n\n\nisOperatorObject = function (valueSelector, inconsistentOK) {\n  if (!isPlainObject(valueSelector)) return false;\n  var theseAreOperators = undefined;\n\n  _.each(valueSelector, function (value, selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) throw new Error(\"Inconsistent operator: \" + JSON.stringify(valueSelector));\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}; // string can be converted to integer\n\n\nisNumericKey = function (s) {\n  return (/^[0-9]+$/.test(s)\n  );\n};","map":{"version":3,"sources":["/packages/minimongo/helpers.js"],"names":["isArray","x","_","EJSON","isBinary","isPlainObject","LocalCollection","_isPlainObject","_f","_type","isIndexable","isOperatorObject","valueSelector","inconsistentOK","theseAreOperators","undefined","each","value","selKey","thisIsOperator","substr","Error","JSON","stringify","isNumericKey","s","test"],"mappings":"AAAA;AACA;AACA;AACAA,UAAU,UAAUC,CAAV,EAAa;AACrB,SAAOC,EAAEF,OAAF,CAAUC,CAAV,KAAgB,CAACE,MAAMC,QAAN,CAAeH,CAAf,CAAxB;AACD,CAFD,C,CAIA;AACA;AACA;;;AACAI,gBAAgBC,gBAAgBC,cAAhB,GAAiC,UAAUN,CAAV,EAAa;AAC5D,SAAOA,KAAKK,gBAAgBE,EAAhB,CAAmBC,KAAnB,CAAyBR,CAAzB,MAAgC,CAA5C;AACD,CAFD;;AAIAS,cAAc,UAAUT,CAAV,EAAa;AACzB,SAAOD,QAAQC,CAAR,KAAcI,cAAcJ,CAAd,CAArB;AACD,CAFD,C,CAIA;AACA;AACA;;;AACAU,mBAAmB,UAAUC,aAAV,EAAyBC,cAAzB,EAAyC;AAC1D,MAAI,CAACR,cAAcO,aAAd,CAAL,EACE,OAAO,KAAP;AAEF,MAAIE,oBAAoBC,SAAxB;;AACAb,IAAEc,IAAF,CAAOJ,aAAP,EAAsB,UAAUK,KAAV,EAAiBC,MAAjB,EAAyB;AAC7C,QAAIC,iBAAiBD,OAAOE,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAA7C;;AACA,QAAIN,sBAAsBC,SAA1B,EAAqC;AACnCD,0BAAoBK,cAApB;AACD,KAFD,MAEO,IAAIL,sBAAsBK,cAA1B,EAA0C;AAC/C,UAAI,CAACN,cAAL,EACE,MAAM,IAAIQ,KAAJ,CAAU,4BACAC,KAAKC,SAAL,CAAeX,aAAf,CADV,CAAN;AAEFE,0BAAoB,KAApB;AACD;AACF,GAVD;;AAWA,SAAO,CAAC,CAACA,iBAAT,CAhB0D,CAgB7B;AAC9B,CAjBD,C,CAoBA;;;AACAU,eAAe,UAAUC,CAAV,EAAa;AAC1B,SAAO,YAAWC,IAAX,CAAgBD,CAAhB;AAAP;AACD,CAFD","file":"/packages/minimongo/helpers.js.map","sourcesContent":["// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n// arrays.\n// XXX maybe this should be EJSON.isArray\nisArray = function (x) {\n  return _.isArray(x) && !EJSON.isBinary(x);\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nisPlainObject = LocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\nisIndexable = function (x) {\n  return isArray(x) || isPlainObject(x);\n};\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nisOperatorObject = function (valueSelector, inconsistentOK) {\n  if (!isPlainObject(valueSelector))\n    return false;\n\n  var theseAreOperators = undefined;\n  _.each(valueSelector, function (value, selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK)\n        throw new Error(\"Inconsistent operator: \" +\n                        JSON.stringify(valueSelector));\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators;  // {} has no operators\n};\n\n\n// string can be converted to integer\nisNumericKey = function (s) {\n  return /^[0-9]+$/.test(s);\n};"]},"hash":"47bfa1648c0afda39f3dcccc68d9cf29722710ae"}
