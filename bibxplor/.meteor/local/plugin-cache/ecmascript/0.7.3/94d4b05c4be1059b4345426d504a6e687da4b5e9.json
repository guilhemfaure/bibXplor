{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/minimongo/wrap_transform_tests.js","filenameRelative":"/packages/minimongo/wrap_transform_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/minimongo/wrap_transform_tests.js.map","sourceFileName":"/packages/minimongo/wrap_transform_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"wrap_transform_tests"},"ignored":false,"code":"Tinytest.add(\"minimongo - wrapTransform\", function (test) {\n  var wrap = LocalCollection.wrapTransform; // Transforming no function gives falsey.\n\n  test.isFalse(wrap(undefined));\n  test.isFalse(wrap(null)); // It's OK if you don't change the ID.\n\n  var validTransform = function (doc) {\n    delete doc.x;\n    doc.y = 42;\n\n    doc.z = function () {\n      return 43;\n    };\n\n    return doc;\n  };\n\n  var transformed = wrap(validTransform)({\n    _id: \"asdf\",\n    x: 54\n  });\n  test.equal(_.keys(transformed), ['_id', 'y', 'z']);\n  test.equal(transformed.y, 42);\n  test.equal(transformed.z(), 43); // Ensure that ObjectIDs work (even if the _ids in question are not ===-equal)\n\n  var oid1 = new MongoID.ObjectID();\n  var oid2 = new MongoID.ObjectID(oid1.toHexString());\n  test.equal(wrap(function () {\n    return {\n      _id: oid2\n    };\n  })({\n    _id: oid1\n  }), {\n    _id: oid2\n  }); // transform functions must return objects\n\n  var invalidObjects = [\"asdf\", new MongoID.ObjectID(), false, null, true, 27, [123], /adsf/, new Date(), function () {}, undefined];\n\n  _.each(invalidObjects, function (invalidObject) {\n    var wrapped = wrap(function () {\n      return invalidObject;\n    });\n    test.throws(function () {\n      wrapped({\n        _id: \"asdf\"\n      });\n    });\n  }, /transform must return object/); // transform functions may not change _ids\n\n\n  var wrapped = wrap(function (doc) {\n    doc._id = 'x';\n    return doc;\n  });\n  test.throws(function () {\n    wrapped({\n      _id: 'y'\n    });\n  }, /can't have different _id/); // transform functions may remove _ids\n\n  test.equal({\n    _id: 'a',\n    x: 2\n  }, wrap(function (d) {\n    delete d._id;\n    return d;\n  })({\n    _id: 'a',\n    x: 2\n  })); // test that wrapped transform functions are nonreactive\n\n  var unwrapped = function (doc) {\n    test.isFalse(Tracker.active);\n    return doc;\n  };\n\n  var handle = Tracker.autorun(function () {\n    test.isTrue(Tracker.active);\n    wrap(unwrapped)({\n      _id: \"xxx\"\n    });\n  });\n  handle.stop();\n});","map":{"version":3,"sources":["/packages/minimongo/wrap_transform_tests.js"],"names":["Tinytest","add","test","wrap","LocalCollection","wrapTransform","isFalse","undefined","validTransform","doc","x","y","z","transformed","_id","equal","_","keys","oid1","MongoID","ObjectID","oid2","toHexString","invalidObjects","Date","each","invalidObject","wrapped","throws","d","unwrapped","Tracker","active","handle","autorun","isTrue","stop"],"mappings":"AAAAA,SAASC,GAAT,CAAa,2BAAb,EAA0C,UAAUC,IAAV,EAAgB;AACxD,MAAIC,OAAOC,gBAAgBC,aAA3B,CADwD,CAGxD;;AACAH,OAAKI,OAAL,CAAaH,KAAKI,SAAL,CAAb;AACAL,OAAKI,OAAL,CAAaH,KAAK,IAAL,CAAb,EALwD,CAOxD;;AACA,MAAIK,iBAAiB,UAAUC,GAAV,EAAe;AAClC,WAAOA,IAAIC,CAAX;AACAD,QAAIE,CAAJ,GAAQ,EAAR;;AACAF,QAAIG,CAAJ,GAAQ,YAAY;AAAE,aAAO,EAAP;AAAY,KAAlC;;AACA,WAAOH,GAAP;AACD,GALD;;AAMA,MAAII,cAAcV,KAAKK,cAAL,EAAqB;AAACM,SAAK,MAAN;AAAcJ,OAAG;AAAjB,GAArB,CAAlB;AACAR,OAAKa,KAAL,CAAWC,EAAEC,IAAF,CAAOJ,WAAP,CAAX,EAAgC,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,CAAhC;AACAX,OAAKa,KAAL,CAAWF,YAAYF,CAAvB,EAA0B,EAA1B;AACAT,OAAKa,KAAL,CAAWF,YAAYD,CAAZ,EAAX,EAA4B,EAA5B,EAjBwD,CAmBxD;;AACA,MAAIM,OAAO,IAAIC,QAAQC,QAAZ,EAAX;AACA,MAAIC,OAAO,IAAIF,QAAQC,QAAZ,CAAqBF,KAAKI,WAAL,EAArB,CAAX;AACApB,OAAKa,KAAL,CAAWZ,KAAK,YAAY;AAAC,WAAO;AAACW,WAAKO;AAAN,KAAP;AAAoB,GAAtC,EAAwC;AAACP,SAAKI;AAAN,GAAxC,CAAX,EACW;AAACJ,SAAKO;AAAN,GADX,EAtBwD,CAyBxD;;AACA,MAAIE,iBAAiB,CACnB,MADmB,EACX,IAAIJ,QAAQC,QAAZ,EADW,EACa,KADb,EACoB,IADpB,EAC0B,IAD1B,EAEnB,EAFmB,EAEf,CAAC,GAAD,CAFe,EAER,MAFQ,EAEA,IAAII,IAAJ,EAFA,EAEU,YAAY,CAAE,CAFxB,EAE0BjB,SAF1B,CAArB;;AAIAS,IAAES,IAAF,CAAOF,cAAP,EAAuB,UAAUG,aAAV,EAAyB;AAC9C,QAAIC,UAAUxB,KAAK,YAAY;AAAE,aAAOuB,aAAP;AAAuB,KAA1C,CAAd;AACAxB,SAAK0B,MAAL,CAAY,YAAY;AACtBD,cAAQ;AAACb,aAAK;AAAN,OAAR;AACD,KAFD;AAGD,GALD,EAKG,8BALH,EA9BwD,CAqCxD;;;AACA,MAAIa,UAAUxB,KAAK,UAAUM,GAAV,EAAe;AAAEA,QAAIK,GAAJ,GAAU,GAAV;AAAe,WAAOL,GAAP;AAAa,GAAlD,CAAd;AACAP,OAAK0B,MAAL,CAAY,YAAY;AACtBD,YAAQ;AAACb,WAAK;AAAN,KAAR;AACD,GAFD,EAEG,0BAFH,EAvCwD,CA2CxD;;AACAZ,OAAKa,KAAL,CAAW;AAACD,SAAK,GAAN;AAAWJ,OAAG;AAAd,GAAX,EACWP,KAAK,UAAU0B,CAAV,EAAa;AAAC,WAAOA,EAAEf,GAAT;AAAc,WAAOe,CAAP;AAAU,GAA3C,EAA6C;AAACf,SAAK,GAAN;AAAWJ,OAAG;AAAd,GAA7C,CADX,EA5CwD,CA+CxD;;AACA,MAAIoB,YAAY,UAAUrB,GAAV,EAAe;AAC7BP,SAAKI,OAAL,CAAayB,QAAQC,MAArB;AACA,WAAOvB,GAAP;AACD,GAHD;;AAIA,MAAIwB,SAASF,QAAQG,OAAR,CAAgB,YAAY;AACvChC,SAAKiC,MAAL,CAAYJ,QAAQC,MAApB;AACA7B,SAAK2B,SAAL,EAAgB;AAAChB,WAAK;AAAN,KAAhB;AACD,GAHY,CAAb;AAIAmB,SAAOG,IAAP;AACD,CAzDD","file":"/packages/minimongo/wrap_transform_tests.js.map","sourcesContent":["Tinytest.add(\"minimongo - wrapTransform\", function (test) {\n  var wrap = LocalCollection.wrapTransform;\n\n  // Transforming no function gives falsey.\n  test.isFalse(wrap(undefined));\n  test.isFalse(wrap(null));\n\n  // It's OK if you don't change the ID.\n  var validTransform = function (doc) {\n    delete doc.x;\n    doc.y = 42;\n    doc.z = function () { return 43; };\n    return doc;\n  };\n  var transformed = wrap(validTransform)({_id: \"asdf\", x: 54});\n  test.equal(_.keys(transformed), ['_id', 'y', 'z']);\n  test.equal(transformed.y, 42);\n  test.equal(transformed.z(), 43);\n\n  // Ensure that ObjectIDs work (even if the _ids in question are not ===-equal)\n  var oid1 = new MongoID.ObjectID();\n  var oid2 = new MongoID.ObjectID(oid1.toHexString());\n  test.equal(wrap(function () {return {_id: oid2};})({_id: oid1}),\n             {_id: oid2});\n\n  // transform functions must return objects\n  var invalidObjects = [\n    \"asdf\", new MongoID.ObjectID(), false, null, true,\n    27, [123], /adsf/, new Date, function () {}, undefined\n  ];\n  _.each(invalidObjects, function (invalidObject) {\n    var wrapped = wrap(function () { return invalidObject; });\n    test.throws(function () {\n      wrapped({_id: \"asdf\"});\n    });\n  }, /transform must return object/);\n\n  // transform functions may not change _ids\n  var wrapped = wrap(function (doc) { doc._id = 'x'; return doc; });\n  test.throws(function () {\n    wrapped({_id: 'y'});\n  }, /can't have different _id/);\n\n  // transform functions may remove _ids\n  test.equal({_id: 'a', x: 2},\n             wrap(function (d) {delete d._id; return d;})({_id: 'a', x: 2}));\n\n  // test that wrapped transform functions are nonreactive\n  var unwrapped = function (doc) {\n    test.isFalse(Tracker.active);\n    return doc;\n  };\n  var handle = Tracker.autorun(function () {\n    test.isTrue(Tracker.active);\n    wrap(unwrapped)({_id: \"xxx\"});\n  });\n  handle.stop();\n});\n"]},"hash":"94d4b05c4be1059b4345426d504a6e687da4b5e9"}
