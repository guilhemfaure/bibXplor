{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/minimongo/objectid.js","filenameRelative":"/packages/minimongo/objectid.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/minimongo/objectid.js.map","sourceFileName":"/packages/minimongo/objectid.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"objectid"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return typeof selector === \"string\" || typeof selector === \"number\" || selector instanceof MongoID.ObjectID;\n}; // Is the selector just lookup by _id (shorthand or not)?\n\n\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) || selector && (typeof selector === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(selector)) === \"object\" && selector._id && LocalCollection._selectorIsId(selector._id) && _.size(selector) === 1;\n}; // If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\n\n\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) return [selector];\n  if (!selector) return null; // Do we have an _id clause?\n\n  if (_.has(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) return [selector._id]; // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n\n    if (selector._id && selector._id.$in && _.isArray(selector._id.$in) && !_.isEmpty(selector._id.$in) && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  } // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n\n\n  if (selector.$and && _.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) return subIds;\n    }\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/packages/minimongo/objectid.js"],"names":["LocalCollection","_selectorIsId","selector","MongoID","ObjectID","_selectorIsIdPerhapsAsObject","_id","_","size","_idsMatchedBySelector","has","$in","isArray","isEmpty","all","$and","i","length","subIds"],"mappings":";;;;;;AAAA;AACAA,gBAAgBC,aAAhB,GAAgC,UAAUC,QAAV,EAAoB;AAClD,SAAQ,OAAOA,QAAP,KAAoB,QAArB,IACJ,OAAOA,QAAP,KAAoB,QADhB,IAELA,oBAAoBC,QAAQC,QAF9B;AAGD,CAJD,C,CAMA;;;AACAJ,gBAAgBK,4BAAhB,GAA+C,UAAUH,QAAV,EAAoB;AACjE,SAAOF,gBAAgBC,aAAhB,CAA8BC,QAA9B,KACJA,YAAY,QAAOA,QAAP,uDAAOA,QAAP,OAAoB,QAAhC,IACAA,SAASI,GADT,IACgBN,gBAAgBC,aAAhB,CAA8BC,SAASI,GAAvC,CADhB,IAEAC,EAAEC,IAAF,CAAON,QAAP,MAAqB,CAHxB;AAID,CALD,C,CAOA;AACA;AACA;AACA;AACA;;;AACAF,gBAAgBS,qBAAhB,GAAwC,UAAUP,QAAV,EAAoB;AAC1D;AACA,MAAIF,gBAAgBC,aAAhB,CAA8BC,QAA9B,CAAJ,EACE,OAAO,CAACA,QAAD,CAAP;AACF,MAAI,CAACA,QAAL,EACE,OAAO,IAAP,CALwD,CAO1D;;AACA,MAAIK,EAAEG,GAAF,CAAMR,QAAN,EAAgB,KAAhB,CAAJ,EAA4B;AAC1B;AACA,QAAIF,gBAAgBC,aAAhB,CAA8BC,SAASI,GAAvC,CAAJ,EACE,OAAO,CAACJ,SAASI,GAAV,CAAP,CAHwB,CAI1B;;AACA,QAAIJ,SAASI,GAAT,IAAgBJ,SAASI,GAAT,CAAaK,GAA7B,IACGJ,EAAEK,OAAF,CAAUV,SAASI,GAAT,CAAaK,GAAvB,CADH,IAEG,CAACJ,EAAEM,OAAF,CAAUX,SAASI,GAAT,CAAaK,GAAvB,CAFJ,IAGGJ,EAAEO,GAAF,CAAMZ,SAASI,GAAT,CAAaK,GAAnB,EAAwBX,gBAAgBC,aAAxC,CAHP,EAG+D;AAC7D,aAAOC,SAASI,GAAT,CAAaK,GAApB;AACD;;AACD,WAAO,IAAP;AACD,GApByD,CAsB1D;AACA;AACA;;;AACA,MAAIT,SAASa,IAAT,IAAiBR,EAAEK,OAAF,CAAUV,SAASa,IAAnB,CAArB,EAA+C;AAC7C,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAId,SAASa,IAAT,CAAcE,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,UAAIE,SAASlB,gBAAgBS,qBAAhB,CAAsCP,SAASa,IAAT,CAAcC,CAAd,CAAtC,CAAb;;AACA,UAAIE,MAAJ,EACE,OAAOA,MAAP;AACH;AACF;;AAED,SAAO,IAAP;AACD,CAlCD","file":"/packages/minimongo/objectid.js.map","sourcesContent":["// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return (typeof selector === \"string\") ||\n    (typeof selector === \"number\") ||\n    selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) ||\n    (selector && typeof selector === \"object\" &&\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\n     _.size(selector) === 1);\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector))\n    return [selector];\n  if (!selector)\n    return null;\n\n  // Do we have an _id clause?\n  if (_.has(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id))\n      return [selector._id];\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && selector._id.$in\n        && _.isArray(selector._id.$in)\n        && !_.isEmpty(selector._id.$in)\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (selector.$and && _.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds)\n        return subIds;\n    }\n  }\n\n  return null;\n};\n\n\n"]},"hash":"501372cf43ebee587581aded7a16ef8ffe24e558"}
