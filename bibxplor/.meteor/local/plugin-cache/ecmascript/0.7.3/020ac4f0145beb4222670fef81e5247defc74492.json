{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":["assertIsValidFieldName","key","assertHasValidFieldNames","doc"],"specifiers":[{"kind":"local","local":"assertIsValidFieldName","exported":"assertIsValidFieldName"},{"kind":"local","local":"key","exported":"key"},{"kind":"local","local":"assertHasValidFieldNames","exported":"assertHasValidFieldNames"},{"kind":"local","local":"doc","exported":"doc"}]}}},"options":{"filename":"/packages/minimongo/validation.js","filenameRelative":"/packages/minimongo/validation.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/minimongo/validation.js.map","sourceFileName":"/packages/minimongo/validation.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"validation"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  assertIsValidFieldName: function () {\n    return assertIsValidFieldName;\n  },\n  assertHasValidFieldNames: function () {\n    return assertHasValidFieldNames;\n  }\n});\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nvar invalidCharMsg = {\n  '.': \"contain '.'\",\n  '$': \"start with '$'\",\n  '\\0': \"contain null bytes\"\n};\n\nfunction assertIsValidFieldName(key) {\n  var match = void 0;\n\n  if (_.isString(key) && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(\"Key \" + key + \" must not \" + invalidCharMsg[match[0]]);\n  }\n}\n\n; // checks if all field names in an object are valid\n\nfunction assertHasValidFieldNames(doc) {\n  if (doc && (typeof doc === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(doc)) === \"object\") {\n    JSON.stringify(doc, function (key, value) {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\n;","map":{"version":3,"sources":["/packages/minimongo/validation.js"],"names":["module","export","assertIsValidFieldName","assertHasValidFieldNames","invalidCharMsg","key","match","_","isString","MinimongoError","doc","JSON","stringify","value"],"mappings":";;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,0BAAuB;AAAA,WAAIA,sBAAJ;AAAA,GAAxB;AAAmDC,4BAAyB;AAAA,WAAIA,wBAAJ;AAAA;AAA5E,CAAd;AAAA;AACA;AACA;AACA,IAAMC,iBAAiB;AACrB,OAAK,aADgB;AAErB,OAAK,gBAFgB;AAGrB,QAAM;AAHe,CAAvB;;AAKO,SAASF,sBAAT,CAAgCG,GAAhC,EAAqC;AAC1C,MAAIC,cAAJ;;AACA,MAAIC,EAAEC,QAAF,CAAWH,GAAX,MAAoBC,QAAQD,IAAIC,KAAJ,CAAU,WAAV,CAA5B,CAAJ,EAAyD;AACvD,UAAMG,wBAAsBJ,GAAtB,kBAAsCD,eAAeE,MAAM,CAAN,CAAf,CAAtC,CAAN;AACD;AACF;;AAAA,C,CAED;;AACO,SAASH,wBAAT,CAAkCO,GAAlC,EAAsC;AAC3C,MAAIA,OAAO,QAAOA,GAAP,uDAAOA,GAAP,OAAe,QAA1B,EAAoC;AAClCC,SAAKC,SAAL,CAAeF,GAAf,EAAoB,UAACL,GAAD,EAAMQ,KAAN,EAAgB;AAClCX,6BAAuBG,GAAvB;AACA,aAAOQ,KAAP;AACD,KAHD;AAID;AACF;;AAAA","file":"/packages/minimongo/validation.js.map","sourcesContent":["// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  '.': \"contain '.'\",\n  '$': \"start with '$'\",\n  '\\0': \"contain null bytes\",\n};\nexport function assertIsValidFieldName(key) {\n  let match;\n  if (_.isString(key) && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n};\n\n// checks if all field names in an object are valid\nexport function assertHasValidFieldNames(doc){\n  if (doc && typeof doc === \"object\") {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n};"]},"hash":"020ac4f0145beb4222670fef81e5247defc74492"}
